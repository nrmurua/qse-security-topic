When using the routine hfx_derivatives to calculate response forces for HFX energies, a wrong screening method might be used.
This happens for SCREEN_P_FORCES TRUE (default) and is worse for larger value of  EPS_SCHWARZ_FORCES (default 1.E-6).
The reason is that the screening is only based on the density matrix, not the response density matrix.
A simple fix would be to switch of density screening for response type calls
428    IF(with_resp_density) screen_pmat_forces = .FALSE.
With this change several 100 regtests fail.
Questions: Should we change the default of SCREEN_P_FORCES ?
Decrease the default value of EPS_SCHWARZ_FORCES?
Make the default value of EPS_SCHWARZ_FORCES dependent on the value of EPS_SCHWARZ ?
If the issue is fixed by lowering EPS_SCHWARZ_FORCES, I vote for decreasing its default value. But we should also make hints to the descriptions of EPS_SCHWARZ_FORCES and SCREEN_P_FORCES and to the yet to write tutorials/howto.
Was the screening for response densities just not implemented into the code? If decreasing EPS_SCHWARZ_FORCES solves the problem, I am against turning off screening entirely due to the rather high costs of the HFX kernel.
I want to make it clearer:
There is a bug in hfx_derivatives for the case of response densities (input p and p_resp are valid) and  SCREEN_P_FORCES = T.
The code screens the integrals in this case with eps_schwarz_forcespp instead as eps_schwarz_forcespp_resp.
To fix this requires major code analysis and programming.
Easy solution (1 line) is to switch off SCREEN_P_FORCES for this specific case only. Then the response forces will be screend with
eps_schwarz_forces only.
As this solution causes many regtests to fail, we could consider some additional changes to make the code more robust.
My proposal is to lower the default of EPS_SCHWARZ_FORCES, for example to bind it to the value of EPS_SCHWARZ.
PR #3221 Bug fix screening in hfx_derivatives
