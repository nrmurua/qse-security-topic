Previous versions of Aer allowed for setting shots values using things like shots=1e4.  The latest version stopped doing this and gives a cryptic error:
Run a simulation, e.g. via the fake backends using a float representation of an int
This represents a breaking change, and should probably be fixed by casting.
We should fix this temporarily in a bugfix release (since it is breaking), but downstream code also shouldn't be doing that, and they're just lucky that it's worked so far at all.  I'd support deprecating this behaviour, since in the new config form it will require additional code overhead to allow these false types.
It only ever worked because the JSON spec (Aer previously used JSON to communicate across the C++/Python boundary) only has one number type - not that users should need to care about the reason why - and in languages that do distinguish, a float is not an int.  Python built-ins that want an integer input will also produce an error if you give them a float, such as int("0x1a", base=16.0).
I am fine with that.
I believe I can find similar phenomena in other configuration options. I guess that type checking can be in Backend if definition of types exist for options, but unfortunately not now. Because Aer 0.12.0 introduced strict manner for bindings then I would like to add some type checking and casting rules in AerBackend.
