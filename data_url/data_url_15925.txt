If I am not mistaken, there is currently no option to initialize an empty PauliSumOp object. Having such a possibility would be helpful in the following case for example.
Current way (there may be others):
Desired:
How about
is better.
@ikkoham2 Thanks, what you suggested works. But is it intuitive enough or shall we still introduce a proper constructor?
At least, this is a common method for opflow and qiskit_nature.operators. Opflow had it originally, but I imported it to Nature and I wrote this in FermionicOp doc.
Personally, I don't prefer having many ways to do one thing. An implementation is a bit difficult: PauliSumOp assumes that num_qubits is fixed. Class method PauliSumOp.zero(num_qubits=2) (alias of PauliSumOp.from_list([("I" * 2, 0)])
) is easily to implement, but I don't like it. Ultimately, it's a matter of preference.
Added: Also, with zero method (or init with empaty), op will have zero terms until it is called reduce.
@dlasecki @ikkoham2 What is the outcome of this issue. I am unsure if it was resolved - can we close this off if it was resolved or agree/sort out what is needed if something still needs to be done.
I think an approach to this that is uniform across qiskit would be great. There are a few use case with slightly different meanings. Their concepts of zero (and sometimes one) should be consistent.
Comparison to zero or one. Is this instance an additive (multiplicative) identity?
Initializing an accumulator.
We could have one or more zero classes. For example, a subclass of the class at the top of an operator hierarchy. This would represent the zero for all other subclasses. This suffers from the disadvantage mentioned above. You can't test its type to determine that it is a zero of particular operator type.
I don't really like the idea of adding operators to integer or floating point zero. But, it may be the best approach anyway. I see that it is currently implemented in StarAlgebraMixin.__radd__.  Whatever the solution, I think there should be a policy about where to implement it.
In addition, I did not change the API when I added the mixins. Previously OperatorBase had such a functionality. https://github.com/Qiskit/qiskit-terra/blob/stable/0.17/qiskit/opflow/operator_base.py#L196-L199
I share the concern of @jlapeyre . It happens to me that I want to initialize an accumulator, add some terms to it (but possibly 0) and then call reduce()on the result. If nothing is accumulated then reduce() throws and error and I have to if it out...
@dlasecki empty op check is necessary in the case. I note that reduce is costly, so reduce should be minimal.
ZeroOp might be nice. This should be equal to 0 and 0.0, but is instance of OperatorBase.
@dlasecki empty op check is necessary in the case. I note that reduce is costly, so reduce should be minimal.
Why would reducing an empty operator be costly?
that is not for empty op
If there are no responses, I think this issue and PR #6622 are closable
