Using two Urukuls with different configurations (with/without io_update_device or with/without sync_device) leads to unification errors.
The generic pattern is that a feature (rf switch/sync/io_update supported either through TTLOut or through the CPLD register or not at all) exists or does not.
If there would be a way to force unification with "None", that could work around this.
@whitequark ?
c.f. #180 and #1199 for RPCs
This works doesn't work:
@whitequark is it by accident that this works and does the type annotation work around it?
Without the type annotation (which is AFAICT normally not needed in this case):
If this is a correct solution, then the following should be adapted:
@jordens RPCs that return non-None values require a type annotation, by design.
Oh. Yeah. That was meant to be a kernel.
@jordens Can you provide an MCVE? I've read the examples above a few times and I still don't understand the issue.
@whitequark The MCVE is the first snippet posted. It's complete, verifiable and the most minimal I could come up with. Forget about the second snippet.
I am not claiming the current behavior is "wrong", just that I don't know how to resolve my issue in Urukul/Zotino demonstrated in the MCVE (which is equivalent to the one I am actually facing where you have two Urukuls, one with sync_device passed and another without).
In words: Take two "devices" C (or Urukul) that implement a bit of functionality in different ways using either device A or B (TTLOut or something else). How can that be written?
@whitequark did you manage to reproduce this?
We are hitting this frequently at the moment (e.g. using SUServo and standalone Urukuls in the same experiment)
I can reproduce this. But there's no easy solution. That pattern is explicitly unsupported in the compiler and to add it would require major language changes in ARTIQ Python.
The best workaround is to have two derived classes, C0 and C1, and override __new__ to return an instance of each depending on the which argument.
Works with NAC3:
There is also an Option type coming soon, similar to the Rust Option, which is easier to use and applicable to parts of the Zotino and Urukul drivers.
Later there will also be support for virtual classes, which provide more flexibility than the typevar annotations in the Types class.
Any news on that toptic? We would also like to control both our SuServo and standalone Urukul from the same kernel. Any recommendations for now how to achieve that with the default drivers? @cjbe @sbourdeauducq
