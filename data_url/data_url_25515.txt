The problems that post processing is solving can be solved without running through the entire function a 3rd time.
For example, the main reason for doing post processing is to determine what will be returned at the end of the lattice function execution. Those things can be determined during build graph time as well since we are anyways going through the function once.
This is not a trivial task and will require a lot of discussion before coming to a solution.
Reasoning on why we want to remove post processing:
Currently we have two options, the user can postprocess either locally or pass on an executer to postprocess. Initial intend of postprocessing was a quick and dirty way to get the final return objects instead of writing a clever algorithm to do it before hand. Now since we require resources to post process, we may as well write the algorithm to get the return values when preprocessing. Down side is that certain things that can be done in lattice are lost (as for now, the only certain thing that is lost is printing inside lattice with "postprocessed" result variables, rest are already things that cannot be done in lattice). With this, considering we are not loosing much by not printing post processed result inside lattice, we can opt for removing post process and adding in return variable in preprocess step as requiring additional resource with installed packages for postprocessing is a very heavy requirement
@mshkanth this might be of help to you.
@mshkanth this might be of help to you.
As of now, we are anyway going ahead and showing the 3 post processed statuses as 'Completed' on the GUI
Closing as duplicate
