This is the first step to understanding how Mitiq might use an IR of a hybrid quantum program and apply error mitigation subroutines. The ambiguity here comes from the fact that a hybrid program can have a mix of both quantum and classical instructions and Mitiq/error mitigation in general can be modeled by a black box that takes a circuit in and returns a hybrid program. This issue is to start a discussion and find a hypothetical approach as to how we can combine the error mitigation box with hybrid programs expressed in an IR (here QIR since that is the most developed at this point).
The format of error mitigation as a circuitâž¡hybrid program at this moment is pretty well established. There is a whole separate question of what error mitigation could look like if you had access to near or real time execution or the classical instruction context, but that is not in scope here.
A straight-forward approach then is to take the hybrid program and apply an optimization pass to "group up" the quantum instructions into the largest consistent blocks that then represent circuits that can be passed to an error mitigation box. The result of that handoff would be a new subroutine/subprogram that would need to be spliced back into the full program. These mutations of the circuit-like blocks could also be viewed as an optimization pass (and thus implemented in C++) or some other type of program that just mutates a QIR bit file.
For the two tools needed, the first that separates out the circuit-like blocks can already be found in an initial form in QAT, and the latter is the subject of this series of issues tracked in #1139.
This issue had no activity for 4 months, and will be closed in 2 weeks unless there is new activity. Cheers!
