The use case I have in mind is defining this protocol for SWAP. This is useful, for instance, for the EjectZ optimizer because one can pass a Z gate through a SWAP as follows:
=
So I think the phase_by function signature should be changed from
to
Then phase_by for SWAP would return an OP_TREE.
We could also special case swaps in EjectZ for a quick and dirty solution
@Strilanc what do you think about @kevinsung 's proposed changes? also cc @dabacon
Initially: add in swap gate and fsim gate (with the one theta that works) support as hardcoded cases in EjectZ.
Later: delete phase_by protocol after hardcoding remaining cases.
I'm trying to reconcile the title of this issue with the description which appears to mean to augment the phase_by protocol.
What would be even better is if we could generalize this protocol for describing the logic behind these types of transforms.
@dabacon I think what happened was that we discussed this issue during a Cirq sync and then decided to instead remove the SupportsPhase protocol using the plan in @mpharrigan's comment. Then I changed the title of this issue.
Do we still have this protocol?  If we are still going to remove this, we should do it before 1.0.
Adding back to triage/discuss since @tanujkhattar did not see a reason to deprecate it.
From cirq sync:
@dabacon Do you have strong feelings about whether we should remove the phase_by protocol or leave it as it is? If not, decision from sync is that we should leave it as it is and can consider extending to other types post 1.0
We can probably keep it.  It's an example of a very specific protocol tightly coupled to a particular transformer, which is not great.
It was decided to keep this protocol after all.  The consensus in cirq cync was that this didn't really affect anyone negatively and did provide some small value, so that we would keep it in.
The above functionality to propagate Z's through swaps had already been added to EjectZ.
Closing this issue.
