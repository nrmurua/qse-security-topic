Python 3.10.12
openqasm3 0.5.0
qiskit-qasm3-import 0.4.1
pytket-qiskit 0.46.0
qiskit 0.45.1
qiskit-aer 0.13.1
qiskit-algorithms 0.2.1
qiskit-dynamics 0.4.2
qiskit-experiments 0.5.4
qiskit-ibm-experiment 0.3.5
qiskit-ibm-provider 0.7.2
qiskit-ibm-runtime 0.17.0
qiskit-terra 0.45.1
When a simple circuit,  like GHZ, is transpiled  for a backend, next saved as Qasm3,
the qiskit.qasm3.loads( .)  forgets the qubit mapping assigned by the transpiler and counts qubits from 0 to N-1. Such a read-in  circuit  would not run on the HW properly.
Run this reproducer:
https://bitbucket.org/balewski/quantummind/src/master/Qiskit/issues/issue27b_qasm3_IO.py
It executes 3 commands:
And shows qcT uses qubits IDs ~100,  but qc2 drops ids to be 0-3
Both circuits: qcT and qc2 should use the same qubits
No response
Brining in the minimal reproducer inline (it's helpful if all the context is in the issue, and using as few additional libraries as possible):
Now the result of drawing transpiled and roundtrip shows a difference:
However, the OQ3 import actually has brought in the physical-qubit layout information in some form:
There are two problems with this at the moment:
I suspect the most reasonable solution to this will be for the Qiskit qasm3.loads method to gain a keyword argument that tells it how many hardware qubits to allocate, which is an API change we'll consider once the new OpenQASM 3 parser is in place. At the moment, the loads API is deliberately limited because we knew we'd be replacing its driver, and didn't want to commit to API surface we couldn't guarantee during the transition.
