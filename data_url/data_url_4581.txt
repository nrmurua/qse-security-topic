When building large circuits with a lot of parts, it is sometimes useful to add up existing circuits to the larger one. A common occurrence might be adding a QFT to a subset of the qubits in the circuit.
As of right now, there seems to only be the possibility of adding circuits with the same amount of set qubits.
A library of useful and repeating circuits, like QFT, a VQE layer, the Diffusion transform in Grover with an easy way to append them into your bigger circuit will be a useful addition to Qibo. Adding also the inverse of said circuits is also really common.
Thanks for reporting this. I believe this is similar to #177 and we should provide the possibility append to circuits at custom positions. In terms of interface we could create something like circuit.addat(new_circuit, qubit=0).
Adding also the inverse of said circuits is also really common.
here you mean, create explicitly models for the QFT, VQE,... inverses, or do you mean take the first big model and perform the inversion? The latter will be automatically implemented thanks to the inverse method in the CIrcuit class.
I believe this is similar to #177 and we should provide the possibility append to circuits at custom positions. In terms of interface we could create something like circuit.addat(new_circuit, qubit=0).
An alternative interface would be to implement a circuit.gates(qubits) which returns a generator of the gates contained in circuit acting on the specified qubits. The user could then use the current add to add these gates to the large circuit. The total thing would be: large_circuit.add(small_circuit.gates(qubits)).
The addat interface is also good. The only thing I would change is that the qubit argument should be qubits and accept a list of indices because the user may want to apply the small circuit to non-neighboring qubits of the large. For example large_circuit.addat(small_circuit, qubits=[0, 2, 4, 5]).
The generator approach is slightly more flexible (the generator could also be used for other things), while the addat is cleaner. Personally I would go with addat but let me know what you also think.
There is another issue regarding performance which is probably relevant in both implementations. For example assume we have a large circuit of 10 qubits and we want to add an inverse QFT in 5 of them. This would be:
This would do the following:
This is because when we create a circuit (in this case the QFT), it automatically calls the nqubits setter on all gates we add. Obviously it would be more optimal to create these only in end for the 10 qubits. With this in mind, shall we reconsider when the nqubits setter is called by circuits?
Thanks for the interface suggestion, I like both of them, so maybe @igres26 can help choosing the most appropriate.
shall we reconsider when the nqubits setter is called by circuits?
I understand the problem, however I expect a small time overhead, right? Otherwise, in my opinion we can change the interface to require the call of a circuit.compile which evaluate the gates (+ compile the graphs if needed).
I think I slightly prefer having a single circuit.add() instead of branching into add() and addat() if the addition is a gate or a circuit. But I don't have particularly strong feeling about it.
The way I usually work is by building the parts of the circuit and then adding them up all at the end at the right places. So as long as the end result works in a similar way any way is fine for me.
