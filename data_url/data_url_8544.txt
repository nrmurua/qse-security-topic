The ptrace method does not return the correct normalization for non-density matrix operators (e.g. Hamiltonians.  In fact, the resulting operator is incorrectly multiplied by a value of Q.shape[0]:
Since we only have the 'oper' type at the moment, I think the best way to deal with this is to create a subtype attribute for the Qobj class.  We can then have a 'dm' subclass so that we can better deal with some cases.
Unless someone else has a better idea on how to fix this, I will take care of it in the next day or two.  This would also help to address an issue raised in the google help group:
https://groups.google.com/forum/#!topic/qutip/jdVEwO9RVgw
I think that the current behavior of ptrace is actually correct, as the trace of qeye(5) is Q.shape[0] == 5:
To resolve the issue raised in the Google Group, I think it makes sense to provide a __call__ that acts superoperators on density operators by using operator_to_vector and vector_to_operator, since a superoperator represents a function acting on density operators.
But if I replace H2 by another call to rand_herm, then take the ptrace of both parts and try to tensor it back together then I do not get the original composite Hamiltonian back
As for the other issue, are we going to suppose that any operator on the right of a super op is a dm?  Minus looking at the trace, I do not see any other way of verifying this case.
The Liouville representation of a superoperator (superrep = "super") doesn't assume it's acting on a density operator per se. It's common, for instance, to act on the difference between two density operators, in which case the argument of __call__ would be a traceless type="oper".
A simple example of a operator that is traceless and not a dm is the charge operator, e.g. charge(4).  How would we know a difference in this case without further info?
As for the rand_herm of the ptrace normalization, they do not agree because tensoring the partial traces of tensor(H1, H2) picks up a quadratic term in the traces of each of H1 and H2:
Thus, I think that ptrace is normalized correctly; for instance, Tr₁(H1 \otimes H2) = Tr(H1) Tr(H2) H2, as is correctly reported by ptrace.
Ahh yes, you are correct.  I am getting rusty at my tensor math.  Indeed, I will close this issue with the resolution that I am an idiot.
I'll work up a quick example of what I mean about the proposed __call__ semantics in a few minutes, but roughly, I think that for a type="super", superrep="super" S and a type="oper" X (with no other assumptions other than that the dims agree for all multiplications below), it should be the case that the following are equivalent:
This works in part because left-multiplication is linear, such that the action is defined (for example) for all operators by expansion in a basis with one traceful and d² - 1 traceless elements.
Sounds good. Why don't you open a separate issue for that one so that the title is more explicit.
