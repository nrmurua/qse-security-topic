As I was trying to integrate SPHINCS+, I quickly ran into the issue that the API we require for pqclean is not compatible with the API NIST requires; in particular size_t versus unsigned long long for buffer lengths.
I'd hate to force everyone to come up with all sorts of hacks or even maintain two codebases. For SPHINCS+, I was considering automatically replacing size_t by unsigned long long in our packaging script for the NIST submission.. Can we come up with a 'suggested way' to deal with this? Is there a 'nice' way? Or do we want to just enforce size_t and leave it up to the submitters?
In practice, will there be any problems with replacing those arguments by size_t everywhere?
I suppose not, except that the PQCgenKAT_sign.c code feeds, e.g., an unsigned long long* smlen into crypto_sign. Making that function expect a size_t * without also changing NIST's code would make the pointers incompatible, and from a submitter's perspective I'd be a bit reluctant to start modifying PQCgenKAT_sign.c.
We wanted to use these more "portable" types in the API though, because we stated we will at some point want people to use uint8_t and size_t in their code as well. If we already have these types in the PQClean-provided API, we are making the life of people adopting code from PQClean a lot easier: they won't need to migrate APIs at some point.
I think we should go with size_t and make the change to PQCgenKAT_sign.c.  We are using portable types almost everywhere, and it would be confusing to consumers if our API inconsistently has one or two places where we don't use those types.  This comes at the cost of having to modify the NIST KAT suite, but better one change in a test harness than a bunch of inconsistencies throughout the core code.
