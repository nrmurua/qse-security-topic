The SparsePauliOp class does not obtain the correct phase when constructed from the product of two Paulis.
Here are some example calculations (see next section for the code):
I would expect that the two last sections of the above example would produce identical results. I.e. the following:
I have a patch (see below) which can achieve the expected behavior. However, while starting to write a unittest for this, I noticed that SparsePauliOp is mainly compared against PauliTable and, thus, I wanted to integrate the fix into that class.
But then I noticed that the docstring of PauliTable says the following:
Thus, my question is the following: why was the PauliTable designed like this? If this should not be changed, the user should definitely be warned about this limitation of the SparsePauliOp construction unless we choose to apply the following patch and design a unittest which does not compare with the PauliTable directly.
patch.txt
PauliTable will be deprecated and @chriseclectic is improving SparsePauliOp.
Thanks @ikkoham! That's is good to know.
Shall we leave this open then, so that it doesn't get lost in the process of these changes?
Hi everyone ðŸ‘‹
Is there any update on this issue? As for now, the problem persists and you incur in loosing signs depending on how you implement the composition (* or &) of Paulis, and if you use SparsePauliOp or just Pauli.
For example, all the following commands should yield the same result , but they don't:
Doing some experimentations with the developer version of Qiskit (qiskit-terra=0.19.0 and qiskit-nature=0.3.0) the problem seems to be solve though. Thanks ðŸ˜ƒ
Thank you for checking this. I think this is resolved in main branch (dev-version).
(By the way, * operator has been deprecated and will be removed in Terra 0.19.0.)
So closable
Fixed by #6826.
I wrote a test case _bisect.py:
which exits with code 0 if the bug is fixed and 1 if it's there.  Then:
is the commit that fixed things.
