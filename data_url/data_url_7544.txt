Possible BUG with function chain.
Example Code:
This interface is deliberately remove since chain(1, [X, X, X]) and chain(1, another chain) with different behavior can be confusing.
But, you are right, maybe the consistency here is decreased. I would suggest
@Roger-luo which one do you prefer?
I don't quite understand what you mean by
chain(1, [X, X, X]) and chain(1, another chain) with different behavior can be confusing.
Do you mean we should always write chain function like chain(n, [ChainBlock]) or chain(n, [ChainBlock1, ChainBlock2])?
chain(1, [X, X, X]) and chain(1, chain(X, X, X)),
Since there is a subtle relation between chains and lists. Normally, one can hardly find a using case that one need to chain a single element.
It's just a bug, fixed with next coming release. I forget to implement chain(n, block) , it is indeed a rare use case.
I don't think we need to delete any interface here. A potential use case is to create a chain with only one element but push! things later.
Delete it if it is not necessary, especially when it turns out to be confusing.
Here, necessary means one can not do something without it.
To me, the only benefit is saving two inputs [, ]
chain(n, blocks...) is definitely drier than chain(n, list) and it avoids the problem of the following
I'd rather delete chain(n, []) since if one really want to use a list, use the constructor and solve the type mismatch error himself.
The whole point of these functions is to make code drier and more friendly. And I don't see which part is confusing, since they have completely different types in completely different type tree.
in fact, chain(n, list) is duplicated with the constructor, and it is not useful at all.
chain(n, blocks...) is definitely drier than chain(n, list)
Interesting point, please define drier
In my opinion, less interface usually indicates a drier design.
And I don't see which part is confusing
chain falls into the category of iterator. This is the confusing part.
in fact, chain(n, list) is duplicated with the constructor
This is not a reason for using another interface.
drier means don't let users to type extra information, only write what is necessary, keep the required input minimal. Drier means the users code is drier, it doesn't mean the code base of package is drier. We should make use of every piece of the input from user, instead of letting people write things as much as possible.
Writing sugars increases developers work, but it make whoever using the software feel easy and readable. This is the DRY principle from a developer side, as users, one is able to write dry things only when their package providers are providing interfaces allowing them to write dry code.
chain falls into the category of iterator. This is the confusing part.
This is fixed.
now this will work as well
this will work as well, and it is the key point to make things like QFT simple and readable.
What I mean is, if you really want to have less interfaces, delete chain(n, list) this is the real extra thing we don't need.
I notice that julia> chain(1, chain(X,X,X)) is runable. This should not work. This is the real bug.
Yes, this is not expected behaviour, it is fixed in master. It has the same behaviour as other blocks
I think this is resolved now.
