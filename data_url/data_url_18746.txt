qubit[5] q1 and array[qubit, 5] q1; are in some sense the same

and likewise with bit. But currently, they are not exactly equivalent.  For example, the bit[5] x; can occur in a subroutine definition, but array[bit, 5] x; cannot. So the contradictory semantics needs to be cleared up.
I suggest making this equivalence more explicit. Something like:
bit[width]  is syntactic sugar for array[bit, width]. And array[bit[width], dim] is exactly equivalent to array[bit, width, dim] . If arrays of bit and qubit have different semantics from arrays of other classical types, these should be made explicit. For example "one dimensional bit arrays may be declared in a subroutine".
EDIT: After re-reading, I think the following is mistaken.
Also, OQ3 allows arrays with up to seven dimensions. But if the base type is a bit "register", then this is a bit array with  eight dimensions.
TSC meeting of Dec 20, 2023 confirmed that this is an issue that warrants further thinking and discussion. It seems that the behavior we really wanted was to get equivalent indexing, slicing, and concatenation behavior between bit registers and arrays of bits. But, we have a conflict of actual equivalence between bit registers and arrays of bits because bit registers can be declared in subroutine bodies and arrays cannot.
Tabled for discussion  2024-01-10  TSC meeting.
As a related question -- is there a reason why multi-dimensional bit and qubit registers are disallowed? For example, I can imagine wanting to directly index into a square lattice of qubits (as opposed to thinking of this as a column major / row major / whatever 1d array).
