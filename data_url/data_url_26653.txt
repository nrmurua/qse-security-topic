After i used the toolchain script to download and install dependencies. i had an error which is indicating plumed in my own directory had something wrong with it. So i added "--with-plumed=install" to the toolchain script input and created my arch files. Sourced my fresh installs tried to make -j 8 ARCH=local VERSION=popt and that error started to popup. Before plumed error, first try had succesfully started without that error.
Discovering programs ...
Makefile:132: warning: overriding recipe for target popt' Makefile:126: warning: ignoring old recipe for target popt'
/truba/home/merts/source/cp2k-8.1/Makefile:132: warning: overriding recipe for target popt' /truba/home/merts/source/cp2k-8.1/Makefile:126: warning: ignoring old recipe for target popt'
Version popt is now an alias for psmp with OMP_NUM_THREADS=1.
make -C /truba/home/merts/source/cp2k-8.1/exts/dbcsr -f .cp2k/Makefile 
INCLUDEMAKE=/truba/home/merts/source/cp2k-8.1/arch/local.psmp 
LIBDIR=/truba/home/merts/source/cp2k-8.1/lib/local/psmp/exts/dbcsr 
OBJDIR=/truba/home/merts/source/cp2k-8.1/obj/local/psmp/exts/dbcsr 
ACC="" 
ACCFLAGS=""
Removing stale archives for psmp ...
Traceback (most recent call last):
File "/truba/home/merts/source/cp2k-8.1/tools/build_utils/check_archives.py", line 69, in 
main()
File "/truba/home/merts/source/cp2k-8.1/tools/build_utils/check_archives.py", line 49, in main
output = check_output([ar_exe, "t", archive_fn], encoding="utf8")
File "/usr/lib64/python3.4/subprocess.py", line 604, in check_output
with Popen(*popenargs, stdout=PIPE, **kwargs) as process:
TypeError: init() got an unexpected keyword argument 'encoding'
make[2]: *** [makedep] Error 1
make[2]: *** Waiting for unfinished jobs....
Removing stale archives ...
Resolving dependencies ...
make[1]: *** [popt] Error 2
make: *** [all] Error 2
Two things here:
Two things here:
Is there anyway to tell it to use another python distribution because there are plenty of other python versions installed, including 3.4+, in the system?
EDIT: I GOT IT.
The different parts of the build system look for a binary called python3, which is probably the python3.4 from the system.
You can either change your $PATH to include a path to a newer version of python3 before any of the others, or create a virtualenv using a newer python version and activate it (which amounts to the same essentially):
Note: a conda environment could be problematic since conda sometimes provides a blas/lapack implementation and may or may not change other environment variables such that the compiler would pick the libraries from the conda environment.
Your help was great i changed my path and .psmp installed. But when i try to run a simulation it says:
cp2k.psmp: error while loading shared libraries: libgsl.so.0: cannot open shared object file: No such file or directory
I specifically wanted to not install gsl package and gave toolchain "--with-gsl=no" at the beginning. How can i get rid of that ?
This means that CP2K was built against libgsl but now it can't be found. To solve this, source the setup file as instructed by the toolchain before running CP2K: source tools/toolchain/install/setup.
To get rid of the GSL dependency:
Did you use the arch-file generated by the toolchain? If yes, I am not entirely sure why it still added the GSL dependency. Did you by any chance also kept sirius enabled? Because SIRIUS needs the GSL.
To get rid of it without further fiddling with the toolchain, simply remove the -lgsl -lgslcblas from LIBS in your arch file, then run make ... execlean, followed by make ... (with the ARCH and VERSION from before).
If you also have -lsirius in your arch file, then also remove that, plus -lvdwxc -lhdf5 -lhdf5_hl and -lspfft, as well as -D__SIRIUS from the DFLAGS. Then force a rebuild by make ... clean, make ....
./install_cp2k_toolchain.sh -j 8 --enable-cuda=yes --gpu-ver=V100 --with-gcc=install --with-openmpi=install --with-mkl=system --with-libxsmm=no --with-libsmm=install --with-scalapack=install --with-elpa=no --with-quip=no --with-plumed=install --with-sirius=no --with-gsl=no --with-libvdwxc=no --with-spglib=no --with-hdf5=no --with-spfft=no --with-cosma=no --with-libvori=no
i exactly used that input. Copied arch files generated from that to the cp2k/arch.
I don't have any -lgsl nor -lgslcblas in my arch file(local.psmp).
I uploaded my local arch file.
local.psmp.txt
I re-entered the exact same toolchain input again let it generate arch files again. Deleted old ones, copied the new one in the arch directory. i used make clean.
Then you have to check the libraries linked into the cp2k binary using ldd ... to see which one pulls in gsl.
Also, we usually now recommend to use libxsmm instead of libsmm, just fyi.
ldd source/cp2k-8.1/exe/local/cp2k.psmp | grep gsl
libgsl.so.0 => /lib64/libgsl.so.0 (0x00007f75c10ea000)
libgslcblas.so.0 => /lib64/libgslcblas.so.0 (0x00007f75c0ead000)
But it was a fresh copy i downloaded from git and directly used the toolchain script input i indicated earlier, how did it get stuck ? What do you suggest me to do ? Fresh re-installing ?
First check with readelf -d source/cp2k-8.1/exe/local/cp2k.psmp | grep NEEDED whether CP2K was directly linked against it or whether something else pulled it in. If you have it on your system, lddtree can be helpful (usually part of the pax-utils package).
readelf -d source/cp2k-8.1/exe/local/cp2k.psmp | grep NEEDED
0x0000000000000001 (NEEDED)             Shared library: [libplumed.so]
0x0000000000000001 (NEEDED)             Shared library: [libdl.so.2]
0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]
0x0000000000000001 (NEEDED)             Shared library: [libz.so.1]
0x0000000000000001 (NEEDED)             Shared library: [libfftw3_mpi.so.3]
0x0000000000000001 (NEEDED)             Shared library: [libfftw3.so.3]
0x0000000000000001 (NEEDED)             Shared library: [libfftw3_omp.so.3]
0x0000000000000001 (NEEDED)             Shared library: [libmpi.so.40]
0x0000000000000001 (NEEDED)             Shared library: [/truba/sw/centos7.3/comp/intel/PS2019-update1/compilers_and_libraries_2019.1.144/linux/mkl/lib/intel64/libmkl_scalapack_lp64.so]
0x0000000000000001 (NEEDED)             Shared library: [/truba/sw/centos7.3/comp/intel/PS2019-update1/compilers_and_libraries_2019.1.144/linux/mkl/lib/intel64/libmkl_gf_lp64.so]
0x0000000000000001 (NEEDED)             Shared library: [/truba/sw/centos7.3/comp/intel/PS2019-update1/compilers_and_libraries_2019.1.144/linux/mkl/lib/intel64/libmkl_sequential.so]
0x0000000000000001 (NEEDED)             Shared library: [/truba/sw/centos7.3/comp/intel/PS2019-update1/compilers_and_libraries_2019.1.144/linux/mkl/lib/intel64/libmkl_core.so]
0x0000000000000001 (NEEDED)             Shared library: [/truba/sw/centos7.3/comp/intel/PS2019-update1/compilers_and_libraries_2019.1.144/linux/mkl/lib/intel64/libmkl_blacs_openmpi_lp64.so]
0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
0x0000000000000001 (NEEDED)             Shared library: [libgfortran.so.5]
0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]
0x0000000000000001 (NEEDED)             Shared library: [libmpi_usempif08.so.40]
0x0000000000000001 (NEEDED)             Shared library: [libmpi_usempi_ignore_tkr.so.40]
0x0000000000000001 (NEEDED)             Shared library: [libmpi_mpifh.so.40]
0x0000000000000001 (NEEDED)             Shared library: [libgomp.so.1]
0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]
0x0000000000000001 (NEEDED)             Shared library: [libquadmath.so.0]
0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
Not have "lddtree", im sorry about it.
so it's not cp2k itself. Can you check whether the linked libplumed.so uses the gsl by any chance (ldd on the libplumed.so)?
ldd libplumed.so | grep gsl
libgsl.so.0 => /lib64/libgsl.so.0 (0x00007fc64bc20000)
libgslcblas.so.0 => /lib64/libgslcblas.so.0 (0x00007fc64b9e3000)
readelf -d libplumed.so
Dynamic section at offset 0x5d90 contains 32 entries:
Tag        Type                         Name/Value
0x0000000000000001 (NEEDED)             Shared library: [libplumedKernel.so]
0x0000000000000001 (NEEDED)             Shared library: [libmpi.so.40]
0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]
0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]
0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]
0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
readelf -d plumed
Dynamic section at offset 0x8ce8 contains 32 entries:
Tag        Type                         Name/Value
0x0000000000000001 (NEEDED)             Shared library: [libplumedKernel.so]
0x0000000000000001 (NEEDED)             Shared library: [libdl.so.2]
0x0000000000000001 (NEEDED)             Shared library: [libmpi.so.40]
0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]
0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]
0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]
0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
What if i save us from trouble and tell toolchain script to also install gsl ? Would it be bad idea ? Is it better to install plumed without gsl ?
I rebuilt everythin from scratch:
./install_cp2k_toolchain.sh -j 8 --enable-cuda=yes --gpu-ver=V100 --with-gcc=install --with-openmpi=install --with-mkl=system --with-libxsmm=install --with-libsmm=no --with-scalapack=install --with-elpa=no --with-quip=no --with-plumed=install --with-sirius=no --with-gsl=install --with-libvdwxc=no --with-spglib=no --with-hdf5=no --with-spfft=no --with-cosma=no --with-libvori=no
echo $LD_LIBRARY_PATH | grep gsl
/truba/home/merts/source/cp2k-8.1/tools/toolchain/install/gsl-2.6/lib
It looks like it still goes for the main system path to use libgsl. I also built my own atlas and added it to my LD_LIBRARY_PATH
echo $LD_LIBRARY_PATH | grep atlas
/truba/home/merts/sw/atlas/lib
now getting, this after
make ... VERSION=psmp
/usr/bin/ld: warning: libgsl.so.0, needed by /truba/home/merts/source/cp2k-8.1/tools/toolchain/install/plumed-2.6.2/lib/libplumedKernel.so, may conflict with libgsl.so.25
/usr/bin/ld: warning: libgsl.so.0, needed by /truba/home/merts/source/cp2k-8.1/tools/toolchain/install/plumed-2.6.2/lib/libplumedKernel.so, may conflict with libgsl.so.25
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
cd /truba/home/merts/source/cp2k-8.1/exe/local; ln -sf cp2k.psmp cp2k_shell.psmp
cd /truba/home/merts/source/cp2k-8.1/exe/local; ln -sf cp2k.psmp cp2k.popt
and my gcc/lib64 lacks libgfortran.so.3 and only has libgfortran.so.5. Looks like it does not catch the atlas library from my path either.
lrwxrwxrwx 1 merts merts       20 Jan 20 11:30 libgfortran.so -> libgfortran.so.5.0.0
lrwxrwxrwx 1 merts merts       20 Jan 20 11:30 libgfortran.so.5 -> libgfortran.so.5.0.0
-rwxr-xr-x 1 merts merts 11152944 Jan 20 11:30 libgfortran.so.5.0.0
What I wrote above: your plumed links against the system libgsl while CP2K's toolchain provides a different version, resulting in a conflict. Resolve by linking your plumed against the one from the toolchain.
You've chosen to let the toolchain build (and use) a gcc, this includes a libgfortran (the runtime environment for Fortran). ATLAS was built with the system gfortran (and the systems libgfortran), resulting in another conflict. Builtd ATLAS with the gcc provided by the toolchain.
And why do you would want to use ATLAS when you already have MKL?
But it might be better to take this discussion to the CP2K Forum/Google Group at https://groups.google.com/g/cp2k since the issue tracker is for reporting defects in the CP2K code (and the toolchain scripts) themselves, rather than for support questions.
And why do you would want to use ATLAS when you already have MKL?
No i dont want to use ATLAS. I already input MKL directory to the toolchain. I just thought if it asks for it i can build it too. Is it possible to get rid of ATLAS part of the issue. I believe i can handle the plumed-gsl issue within its script.
Ok, now I get it. PLUMED also requires a BLAS/LAPACK implementation and most probably has picked up ATLAS for that. Make sure that when you build your PLUMED it also uses MKL (together with the GSL from CP2K, or no GSL at all).
How can i be sure if the plumed from toolchain somehow will be built with MKL and gsl?
I say install to both plumed and gsl and give MKL from the system. But plumed always catches the gsl which is on the system first and atlas comes along with an error at the end. Even if gsl option is off in the toolchain, plumed still catches gsl which was one of my first problems at the beginning.
Can you try the following change (moving plumed to the end of the lib_list) and then do a complete rebuild of the toolchain (rm -rf build/ install/ ; ./install_cp2k_toolchain ...)?
It should ensure that GSL from the Toolchain is in the library search paths when building PLUMED and possibly it also let's PLUMED pick up MKL instead of the system-ATLAS (not sure about the second one, no time to test atm).
@oschuett maybe you have an idea?
Maybe we should just build PLUMED without GSL, ie. ./configure --disable-gsl? AFAIK, we only added GSL to the toolchain for SIRIUS.
That's one option, but since PLUMED upstream decided to have it on-by-default we may end up with a non-standard PLUMED (compared to a vanilla installation), generating other problems. Besides by simply ordering it in the right way we may get around this easily.
The problem is more about controlling which BLAS/LAPACK implementation PLUMED uses, which also seems to not follow what was set by the user.
I have done a complete re-install with the modification you suggested on toolchain script.
lib_list="fftw libint libxc libsmm libxsmm cosma scalapack elpa \
spfft ptscotch superlu pexsi quip gsl spglib hdf5 libvdwxc sirius
libvori plumed"
But nothing has changed it still installs plumed before gsl.
/usr/bin/ld: warning: libgsl.so.0, needed by /truba/home/merts/source/cp2k-8.1/tools/toolchain/install/plumed-2.6.2/lib/libplumedKernel.so, may conflict with libgsl.so.25
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgsl.so.0, needed by /truba/home/merts/source/cp2k-8.1/tools/toolchain/install/plumed-2.6.2/lib/libplumedKernel.so, may conflict with libgsl.so.25
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
still insists. Can we force plumed to use gsl in our toolchain ? And i still dont know how does ATLAS involve ?
Actually, we're building PLUMED before the GSL. So, just switching those two lines might do the trick.
Furthermore, we should make sure that we build GSL whenever we build PLUMED, similar to how we do it for SIRIUS.
@Biskuvi sorry, seems I've given you the wrong diff, the line which needs to be changed is further down. This I've tested now on a system with GSL already installed and PLUMED picked up the GSL from the toolchain after this change:
Difficult to say about ATLAS, but I would guess that your OS provides a symlink from /usr/lib/libblas.so to libatlas, because PLUMED only looks for this.
As it turns out, on our machine we end up with PLUMED using its internal BLAS/LAPACK:
... so it's not even using our provided OpenBLAS.
Modified the script as you directed, it installed gsl first and plumed second. Same exact warnings. Now I'm trying to build cp2k without plumed and gsl.
@Biskuvi could you upload build/plumed-2.6.2/configure.log, build/plumed-2.6.2/config.log and build/plumed-2.6.2/install.log (from the latest installation)?
Modified the script as you directed, it installed gsl first and plumed second. Same exact warnings. Now I'm trying to build cp2k without plumed and gsl.
... including the warning about GSL or only the one about ATLAS?
log.tar.gz
Ofc. Here it is.
/usr/bin/ld: warning: libgsl.so.0, needed by /truba/home/merts/source/cp2k-8.1/tools/toolchain/install/plumed-2.6.2/lib/libplumedKernel.so, may conflict with libgsl.so.25
/usr/bin/ld: warning: libgsl.so.0, needed by /truba/home/merts/source/cp2k-8.1/tools/toolchain/install/plumed-2.6.2/lib/libplumedKernel.so, may conflict with libgsl.so.25
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
/usr/bin/ld: warning: libgfortran.so.3, needed by /usr/lib64/atlas/libsatlas.so.3, may conflict with libgfortran.so.5
That was the last series of warnings from the last build i tried.
Now i've just built the cp2k without plumed without no warning. And it runs buttery smooth.
So it really is something to do with the way plumed is installed/built
@Biskuvi ok, thanks. Btw, MKL can also provide fftw3 (provided it's not some ancient version of MKL).
Well, then we have to hard-depend on GSL for PLUMED as @oschuett suggested, and explicitly use $GSL_LIBRARY in the plumed install script. Same for MKL...
