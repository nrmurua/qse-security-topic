If I have a circuit of single-qubit gates that I want to combine into u3 gates, using the transpiler with optimization_level=1 expands u3 gates back into u1, u2, u3 gates.
The output circuit should only contain u3 single qubit gates
I think after unrolling to the u3 basis the Optimize1qGates transpiler pass converts u3 gates back into u1 or u2 if they have parameters corresponding to those types of gates
One possible solution would be to add some options to the Optimize1qGates pass to not up-convert gates (ie allow u1,u2->u3 but not u3->u1,u2). Another useful option here would be to allow an option to leave gates equivalent to identities in the circuit as u1(0) or u3(0,0,0)
Ideally we break the Optimize1qGates pass into two passes, since the responsibilities are quite different: one that does actual merging of gates, and another that simplifies gates (i.e. converts u3(0,0,lambda) into u1(lambda)). The blocker is that this double-passing can be slow, say for a randomized benchmarking experiment. But we should get some timing on that.
I'm changing this to 0.10 since the fix is easy (comment above) but I want to be a bit more sure about performance implications of this fix.
I have the same issue. I guess you can temporarily solve with custom PassManager

When you add  pm.append(Optimize1qGates()) that removes U3 when it can to U1, U2 and also nothingness. So the your problem is Optimize1qGates

Source code:
