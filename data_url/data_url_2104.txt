It would be a nice feature if Cirq would support the multiqubit controlled gate decompositions presented in https://arxiv.org/abs/quant-ph/9503016
I can implement this.
I see this as a function which takes unitary matrix and returns a Circuit.
@viathor , can I work on this (not sure whether Cirq has this already)? What would be best place in repository to put such algorithm (maybe cirq/protocols)?
This would be in cirq/optimizers.
Hi. I have several design questions.
Result of algorithm.
I imagine that it will be a sequence of gates. In paper result consists of general single-qubit gates and CNOT gates. In Cirq that can be represented as cirq.MatrixGate and cirq.CNOT.
But maybe it's better to go further and decompose them into gates with 0 or 1 parameter, i.e. Ry, Rz, H, and ZPowGate?
CCNOT gates.
Algorithm produces a lot of intermediary CCNOT gates, and then each of them is replaced with O(1) 1-qubit and CNOT gates. If we allow CCNOT gates in ouput, we can greatly reduce size of output.
Should I allow CCNOT gates in output of my algorithm? Would it be useful to have a parameter specifying this?
For now I will go all the way to CNOT gates and won't allow CCNOTs in output.
Special unitary matrices.
If input is special unitary (SU) matrix, it can be decomposed into O(n) gates, while in general case it is decomposed into O(n^2) gates. I will implement both algorithms, but there are 2 ways to express this in API:
a) Define two public functions, one for SU case and one for general case;
b) Have one function, which will use more effective algorithm if input matrix is special unitary.
Special cases (Chapter 5.2. in paper).
If input matrix has some special form, number of result gates can be reduced. Should I implement this? (I think yes.)
Approximate simulation (chapter 7.3. in paper).
Basically it's terminating recursion which reduces number of gates in output at cost of accuracy.
I'm not going to include it in initial implementation, but would it be useful?
My draft implementation is here and when it's ready, I will convert it to a pull request.
@vtomole @viathor @alexandrupaler
