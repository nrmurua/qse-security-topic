The following code to multiply PauliY by the identity incorrectly casts the matrix representation of PauliY into the type of the input state (float):
gives
numpy correctly throws a warning about this casting, but this should really throw an error.
At line 
matrix = matrix.astype(sub_args.target_tensor.dtype, casting="safe")
will throw a TypeError: Cannot cast array from dtype('complex128') to dtype('float64') according to the rule 'safe'
On the other hand, using state = 0.5 * np.eye(2, dtype=np.complex128) will not throw error.
Is the intended behaviour of apply_unitary to cast safe to lower type, or should it cast to larger type when necessary?
This feels like a case where the code should use the larger type.
Brought up again: Should just promote types as needed to complex.
Taking this.
Casting the types of target_tensor and available_buffer causes _incorporate_result_into_target to fail with the error:
I don't know how to get around this so the solution i can think of right now is requiring that the types of target_tensor: np.ndarray and
available_buffer: np.ndarray be complex and fail otherwise.
Anyway, I will bring this up at the sync.
From cirq sync: We should throw an error.
