The TOFFOLI gate is universal and at times a user may wish to keep the Hadamard gate (SNOT) along with CNOT to implement certain algorithms. For example the ICM algorithm starts from the initial gate set {Toffoli, CNOT, H, P, T} where P and T are rotation gates (RX and RZ). As such we may wish to add SNOT to the list of valid one qubit basis set and TOFFOLI to the valid 3 qubit basis set such that when a user wants to let these gates remain as they are and not get resolved into rotation gates, they can do so by specifying circuit.resolve_gates(["SNOT", "TOFFOLI", "RX", "RZ"])
This is what I am doing here in this commit
By default the basis set is ["RX", "RY", "RZ"] and this does not change any existing behaviour but gives the option to use Toffoli and SNOT as basis gates for gate decomposition.
@ajgpitch @nwlambert Please let me know if this flexibility is something that can be included. I will open a PR for this.
It sounds like a good plan to me. But I am not QIP expert :)
Well, I am using this for my code. Doesn't seem to be a very big change anyway as it doesn't affect existing code or introduce a high computational cost. (3 if's, a new list and a new item in an existing list). If others agree then I will open a PR.
I am not a QIP expert myself, :). But, I am learning on the go. Btw, who wrote the qip module ?
Looks ok to me, but also prefaced with "not an expert" :)  Also the ICM stuff looks very nice.
Robert and Anubhav did this QIP module. There were various plans to extend it, vaguely summarized here #441
Thanks for the link. I went through that and I found the topics quite interesting. I am hoping to work on some of those topics.
Has this been addressed by @BoxiLi's project?
No, this is not included in my project. The commit above seems to be lost so I can't see the original proposal. It is easy to add a new option to let some gates remain as they are (and I think this is what was proposed). To resolve other multiqubit gates into TOFFOLI basis needs, however, much more work :)
If resolving gate becomes a high demand, it might be a good idea to refactor the current resolve_gate method as it is quite long and hard to maintain. An optimized gate resolving method needs more complex logic such as merging single-qubit gate.
I now see SNOT and Toffoli gates as available in the gate resolvers, but I don't use the code so can't make a final judgment.  I'll leave to @BoxiLi to close if appropriate now.
SNOT and Toffoli can be resolved to [CNOT, RX, RY]. But I think this issue is proposing to resolve other gates to Toffoli and H, which is not available currently. This is indeed something very useful. But this issue is quite old and I'm not sure if any of that code can still be used? @quantshah In particular, the algorithm decomposes arbitrary gate to Toffoli+others.
