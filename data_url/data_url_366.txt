Allocation of qubits and vectors of qubits are done in the bridge when walking the AST. This can result in many different allocations of various sizes.
One way to reduce the number of these allocations is to combine them into one large vector and select qubits out of that vector. Also related is to move allocations as close to the entry block as possible so that they can be ganged together in this vector. [Not all allocations can be moved to the entry block. In particular, they may have a runtime computed size value.]
Aggregating the allocations may make determining the number of qubits needed, fusing qubits over distinct live ranges, and other optimizations easier or faster.
This is a great thing for us to do. I wonder if this can be done as a canonicalization pass?
Aggregating the allocations may make determining the number of qubits needed, fusing qubits over distinct live ranges, and other optimizations easier or faster.
Could you elaborate more on the advantages?
I see value in moving allocations as close as possible to the entry block and its relation to how we can use this to fuse qubits over distinct live ranges. However, I need clarification about the value of merging allocations into a single, large one.
To elaborate on this last point: Contrary to classical programs, allocations in a quantum one do not have a runtime cost. At least today, before running a quantum program (the circuit part), we first map the logical (virtual) qubits to physical ones, and when we do that, allocations "disappear". (I wonder if this will change in the future or if there is already a control system that manages qubits during circuit execution---which would require an online qubit mapping algorithm.) Hence, from this perspective, optimizing the number of allocations seems to add little value. Furthermore, merging the allocations will add some noise regarding operations to extract qubits, and I'm curious how well this will play on the QTX level---where there will be a lot of borrowing and yielding going on, and the extraction of subarrays still needs to be defined.
