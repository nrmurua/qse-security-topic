Since Microsoft was kind enough to open the source of the Q# simulator runtime, I've wanted to provide optional Qrack bindings. Q# coders might benefit from GPU acceleration and the many layers of optimization in Qrack, whereas Qrack might benefit from the Q# compiler.
I've looked at that runtime code already, but I plan to start making commits toward this end, this weekend. This will actually probably occur in another spin-off repo, but the Qrack API might need to be gently tapped into fit with the Q# runtime.
Status update:
This weekend, I got distracted with tweaks that seemed relevant to a friend. The repo has been quiet for a couple of months in part due to (good) life events and splitting my time and energy between my projects, like my work on my personal fork of OpenRelativity, "for fun." However, now I'm at a good point to put that other work aside for Qrack work, for Q# bindings and maybe additional optimizations. (This happens to be where my personal motivation is organically directing me for a period, as you can see for the past couple of days.)
Personal circumstances aside, I'm saying I got off track this weekend for this issue, but I'm just going to continue with it, and other backlogged items for Qrack, in my free time for the next few weeks, or however long it takes to clear the backlog. I don't foresee any more pressing matters or distractions from other projects that will keep me from working on this at night and over weekends. This particular issue is top priority, for my part of Qrack.
This has been on the docket for a while, but there were aspects of the core library that took more precedence in my mind than bindings. (Read: "...But making Qrack faster is more fun!" basically.) For now, the core library should probably be considered as candidate for a release tag. It'd be great if the next official release was the first point of reference for Q# bindings, finally.
This has actually been done for a while. See https://github.com/vm6502q/qrack-qsharp-runtime. There are literally 2 or 3 failing unit tests which I think might not be indicative of anything important and can be safely skipped. We don't distribute a package, yet, (for anything,) in part because of the difficulty in packaging a Qrack installation with it, but we should probably look into .NET, Python, and Ubuntu packaging options, finally.
