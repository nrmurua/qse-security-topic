Also, what is the difference between
and using
I personally don't think and algorithm should be able to run with a method. I think it should contain be ran by passing an algorithm and a backend to run_program (see #153).
Hi @jaygambetta, when someone creates a new algorithm, he/she derives from the base class QuantumAlgorithm and can implement some methods, the mandatory being "def init_params(self, params, algo_input)" and "def run(self):"
The run_algorithm method goes to a series of data transformations (loading json, figuring out the algorithm etc) and then instantiates the correct algorithm subclass and calls the implemented init_params method and then the run method. On a notebook or python code, you just call run_algorithm method.
Currently, backend instantiation and account enabling is done by static methods in the QuantumAlgorithm class without user intervention. This part in under discussion in the issue #153
But there are some tutorials showing to use the QuantumAlgorithm.run()
https://github.com/Qiskit/aqua-tutorials/blob/master/chemistry/LiH_with_qubit_tapering_and_uccsd.ipynb there are many others. I agree that we should not use the run as a user an if used internal that is great but then maybe it should be _run()
Yes @jaygambetta, those in my opinion are advanced notebooks where the person is taking control of the whole process and getting variational form instance, optimizer instance passing data etc instead of using a json dictionary. I guess to be able to comment on each step. I will talk to the guys about it.
Ok but then I think we need to make this clear that this is finner steps. There are a few of them I would need to look in detail but my first impression I got myself confused between the two operational ways.
As indicated run_algorithm is the entry point to Aqua for regular users of Aqua. Internally it runs an algorithm (QuantumAlgorithm) instance via methods that are overridden from the base class, such as run(). This is a public method as such for an algorithm developer. As a developer of Aqua algorithms you are exposed to these 'internals'. Since we want to encourage both regulars users of Aqua as well developers to augment the library we have notebooks showing both. Aqua can be used the latter way too though its more intended for developers or maybe advanced users that wish to experiment more with the internals.
It is not clear from the tutorials or the documentation when to use it. If it is to be public we need to make it clear when run gives an advantage over run_algorithm otherwise it looks like both work and you can just use either.
