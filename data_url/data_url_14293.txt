Right now the Operator.from_circuit() constructor can be used to build an operator from a QuantumCircuit post transpilation that will reverse the permutations caused by layout and routing. In general the the transpile() will preserve the unitary of the input circuit factoring in these permutations, so this method is quite useful for if you need the original unitary (without the permutations) of the circuit after transpile() has been run. However, one transform that is not currently accounted for in the .from_circuit() is that the transpile() function by default will insert ancillas to the circuit to ensure the output circuit has a qubit for each backend qubit. To ensure that from_circuit() is able to reproduce the original unitary exactly it should be updated to ignore the idle qubit insertion to the circuit. This probably should look at the initial layout information (or the input qubit mapping) and determine which idle qubits are not in the original circuit and ensure those qubits are not included in the output operator.
I think this is trickier than it seems, because general transpilation can involve using more hardware qubits than the circuit starts with virtual ones, in order to improve the depth in routing.  Higher-level synthesis routines (that don't yet exist) may also involve adding operations on dirty ancilla qubits.
That said, we never create "data" qubits throughout execution, so I think this all still should be doable, we just might need to trace out some qubits that appear non-idle, as well as the permutation.
One thing I thought about was just looking at the layout to figure out which qubits are new from the original circuit and just filter based on that. But I thought maybe we wanted to check the extra bits were idle before removing in case of modification post-transpilation or something. Maybe we should just make this an kwarg something like:
I agree with @jakelishman that it would be nice to have a solution that handles ancilla qubits (that are not idle, yet can somehow be removed).
