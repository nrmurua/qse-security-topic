Hi, i am using Yao.jl in my recent project, and it is really friendly and efficient.
However, i encounter a problem.
I want to export the time evolution unitary matrix represented by quantum circuit on a large system (around 20 qubits) and find it costs many times.
I know it's an exponential problem. But, since the sparse property of the circuit, i think there might exist some methods to reduce the time cost. I directly use sparse matrix to compute the target matrix and this method is very fast (matrix construction process cannot be realized using quantum circuit). And i also need a circuit to realize this matrix.
Following are some methods i tried:
I try to drop some small elements in the sparse matrix when using mat function. Actually, after every 10 layers, i drop those elements in the current matrix smaller than 1e-8 and observe a little speedup. However, the drop element operation also costs times. So, the actual speedup is not as much as supposed.
I am wondering if i can drop those small elements when doing the sparse matrix multiplication. i try to read the LuxurySparse.jl but do not have a clue yet to do it without huge effort.
I try to simplify the circuit. But, i cannot verify its correctness since the operator_fidelity requiring the matrix and it costs many times.
So, how can i deal with this problem? Many thanks to your suggestions!
Sorry I do not fully understand your question.
Sorry I do not fully understand your question.
Sorry, let me explain this more precisely.
Is it possible to construct a minimum working example? I still do not get your point. Sorry
This is a sample code for toy model.
I want to check if the circuit is correct to represent the unitary.
For this model, the circuit is very short. so the speed is relatively fast. But for other models, the circuit consist of about 100 layers, which slow down the speed.
Can you please show me the parameter when it goes slow? This model runs very fast, then I do not see the problem.
One place that you can improve is:
You can build your circuit with builtin functions, there is no need to define a new block.
Can you please show me the parameter when it goes slow? This model runs very fast, then I do not see the problem. One place that you can improve is:
You can build your circuit with builtin functions, there is no need to define a new block.
Thanks for the nice suggestion!
Actually the circuit I use in my project is long and most time costs on the mat function, since it has to do many times sparse matrix multiplication (which is different from the toy circuit i post before). Due to the accumulation of the small but nonzero elements, the time required for a single multiplication is growing. For 12 qubits, the mat(circuit) requires about 500s (sorry i cannot provide the actual circuit).
I redefine the prod function in mat method to drop the small elements when multiplying a series of sparse matrices, and observe an obvious speedup (sacrificing some precision).
Following is a performance test.
In my devices, the output is
If i choose gs around \pi (which gives Rx(g)~X), the time required for mymat method is even less.
At current stage, this modification is enough for my project. And I am still wondering if there is other more elegant way to deal with this?
If I understand correctly, you want a chain block that truncate while computing matmul. But I do not think we can truncate small non-zero entries implicitly in Yao. You have to redefining the mat function.
Another place that you can improve is the way you define C is equivalent to the following function
Thanks for your suggestion!
I understand your point.
Many thanks again!
