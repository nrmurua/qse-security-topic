Qiskit uses PIL for processing image in the Qiskit circuit drawer, which supports several image file formats. However, it always saves in image/png:
It would be great if the drawer notices the filename file extension and saves the image in the correct format.
I'm not sure we want to go down this path. The circuit drawers are already complex enough and have a lot of different paths and capabilities depending on the backend. It's already easy enough to do something like: circuit.draw('mpl').savefig('test.svg') or with the latex drawer circuit.draw('latex').save('circuit.jpg'). What I'm worried about here the pillow file formats are different from the mpl supported file formats which are different from the text drawer's image formats (ie none). At a certain point a user will just have to take responsibility for doing things themselves and use the libraries themselves to do what they want it's why return the Image and Figure objects for people. (or they can always just imagemagick convert or another purpose built image format conversion tool).
For PIL, the support is almost for free (image.save(filename) takes filename extension, right?). I think, for mpl, it's already supported.
For text, it makes sense to check filename and warning if extension is not .txt.
Just to be clear. I dont think the formats should be converted if the inner library does not support the format, but a warning/error should be raised.
Hi @1ucian0,
While working on the issue I also observed that the pdftocairo library is used to convert a pdf into a PNG file and then PIL is used to "save" (convert?) that file into the desired format. After experimenting I found that, for example, a JPEG file obtained from the output of pdftocairo is slightly different than a JPEG file obtained from using the currently implemented method (which involves PIL).
Now, since pdftocairo supports fewer image formats than PIL, do you suggest we keep things as they are, or remove the middle-man PIL while sacrificing on supported image formats?
I think PIL is needed because .draw() returns a PIL Image that Jupyter notebooks display.
Got it. My bad, I failed to see the bigger picture.
