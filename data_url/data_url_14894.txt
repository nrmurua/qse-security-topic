Working on the IBM Quantum Learning Lab online.
When I use the statevector simulator to simulate a simple circuit with a reset it causes the state vector to not display correctly. It causes the collapse of statevector, making it show one state with 100% probability, where as this is not suppose to be the case for statevector simulation.
"""
"""
This code will reproduce the issue. The statevector simulation shows a probability of 1 for either state 00 or 10, while the shots based method shows that the actual probability is 50% for 00 and 50% for state 10. Why is this not reflected in the state vector?
The state vector should show 50% probability of state 00 and 50% for 10. Instead it shows either 100% probability for state 00 or 100% for state 10.
To the best of my ability and what I have been able to research, the output should for the statevector probabilities should be
[0.5 0 0.5 0]. However, if I am mistaken, I would like to why.
Thanks
This is the expected behavior.
Every time you execute this circuit, the Bell state √2/2 (|00⟩ + |11⟩) is prepared, and the reset instruction projects the state to either |00⟩ or |10⟩ with equal probability.
In the case where your running a sim with shots, this same circuit gets executed 2048 times and the measurement blocks save the outcome in a classical register, so you will get 00 half of the time, 10 the other half.
In the case where you run a statevector sim, the circuit gets executed only once, so you will either get |00⟩ or |10⟩, not a distribution of both. So when your run Statevector(statevector).probabilities(), you will get either [1, 0, 0, 0] or [0, 0, 1, 0]. If you re-execute your code, you can see sometimes you get [1, 0, 0, 0], sometimes [0, 0, 1, 0] with 50/50 probability.
