All u2 and u3 gates in FakeYorktown have an error rate of 1.0 or 2.0. This leads to a complete depolarizing channel when used in basic_device_noise_model.
FakeTokyo has error rates for some cx gate, that are not defined in the coupling map (and vice versa).
FakeRueschlikon has no property file.
Simulate with basic_device_noise_model() or have a look at the .json files in https://github.com/Qiskit/qiskit-terra/blob/master/qiskit/test/mock/backends
FakeYorktown should not define a complete depolarization after each single-qubit gate. FakeTokyo should have missing cx gates and cx error rates added to the coupling map/property file and/or unused cx gates should be consistently removed from the .json file. FakeRueschlikon should have a property file.
Regenerate the .json files.
For FakeYorktown, I assume either an unit error (0.0002 becoming 2.0 or similar) or a snapshot of an incorrect calibration. FakeTokyo might have been build from different snapshots for the coupling map and the gate errors, thereby setting error rates for cx gates that are not defined in the coupling map and setting cx gates in the coupling map that have no error rate set.
As a side note, historical calibration data for FakeBackends would be nice. :-)
As a side note, historical calibration data for FakeBackends would be nice. :-)
How do you image this? Something like FakeBackendMay2019? In a different attribute?
I was thinking about something similar to https://github.com/luisg5/qiskit-ibmq-provider/blob/4e85e660ed3fb869b08242cc803bb5c7d4e10910/qiskit/providers/ibmq/api_v2/rest/backend.py#L40 where a datetime object can be passed to the properties function to filter the returned property data.
I see two options how this can be implemented for fake backends:
One challenge is to get the historical property data in the first place. Should it be randomly generated or dumped from IBM Q backends?
