When you do cirq.H.on_each([q0, q1]) instead of the unpacked version  cirq.H.on_each(q0, q1) for some qubits q0 and q1, the error message you get is Gate was called with type different than Qid.
Maybe either flatten (because most of the time you'll have your qubits in a list or a list of lists), or give a more descriptive error message.
I can take this one.
What would you expect of a return type? Do you want to have the list of lists preserved, if the input is a list of lists? Or do you want to keep the current return type, which is a flattened list?
For me the current return type is the most obvious solution. I don't know any good enough reason to change the return type and potentially risk incompatibility with other existing patterns. The primary purpose of flattening the list is that we can write the intuitive yield cirq.H.on_each(qubits) in a generator, no matter if qubits is a list of LineQubits or a list of lists of GridQubits (two cases I have frequently). That's easy to read and does what everyone would intuitively guess.
The usecase I had in mind is method chaining, where you can repeatedly apply gate operations to a list of lists of GridQubits, while keeping the topology intact. But that might not be that obvious, indeed.
I will keep the current return type of a flattened list. Thanks for the reply.
