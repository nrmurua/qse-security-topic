The below code is to find eigenenergies of 1D harmonic-like potential.
from qutip import *
import numpy as np
import scipy as sci
import matplotlib.pyplot as plt
ns=3001
x=np.linspace(-100e-6,100e-6,ns) #in meter
dx=x[2]-x[1]
psi_0=basis(ns,int(ns/2))
#Potential Operator
hbar=sci.constants.hbar # hbar
mK39=sci.constants.m_p*38.963707 # Potassium 39 mass
w0=40e-6 # beam waist in micrometer (1/e^2)
T=2e-6 # Trap depth in K
U=sci.constants.Boltzmann * T # trap depth in K * Boltzmann constant
omega=np.sqrt(4*U/mK39/w0**2) # Harmonic approximation Angular Freq
def _VGauss(U,x,w0,x0):
return (U-U * np.exp(-2*(x-x0) ** 2/w0**2))
V_xr=(_VGauss(U,x,w0,20e-6)+_VGauss(U,x,w0,-20e-6))
V_xr=V_xr-min(V_xr)
#Momentum^2 Operator
P_x2r=(np.eye(ns,ns,k=-1)+np.eye(ns,ns)*-2+np.eye(ns,ns,k=1))/dx**2 #https://en.wikipedia.org/wiki/Finite_difference_method
#T+V Hamiltonian
#H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39+V_xr * np.eye(ns,ns))
H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39)+Qobj(V_xr * np.eye(ns,ns))
#Eigenenergies
E_x=H_x.eigenenergies()/hbar/2/np.pi #in freq.
Focus on this part.
#T+V Hamiltonian
#H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39+V_xr * np.eye(ns,ns))
H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39)+Qobj(V_xr * np.eye(ns,ns))
H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39+V_xr * np.eye(ns,ns))  generates correct result,
while H_x=Qobj(-hbar ** 2 * P_x2r / 2 / mK39)+Qobj(V_xr * np.eye(ns,ns)) generates all-zero.
Is it an intended way or a bug?
Please consider changing your unit to avoid small terms like e-6 and hbar. QuTiP uses sparse matrix and removes very small (~<e-7) matrix entries. Possible improvement was discussed in #1349.
