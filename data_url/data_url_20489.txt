To reduce the number of code versions to be supported in this project, it seems to be possible to use openssh v8 for libssh testing
-> Doable & sensible?
open-quantum-safe/libssh#6 was merged today. That is my update to the libssh implementation to interoperate with the OQS-OpenSSH v8 branch, so the v7 branch should no longer be needed there.
Thanks, @kevinmkane ! Before closing this for good, can I ask whether it'd be OK for you to drop the code version "tiedowns" in libssh testing for openssh and liboqs -- or replace ref with OQS-v8 and main respectively)? This way regular CI on libssh would alert us of (undesired) inconsistencies creeping in over time in those packages.
Yes, I'm fine with that. I'll maintain a note in the README to list the last known good revisions of each, but will default to building against the latest versions in the instructions and CI.
I don't currently have any nightly build jobs scheduled; I only have the job that runs when a PR is opened. Should I look into adding a nightly job so we find new build breaks quickly? Now that the v8 update is done I don't expect any changes for a while.
Should I look into adding a nightly job so we find new build breaks quickly?
I'd say that would be very sensible.
The alternative to a nightly job in libssh would be to have an upstream job trigger jobs in libssh. But since there are multiple potential sources of upstream triggers (liboqs, OQS-OpenSSH) it is probably just easier to do a nightly job here.
As for dropping support for v7, yes, I think that's fine. We can leave the branch, just put a note in the README on that branch indicating it is no longer supported/updated, and that people should use the v8 branch.
open-quantum-safe/libssh#9
Thanks again!
