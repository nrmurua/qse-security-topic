
I m obtaining this using code:
from numpy import *
from scipy.special import mathieu_cem
import matplotlib.pyplot as plt
from matplotlib import cm
from scipy.integrate import quad
i = 1.0j
x = linspace(-pi,pi,200)
p = linspace(-5,5,200)
x, p = meshgrid(x, p)
y = linspace(-pi, pi, 200)
psi = (mathieu_cem(0,-1,(x-y/2)*180/pi)[0])
psic = transpose(conj(mathieu_cem(0,-1,(x+y/2)*180/pi)[0]))
def integrand(y, x, p):
return psic * psi * exp(2 * i * p * y)
def W(x, p):
return quad(integrand, -pi, pi, args=(x, p))[0]
W = vectorize(W)
fig, axes = plt.subplots()
cont = axes.contourf(x, p, W, 1000, cmap=cm.jet)
axes.set_xlabel(r'x')
axes.set_ylabel(r'p', labelpad=-10)
cb = fig.colorbar(cont, ax=axes) 			# add colour bar
plt.show()
Any better arrangement?
I am not knowledgeable about the topic. Could you reference some literature and area of interest? Regarding https://github.com/usmanmacer/Wigner-Mathieu, if possible, please consider opening a Pull Request if this code or notebook example could be added as a special Wigner function instance.
Closing as I'm not sure this is related to QuTiP.  Seems to be a question about the general statistical Wigner function, not the quantum quasiprobability distribution (which is derived from it).
