While there is still a distinction between Gate (strictly unitary) and Instruction (not necessarily unitary) we should not only have a to_instruction but also a to_gate on the operators, analogous to the QuantumCircuit. If the operator is not unitary, then to_gate can raise an error.
Hello! I'm new here but would like to contribute to this issue, if it's okay with everybody. Any pointers to the same or any starting point would be appreciated.
So, I was going through the repository to understand how this enhancement could be brought about, when I came across this

I found this in https://github.com/Qiskit/qiskit-terra/blob/master/qiskit/quantum_info/operators/operator.py, is there where we are supposed to add the to_gate() method? And if so, isn't the instruction already implemented as only a unitary gate? What changes are there to bring about? Thanks! @jlapeyre @Cryoris?
Hey if this is open, I would like to work on this.
In light of @VANRao-Stack's comment: because UnitaryGate throws a warning if the input data is non-unitary, we can just define to_gate identically to to_instruction, which seems unnecessary? I think to_instruction does what you're asking already, if I understand the UnitaryGate class correctly
I unassigned myself since others are interested.
Hey if this issue is not assigned to the above members, can I work on this.??
Is anyone working on this currently? If not, I'd like to work on this over the next few days.
Aren't both the Gate and Instruction class in qiskit-terra? Should this issue be moved to terra? @Cryoris
@shifubear see how to_instruction is implemented in OperatorBase subclasses. In the similar way, to_gate method can be implemented.
You can start in CircuitOp class, where the implementation is straightforward.
@molar-volume
Thanks! I was able to find what you were talking about. Should I also implement an abstract to_gate method in the OperatorBase class?
---- Edit:
Nevermind, I added the method to the PrimitiveOp class.
@shifubear I would implement to_gate only in classes with to_instruction implementation.
Is anyone currently working on this? If not, I'd like to give it a shot.
I went through @molar-volume's comments as well as the code. Here is an outline of how I would tackle the problem:
Is this the right approach?
I would like to work on this if its ok. I am new to this.
I'm still working on it. I'm going to open a pull request tomorrow or the next day.
Hi @ocareyde how is this going? Let us know if you have any questions ðŸ˜„
Hi! I got super busy there this past month, but I'm going to work on it this week. I'm sure I will have questions within the next few days. Thank you!
I was able to add the to_gate method to the PrimitiveOp subclasses that had to_instruction implemented: CircuitOp, MatrixOp, PauliOp, and PauliSumOp.
I would love to some feedback as well as some help with testing edge cases. Please let me know how I should approach this.. should I reach out to someone on Slack, or just submit a pull request?
Feel free to open a pull request @ocareyde (you can open it as a draft PR if you're still working on it) and then we can go from there ðŸ˜„  Please also make sure to link your PR to this issue so it doesn't get lost
@ocareyde Hey, just want to check in to see if you are still working on this issue. Please let us know if you need any help!
as there is no response from the original assignee I am un-assigning so this issue is now open for others to pick up ðŸ˜„
Maybe I'm missing something but, taking a look at this, I'm wondering whether the current implementation of the Operator.to_instruction method is correct or not. As mentioned by @Cryoris since the beginning of the discussion, while a Gate must be unitary, an Instruction don't necessarily have to be so.
Assuming this, I would expect the following code to work raising no errors:
However, running this by Qiskit Terra 0.22.3 (latest version) you get: ExtensionError: 'Input matrix is not unitary.' Is it normal? This is not just a warning but it seems to be impossible to get a non-unitary Instruction in this way. This would be the expected behaviour for the Operator.to_gate method but looks wrong if we consider a general instruction.
I am new to here, and interested in this issue . And I have same understanding as @SimoneGasperini  mentiond above.
To begin with, I understand that Operator is an object that holds circuit information in matrix form, but I was wondering if do we need  to create an object in Operator for a circuit that is not unitary (e.g., a circuit with measurement gates mixed in).
The context has got lost a bit, since this issue is old and was originally made against Qiskit Aqua (which doesn't even exist any more), but @Cryoris originally meant various classes in qiskit.opflow, not qiskit.quantum_info.Operator.  opflow is actually just about to be deprecated, so we're not accepting new functionality any more.  qiskit.quantum_info.Operator.to_instruction returns a UnitaryGate, which is an instance of Gate and so is unitary (as you've found), so I don't think we need a new method on it.
Sorry this issue was still hanging around being misleading.  I'll close it now as "not planned".
