Application
The bqm_index_labels decorator is great and saves writing boilerplate code on almost every sampler. However, many of the samplers I write end up requiring an parameter in the form of samples, such as initial states to a heuristic solver. Since it is too costly in terms of memory and time to store these as dicts mapping variable labels to states, they must come in as arrays, which means I can't use the bqm_index_labels decorator and end up writing the same boilerplate variable labelling code.
Proposed Solution
Another easy to use decorator that accepts two parameters: the name of the variable label map argument, and the name(s) of the "sample-like" inputs.
I have a quick prototype that works like so:
This handles the logic of relabelling the bqm if neither the state_labels nor initial_states args are provided, relabelling the bqm with the state_labels labelling if both are, and raising an exception otherwise.
Alternatives Considered
Writing the boilerplate code every time.
