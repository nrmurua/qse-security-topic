Perhaps this is intentional, but building with --enable-openssl doesn't result in the liboqs library depending upon libcrypto.
After building with --enable-openssl:
This makes it slightly complicated to use liboqs, since I need to manually link against lcrypto and also need to specify -Wl,--no-as-needed to avoid undefined symbol errors.
Hi Duncan, it is not necessarily intentional, I am still a novice when it comes to linking.  Do you know what we should be passing to the linker in order to achieve the right dependency?
It's the blind leading the blind here... I'm not a huge autotools nor linking wizard. I think it is as simple as adding:
into the top-level Makefile.am, just after the if ENABLE_KEM_KYBER block. The works for me locally at least. However the end user of liboqs would need to adjust their LD_LIBRARY_PATH or use rpath to force a specific libcrypto to be used.
I'm not sure if that's normal or even avoidable. I've just asked https://stackoverflow.com/questions/56148161/can-i-force-a-dynamic-library-to-link-to-a-specific-dynamic-library-dependency to try and find out.
Side note: this question came up because I've written a Go wrapper around liboqs, https://github.com/thales-e-security/goliboqs. Going to experiment using it with https://github.com/thales-e-security/go-tls-key-exchange to do post-quanum TLS in Go applications.
