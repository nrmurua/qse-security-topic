I've lost sight of the role of *global-compilers* in light of the cool annotated compilers business. It seems like some of the global compilers could be replaced with simple define-compiler definitions.
The function optimal-2q-target-meets-requirements also feels suspect in this framework.
Admittedly, I might have forgotten the true role of these objects. The source code has a comment saying it's responsible for populating the chip-spec objects with compilation methods.
If *global-compolers* is still useful, maybe we can write a little more as to when compilers should be installed there vs. define-compiler vs. ...?
(CC @ecpeterson)
It will take me a moment to remember exactly what the obstacles are to eliminating *GLOBAL-COMPILERS*. For now, let me say that I would very much like to eliminate our reliance on it.
To understand the difficulty, let's consider what *global-compilers* is presently responsible for:
This list shows up when nativizing instructions: apply-translation-compilers first does thread expansion, then looks up a hardware object associated to an instruction's (rewired) qubits and tries each compiler it finds there, then lastly tries each of the compilers in the global list. This translation procedure happens in two places: when addressing / nativizing instructions which are of higher order than any hardware object on the device, and when re-decomposing the matrix form of an instruction sequence during ("linear algebraic") compression (via expand-to-native-instructions).
That at least sets the stage. Now, a whole bunch of disconnected thoughts:
These simultaneous services (among perhaps others that I've forgotten) make this a pretty tangled mess. I'm still not sure how I'd go about getting rid of this list, but any attempt to do so is sure to have significant ripples.
see also #336
see also #97
