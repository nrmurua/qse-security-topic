We get warnings when compiling using the mingw32 compiler under windows.
The warnings only seem to occur during the tests and not the build_ext, so there may be something we can do with CFLAGS.
I have done quite a lot of reading around and it seems many projects suffer from this. There did not seem to be a clear resolution, other than to change the C code. We don't seem to use the 'z' in any of our source, but it is found in all the so files, so I guess it is used in one of the dependencies, and hence I don't think we can take that approach.
The tests still seem to pass, so I am putting it down as a won't fix.
Perhaps better to focus on #447
I think that this may have something to do with the heom.pyx file
From what I have read about the 'z' format it has something to do with size.
So I suspect this line
@nonhermitian is the some reason why kk can't be an int
The reason for this 'strange' behaviour is here I think:
https://sourceforge.net/p/mingw-w64/wiki2/printf%20and%20scanf%20family/
Suggests using:
to specify that ANSI C99 code in use rather than Microsoft C
@nonhermitian do you know how we can apply this generally? As a CFLAG?
The packages built by conda-forge don't suffer from this warning. I think that is they include these compile options:
I thing mingwpy may do this automatically if it finds msvcr90d.dll. Investigating further now.
I made some progress. Following instructions from:
https://github.com/cython/cython/wiki/CythonExtensionsOnWindows
I installed MS SDK v7. Running build_ext from within the SDK v7 cmd shell created a build that did not issue the warnings on import. It was able to link to msvcr90d.dll, which is why I think the warnings went.
However, the rhs files compiled through pyximport still produced the warnings.
This post here suggests that adding a pyxbld file we can set the same flags as we use in cy/setup.py
http://stackoverflow.com/questions/16709591/get-hold-of-warnings-from-cython-pyximport-compile-distutils-build-output
This would include possibility to set a --verbose flag so I can see what actual gcc is being called.
This is really no longer an issue as of Pull #648.
Yes, I agree. There are probably quite a few issues that can be closed thanks to #648
This is really no longer an issue with the move to VS2015 and Py35+ on Win platforms.  Closing.
