A common thing that people want to do to operations is to control them. For example, this is intrinsic to how phase estimation works. A global utility method cirq.control that worked on any gate or OP_TREE would make that easier. Additionally, there would be a _control_ protocol that gates with more efficient control mechanisms (e.g. decomposing a fredkin using two CNOTs and a Toffoli instead of three Toffolis) could define.
The signature of _control_ would be (self, control: cirq.QubitId) and the result type would vary from object to object (e.g. gates would return gates but operations would return operations).
The signature of the global utility method would be def control(controllee: Union[Gate, OP_TREE], control_qubit: Optional[Qubit] = None). If the control qubit is set to None, that means the user wants to specify it later in order to get an operation (i.e. it should work the way ControlledGate(gate) works, except it will also apply to operations).
If the control qubit is specified, then the method will attempt to use the controllee's _control_ method or else fall back to strategies based on the controllee's known unitary or known decomposition in order to return a controlled result. Otherwise it fails.
Also, once cirq.control exists, we can add controlled_by(control) to Operation if we want.
This will need ControlledOperation (#1302 )
Also, do we have a concept of specifying only a subset of qubits for a gate? I couldn't find any examples of that but I'll need to implement something like that for
control(Gate,qubit) -> SpecializedControlledGate.on(qubit,...)
I don't want to modify the existing ControlledGate class because there are some assumptions in that assuming that no qubits are specified except during the on() call
for control(operation, qubit), use ControlledOperation from in-progress Define ControlledOperationÂ #1302
for control(operation, None), raise an error explaining a qubit is needed for operations. We could add support for this later but I am happy to have it fail because I don't see people using this functionality.
for control(gate, None), use ControlledGate.
for control(gate, qubit), make new type SpecifiedControlGate (or alternatively merge this concept into ControlledGate).
Add _control_ magic methods to Gate and to Operation so that the global utility method works with them without special casing them in the implementation
