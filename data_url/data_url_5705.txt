Should work. Terra can handle it.
FYI: a circuit with add_register instead of add_bits works fine.
output
@t-imamichi: sure, but that's not the point of the bug being reported.  Loose bits should work.
This is almost certainly related to Aer's persistent use of the Qobj path for passing the objects down to C++, long past the point when that stopped making any sense, and Qobj simply cannot represent everything that needs to be represented.  Aer's Python/C++ boundary has been in need of rework for quite some time, and this is one more indication of that.
This bug affects usage of QuantumCircuit.from_instructions because that method uses add_bits instead of add_register.
I guess that the current assemble() does not support classical bits added by add_bits(). In my understanding, memory_slots in QObj must be 2 but currently 0.
QASM Qobj: 48d62624-1690-46a4-ba66-142b9504c8d8:
Config: {'init_qubits': True,
'meas_level': <MeasLevel.CLASSIFIED: 2>,
'memory': False,
'memory_slots': 0,
'n_qubits': 0,
'parameter_binds': [],
'parametric_pulses': [],
'shots': 1024}
Header: {}
Experiments:
QASM Experiment:
Header:
{'clbit_labels': [],
'creg_sizes': [],
'global_phase': 0.0,
'memory_slots': 0,
'metadata': {},
'n_qubits': 0,
'name': 'circuit-95',
'qreg_sizes': [],
'qubit_labels': []}
Config:
{'memory_slots': 0, 'n_qubits': 0}
https://github.com/Qiskit/qiskit-terra/blob/34ee9a9394e7e21ed44798f9aef467e3a2bafdf6/qiskit/assembler/assemble_circuits.py#L76-L80
n_qubits: 0 is also odd.
Note: A qobj of the above circuit (which uses add_bits) was not handled in the current cloud service.
We might need to copy this issue to terra because it seems an issue related to assemble.
This may be a problem in assemble because the format was never meant to handle this, but I'm contending that Aer really should not still be using assemble.  We're not going to evolve the legacy Qobj path to handle new dynamic circuits, and since Aer should be handling much more than the IBM hardware backends, it really doesn't make sense that it's using Qobj / JSON as a transport format between Python and C++.  Aer needs to evolve its C++/Python boundary at some point (ideally months ago, when we starting doing dynamic circuits), and it's just going to cause us more pain the longer we go without it.
@jakelishman Should we make a separate issue to track updating Aer's C++/Python boundary? Is that a significant undertaking? Would you be able to break it down into tasks? Is this issue completely blocked by that?
Yeah you're right, thanks Kevin - Hiroshi made #1683 to do that.
#1717 resolved this issue.
