Description of the issue
There are two ways of getting noise into a density matrix simulation: we can attach the noise to the simulator (by passing the noise parameter to the constructor) or to the circuit (by calling with_noise). I think it is reasonable to expect the two to produce the same results. However, I found that they don't always agree.
I tried to create a minimal command to reproduce this in ipython and noticed that the final density matrix is unreliable. Most of the time it looks OK, but occasionally it is wrong. This afflicts both ways of attaching noise.
How to reproduce the issue
See unit test added in #4162. The test passes most of the time. Sometimes it fails. Here is example failure from CI (it fails on my machine the same way):
Also, here is a log from ipython session that shows the unreliable results:
Cirq version
You can get the cirq version by printing cirq.__version__. From the command line:
Actually, I guess what happens is the sim collapses the wavefunction different ways. The density matrices are consistent with that (since it appears that the amplitude damping channel is also added to measurements).
Maybe a little tangential as a remark but the effect of measurement itself could be captured as a sum of the effect of the projectors on the density matrix, i.e. capturing the measurement outcome in the "classical probability layer" of the density matrix, instead of actually simulating the probability pathway and collapsing the wavefunction. Was that your expectation maybe? Would that simulation mode be useful to you?
I didn't realize that noise channel was added after my measurement gate and so after seeing fractional entries in the output density matrix I concluded that it is not a collapsed state and thought that final_density_matrix was instead a pre-measurement state. The behavior made sense once I looked at the modified circuit.
For my purposes getting a collapsed wavefunction is sufficient, but I imagine that having a way to get a classical distribution over outcomes instead might be useful. Then again, it's ok to wait for the use-case to emerge before we add such a simulation mode.
