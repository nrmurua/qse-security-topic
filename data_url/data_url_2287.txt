When using QuantumEngine
What's the intended use case here? Can you figure out which processor actually ran your job?  In the NISQ context you typically want to tailor a circuit to a device.
A related question: what's the utility of Circuit.device? Is it respected/validated when using QuantumEngine?
The multiple processor_id case is for example when you are testing, and there are multiple processors, and you don't care which one it runs on.  This can increase throughput for you.  I agree for most NISQy business you want to specify the processor
Circuit.device is not used at all in engine right now.
We are adding the ability to down device specifications, at which point that could be used.  You can always add your device to a circuit and it will validate as you build the circuit.
In some places where is says processor_ids you can also pass in a single str.  I don't really like that.  Maybe we should just be more explicit here and have both processor_id and processor_ids, you gotta specify one and not both.
My personal opinion is that the cognitive overhead of giving a list outweighs the (IMO marginal) utility of the current api.
Overhead: Users following the intro documentation / notebooks / examples will be surprised by the pluralized argument and visually cluttered ('xmonsim',), argument, expecting a single target. Furthermore, I don't think it's obvious whether the process will run on any or all of the targets without reading the docstring
Marginal utility: NISQy business concerns, per above.
I would advocate for hiding multi-processor_ids in most APIs; maybe only exposing it on e.g. Engine.create_job which most users won't be using directly.
I suggest adding a processor_id argument, which takes a string and throws an error if specified at the same time as processor_ids. That fixes the "tricky to learn" issue.
For forward compatibility and general readability, I'd strongly suggest not having any default. I was fooled once by the current default
Current state is that we still have multiple ids, but we no longer have places where a single string is acceptable.
There is a good case to not have a default.
There is a good case for having a processor_id.
The badness of having both processor_id and processor_ids is a cluttering of the signature of the method.  These methods already have a pretty big list of optional specification, so burying it in this list seems fine.  If we elevate processor_id in the method signatures
My vote would be that we follow @Strilanc  suggestion, and make at least one be required to be specified.
Did we go ahead and make at least one be required to be specified? also cc @wcourtney @dstrain115
processor_ids is required and processor_id is no longer accepted by any method except by run_calibration.  run_calibration() seems very unlikely to be sent to multiple processors, since you are calibrating a specific device.
This solution was discussed previously as the accepted solution for this bug.
I think this issue can be closed.
