As suggested by Jay in last application meeting. The target unitary could be described in terms of a quantum circuit. To be used as a subroutine in the context of a more complex algorithm, we need a  QPE function that takes in a set of quantum registers which are already used by said algorithm and a circuit describing the unitary, and then returns a QPE circuit defined on input registers. Said circuit can then be appended to other circuits produced by the complex super-routine.
An agnostic way to do the controlled unitary is to control every gate in the argument circuit.
A stand alone, unitary-based QPE algorithm can call this core QPE function.
I think the best option for the phase register is to be initialized outside the QPE function - even if is not used outside QPE function - , and passed in as argument. In general I think it is good practice to initialize all quantum registers at beginning of given algorithm, so the most logical use of QPE function inside a more complex algorithm is to have all registers passed in as arguments.
An alternative way of having registers as arguments is to import them from the argument circuit - this is debatable I think.
The QPE core function should initialize a new quantum circuit with the registers passed as arguments, not just append a circuit to an argument circuit passed in.
In fact the circuit appending should be done outside the core QPE function, in the super-routine. The reason for this is that in some cases in the super-routine that uses QPE we need to invert the QPE circuit, so we need to have it as a separate object, to be fed to an eventual circuit.invert() method.
Unitary support using CircuitFactory is added in the 0.4 release with the first example usage in the also newly added AmplitudeEstimation algorithm.
The PhaseEstimationCircuit was extracted a while ago and provides the functionality requested above.  So far, the usability and usefulness of this new component has only be validated in conjunction with the Amplitude Estimation algorithm, used for example in Qiskit Finance.  @jenglick , we would like you to adapt the AI Recommendation System to use this circuit as we discussed.  It would be an important contribution to Aqua, and in addition, a validation of the usefulness and usability of the circuit.
Phase Estimation now supports unitaries since Aqua 0.4.
