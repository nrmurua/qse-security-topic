Description of the issue
The current coverage checking script check/pytest-and-incremental-coverage relies on the coverage annotate command and the dev_tools/check_incremental_coverage_annotations.py script to process the annotate output.  The annotate command shows warning that it will be soon removed - output - which will break our CI scripts.
The same checks can be accomplished with codecov, for example the test PR #6244 contains an intentionally untested code, which results in a blocked PR check from codecov.
Proposal
Benefits
Cirq version
1.3.0.dev at 9fbaa05
Can we run codecov locally and see the coverage reports before sending a PR, similar to check/pytest-changed-files-and-incremental-coverage ?
@pavoljuhas to check if codecov can be run locally or we can support a similar workflow with pytest. If yes, we can remove the existing scripts and replace with codecov as proposed.
codecov has a CLI tool and they describe its use in a local dry-run at
https://docs.codecov.com/docs/the-codecov-cli#how-to-use-local-upload
I tried to follow this on my local workstation, but was not able to get a report,
the report had an processing status for over 3 hours:
On a second occasion where I added an uncovered function to one module I've got a success status from codecovcli, although it should complain about uncovered code.
Cirq Csynkque discussion - let us preserve the  check/pytest-and-incremental-coverage and check/pytest-changed-files-and-incremental-coverage scripts because they are useful for local development, but let us update them so they do not need coverage annotate and are future proof.  @pavoljuhas will file a new issue for this.
Closing - superseded by #6276
