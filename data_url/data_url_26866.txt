The arch files mention __INTEL, but the code (src/pw/fft/fftw3_lib.F) uses __INTEL_COMPILER, the INSTALLATION.md only mentions __INTEL_COMPILER.
@mkrack do you know more about this?
No, I didn't, but in the Intel arch files I am using/maintaining:
there is neither a --D__INTEL nor a -D__INTEL_COMPILER flag. I employ only -D__MKL and -D__FFTW3 which will activate in combination
#elif defined (__MKL) && defined (__FFTW3)
! Preprocessing is enabled by default, and below header is not language specific
#include <mkl_version.h>
Maintainers/contributors of the other Intel arch files should check, if the -D__INTEL* flags are still needed.
@dev-zero That stuff is terribly old. __INTEL_COMPILER is the new one.
__INTEL is used in the arch file:
Linux-ia64-intel.popt:#DFLAGS   = -D__INTEL -D__FFTSG -D__parallel
Linux-ia64-intel.popt:DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK
Linux-ia64-intel.psmp:#DFLAGS   = -D__INTEL -D__FFTSG -D__parallel
Linux-ia64-intel.psmp:DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK
Linux-x86-64-cudadp.sopt:DFLAGSBASE   = -D__INTEL -D__CUDAPW -D__FFTSG -D__CUBLASDP
SGI-ALTIX3900.popt:DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK
SGI-ALTIX3900.psmp:DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK
We can remove all of them (ia64? SGI? They are not supported anymore)
Then, as Matthias said, the __INTEL_COMPILER was replaced by __MKL, so we can remove it too.
@alazzaro Thanks. We should indeed keep only up-to-date and maintained arch files. Others confuse only potential cp2k users.
@alazzaro thanks. Then I'll also have to send the Spack people a PR for that. Do you happen to know until which version of CP2K (or in which files) __INTEL was used?
@dev-zero Ages ago, at the time we had also ___GFORTRAN...
See 1e35ffe
@alazzaro great, thanks, GitHub shows that this commit was already part of 2.6.0
I am just responding since I introduced the __INTEL_COMPILER in the FFTW module.
CP2K's invention is to rely on __INTEL. The Intel Compiler defines __INTEL_COMPILER automatically similar to what Clang and GCC do to introduce themself. On top, most compilers are compatible to the default platform compiler on the respective platform, which means they may also introduce themself as say GCC or Clang. One can check what any (GCC-compatible)compiler is defining by:
The above works for C/C++ compilers, but unlikely for Fortran (except for GFortran).
So far, CP2K and DBCSR do not have a compiler detection or compatibility layer based on macros. We could introduce this for basic compiler/OS etc detection as well as to wrap-up some nice-to-have features. There are many things that we can detect or exploit e.g., OpenMP version level, or any sort of feature that might be present depending on the compiler version.
To reply to the original observation, __INTEL_COMPILER does not need to be defined but for sure catches the case that is made in the FFTW module, whereas using ___INTEL depends on setting up the ARCH-file "properly". The code change I did for the FFTW module enables GCC to use MKL with no need to rely on the FFTW library. This means if MKL is used anyway, there is no need to build and link the FFTW-library (the link-line in place for MKL is already sufficient for the FFTW interface as well).
ok, so we can drop __INTEL from the remaining arch files since its not used anymore and add a note in INSTALLATION.md that the user does not have to set it (respectively, do not mention it at all)
Drop the arch ia64 files too.
thanks a lot for the clarifications, -> PR #199
