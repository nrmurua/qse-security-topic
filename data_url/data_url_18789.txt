The grammar was extended with some built-in math functions that were out of the specification. TSC decided that the functions included in #275 should be part of the specification.
Aren't these already in the document, e.g., build/html/grammar/index.html?highlight=arcsin ?
The paragraph at the top of that page notwithstanding, the TSC want to move away from the textual include of the ANTLR grammar being part of the proper specification, for the time being at least. It's not completely up-to-date with the rest of the text, and where they disagree, in almost all cases the text is meant to be the correct one.
In this case, the spec text itself isn't clear: it just talks about "standard trigonometric functions" being available, but doesn't actually define them.  We don't want the only definitions to be in the ANTLR file (and besides, there's currently no need for them to be lexed differently to other function calls), so we should definitely have the list in the text.
So then @jakelishman @1ucian0, is this ticket bigger than just adding mention of the a* trig functions, more like reorganizing the text to enumerate exhaustively all expression functions rather than leaning on the inline copy of the grammar?
I'll bring it up in the TSC meeting today.
My suggestion would be that we call for a PR adding a list of all the functions we intend to exist at compile time on constant values.  Most of the names are already either in an inline list in the "const" section or implied by the examples files, but not all; cos for example isn't illustrated anywhere.  Once we have a provisional list, the TSC/contributors can make suggestions for any that should be removed (or potentially added).
As an aside: the current spec only allows these functions on compile-time constants (by my reading, at least).  We should stick with this state of affairs in any PR; requiring all hardware to implement a full maths library is a pretty onerous ask, and it's not clear that there's a need since extern blocks are meant for that type of heavy lifting.
The TSC today agreed there should be such a general discussion in the spec as @jakelishman mentions above. I agreed to put in a PR soon on this.
@jakelishman any suggestion where such material should go in the document? classic.rst? types.rst?
Or is a whole new section on math expressions required?
Shall we put the section inside the "Const values" part of types.rst for now?
At the moment, these builtins only apply to constant values.  I think all the types sections may expand into a few pages as the types group does its work, but I guess let's try not to predict things, and just stay in the same place for now.  I think if we put it anywhere else, we'll start to give the impression that they apply to variables at runtime, and the mechanics of how that might work haven't been discussed yet.  We don't even know if any of them will be available at runtime - perhaps that'll be a job for header files in the future?
