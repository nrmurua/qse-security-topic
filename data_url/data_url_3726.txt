Is this the behavior we expect?
Somehow I think p and q should have different qubits allocated to them, such that r reads
right?
@stevenheidel @jotterbach @willzeng
@ampolloreno yep I see your intuition.  I think its a bit weird in general that we allow r.inst(X(a), X(b)) when a and b weren't allocated on r. My thought would be that this should actually throw an error?
Thoughts @tarballs-are-good ?
The above comment relates to the previous underlying issue of #76
That would be my suggestion too: just raise an error if the programs don't match.
It should throw an error.
@tarballs-are-good How can I chain together programs without explicitly tracking qubit indices then?
In this case are you suggesting I track all my indices explicitly?
Its a good question.  For now maybe_one_one is a new Program object entirely so qubit0 and qubit1 aren't pointers into it.   Maybe the thing to do would be to be able to extract the allocated qubits from a Program object, i.e.
would return a list of three allocated qubits so that you could reassign qubit0, qubit1, qubit2 = maybe_one_one.get_allocated_qubits() to recover pointers into the new program and lose them into the p and q program objects.
What about merging the resource managers and creating a new one in the p+q program that has all 3 qubits assigned to separate indices?
