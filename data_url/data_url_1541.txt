Description of the issue
When using sympy to define a circuit, a ValueError exception might be thrown by NumPy
(ValueError: Integers to negative integer powers are not allowed.)
This happens when there is some division in the exponent by some integer and an attempt to resolve the parameters of the gate/circuit is made.
A simple example of this issue is given below.
How to reproduce the issue
ValueError                                Traceback (most recent call last)
 in 
----> 1 cirq.resolve_parameters(Rx_1,{'a':a, 'b':b, 't':t, 'm':m})
~/anaconda3/envs/quantum/lib/python3.8/site-packages/cirq/protocols/resolve_parameters.py in resolve_parameters(val, param_resolver, recursive)
182         result = NotImplemented
183     else:
--> 184         result = getter(param_resolver, recursive)
185
186     if result is not NotImplemented:
~/anaconda3/envs/quantum/lib/python3.8/site-packages/cirq/ops/eigen_gate.py in resolve_parameters(self, resolver, recursive)
354
355     def resolve_parameters(self, resolver: 'cirq.ParamResolver', recursive: bool) -> 'EigenGate':
--> 356         return self._with_exponent(exponent=resolver.value_of(self._exponent, recursive))
357
358     def equal_up_to_global_phase(self, other, atol):
~/anaconda3/envs/quantum/lib/python3.8/site-packages/cirq/study/resolver.py in value_of(self, value, recursive)
141             product = self.value_of(value.args[0], recursive)
142             for factor in value.args[1:]:
--> 143                 product *= self.value_of(factor, recursive)
144             return product
145         if isinstance(value, sympy.Pow) and len(value.args) == 2:
~/anaconda3/envs/quantum/lib/python3.8/site-packages/cirq/study/resolver.py in value_of(self, value, recursive)
144             return product
145         if isinstance(value, sympy.Pow) and len(value.args) == 2:
--> 146             return np.power(
147                 self.value_of(value.args[0], recursive), self.value_of(value.args[1], recursive)
148             )
ValueError: Integers to negative integer powers are not allowed.
Cirq version
0.11.1
@osamarais The following does work:
The reason why your choice of parameters fails is that internally it evaluates to np.power(2, -1). In math 2^(-1) is 0.5, but that is not a valid in int (the type of both 2 and 1).
A possible solution would be to automatically case b to a float internally.
