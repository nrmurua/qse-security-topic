The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators.
It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:
from:
H_shifted, c_op * rho * a_op, taulist, c_ops_shifted,
to:
H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,
The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal
Issue was found in qutip version 4.6.2 and 4.6.3
qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations
No response
Hello @Ericgig. I'm participating in the unitary hack. This looks like a good issue to start in qutip. Is necessary to add tests for correalation.py  once the function  correlation_me_2t has been changed?
Thanks!
Hi @victor-onofre, I don't think that this issue has a bounty for the unitary hack, but we would be grateful if you want to tackle it.
Yes, if you can add a test that would have failed but is now passing, it would be great. Also, I believe the same bug can be found in _correlation_me_2t, which should also be fixed.
Hi @victor-onofre @Ericgig
As far as I understand it, the only change needed is a single line in correlation_me_2t, as shown above. A test to show what the function should do, and how it currently does not work correctly, is shown in the code above.
I've not attempted to 'solve' this issue further myself for the following 2 reasons:
I'm not a theorist. I've discussed this with colleagues (as also mentioned above) but I'd like to have someone check this proposed change makes sense, preferably someone who knows why the code currently is what it is, maybe there is a reason for it?
I'm unfamiliar with how github works, I've only used it for version control on private projects, so I actually don't know what to do to 'merge' the proposed changes into the code.
On the other hand, I have been using qutip with the change suggested above, and as far as I can tell, for my use case, it works well.
This is definitely a bug.  Looking at correlation.py it looks like _transform_L_t_shift_new() and _args["_t0"] = tlist[t_idx]   are supposed to take care of this, but it seems broken for time-dependent collapse operators for two reasons.
_args["_t0"] = tlist[t_idx]  is only set if H is time-dependent, not if the c_ops are
The parsing of the c_ops list in _transform_shift_one_op() is  a bit broken (it seems to expect [[c,func]] to be one list deeper or something like that?)
I am wondering if the above proposed fix of just shifting tlist in the mesolve() call might clash with (potentially) working code for time-dependent Hamiltonians and introduce a new bug in that case? It could  perhaps better to fix the existing functionality by fixing the two issues above.  On the other hand, that existing functionality is fairly clunky..... any reason not just to ditch it all and have the shifted tlist in mesolve for all cases?
Hi @Ericgig, @AFvanloo, and @nwlambert, this bug has become more interested. Thanks for all the comments and suggestions. I will be busy this week, but I will dive down into the functions and propose a good solution during the weekend. It looks that the solution @nwlambert  is proposing is the best one but I want to check if there is something else to do here.
Thanks!
I did the changes recommended by @AFvanloo. Given that this is my first time contributing to qutip, I didn't want to make so many changes for me to get used to the workflow. I think I can implement the comments of @nwlambert later but for now, these changes solve the issue.
Thanks!
