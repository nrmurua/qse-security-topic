Description
Minorminer repeatedly gives embeddings that are rejected by the QPU, raising: "dimod.exceptions.BinaryQuadraticModelStructureError: Problem graph incompatible with solver."
To Reproduce
In one recent trial, here is what I've done and what I've got for QUBO Q with 15 qubits (not a clique).
G = networkx.Graph(Q.keys())
embedding = find_embedding(G.edges, pegasus_4.edges)
print(embedding)
where pegasus_4 = dwave_networkx.pegasus_graph(4). The output I got for this embedding was:
{0: [202, 201], 1: [18, 186], 5: [21, 180], 10: [31, 198], 2: [216, 24, 25], 3: [199, 43], 4: [196, 46], 6: [189], 11: [37], 7: [27, 183], 12: [39, 40], 8: [48], 13: [204], 9: [51], 14: [207]}
However, printing pegasus_4.edges did not show any connection between qubits 31 and 198 (embedding of qubit 10) that I could find. G.edges are
[(0, 1), (0, 0), (0, 5), (0, 10), (0, 2), (0, 3), (0, 4), (1, 2), (1, 1), (1, 6), (1, 11), (1, 3), (1, 4), (2, 3), (2, 2), (2, 7), (2, 12), (2, 4), (3, 4), (3, 3), (3, 8), (3, 13), (4, 4), (4, 9), (4, 14), (5, 6), (5, 5), (5, 10), (5, 7), (5, 8), (5, 9), (6, 7), (6, 6), (6, 11), (6, 8), (6, 9), (7, 8), (7, 7), (7, 12), (7, 9), (8, 9), (8, 8), (8, 13), (9, 9), (9, 14), (10, 11), (10, 10), (10, 12), (10, 13), (10, 14), (11, 12), (11, 11), (11, 13), (11, 14), (12, 13), (12, 12), (12, 14), (13, 14), (13, 13), (14, 14)]
The full code I'm trying to run is an implementation of the Nurse Shifting Problem, and available at this github repository
Expected behavior
Either an empty dictionary (no embedding found) or an embedding matching the target graph.
Environment:
Additional context
After this process, I use embeddedQ = embed_qubo(Q, embedding, pegasus_4) followed by a bqm = BinaryQuadraticModel.from_qubo(embeddedQ) and finally try to sample using DWaveSampler(solver={'topology__type': 'pegasus','qpu': True})
Hi, and thanks for your bug report.  This doesn't look like a bug in minorminer.  Details on that in a little bit.
But first, to address your problem, the easiest thing to do is to wrap your DWaveSampler in an EmbeddingComposite, and sample your qubo from there
The above code will call minorminer automatically.  If you'd still like to produce and examine your own embedding, you can do so as follows:
Back to the subgraph issue, in case you're interested.  It looks like minorminer is producing an embedding into pegasus_4 fine, but pegasus_4 is not a labeled subgraph of the sampler you're using.
As an experiment, you can verify that pegasus_graph(4).edges is not a subset of pegasus_graph(16).edges with the following code:
So what's happening is that minorminer can only embed into the edges that are provided to it.  There is currently no mechanism to directly translate the pegasus_4 graph into the sampler's topology; and sometimes, because the sampler's topology is not precisely a pegasus_16  graph, it may be impossible to find such a translation.  While you can work backwards from the sampler topology, to produce a subgraph similar to pegasus_4, this is probably a long enough digression from your interest.  But, feel free to ask for those details here if you're curious.
