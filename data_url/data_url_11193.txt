In the function get_molecular_hamiltonian of the molecular_data class, you go from spatial orbitals to spin-orbitals for a given set of molecular integrals to initialize an InteractionOperator:
I think the factor 1/2 is confusing here. This will cause the two_body_coefficients in this function and the InteractionOperator.two_body_tensor to be 1/2 times the molecular integrals. Maybe it would be better to incorporate this factor 1/2 in the InteractionOperator object intrinsically, such that the InteractionOperator.two_body_tensor gives you back exactly the integrals?
Hi @Emieeel I understand how this can be confusing but I think it is consistent with what is output to Interaction operator.  InteractionOperator is strictly coefficient * operator (in matrix form).  There is a 1/2 in front of all the coefficients when defining the Hamiltonian in the spin-orbital basis.
I agree that there is a bit of confusion here so maybe we can elaborate on the documentation in this function.  Another nice thing would be to have the spin-orbital interaction matrix (antisymmetrized <pq||rs>) which corresponds just to the integrals be available from the molecular integrals or active space integrals.  More broadly, having functionality to get J, and K matrices so we can supply methods like Slater-Condon rules would also fall into a similar upgrade.  Are you interested in working on these things?
I see, I understand you would have the InteractionOperator representing not only Hamiltonians with this convention but rather general operators.
I could incorporate a function to return the antisymmetrized integrals and J and K matrices within the InteractionOperator or Molecular_data class, would that be useful?
Yes that would be a really great addition.  Within the MolecularData class is the most appropriate place.  I would recommend writing stand alone functions and then exposing those functions through the MolecularData class.  That way we can use those tools later and we won't be burdened with instantiating a MolecularData object.
Oh, and do you want them in the basis of spatial orbitals or spin-orbitals? I think spatial orbitals (i.e. the one/two_body_integrals object) would be sufficient for doing Slater-condon type calculations as openfermion works in the restricted formalism as far as I know.
Spatial for J and K are fine for all cases.  For the antisymmetric integrals I think you need spin-orbital version...but I'll check on that
