Similar to #2170 , but for QuantumCircuit. The possibility of arbitrary data in circuit.data makes modifying or replacing the internals of QuantumCircuit difficult and error prone (see discussion around circuit._append in #2824 ). We should:
@mtreinish can you take this one please?
Thinking about this more, I don't know if we are ready to deprecate write-access to circuit.data yet. As of now, circuit.data is the only exposed way to modify a circuit, and we shouldn't remove that ability without a plan to replace it. Do we have an idea how frequently users access circuit.data?
The motivation here was to sanitize QuantumCircuits internal data structures so that operations like merging circuits could be more performant, but maybe another approach (like making circuit.data a List subclass that validates/broadcasts when modified) would achieve the same goal.
mtreinish/qiskit-core@deprecate-circuit-data-write...kdk:circuit-data-proxy-poc has some scratch work towards one option for keeping circuit.data as a validating proxy interface for circuit._data.
The goal would be to leave the circuit.data interface unchanged, but add validation so that circuit._data can be assumed to have been validated, so that we can build out a more performant set of circuit manipulation primitives.
Thoughts? What do people prefer? If this seems like a reasonable approach, I'll extend it onto @mtreinish 's PR and add some tests.
A feature in Ignis uses .data() heavily to insert gates into a circuit. Will there be a way to do this if it gets deprecated?
To be specific, it needs to be possible to take a given circuit and create a new circuit which is identical to the old, but with some arbitrary gate inserted at some arbitrary point.
Edit: This is currently done in Ignis by creating a blank circuit, and then copying slices of the .data() of the original circuit into the new one.
Hi @quantumjim , the title of this issue is somewhat outdated (see the two comments preceding yours, and the PR #2838 ). The current plan is for circuit.data() to remain in place with the same list-like interface, but with changes to circuit.data() being validated to make sure they are of the right Instruction, qargs, cargs format. Existing code should continue to work.
Can you link to the example in ignis that works with .data()? It would be handy to have as a test case.
Thanks!
The relevant part of Ignis is in here: the _make_syndrome_graph() method of GraphDecoder. Any incompatible changes in .data() can be expected to cause this test to fail.
