When transpiling cirq to qiskit, the qubit ordering/indexing of the resulting circuit is not consistent with the original, nor is it self-consistent. In other words, multiple transpilations of the same cirq circuit result in multiple different qiskit circuits, each with a unique qubit ordering. To see if the matrix representation of a cirq circuit is equivalent to that of a qiskit circuit, one must flip the ordering of the qubits in one of the circuits, because the "to unitary" functions are implemented differently for each. However, this error seems to be an issue with how we track qubit indices internally because simply flipping the qubit order does not resolve the issue. See qBraid/tests/transpiler/test_circuits.ipynb for an in-depth explanation with examples.
the issue came from the cirq_circuit.all_qubits() function, which generated a set of all qubits. iterating through the set did not achieve the sensible order for a list of line qubits, and at this point the ordering was permanently off. Users can now specify a particular input_qubit_mapping, which is a dictionary mapping qubit objects (such as line qubits) to indices. eventually, we will want to allow users to specify a complete mapping in the transpile function, which will be a kwarg labelled output_qubit_mapping
