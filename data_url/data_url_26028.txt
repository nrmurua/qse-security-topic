yah, you are right, so pytket qasm doesn't support some gates like iswap, that's why I purposely commented todo, those tests will be added like qiskit after doing a transpiler like braket_cirq, that will take some time, as there is some special gate are not able to direct add_gate from cirq to pytket, so require extra if else statement.
reference: https://github.com/CQCL/pytket-cirq/blob/develop/pytket/extensions/cirq/backends/cirq_convert.py
I also saw the same issue for pyquil as well, which also can be done similarly by define own gate like cirq custom_gates.py.
@junliangtan1 Gotcha. Yeah we probably want to stay away from implementing anymore custom cirq gates, since that approach isn't very scalable. Instead, if it's the qasm to pytket methods that are breaking for specific gates, we could implement some pre-processing of the qasm string to replace the iswap and other unsupported gates with an equivalent gate decomposition that will be compatible with pytket.
I faced a similar problem with qasm to cirq conversions earlier. Certain qasm strings (mainly ones generated from qiskit circuits) were not compatible with the cirq's default circuit_from_qasm function. So I created a function convert_to_supported_qasm which takes an input qasm string and replaces unsupported gates with equivalent decompositions of other gates which are supported by cirq. So, in addition to increasing the coverage of the cirq parser with our own circuit_from_qasm function, we pass the qasm string through a pre-processing from_qasm function, which removes the barriers and calls the above-mentioned convert_to_supported_qasm function so that everything passed to the parser is able to be processed.
Taking this approach for iswap and other gates for pytket shouldn't be too difficult. Just follow the logic used in qasm_preprocess.py:
