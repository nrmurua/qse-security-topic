Description of the issue
Cannot serialize identity gate when using SQRT_ISWAP_GATESET.
How to reproduce the issue
Cirq version
If we decide to add serialization for Identity, it should also be added to the new CircuitSerializer.

I might be interested, but I can certainly yield on this one.
I don't think this gate should be serialized, as it has no effect by design in the hardware (and this serialization is only for Google hardware).
I would support cirq.I gates being stripped by default from serialization.
Confirmed with @viathor that we should just strip these gates out when serializing.  Let's do this in CircuitSerializer too.  @verult
Per @maffoo 's comment, there is a use case for serialize identity gates, and they should be serialized along with their tags. And in general, a user's circuit should be serialized as-is as much as possible to avoid surprises.
@maffoo is identity gate tag serialization a use case we need to support right away? If not, I propose piggybacking on an existing gate type in the Program proto until the use case comes along.
Chatted with @verult about this; IMO we should add a separate IdentityGate case in the Operation proto if we want to serialize identities, because the serialization tries to preserve gates as closely as possible instead of converting to "equivalent" gates (e.g. we have separate cases for XPowGate vs PhaseXZGate). Until then, I think we should fail if trying to serialize identity gates, and it would be up to the user to remove them (we can add helper function to do this if needed).
(we can add helper function to do this if needed).
Just FYI: We already have cirq.drop_negligible_operations transformer to achieve this.

What about GlobalPhaseGates? I'm assuming they are ignored by hardware as well, so they should be handled the same way?
Yes, I would suggest handling them in the same way. When serializing, fail if we encounter unsupported gates. We can add transformer support for removing them from circuits, or we can add cases to the Operation proto to allow serializing them if desired.
We could probably serialize both for ease of user use, but, since this is not backwards incompatible, and there is a easy work-around, I think this can be post-1.0 if necessary.
