It would be cool to have a backend specification for the IBM Accelerator that set at initialization time the physical backend as the one that had the least number of jobs in the queue. Something like
Note the optional need to specify how many qubits your job will need so that you don't get back a backend with too few qubits.
Ultimately this will require an update to the IBMAccelerator::initialize() method to pull the backend info from the remote server using the Rest Client, and pick out the backend to use accordingly.
Hi, I am interested with this project and would like to work on this issue (it looks like a "least_busy()" method from Qiskit).
It seems I'll have a few questions about about testing this functionality (Which mode It is possible? Auto, or only manual?) and about detailed content of 'HeterogeneousMap' parameter.
Hi @flatslm
The HeterogeneousMap parameter which is passed to IBMAccelerator::initialize and subsequently updateConfiguration is like a Python dict (containing key-value pairs).
Hence, for this task, we just need to handle two additional keys as described above.
Yea, it is similar to the least_busy() method from Qiskit and the idea is to implement a similar logic via the REST API.
In initialize, for example, at some point, you'll see that we have a list of your_available_backends and info about all these backends.
You could use that to determine which ones have enough qubits and query the queue status to select the lowest-queue-count device.
Hope this helps!
I created a PR draft with minimal functionality (#451 - will be cleaned etc.), and have a few questions:
Thanks
PS. But request of reservations is not clear yet.
Hi @flatslm
IMO
Yes, if you could provide all these additional filters, it'd be great. Just make sure to provide options (HetMap key) to change the filter values if need be. For example, the reservation lookahead window.
From the task description, I'd say just filter out devices that are not active and select the one that has the shortest queue should be good enough.
I think you don't need to worry about the simulator in this case since we don't need to submit remote jobs to the simulator. We have the Aer simulator integrated locally in XACC (see xacc/quantum/plugins/ibm/aer/accelerator).
i.e. you can assume that we only work with real hardware devices in this IBM accelerator.
Yea, examples (C++ and Python) should be sufficient. For Python, you can take a look at xacc/python/examples/
BTW, looks like you need to sign the Eclipse CLA.
At #451 Implemented backend selection functionality with a minimum size of the queue. At the same time, backends are filtered according to the following conditions:
And after increasing the number of fields and methods of the IBMAccelerator class, there is a reason for refactoring this class.
