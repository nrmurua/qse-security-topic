Right now there are three options for waveforms: piecewise linear, piecewise constant, and sin. This functionality should be expanded:
Additionally, the addition of waveforms is restricted only if the total times match. Perhaps relax this, so that waveforms can be added together at different times, assuming that the strength is zero outside of the function's domain.
Hi Jonathan thanks for the feature request, I revised your issue to bullet list for easier reading. Github issue actually supports markdown so it would be nice to make use of it.
Sin is extremely under-implemented, as you cannot change the frequency nor the phase. Recommend adding frequency/phase/cos options.
I agree we can have more options for sin, but also defining a custom function is extremely easy with Waveform:
this is why we have a rather simple support of sin here, perhaps we should just remove the sin pulse and ask people to use sin directly.
Apologize: I realize Waveform was missing docstring yesterday, so you might not see it when you write this issue
Add more function support
Can you point out what use-case each function type corresponding to? otherwise I think user should just put a fft function as first argument of Waveform which is already quite simple to use. I'd say unless we have a concrete experiment/simulation task that uses these type of pulse otherwise it will be relatively restricted to implement a built-in waveform comparing to letting users to just use the general one.
general functions (might clash with autodiff)
We support general functions via Waveform object (actually all the built-in pulse are Waveform object). In principle any Julia program that does not restrict type bounds should work with forward mode AD (unlike Python ;-)), so it shouldn't clash.
Additionally, the addition of waveforms is restricted only if the total times match. Perhaps relax this, so that waveforms can be added together at different times, assuming that the strength is zero outside of the function's domain.
This is a design decision made by @fanglifl @GiggleLiu and I, but I'm kinda open to change this decision, it is actually a bit hard to tell which is better without a concrete use case, any idea what would need this feature?
so that waveforms can be added together at different times, assuming that the strength is zero outside of the function's domain.
I think if we are gonna support this then we should allow users to add offset to waveforms so that they can decide where is zero. But I'd like to see a more concrete use case to actually decide this otherwise I'd rather error until someone actually hit the error with a use case
One use case could be variational algorithms or general Hamiltonian engineering/optimal control. Having flexibility in how to construct waveforms would be great in that regard. Is it possible to append wavefunctions? EG, /-_ + |---| = /-_|---|__ an addition operation that lets you concatenate two waveforms together. Right now addition simply adds waveforms together, so it would require some overloading or good definitions.
EG, /-_ + |---| = /-_|---|__ an addition operation that lets you concatenate two waveforms together. Right now addition simply adds waveforms together, so it would require some overloading or good definitions.
you mean https://solid-journey-b55ed955.pages.github.io/dev/ref/#EaRydWaveforms.append-Tuple{Waveform,%20Vararg{Waveform}} ?
One use case could be variational algorithms or general Hamiltonian engineering/optimal control.
By use case, it would be preferred to have a concrete one. It would be nice if someone can write up a quick example of this type of use case using existing tools, to see if existing tools are sufficient or we should actually have a convenient wrapper, and decide what detailed feature this wrapper should have, I'm a bit skeptical about this feature request since the polynomials are already quite simple to define in Julia: https://juliamath.github.io/Polynomials.jl/stable/ but I'd like to hear other ppl opinion
@fanglifl @GiggleLiu
