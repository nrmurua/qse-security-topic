I'd like to use Artiq version 6.0 in a flake based environment and I noticed there's no flake.nix in that branch.
Perhaps copying most of the flake.nix at branch master right to branch release-6? Is there anything else that will need consideration?
I also noticed there are flake inputs that are not flakes, and that there are many derivations defined in the flake that are built with srcs that are not locked in the flake.lock. Would you be willing to also accept a PR that will do something like this:
Imagine the same change would be done for all other packages have an src = fetchFromGitHub {...}.
Generally we do not add features to release branches, only fix bugs. But you are welcome to provide your own flake.nix for ARTIQ-6 somewhere else.
Is there anything else that will need consideration?
The Rust compiler, LLVM and llvmlite need to be changed, since ARTIQ-6 uses OR1k and a modified toolchain, whereas 7 uses upstream and RISC-V.
As for reading the version from the flake inputs, qasync.sourceInfo should be the way to go - I'm not sure if reading the lockfile is a good idea.
Generally we do not add features to release branches, only fix bugs. But you are welcome to provide your own flake.nix for ARTIQ-6 somewhere else.
Perhaps you would consider adding this flake never the less? It's not a new feature per say IMHO, it's just making it a bit easier to use this package with tools (nix flakes) that were not present at the time it was developed. I was thinking about maintaining my own fork for this task, but only as a last resort.
As for reading the version from the flake inputs, qasync.sourceInfo should be the way to go - I'm not sure if reading the lockfile is a good idea.
Similar nix code is written in https://github.com/edolstra/flake-compat/blob/master/default.nix so I think it's not such a bad idea it it came from the main developer of Nix. What exactly do you mean by qasync.sourceInfo? The src-qasync doesn't have such an attribute as sourceInfo.
You don't need a fork, you can simply put the flake in a repository on its own and reference the ARTIQ repos as a source.
BTW I suspect you underestimate the difficulty of getting or1k rust to work, maybe this flake isn't really worth the effort. Why not use 7 if you want flakes?
Seems for non-flakes input the information is at the top level:
In any case why not just src = src-qasync instead of duplicating fetchFromGitHub?
You could also perhaps define qasync-version = "0.10.0" and use it in the source input and buildPythonPackage, and avoid reading the lockfile and other complications. Maybe it can be a passthrough attribute into src-qasync.
In any case why not just src = src-qasync instead of duplicating fetchFromGitHub?
You could also perhaps define qasync-version = "0.10.0" and use it in the source input and buildPythonPackage, and avoid reading the lockfile and other complications. Maybe it can be a passthrough attribute into src-qasync.
Interesting ideas indeed, thanks!
BTW I suspect you underestimate the difficulty of getting or1k rust to work, maybe this flake isn't really worth the effort. Why not use 7 if you want flakes?
I'm currently not near my artiq device, but I had trouble interacting with it when I tried using version 7 from the flake last time I checked. Plus, at our team we tend to appreciate the stability of version 6 vs 7. Perhaps it'd be possible to use version 6 with the nix scripts at https://git.m-labs.hk/M-Labs/nix-scripts ? The channels setup explained here is very imperative.
I'm currently not near my artiq device, but I had trouble interacting with it when I tried using version 7 from the flake last time I checked.
Did you reflash it? ARTIQ-6 firmware cannot talk to ARTIQ-7 software, as I mentioned the CPU is different.
Did you reflash it? ARTIQ-6 firmware cannot talk to ARTIQ-7 software, as I mentioned the CPU is different.
Yes, that sounds familiar, we had a warning regarding firmware version mismatched, along with Python errors filling our screen. I see now there are instructions to flash the firmware here. I will look into it more once I reach the hardware, thanks a lot!
Lastly, as for the idea of using non flake inputs instead of raw fetchFromGitHub, I'm not sure I understood you thoroughly. Indeed it's much nicer to use the flake inputs as are for an src, but the sourceInfo attribute seems to be part of the artiq flake, and you imply that I can get the git ref or the git revision of the inputs with this attribute?
Yes, try just src-qasync.rev for the git revision. Seems ref is not available.
Yes, try just src-qasync.rev for the git revision. Seems ref is not available.
Cool that worked. So before I go ahead and iterate over all sources in the flake.nix, do you have any objection to using the lock file for qasync for example? I think It'd be better to use this method for the version of pythonparser as well.
Using the sourceInfo-like attributes is fine, reading the lockfile directly I'm not sure.
Perhaps it'd be possible to use version 6 with the nix scripts at https://git.m-labs.hk/M-Labs/nix-scripts ?
Yes - just use the artiq-fast folder and select the ARTIQ sources with -I artiqSrc=....
I don't think there is any clear action to take in ARTIQ, so closing this Issue.
