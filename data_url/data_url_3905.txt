In this issue, I aim to address the limitations observed with specifying 2-qubit operations in OpenQL.
To give some context, a 2-qubit operation in the current control architecture requires the triggering of up to three different waveforms. One implements the operation itself, the second implements a phase-correction and there might be the need for a third, which would park another qubit at a different frequency.
Currently, there is only support for the specification of a single codeword per quantum gate. Therefore, for a 2-qubit operation, both targets will be issued the same codeword. This will not allow the proper implementation of 2-qubit gates.
It is the goal of this issue to discuss ways to implement 2-qubit operations such that:
Do you have any ideas or comments on this, @wvlothuizen @jvansomeren ?
see my comment: #303 (comment)
Some questions:
Some answers and remarks:
I think that the whole notion of codewords should be fully contained in the backend, since different hardware implementations (e.g. Qblox) may not use codewords at all
Completely agree with this. The issue simply did not generalize to this notion since it was not fundamental to get a working system. Nevertheless, we should take this into consideration when thinking about solutions to this problem, such that we don't aggregate the notion of codewords any further in the compiler.
Scalability remarks apart (which I agree are not of the utmost relevance right now), this solution seems like a good compromise to me. Is this currently possible to define a three-qubit-flux operation like this?
If so, why would we then require anything like the following decomposition:
"cz q2 q3": ["cz_sw_ne_park q2,q3,q4]`
could we not simply create a configuration for a target-specific operation? With target-specific operation, I mean an operation for which its targets are fully specified, like in "cz q2 q3". I should also clarify that I use target as a term to denote the qubit on which an operation is applied.
I would very much like to see the algorithm that we discussed during the meeting,
i.e. given the topology and a fully specialized operation such as "cz q2 q3",
which waveforms related to which qubits should be generated?
In which cases would an override be useful?
Note that the scheduler constraints will mimic this so have to know this as well
(the affected qubits cannot be involved in a parallel cz or rotation or measurement).
So I would prefer a description in the configuration file similar to the resource constraints,
i.e. similar to detune_qubits.
Speaking of the detune_qubits constraint, does it still apply?
Note that there is currently a decomposer pass that listens to cz_mode.
What is wrong with that? It seems that was targeting the same issue.
@wvlothuizen we should also test the triggering of multiple operations (across different instruments) through a single gate definition. An example would be the triggering of multiple flux pulses (for cz operations and parking) in addition to multiple microwave operations (virtual-z phase updates), with every CZ gate that is scheduled.
Tests to perform:
We have tested the mechanism to translate a gate without parking into its equivalent with a corresponding parking operation. Furthermore, we tested the new 2-qubit gate decomposition scheme for arbitrary number of qubits, including for the specification of simultaneous parking operations.
