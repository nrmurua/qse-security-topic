These are all types within our IR and should not live within an implementation library (they currently are in pulse_lib). They probably should live in a module qiskit.pulse.types
@taalexander Just to clarify.
pulse_lib should remain, but would just contain the sampler subdir and continuous.py and discrete.py
üëç
parametric_pulses.py, pulse.py, and sample_pulse.py would move to a new dir, pulse/types
Any imports of those 3 modules in the code would have to be updated
Just the classes ParametricPulse, Pulse and SamplePulse would have to move and should live in a new module types. The implementations could continue to live in pulse_lib.
I don't see the need for any new tests, just updating the imports in the test files
üëç
Are there documentation changes required?
I think we should add a reno noting they have been moved. Please look at the documentation in pulse_lib to see if there are any links to these classes and if so these should be moved to the new types module which should be included in the documentation. of qiskit.pulse.
Also wrapper objects for ParametricPulse and SamplePulse should be left where they exist currently and inherit from the new location. When initialized they should emit a warning saying their location has been moved before initializing the object. This will be easier if the calls to ParametricPulse and SamplePulse use namespace imports, eg., import qiskit.pulse.types as types and call types.ParametricPulse rather than from qiskit import ParametricPulse.
Ok, so instead of a types dir, there would be a new types module in pulse that would now contain the 3 classes.
When you say the implementations could stay in pulse_lib, are you saying that for example, the class Gaussian and others would stay in parametric_pulses.py in pulse_lib. But pulse.py and sample_pulse.py would go away since they only contain the base classes?
If there's agreement on structure, I can get started on this and then dig into the docs to see what changes are needed there.
One other thing - when I looked at the docs for ParametricPulse and clicked on the Source link, at the top it showed it in pulse.commands.parametric_pulses.py. There is still a file in commands and also a sample_pulse.py, both which have deprecation warnings. Should these be removed now, and are you suggesting we leave the 3 source files in pulse_lib with these style deprecation warnings?
When you say the implementations could stay in pulse_lib, are you saying that for example, the class Gaussian and others would stay in parametric_pulses.py in pulse_lib. But pulse.py and sample_pulse.py would go away since they only contain the base classes?
If there's agreement on structure, I can get started on this and then dig into the docs to see what changes are needed there.
I think ignore what I said. The user-facing import is still in qiskit.pulse so we shouldn't have to be worried about gracefully deprecating changing the locations of these classes in the internal namespace of qiskit.pulse.
One other thing - when I looked at the docs for ParametricPulse and clicked on the Source link, at the top it showed it in pulse.commands.parametric_pulses.py. There is still a file in commands and also a sample_pulse.py, both which have deprecation warnings. Should these be removed now, and are you suggesting we leave the 3 source files in pulse_lib with these style deprecation warnings?
Yes I think we can remove these after the release of 0.13 which is happening today.
Ok. Then to summarize,
A few more things.
Ok. Then to summarize,
Yes this sounds excellent üòÑ
A few more things.
This package has since been condensed into a single module, the __pycache__ in your repository is likely just a remnant of this.
If this import is from pulse_lib this should be changed as well.
What was included here was what has been intended to be exposed to users at the top-level of pulse for common use.
Thanks.
No, thank you üòÑ.
Do you want me to remove the channels dir? I'll get started on this. Working on 2 other issues right now, so may be a few days. I'll give you a progress report when I have something.
I don't think its tracked in the git repository. Thank you üòÑ
Ok. I'll try removing it and see if it affects anything. Like to keep things neat..
@taalexander From pulse/commands/__init__.py
I assume this means that the entire commands dir can be removed also. There seem to be other
implementations of all the classes referenced here that are not in the deprecated list above, except for Command, which has a deprecation warning in pulse/instructions/instruction.py.
Just out of curiosity, when deprecation messages are inserted like this, is there some reason that there's no date or release # included. No way to know whether this was done yesterday or a year ago.
In parametric_pulse.py, this is part of the doc string at the top.
The new pulse must then be registered by the assembler in 'qiskit/qobj/converters/pulse_instruction.py:ParametricPulseShapes' by following the existing pattern:
Are the references to commands the old commands dir and how should these be referenced in the new doc string? Thanks.
I'm a bit confused about continuous.py and discrete.py in pulse_lib. There seem to be many duplicately named functions in these. In parametric_pulses.py there is a line, from .continuous import continuous, but there is no continuous function in continuous.py. Also in the __init__.py in pulse_lib, only functions from discrete.py are imported. Is continuous.py still in use, and if so, how should I deal with the imports?
Actually I see now that Drag uses continuous.drag. That seems to be the only reference. I assume a user could create there own functions using ParmetricPulses and importing continuous or discrete? Anyway I guess these references stay as is.
It appears that FrameChange, FrameChangeInstruction, PersistentValue, and
PersistentValueInstruction are used in the code even though it says these are deprecated in the message above. Other than the test files, which I can change, the only other modules that reference them directly using pulse.commands, are matplotlib.py in visualizations/pulse and qiskit/qobj/converters/pulse_instruction.py.
Soooo, should I leave the commands dir just for these or move FrameChange and PersistentValue somewhere else and update the imports in the 2 modules?
Actually on previous comment, it seems that moving frame_change.py and persistent_value.py into pulse and updating the imports in the 2 files that reference them. Then the commands dir can be removed. Assuming these really do need to be kept.
@taalexander This is where things are as of today.
The next step is to remove the commands dir and clean up any references to it.
I'll give you more details if you want to proceed with this step.
Hello, @enavarro51. Please leave the commands directory in place we have only deprecated with this release, we will go through and do a remove deprecated PR. We have an internal deprecation schedule for which we need to update the codebase to include.
Could you please make a WIP PR so I can see what you have done so far?
Ok, got it. And since this is my first WIP, all I do is put [WIP] in front of the description? I'll get this out today.
Ok, got it. And since this is my first WIP, all I do is put [WIP] in front of the description? I'll get this out today.
Yes, or you can use the new Github feature and mark it as a draft. Thank you very much!
@taalexander Uploaded the WIP. #4176
In light of #4225 and #4204 do you have new thoughts here @lcapelluto?
In light of #4225 and #4204 do you have new thoughts here @lcapelluto?
Hi @taalexander  & @lcapelluto :  #4225 #4204 are work in progress from me. Maybe I can handle this as another issue, but how please direct me?
Closing as won't do
