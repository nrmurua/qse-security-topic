This can be annoying for people that just want to use get_qc to run on the QVM / pyQVM, so maybe we should find a way to disable that.
This might not be the intended use of get_qc, but until pyQuil 2.7 it worked as a nice unified interface to work with either the QVM/pyQVM, and switch between them with a two-letter change.
I've been playing around with the latest version, and it looks like the change was introduced in 7aa16d9, specifically the new compiler version check at the end of QVMCompiler.__init__().
Commenting out self.connect returns get_qc to the old behaviour.
Is it possible to place this within a try-except block on the QuilcNotRunning exception? This way:
If the compiler is running, the version is checked, and the relevant exception is raised
If the compiler is not running, skip the version check
(Aside: the QVM version check doesn't seem to cause the same issue, as this is only ever called if '{}q-qvm' is requested, not '{}q-pyqvm').
@josh146 this affects both the {}q-qvm and {}q-pyqvm versions of the QuantumComputer. I think the shortest path to a solution here is (like you said) to allow people to use the QVM- and pyQVM-backed QuantumComputer objects without a compiler. A solution is in the works.
