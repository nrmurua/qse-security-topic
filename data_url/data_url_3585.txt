Hello there,
I keep getting the same problem after defining a 4qubit gate. If I act with this gate and then measure the 4 qubits I get an outcome. However, it is not working any more as soon as I add an interaction with a fifth qubit. Here's the issue:
Traceback (most recent call last):
Traceback (most recent call last):
File "C:\Users\Pc\OneDrive\Documentos\MÃ¡ster\TFM\Rigetti Computing\3_QRLP_Qudits\0_QRLP_GXOR_gate\1_QRLP_GXOR_gate.py", line 56, in 
data=qvm.run(p, classical_regs, 8192)
File "C:\python\lib\site-packages\pyquil\api\qvm.py", line 132, in run
response = post_json(self.session, self.sync_endpoint + "/qvm", payload)
File "C:\python\lib\site-packages\pyquil\api_base_connection.py", line 88, in post_json
raise parse_error(res)
File "C:\python\lib\site-packages\pyquil\api_base_connection.py", line 105, in parse_error
raise UnknownApiError(str(body))
pyquil.api.errors.UnknownApiError: {'message': 'Endpoint request timed out'}
The server has failed to return a proper response. Please describe the problem
and copy the above message into a GitHub issue at:
https://github.com/rigetticomputing/pyquil/issues
Any idea about which could be the problem related with?
Thanks.
The program code is:
`from pyquil.quil import Program
from pyquil.api import QVMConnection
from pyquil.gates import *
import math
import numpy as np
from collections import defaultdict
#We need to provide a Device object to the QVM if we want to load a QVM
#with noise model
from pyquil.api import get_devices
#We define the function that allows us to show the results as a distribution
def make_histogram(data):
histogram = defaultdict(int)
for row in data:
bitstring = "".join(map(str, row))
histogram[bitstring] += 1
return histogram
#We connect to the simulator of Rigetti QPU
acorn = get_devices(as_dict=True)['19Q-Acorn']
qvm = QVMConnection(acorn)
#We introduce the matrix representation of the GXOR gate
gxor_matrix = np.array(([1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0]))
p = Program().defgate("GXOR", gxor_matrix)
#We can now act with this new gate
p.inst(X(10),CNOT(10,11))
p.inst(("GXOR",11,12,16,17))
p.measure(11,0)
p.measure(12,1)
p.measure(16,2)
p.measure(17,3)
print(p)
#and running it on the QVM.
#We define a list of classical registers to return the values
classical_regs = [0,1,2,3]
data=qvm.run(p, classical_regs, 8192)
#Note that the order when reading the result is the NORMAL one, first qubit
#first, second qubit second,...
print(make_histogram(data))`
Refer to this #465. Let me know if you are still experiencing the same problem.
