On Advanced VQE usage several examples of VQE usage are shown. For example VQE can be used with the aer simulator as
The following code executes without warnings or errors, but does give incorrect answers
If would be good to warn the user (or generate an error) if such combinations are used.
In the example above the default construction VQE(quantum_instance=quantum_instance) fails with one of the default qiskit simulators, so this is something one can expect of users to try.
The 'include_custom' basically uses an custom instruction of Aer to compute the expectation where the outcome is ideal. Its faster than doing multiple circuits and gives an ideal result (no shot noise etc). This was not done by default as users wanted the simulator to mimic a real device by default - and only statevector, via this custom instruction, if explicitly provided.
If you take a configuration that works and change it, while it may work and not crash, it may not produce a good result. VQE only has a guarantee (if you discount noise) that you cannot get lower than the true answer - it does not guarantee at all that you will get the true answer. It may get stuck through poor initial starting point choice. You may need to select a different optimizer, one that can work in presence of shot noise is one that comes to mind. In practice other choices matter too - such as ansatz if you are using a heuristic. When you move to a real device measurement error mitigation would improve matters.
The subject of analyzing a users problem configuration in terms of what they are trying to do and how things are configured such as pointers could be given to possible issues/improvements has been discussed. This is a much larger topic than doing something simply at a VQE level which is most likely not be very meaningful. As such an holistic view/analysis of the input, algorithm, intent etc is done, that could potentially assist the user in the way you are talking about, is potentially useful. Its a complex matter to do this and I don't think the above suggestion is going to help.
What might help could be to add further explanation around usage guidelines in the tutorial to help users navigate in the meanwhile. If you'd like to contribute something like that this would be done on qiskit-tutorials
VQE is now run using a self-contained Estimator primitive and as such the combinations around selecting a backend an expectation object to go along with that etc no longer exist. As this is outdated now, with the the older QuantumInstance based VQE being deprecated and soon to be removed, I am going to close this as its no longer relevant.
