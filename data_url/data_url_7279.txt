Is there a way to use Krylov methods with QuantumOptics.jl, or a plan to support in future?
https://github.com/Jutho/KrylovKit.jl is excellent with specific methods for exponential operators
Alternately, some of the solvers in DifferentialEquations.jl allow Krylov methods in the linear solve step, and also has IMEX methods with exponential operators, which might be a more direct pathway.
There would certainly be interest in having these implemented, and the maintainers would be eager to help, but the current maintainers probably do not have the bandwidth to do it themselves (we are all working on this as a volunteer job that occasionally helps our actual research work). If you or someone working with you wants to give it a go, please submit a PR (even a very draft unfinished one) and we will help with polishing it and merging it.
These two issues should also probably be kept in sync with this:
Alexander did a bunch of work on this issue in #367
There are a few more places where we can pursue this, and maybe fully excise Arpack from this library (as long as KrylovKit is indeed always faster).
Hello @Krastanov and other maintainers. I've experience in numerical linear algebra and have also been working on a few topics on the Julia codebase. I could implement these for QuantumOptics.jl with pleasure. However, I might need some (top level) guidance on what needs to be done. Would you be interested? If so, I'll be glad to discuss the details further with you.
Hi, @aravindh-krishnamoorthy ! That sounds wonderful. Check out #367 - it is a good example of how to provide better defaults for various computational methods, that one specifically looking into the diagonalization tooling.
Places where similar work could be helpful are the steady-state solvers and matrix exponentiation:
The difference between QuantumOptics.jl and QuantumOpticsBase.jl is that the former contains various simulation of dynamics tools, while the base package defines the fundamental datastructure and various linear algebra operations between them.
@Krastanov Perfect! Thank you very much for the pointers. I'll get started!
Perhaps this is the most logical first step as this gives me an idea how the existing solutions are implemented. Once I'm done, I'll start with the KrylovKit support for functions.
