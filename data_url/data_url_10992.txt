In _jellium_test.py if one changes "grid_length" in test_kinetic_integration to 3 or 4, my computer runs out of memory and freezes. I have no idea why this is since at 3 qubits its still only an 8 by 8 matrix. @Spaceenter, any ideas what is happening here?
Using simple print debugging method, I tracked down what's really slow is this line of code:
https://github.com/Spaceenter/FermiLib/blob/develop/src/fermilib/utils/_sparse_tools.py#L246
The path to get there is:
test_kinetic_integration() -> eigenspectrum() -> sparse_eigenspectrum()
@babbush
And the matrix that numpy.linalg.eigvalsh() is evaluation is (for grid_length = 3):
[[ -3.99680289e-15+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j ...,
0.00000000e+00+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j]
[  0.00000000e+00+0.j   4.38649084e+00+0.j   0.00000000e+00+0.j ...,
0.00000000e+00+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j]
[  0.00000000e+00+0.j   0.00000000e+00+0.j   4.38649084e+00+0.j ...,
0.00000000e+00+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j]
...,
[  0.00000000e+00+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j ...,
4.82513993e+01+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j]
[  0.00000000e+00+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j ...,
0.00000000e+00+0.j   4.82513993e+01+0.j   0.00000000e+00+0.j]
[  0.00000000e+00+0.j   0.00000000e+00+0.j   0.00000000e+00+0.j ...,
0.00000000e+00+0.j   0.00000000e+00+0.j   5.26378901e+01+0.j]]
So it's weird that numpy.linalg.eigvalsh() cannot handle this matrix (looks simple from first appearance), trying to understand what numpy.linalg.eigvalsh() is really doing under the hood.
@babbush
Sorry, the size is actually pretty large, I overlooked "..."
The tuple size is 262144 (just one dimension) for grid_length = 3.
Isn't the number of qubits something like (grid_length)**dimensions * (spin factor).  So length 3 for 2D should be something like 18 qubits for spinful model, which is a 2^18 x 2^18 dense matrix roughly? Which is quite large.
Dense meaning the current representation, not factually dense with a sparse representation of course.
Yeah but this is a 1D model!
Are you sure? I changed n_dimension to 1, and grid_length to 3 and 4, both work well.
@babbush
Just takes a few seconds.
n_dimensions = 2
Is the first code line of the test in question, and the dimension counting matches exactly, so I'd say this is a 2D model.
Hmm, yes, my bad. I was either looking at older code or misread things before. It seems like the models are working well now (or maybe always were). I will close this issue. Thanks guys.
