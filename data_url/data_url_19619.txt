Hi Oscar,
Thanks for this very nice and useful implementation of MWPM.
It would be nice to allow multiple components in the decoder graph and have the decoding be done in parallel on the different components.
For a simple example, consider the XZZX surface code at infinite bias. Here, the decoder graph is disconnected lines and the two logical operators span two subsets of these lines. In this case, decoding can be done in parallel to find the correction+noise on all these lines.
From your source, it appears that this change can be made without a lot of effort.
Thanks,
Arpit
Hi Arpit,
Many thanks for the suggestion, I think it's a good idea to allow multiple connected components.
The reason that graphs are currently only allowed to have one connected component is that it simplifies the process of checking that a perfect matching can be found. If there is only one connected component and the parity of the syndrome vector is even, then a perfect matching can be found. If the parity is odd, then only a single boundary node needs to be flipped. This property is currently used in a few methods: Matching.decode, LemonDecodeMatchNeighbourhood and WeightedStabiliserGraph::AddNoise. I think it is a good idea to allow multiple components and instead check for valid perfect matching problems by checking the parity of each connected component, so I do plan to add this feature. However I can't just remove the check for a single component right now as it would lead to runtime errors if users are not very careful.
In the meantime there are still ways you can solve your problem using PyMatching in it's current form, as I'm sure you're aware. For example, you could solve the matching problem for each component separately, or connect the components with edges that have a very large weight, and make sure that you keep the parity of each component even yourself.
Hope this helps,
Oscar
Hi Oscar,
Thanks. That makes sense.
The main advantage is being able to decode all components in parallel but that is something that the user could do at his/her end. I did use large weights for my own implementation because it was the easiest and to avoid dealing with nested parallelism.
Thanks,
Arpit
Hi Arpit,
Ah I see, thanks. While I can see the appeal of parallelising the decoding of each component, I don't have plans to implement it myself. Since most QEC simulations are embarrassingly parallel anyway (can just split batches of Monte Carlo samples between processors), I think there are diminishing returns to parallelising the decoding problem itself, especially as the runtime of the local matching decoder is approximately linear in the number of nodes. I'll keep in mind the possibility of allowing multiple components without raising an exception as mentioned in my previous comment but will keep it low priority for now. Happy to accept parallelised decoding of separate components as a contribution if someone solves this problem for their own research anyway though.
Thanks,
Oscar
In 6b6f4ee I've added support for multiple connected components. If the graph has multiple connected components, PyMatching will check the parity of the syndrome in each component separately when decoding, flipping a boundary node of a component if it has odd parity. If a component has odd parity when decoding but does not have a boundary node specified, then a ValueError is raised.
I added the support for multiple connected components to the PyMatching v0.4.0 release
