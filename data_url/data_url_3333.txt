QCSQuantumProcessor.qubits() and QCSQuantumProcessor.qubit_topology() return information from the ISA without taking "dead" qubits into account—that is, they return information straight from the raw ISA. QCSQuantumProcessor.to_compiler_isa(), however, filters the nodes and edges and marks dead anything without gates. If one were to try to, say, construct a Program that addresses all available qubits and/or edges on a lattice via qubits() or qubit_topology(), they might run into strange-looking errors or the compiler might bend over backward to accommodate the original program in light of the current limitations of a device.
Perhaps an optional argument to qubits() & qubit_topology to remove things that aren't currently active on a QPU lattice?
I wonder if there's any good reason not to just make that the default behavior. What might someone want to do with .qubits() or .qubit_topology() involving qubits they can't actually use?
Some benchmarks might want to look at readout fidelity or some such for qubits that don’t happen to have any gates available, I suppose.
Here's a workaround/suggestion for what the proposed optional argument might instigate:
Those pyQuil v3 methods, ie qubits and qubit_topology, were designed without intention of being consistent with what Quilc expected. I wouldn't want to change that design now because it would represent a breaking change; we should add an optional boolean kwarg to return what @genos spec'd out above when set to the non-default value.
Code golfed version which may work for some scenarios:
This should be solved implicitly by #1496
