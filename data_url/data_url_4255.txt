An engine is like a compiler pass. It makes no sense that a compiler pass "breaks" after you use it once, so it can't be used again in another compilation call.
Anything and everything about engines that violates the ability to treat them as re-usable pieces should be separated out.
Most compiler engines have an internal state, so re-using them does not make sense unless you reset that internal state (so you might as well create a new object).
If that's the case, then the "engine list" should be a list of engine-state-creators. Keep the configuration data separate from the state data.
This is why default_engines creates the list and is not itself a list of engines.
The reason we do not want to enforce this in general is that it becomes very cumbersome to use.
In general I would say that ProjectQ has far too much mutability throughout its design. This is one of the more egregious cases, because compiler passes are the kind of thing you configure and then keep around,
The user might want to access the state of a compiler engine (e.g., resource counts, circuits, ... at intermediate compilation steps). So it is easiest if the user can provide a list of objects which he/she can access after compiling the quantum program. It then also doesn't make sense to re-use this engine_list for, e.g., a different quantum program.
The fix you pushed has helped with this a lot.
I do still think it's a good idea to somehow extract the engine linked list so that it is not inline with the engine instances, but I think you addressed the core of this issue.
