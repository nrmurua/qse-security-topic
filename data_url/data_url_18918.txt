Instead of:
just drop the colon:
Two reasons I strongly suggest this change:
I would prefer consistencies and agree it is currently inconsistent. The initial proposal was to have types after ids for parsing simplicity, but this would require a separate declaration keyword like var or let, eg., let x: int[32] = 1024 vs int[32] x = 1024. See https://golang.org/doc/faq#declarations_backwards and https://softwareengineering.stackexchange.com/a/316219. IIRC the parameter and type were initially written with name then type def f(name: type) with Python/Rust like syntax but someone swapped them.
Unless we adopt a syntax like
let x: int[32] = 1024; (parsing is simpler), I believe we should have c-like types in signatures as well (as you suggest).
I'm certainly a fan of let x: int[32] = 1024; because that means in the future we could support dropping types when it's obvious like let my_length = 10Âµs; rather than let my_length: length = 10Âµs; (but that's not a huge priority)
As you mentioned consistency is the most important thing there. OpenQASM claims to be a "C-style language", so that is certainly an argument for type name rather than name: type.
We were actually thinking of dropping that claim of begin a "C-style language".
I'm definitely a fan of moving towards a "Python style language" (with types... and braces...).
Would we necessarily need a let keyword? Python gets away without it
I'm definitely a fan of moving towards a "Python style language" (with types... and braces...).
+1, I think within the scope of OpenQASM this would nicely fit within a family of modern procedural languages Go/Rust/Python3/Swift with the addition of quantum specific operations.
Would we necessarily need a let keyword? Python gets away without it
Python gets away without declarations because an assignment is more of binding a name to a value, than declaring a variable to exist. Personally, for clarity and readability, I would prefer to keep an explicit declaration (for now). Having declaration, types, and assignments be clearly demarcated in the language will make the initial implementation easier. If we figure out type inference we could later take the Go approach and introduce := to declare and assign. We could go the Swift route and use var for variables, let for constants.
-1 to :=, it's a common source of frustration in Go and not needed
let would be okay with me for variables, I think we already have const for constants
Emoji poll for the two options. Either option should be used consistently across declarations, argument lists, kernel functions, etc. Discussion can still continue below
ðŸŽ‰  Vote for option 1 type name
ðŸš€ Vote for option 2 name: type
let is already being used for aliasing: https://qiskit.github.io/openqasm/language/types.html#aliasing (which I believe is only supposed to be for quantum bits and registers). It also doesn't include the type. Perhaps we can get rid of let and require the explicit type to be declared (also extending this to any type)? If we do this, we'd have to allow concatenation/slicing on any assignment, rather than exclusively for the let keyword.
Then, in option 1, we'd just have length name = 10Âµs without any let.
Also, on the topic of ordering consistency, we currently have qubit q[size] and bit b[size], but int[size] i, fixed[size, size] f, etc...
Should we make this ordering consistent?
Also, on the topic of ordering consistency, we currently have qubit q[size] and bit b[size], but int[size] i, fixed[size, size] f, etc... Should we make this ordering consistent?
Agree with making ordering consistent, personal preference for qubit[size] q (or in the other order q: qubit[size])
Agree with making ordering consistent, personal preference for qubit[size] q (or in the other order q: qubit[size])
This implies a semantic difference given the current representation of parameterized types. On one int[width] specifies a type of width int[width] name [size] specifies a size integers of width. Following this representation qubit[width] implies a hardware "qubit" register of width whereas qubit name [size] implies an array of qubits.
In the context of no parameterized types I prefer above as well @stevenheidel. This is a topic @blakejohnson and I have discussed at length and we have yet to arrive at a solution. If we could make it work consistently we would be keen to do it.
This implies a semantic difference given the current representation of parameterized types. On one int[width] specifies a type of width int[width] name [size] specifies a size integers of width. Following this representation qubit[width] implies a hardware "qubit" register of width whereas qubit name [size] implies an array of qubits.
Makes sense. We should clarify if arrays of standard types are allowed--the spec doesn't include something like int[32] x[5] (for an array of 5 32-bit integers). If you could do this, I'd argue they are consistent (since bits always have width=1 and qubit isn't defined by classical bits).
I do not have a  problem with the colon in the type:arg declaration.
I do, however, have a problem with the inconsistent and incompatible way of declaring functions, kernels and defcals.
Currently, and apparently, at least two forms of syntax are proposed:
At first, I thought this was a typo in the OpenQASM3 Spec.
We need to settle on a consistent syntax. The two syntax examples above are inconsistent and incompatible with each other.
The OpenQASM3 Spec states that the language is loosely based on C. Then we should stick to C.
We can't have an inconsistent collection of syntax grammars for something as simple as a function declaration. What is the functional and/or semantic advantage that is derived from having at least two 100% incompatible ways of declaring a function?
Is there any semantic difference whatsoever between:
and
?
Thank you.
@steleman, I agree with you that the inconsistency above is bad and a separate problem. I apologize for pointing you to this issue as I misunderstood your initial objection. Would you mind creating this as a separate issue that must be addressed?
The OpenQASM3 Spec states that the language is loosely based on C. Then we should stick to C.
I think the team needs to have a discussion about this topic. I agree with this present in the spec, the choice is clear.
Opened #131.
Decision: the combination of consistency + backwards compatibility means that we are going with type name (no colon).
Closing as a decision has been made. This particular issue is addressed in #190
