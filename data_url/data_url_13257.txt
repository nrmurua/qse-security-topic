Currently, if we want to interface mitiq with quantum packages that not listed in interfaces submodule, we can take the following workaround:
However, this workflow is not straightforward and error-prone. Since we have defined from_cirq and to_cirq anyway, a better integration would be a hook to register these two methods to convert_to_mitiq and convert_from_mitiq. Then the above work flow will be simplified to
Namely, just native user experience as the currently supported quantum software packages.
For now, the extension on convert_to_mitiq and convert_from_mitiq is impossible since the two function are hand coded if else branch with no user customized fallback. Therefore, a possible API for the hook and the corresponding implementation may be as follows:
Hello @refraction-ray, thank you for your interest in Mitiq!
If this is a bug report, please provide screenshots and/or minimum viable code to reproduce your issue, so we can do our best to help get it fixed. If you have any questions in the meantime, you can also ask us on the Unitary Fund Discord.
Thanks @refraction-ray, we'll think about your proposal.
Honestly, the solution of your first code snippet doesn't look so bad to me.
It requires two lines of codes (manual insertion of from_cirq and  to_cirq functions). The proposed solution also requires two  lines of code:
Do you have strong arguments in favor of the second approach?
Thanks for your reply.
Do you have strong arguments in favor of the second approach?
Yes, consider the scenario of three parties (user, mypackage developer and mitiq developer) instead of two parties (user and mitiq developer). It is mypackage's developers responsibility to implement to_cirq, from_cirq and register these new interfaces in mitiq. All these implementation are in mypackage module (say mypackage/mitiq_interface.py). So that users of mypackage can directly use the following code (regarding mypackage similar as packages with mitiq native support)
Ah, now I see the advantage thanks! Sounds interesting to me.
I'll ping other Mitiq devs:
@nathanshammah, @natestemen, @Misty-W
I personally really like the idea of allowing user-defined to_mitiq/from_mitiq functions that hook into our code. The solution proposed by Shixin seems like a good one.
I'd like to pick this one up, but if anyone wants to collaborate I'm certainly happy to get some new folks involved with Mitiq as well!
Tagging @unitaryfund/engineering .
