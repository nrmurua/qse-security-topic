When using values out of range (examples below for qubit positions and pulse detuning), the ValueError exception could indicate the minimum/maximum authorized value to make fixing the issue faster. The value is used in the test just above so printing it looks easy at first glance.
Illustration for min qubits distance

Illustration for max pulse detuning

Hi @romainfd , thanks for the suggestion! I will tag it as a "good first issue" for whoever wants to tackle it.
Hi! I've been doing so for the new functions Register.hexagon() and Register.max_connectivity() (soon to be PR-ed), so I might just as well continue for others.
Fortunately, some of them already do, like Channel.validate_duration() for instance.
Anyhow, this will be a good opportunity to:
By the way, I found almost no checks for None on parameters. Testing against allowed values will result in a TypeError (see Ordering comparisons).
Do we want to add checks and throw an explicit ValueError with a message rather than this default behavior ? This is already the case in Register.draw(), SimulationResults.sample_final_state() and Variable.build() but nowhere else.
@LaurentAjdnik thanks! I agree with your suggestions, although I think it would be better to do them in a separate PR if possible, otherwise the one you're currently working on might get too big.
Regarding checks for None on parameters, those do sound a bit of overkill to me, but I will accept them if you feel they are necessary.
@HGSilveri: You can assign this one to me, as it is related to #157.
@LaurentAjdnik If you're satisfied with the changes from your last PR, I'll close this, just let me know.
@LaurentAjdnik If you're satisfied with the changes from your last PR, I'll close this, just let me know.
Yup, let's close this one. We might PR a few adjustments in the future but no need to keep this issue open.
