Is your design idea/issue related to a use case or problem? Please describe.
Based on the #3808, #3233, #3785 and other discussion around changing the measurement Results, proposing some high-level design ideas below for discussion. Once a consensus is reached, this will be developed into an RFC.
Names below are only descriptive, final names might be better.
Describe your design idea/issue
Proposal based on inheritance (inheritance was decided in Cirq Cynque):
Strategy pattern (built on another suggestion in #3808 and much simpler):
[Future work/Classical data] Take in MeasurementKey->ClassicalRegister mapping to populate classical data during the run in addition to populating the native data structure. FlatMeasurementResults might take an Index->ClassicalRegister mapping
A third option to toss into the hat: just use arrays or bitarrays everywhere until as late as possible.
Pros:
Cons:
@Strilanc @maffoo @balopat, thoughts?
I'll work towards expanding on these options in an RFC format
Feedback on Cirq Cynque:
Quick sketch:
Then we'll figure out how default implementations will be layed out.
CC @MichaelBroughton to flag for possible cleanup before Cirq 1.0.
cc @maffoo I think we've made the critical change of moving Result to an abstract base class. Going to mark this as "after-1.0" since we've done the backwards-compatibility-concern part
cc #5152
Do we actually want all the other types of results? I think not really. What do folks think about closing this issue and opening specific issues for specific result types or functionality that is missing?
+1 from me to close this and file separate issues for additional specialized result types if needed.
