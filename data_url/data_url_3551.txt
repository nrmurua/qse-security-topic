Running coding, I have response;
wave = qvm.wavefunction(p)
File "C:\Users\frank3217\AppData\Local\Programs\Python\Python36\lib\site-packages\pyquil\api\qvm.py", line 284, in wavefunction
response = post_json(self.session, self.sync_endpoint + "/qvm", payload)
File "C:\Users\frank3217\AppData\Local\Programs\Python\Python36\lib\site-packages\pyquil\api_base_connection.py", line 88, in post_json
raise parse_error(res)
pyquil.api.errors.QVMError: There is no primary method for the generic function
#<STANDARD-GENERIC-FUNCTION QVM:TRANSITION (27)>
when called with arguments
(#<QVM-APP::PROFILED-PURE-STATE-QVM {10090738B3}>
#<CL-QUIL:UNRESOLVED-APPLICATION {10090703B3}>).
See also:
The ANSI Standard, Section 7.6.6.2
But I don't get what means. Is there any solution?
p.s. The coding is (for solve Linear equation; just realize circuit in lecture);
import numpy as np
import math
from pyquil.quil import Program
from pyquil.gates import *
from pyquil.api import QVMConnection
from pyquil.quilbase import DefGate
from pyquil.parameters import Parameter, quil_sin, quil_cos
pi = np.pi
e = math.e
n = 4 #qubit number
A = np.matrix([[3,1],[1,3]])
b_ = np.array([0.439,-0.898])
b = b_/np.linalg.norm(b_)
size = int(math.log(len(list(b)),2))
C_num = n - size - 1 #register C Qubit number
init = np.array([[b[0],b[1]],[-b[1],b[0]]])
dg = DefGate("Init",init)
Init = dg.get_constructor() #Initalize gate
def Unitary(A,k):
vec = np.linalg.eig(A)[1]
val = np.linalg.eig(A)[0]
d_list = np.array([e**(ki1j) for i in val])
diag = np.diag(d_list)
a=np.dot(vec,diag)
b=np.dot(a,np.linalg.inv(vec))
return b
theta = Parameter('theta')
unit = np.array([[1,0,0,0],[0,1,0,0],[0,0,np.array(Unitary(A,theta))[0][0], np.array(Unitary(A,theta))[0][1]],[0,0,np.array(Unitary(A,theta))[1][0],np.array(Unitary(A,theta))[1][1]]])
dg1 = DefGate('Unit',unit,[theta])
Unit = dg1.get_constructor() #Unitary gate
cry = np.array([[1,0,0,0],[0,1,0,0],[0,0,quil_cos(theta/2),-quil_sin(theta/2)],[0,0,quil_sin(theta/2),quil_cos(theta/2)]])
dg2 = DefGate('CRY', cry, [theta])
CRY = dg2.get_constructor() #Controlled Y gate
p = Program()
qvm = QVMConnection()
#prepare initial state
for i in range(n):
p.inst(I(i))
p.inst(Init(C_num))
#phase estimation
for i in range(C_num):
p.inst(H(i))
for i in range(C_num):
p.inst(Unit(pi/(2**i))(i,C_num))
for i in range(int(C_num/2)):
p.inst(SWAP(i, (C_num-1-i)))
for i in range((C_num-1),-1,-1):
for j in range((C_num-1),i,-1):
p.inst(CPHASE(-pi/(2**(j-i)),j,i))
p.inst(H(i))
#Rotation
for i in range(C_num-1):
p.inst(CRY(pi/2**(C_num-i))(i,n-1))
#Inverse phase estimation
for i in range(C_num):
p.inst(H(i))
for j in range(i+1,C_num):
p.inst(CPHASE(pi/(2**(j-i)),j,i))
for i in range(int(C_num/2)):
p.inst(SWAP(i,(C_num-1-i)))
for i in range(C_num):
p.inst(Unit(-pi/(2**i))(i,C_num))
for i in range(C_num):
p.inst(H(i))
wave = qvm.wavefunction(p)
print(wave)
