Regardless of num_iterations parameter, the quantum circuit constructed by Grover algorithm is the same.
num_iterations = 2 or 3 produces the same circuit.
The results of grover.run() with QasmSimulator() backend are similar for num_iterations = 1, 2 or 3 as well.
The behaviour is the similar for 3-qubit Grover's algorithm with oracle = TruthTableOracle('10000000')
num_iterations = 2 or 3 should produce deeper circuits with more iterations of marking and reflection phase sub-circuit.
The counts for marked state should increase when num_iterations increase from 1 to 2, 3.
num_iterations does affect the operation of grover. The management of num_iterations and its effect on the circuit is internal though. If you build Grover and ask it to construct the circuit you get one with a single marking and reflection cct. Now if you run Grover and construct the circuit after the run, you will see with that the circuit now reflects that num_iterations setting.
BTW what are you running above? If you are running Aer there is currently an issue with transpiling that is using the mcx basis gate of Aer which does not match with the gate that is wanted. Qiskit/qiskit#4524 Try running with BasicAer for now, until that issue is resolved. You will see that the outcome does change if you increase num_iterations.
@woodsp-ibm Thanks so much for your quick reply. Your answer is really useful.
Indeed I could see additional iterations after running Grover and the result makes sense now with BasicAer.
grover.construct_circuit().draw()
Do we have to call grover.run() to get the circuit with more iterations? Is there a way to get the circuit directly without running?
Hi, while you can get the circuit before running it only has one iteration. The circuit is built for the number of iterations but its an internal variable that is only updated when the algorithm is run. What would be nice, I maybe should have raised an issue before to potentially enhance things, would that the construct circuit had a number of iterations parameter so the circuit would be what you requested. Anyway I just raised an issue so potentially an improvement can be done - for now it has the behavior you see and is as described above.
