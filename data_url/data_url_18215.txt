Renaming of the local cpp simulator and being a bit smarter for the user. I would like the local_qasm_simulator to default to c++ if the user has it installed and go to python if they have not. The c++ does all the python does and faster. I don't think the user should pick (by default) and they should just get the fastest local simulator on their system. Also i don't want to rewrite all my scripts:-)
in --- pprint(Q_program.available_backends())
out ---
['local_qasm_simulator' ,
'local_clifford_simulator',
'local_unitary_simulator',
]
and using the Q_program.get_backend_configuration('local_qasm_simulator') you could find out which version of the simulator you are using and then if you need to we could have a set function to change it to python if you want to force yourself to use the slower one :-). Or we can list both in the backends and then just have some way of showing the local_qasm_simulator is a soft link to the c++. My main point is for most users they just want to use the best simulator that does what they need.
in --- pprint(Q_program.available_backends())
out ---
['local_qasm_simulator',
'local_clifford_simulator',
'local_qiskit_simulator',
'local_unitary_simulator']
could be then a python version of the Clifford simulator and a c++ version of the local_unitary_simulator (I would argue the c++ version of the unitary is more important so that it is faster).
Yeah, makes sense.
We have been discussing something similar for remote backends in #133
I agree the remote is similar but since hardware is different (each device has different noise) i think giving the user more info is important (but i agree the highest level user just want a device with some number of qubits, connectivity and gate set). However for the simulator i think its a higher priority as by definition they are fundamentally the same just written in a different code base :-).
Hey Jay,
The issue with the new cpp simulator is that it needs BLAS libs via the matrix class.  From an useability standpoint this is troublesome as it requires the enduser to know how to install and link against a blas library.  Thus if you make the cpp one the default, you will be bombarded with installation questions from users you arent as familiar with code building.
From a technical perspective, we already have a precompiled and linked blas via NumPy and SciPy (usually the Intel MKL or openblas) that we can take advantage of already.  One could rearrange the cpp simulator to use via Cython, and call the NumPY blas from there, or one can just Cythonize the current Python simulator and get it to match the cpp simulator in terms of performance ( since Cython outputs c or c++).  Either solution would also allow for more in depth testing by controlling the blas library used in the simulators via the choice of NumPy. We could also avoid mixing blas libs that call openmp, which can sometimes lead to random errors.
Hi Paul. I agree  we dont want too much installation questions. I am more thinking that if it gets installed then you its the default and if not it goes to the python. At the highest level im arguing for as the standard user we dont need local_qasm_simulator1, ... simulator2, simulator3 etc unless they have different goals (qasm, unitary, clifford etc) and behind the scene we default to the best and provided backups to the best if the best cant be installed.  Over time if the backups and best can converge that would be great.
But you also bring up another point is that as the advanced users change the backend simulator code (and all the ones you suggest are good) how do we decide that it has matched the last version etc. I think we really need to start profiling and having a profile test summary. The current C version extends the python in speed and also adds noise so its a great addition that is needed but yes we need to do it in the simplest of ways.
And yes if we can remove the matrix class i think that is a good idea. As you said it just wraps blas which is very system dependent (that part of the code is old code from many years ago).
Closing this. Let's track it in #281 with more concrete proposals.
