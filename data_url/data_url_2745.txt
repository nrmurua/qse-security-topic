The batch_insert method of cirq.circuits.Circuit has some buggy behavior when multiple insertions have the same index. That's maybe an unnatural sort of input, but I encountered this problem when running the EjectZ optimizer on certain circuits because it generated a batch_insert that led to an IndexError as in my first example below. So perhaps the real the problem is actually there, but here are some examples of what happens when you batch_insert with repeated indices.
First example: It can generate an IndexError by attempting to insert operations past the end of the circuit. Suppose the circuit starts with length L and we try to do three separate insertions all at index L using batch_insert. Then depending on the shape of the circuit, batch_insert might increment its shift variable twice while only increasing the length of the circuit once during the first two insertions. The result is that the third insertion is attempted at index L+2, but the circuit only has length L+1. Here is some code that reproduces the error:
Second example: The same effect leads to strange behavior in situations where the insertion is not at the end of the circuit, but no error is thrown in those cases. Here is an example:
I would expect the output circuit to have all of the Z gates come before the X gates, but the actual output is
(0, 0): ───Z───X───Z───
(1, 0): ───Z───X───────
This happens for the same reason as the previous example---the shift variable is incremented twice from the first two insertions---only this time the third insertion succeeds. Note that reversing the order of the second and third insertions changes the behavior of both examples.
I can reproduce the bug. Thanks, this is a very good catch.
This should be fixed now @sleichen Sorry for the delay in fixing this.
