align_measures function can take arbitrary cal_gate to decide minimum alignment time, but actually we can only take u3 due to its implementation.
https://github.com/Qiskit/qiskit-terra/blob/fe458633cfc969a4ac4b5073396a30160b5cdaa8/qiskit/pulse/transforms.py#L30-L36
This is nested function to get the gate duration of input cal_gate. As you can see this tries to bind three parameters to generate a schedule of x gate with u3 instruction.
https://github.com/Qiskit/qiskit-terra/blob/fe458633cfc969a4ac4b5073396a30160b5cdaa8/qiskit/pulse/transforms.py#L118-L124
If we specify x in cal_gate, this binds three parameters though x instruction has no parameter.
This time should be a required duration to generate |1> and |0> state. However this seems to be requirements from our backend and should not be here because Qiskit is backend agnostic. This measurement discriminator cal should be handled by backend and we should be able to remove this from frontend. l think user cannot understand why this minimum duration requirement is here.
I think I have two approaches:
Keep minimum duration and update schedule generation:
Add cal_gate_parameters: List[float] to function argument. We need to check parameter number matching with specified instruction. But we can also remove instmap and cal_gate from argument to simplify the interface.
Remove minimum duration requirements:
User can set arbitrary acquisition time here and the backend should realign acquisition time if they need to insert measurement cal.
Another option would be to create a circuit that applies an x across all qubits and schedule. From that x extract the duration.
Due to the way the imports are structured in the compiler module, this can lead to circular dependencies between circuit -> compiler -> pulse -> compiler but it is possible to negotiate as shown in pulse.builder.
Can I take this up? I'm quite new but would love to contribute and would appreciate some pointers.
Yes, thank you for taking this issue. I like the scheduling approach because it seems to be robust to the backend change so basically you can take that approach :) You need to create circuit that applies x gate to all measured qubits without measurement and feed that circuit to the transpiler and scheduler then you can get the system's minimum alignment time. Or you can use scheduled circuit, i.e. transpling with scheduling_method that gives you only schedule duration without converting into pulses. In this approach you can avoid circular import.
However I'm not really sure if we really need to take care about minimum calibration duration on frontend. I think this really depends on how the discriminator is calibrated within the job. any thought? @taalexander
hi I would like to contribute to qiskit community and am very new to this. I  would  love to work on this problem and get  some pointers to solve them
hi @paniash ! Are you still working on this one?
@1ucian0 Hi! Sorry about the delay. I would love to continue working on this but if it's urgent, then please feel free to reassign it to someone else.
I am new to quantum community and open source. I would love to work on this issue.
@a-freakish Hi! My exams just got over and I'm currently working on this. :-)
Excellent! Good luck @paniash ðŸ˜„ , please let us know if you require any help.
Hi @paniash , any update on this?
@kdk Hi! Sorry, life's gotten in the way. Please feel free to take over or assign this to someone else.
@1ucian0 Hi, I am new to open source. But I am interested in this issue, can you please assign this to me? Thank you.
@rickyzcode sorry for the slow response, I've assigned to you now ðŸ˜„
Let us know if you have any questions, and if you're new to open source I recommend taking a look at the following resources as well:
If you're no longer interested in working on this that's also absolutely fine, just let us know and we'll un-assign you
update: issue has been unassigned and is available for another contributor to pick up
@javabster I would like to work on this. Can you please assign me.
thanks for volunteering @Yagami1729! I'll assign to you. Please make sure to read the contributing guidelines, and take a look at this youtube series for github support
