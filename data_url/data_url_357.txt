I'm not sure if this behavior is intended or not.
CMake downstream integration as described in the docs seems rather wonky.
It seems impossible to add compilation flags to nvq++ from cmake.
Also mixing regular c++ code with cuda-qauntum code seems to produce issues.
Suppose the following directory structure:
project
├─cudaq_code
│  ├─src
│  └─CMakeLists.txt
├─cpp_code
│    ├─src
│    └─CMakeLists.txt
└─CMakeLists.txt
with
project:CMakeLists.txt:
cpp_code:CMakeLists.txt
cudaq_code:CMakeLists.txt
By default, both directories are compiled with nvq++ in this setting, which can results in errors when building regular .cpp files.
There is a workaround for the issue with the compiler selection.
One can specifically set which files to compile with nvq++ by changing the following
project:CMakeLists.txt:
and adding
cpp_code:CMakeLists.txt
cudaq_code:CMakeLists.txt
But still compiler definitions are disregarded for nvq++.
Expected compile command:
$HOME/.cudaq/bin/nvq++ --cmake-host-compiler /usr/bin/c++   -c <src>/cudaq_code/Example.cpp -o cudaq_code/CMakeFiles/ghz_exe.dir/Example.cpp.o --qpu MySimulator
Actual command:
$HOME/.cudaq/bin/nvq++ --cmake-host-compiler /usr/bin/c++   -c <src>/cudaq_code/Example.cpp -o cudaq_code/CMakeFiles/ghz_exe.dir/Example.cpp.o
Not a regression
No response
I think the issue with the compile command is the following

Thanks for posting this @Gistbatch . The downstream CMake integration is still proof of concept, but something we see as a high priority. It is non-trivial to add a new CMake language external to the main CMake repository, as we're trying to do here. I'll take a look at the issues you've come across and see if I can get a fix in soon. Please feel free to look into it yourself too and consider contributing, definitely let me know how I can help you.
It does appear that these SET commands are causing an issue. It's not clear why these variables are being set here.
To be clear, would removing them help @Gistbatch ?
Locally, if I remove them I am able to see that adding -DCUDAQ_COMPILER_EXTRA_FLAGS=foobar does add foobar to the command line when running a make.
