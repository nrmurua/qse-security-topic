Here in the last quarter of 2021, we just demonstrated https://qrack.net, yesterday, which compiles Qrack as WebAssembly, (WASM). WASM doesn't support shared library linkage, as far as I can tell. Hence, the "raw" C++ Qrack API itself is the de facto API for WASM. We learned much from the PyQrack API, and I'd like WASM and Qrack in general to benefit from a backport of those conventions to "raw Qrack."
For year's end, I'll be working on a total renaming of C++ Qrack API methods. In brief, the shared library (or PyQrack) naming conventions and method signatures will be duplicated back to base C++ Qrack, while observing existing real1 and bitCapInt/bitLenInt typing conventions.
To give our community time to prepare, I plan to start the work today and merge it on New Year's Day. Given the work I will personally do to bring our downstream plugins into line, many users of Qrack might not even be affected in any noticeable way. Past 1/1/2022, unless you update any other code to the v7.0 API, you will have to use a previous version of library.
It's best to fix problems when they're small. While we have a surprisingly high number of downloads for PyQrack, for example, users of that API will notice no effective difference. PyQrack code will continue to work with the API it has today, as will our Qiskit plugin, and I will personally tend to our XACC plugin. The Q# plugin, while in need of an update to work with Microsoft packages anyway, is based upon the shared library interface, and hence it will not be affected. (ProjectQ support, while semi-defunct, will also be on my priority list.)
If you target our shared library interface, or second order interfaces in general, you might not be affected at all. However, reach out on this issue, if anyone needs help with migration. The work will commence in a public branch on the main repository, to be merged 1/1/2022.
Happy holidays!
For implementation details, the refactor will likely be done in that branch before the week is out. "Plain-old C objects" ("POCO") and primitive types will drop const reference typing in public interfaces. However, any maintained "power mask" arrays, like a pointer to a list of (1 << n) unsigned integer values to represent qubit index n, will be typed as pointers to const data, as they are always implicitly treated.
See the shared library and PyQrack APIs, for reference. Seeing as the original PyQrack API wrapper was written almost literally in one night, you should have at least a month of time between when I complete the refactor and when I officially merge and release.
I know I said that merge would happen on January 1st. However, I have reached the point where my further development priorities depend on the new v7 API. I'm sorry to cut the notice window short, but my plan is that today is where we mark the official v6.2 release, from the current head of main branch. If necessary, I will respond to support requests for fixes in v6.2. However, it seems to be stable. Then, main will become the v7 pre-release development branch, to be tagged on January 1st.
The reason I'm doing this is because, while I have been updating both branches with any code that doesn't break the v6 API, we've reached the end of that road, because further development depends on exclusive v7 API functionality. So, all this means is that, if you haven't migrated by now, for some reason, use release v6.2, which would otherwise just have stayed the head of main without further development, anyway, until January 1st. (And, if requested, I can patch v6.2.)
e26a206 is likely our commit for v7.0.0 release tag, at about midnight, Eastern time zone. Out of desperate boredom, (confined to my house all week due to family COVID exposure on Christmas Eve, by the way, though never personally developing symptoms,) I made some major changes, last minute, including a major refactor of QUnit::TrySeparate(). The week's progress might have turned out to be for the best, given necessary tweaks to the API method signatures that should be part of the semantically major release, but I just want to run tests in the background of my evening and not sneak in insufficiently tested code in the waning hours of 2021. Let's avoid the need for a v7.0.1 over the weekend, but it's not like development won't continue to roll, in the day-to-day.
Happy New Year! See you in 2022!
Tagged! Happy New Year!
