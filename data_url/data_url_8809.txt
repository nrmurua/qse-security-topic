We should add allocate and release and also add possibility to allocate specific qubit ID.
How would this look like @AckslD ?
Would that be valid code?
CQC_CMD_NEW would just allocate a single qubit right? Could we use the qubit_id in the command header to request what qubit id that qubit should have (See also #29)? And if the qubit_id == 0 then just choose the next id available. (And would throw an error if id not available, see #34). This would mean that qubits with id = 0 should be disallowed.
What about measure vs release? Release should make the qubit and the qubit_id available for use by other users/protocols, while measure should not? How would we re-instantiate a measured qubit?
I guess cqc.close() should also release all allocated qubits.
@LeonWubben Yes, I think that code syntax looks good. Yes, CQC_CMD_NEW allocates one qubit. A possible command should also be q=qubit(cqc) which would then be equivalent to q=cqc.allocate_qubits(num_qubits=1)[0].
Also I would say that cqc.release_qubits should be able to take a qubit-object or a list of such. A question is maybe if we also want q.release_qubit()?
I think using id = 0 for not specifying the qubit id is a good idea.
Yes, I think we should make MEASURE_INPLACE default now which does not release the qubit. But MEASURE (measure-not-inplace) clearly releases the qubit since it is gone. What do you mean with re-instantiate a measured qubit?
Having cqc.close() release all allocated qubits is a great idea.
q.release_qubit() makes sense
There was some confusion about MEASURE not being allowed to release qubits, but on the simulator there is no difference.
On an actual piece of hardware MEASURE will still keep the qubit available for the same process, just for another (unspecified) qubit, or until released.
