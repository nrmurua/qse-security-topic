Currently, a BLAS implementation is needed Aer to build.  However NumPy, which is a requirement, is already linked to a BLAS library.  Under Anaconda, for example, this is the Intel MKL.  It is possible to use this BLAS for Aer as well, a la Cython and the old qasm_simulator that used it.
There should be no problem, as long as it's faster than Apple's implementation. We should benchmark both and compare, we just haven't yet. The choice was more OpenBLAS vs Apple's. My preference was always OpenBLAS, but seems like on Mac, Apple's implementation is arguably faster, so we changed it despite of the fact that there seems to be some non-standard practices in the latter that cold lead to potential problems, or at least this is what other users of this library have been reported.
My point is that NumPy is a requirement that already is built against a specific blas implimentation. The aer installer should automatically link against that. This gives me, for example, the intel mkl for free. This allows one to test against different blas and time them quite easily by simply changing numpy, for example using the â€”nomkl flag in conda.
I see that there are versions of Numpy that are linked against OpenBLAS, depending on where Numpy comes from: Pypi -> OpenBlas , Conda -> mkl.
I guess that mkl version is faster for x86 architectures, but we still need to support Power architectures.
Anyway, letting the user choose their desired implementation sounds like a good thing to me.
I'm labeling this issue as an enhancement for now.
With #543 merged, now we can chose which BAS implementation we want to build with.
It is not clear to me wether qiskit_aer depends completely on numpy (or a set of external packages) or not.
The rationale for the question is:
