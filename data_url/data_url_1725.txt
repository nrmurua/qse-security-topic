Is your feature request related to a use case or problem? Please describe.
I use code to process circuits or circuit-like objects. It would be nice to have a simple check to see if an object can be mapped to a circuit (i.e. if it is an OpTree).
Describe the solution you'd like
Add the @runtime_checkable decorator to the OpTree protocol.
Then I could do isinstance(test_object, cirq.OP_TREE).
Could it be this easy? Would it break anything? I'm not sure...
[optional] Describe alternatives/workarounds you've considered
Implement a function that recurs through an object to check if it is optree-like.
Or see if invoking Circuit on the object crashes.
[optional] Additional context (e.g. screenshots)
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
Documentation for @runtime_checkable includes this warning:
Note: runtime_checkable() will check only the presence of the required methods, not their type signatures!
This suggests that it would not work for OpTree, whose only identifying method is __iter__.
If the end goal here is to check whether Circuit(x) works for some object x, my gut instinct is that your second alternative (i.e. invoking Circuit(x) inside a try/except block) would be the correct solution, assuming that:
If either of the above is not the case, then a pre-check could be worthwhile if it's faster than constructing the Circuit directly.
I am not familiar with the internals of Circuit, so I can't say how expensive it is to invoke it. What about the following:
or maybe we could do something similar with the __isinstancecheck__ method of OpTree?
It seems like getting isinstance(x, OpTree) to work may require a meta-class hierarchy around OpTree, which seems like more trouble than it's worth. is_op_tree looks good to me, though.
is_op_tree looks reasonable, but one possible pitfall is that many op-trees (e.g. those coming from decompose methods) are implemented as generators; if you call is_op_tree on a generator you will exhaust it and then if you try to do anything else with it it'll be empty. As long as generators are allowed I don't see a way to deal with the generically, so I'd lean more toward just trying to use the object as an OpTree and catching exceptions, e.g. try to make a circuit and if it fails then do something else.
@dkafri, can you describe your use case in more detail? Where are you getting an object from where you don't know whether or not it is an OpTree, and what are you trying to do with it?
I am implementing an API for specifying generic noise models. In order to parse the input I need to check that it can be converted to a circuit. For my purposes it is sufficient to check if Circuit( ) can evaluate the input.
