The "Mitiq man" in the paper draft assumes the following library structure:

Shall we restructure the library to match this?
I vote yes since I think it is conceptually clear and allows us to add mitiq.pec.
The structure would be something like:
I think scaling is a good name, maybe noise_scaling to be super clear, but inference could have alternatives, e.g. fitting or extrapolation.
+1 on the restructuring. I find both 'scaling' and 'inference' a good compromise. noise_scaling is more explicit but maybe it is a bit inconvenient as one has to add the _.
May factories be extended to non-ZNE applications? In that case inference could be put one layer above, not under zne.
Also, maybe it could be nice to try to uniform names as in active verbs performing an action, reducing redundancy with the names of the functions that follow. For example:
this option makes it a bit less intuitive to look for things in the structure, but for that one can search functions, but helps with making more evident the action of a given function, e.g.,
I'm sure you know better than me drawbacks of nesting too much.
I see the motivation for the idea by @nathanshammah, but I am not convinced by it. E.g., as a user, I would be tempted to directly call modules as if they were functions (e.g. mitiq.nosie.extrapolate(some_argument)).
So, I would vote for the initial solution proposed by @rmlarose.
My only doubt is this rule https://www.python.org/dev/peps/pep-0423/#avoid-deep-nesting , but I am not sure if it applies to our case.
I agree with you, @andreamari.
Closed by #298.
