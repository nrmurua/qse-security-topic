Statevector.evolve is slow, because it recreates Statevector objects, which itself is a slow operation.
Throw a line profiler on a code segment that calls Statevector.evolve repeatedly.
Creating a Statevector should have little to no overhead.
I profiled some code that uses Statevector.evolve repeatedly, and identified the bottleneck:
Now, creating a RandomState object seems to have tremendous overhead; indeed, the np.reshape operation of tensor is much quicker.
Workaround: after loading qiskit and numpy, run
This is not a fix! A true fix would be to use a newer rng object that doesn't have massive overhead (note that RandomState is legacy code anyhow - and since there's no seed set, it's unclear what the benefit of a separate RandomState object should be within a Statevector anyhow).
Thanks for your great work!
~ Johannes
Nice find. Yes it seems like initializing the rng seed using numpy.random.RandomState in the base QuantumState class is the culprit and has huge overhead.
Changing it to just use np.random unless you user changes it with a fixed seed later I got timings:
I'll add this fix to #4223
is this fixed by #4297?
