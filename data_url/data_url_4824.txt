For a quantum circuit with n qubits, function "c.amplitude" returns the amplitude of a given quantum state. It will work when an n-bit binary string is passed into. An error will raise if the length of the string is not n, except n+1. If an (n+1)-bit string is passed into, "c.amplitude" will return the amplitude of a state corresponding to the first n bits, while the last bit controls the "phase". For example, if a circuit has 3 qubits, and one amplitude is
"000" -> 0.5
then
"0000" -> 0.5
"0001" -> 0.5*j
and j is the imaginary unit
macOS 13.3.1(a)
tensorcircuit 0.8.0
BTW, why tc.about() gives me "module 'tensorcircuit' has no attribute 'about'"?
BTW, why tc.about() gives me "module 'tensorcircuit' has no attribute 'about'"?
you can upgrade you tensorcircuit version: pip install -U tensorcircuit.
Thanks for report the n+1 qubit input case for c.amplitude, can be reproduced, will have a look
turns out it is a feature related to tensornetwork, when there is only one disentangling edge (one extra bit string), the contractor doesn't raise error since unspecified output edge is unique.
See code below:
The output will be:
If you really want to fix it (nothing really wrong if the use specify the correct bitstring), adding a length check at the beginning of amplitude method is enough. Welcome to PR on this error check protection
Thanks for your reply.
I agree. Nothing is really wrong.
But I believe it is worthy to add a length check, because the error message of a (<n) binary string is:
"list index out of range"
and of a (>n+1) binary string is:
"The final node after contraction has more than one remaining edge. In this case output_edge_order has to be provided."
Neither of them is clear for a beginner.
I will give a try.
