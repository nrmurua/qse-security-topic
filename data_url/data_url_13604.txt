Consider decomposing utils classes into multiple classes that would respect the SOLID's single-responsibility principle (https://en.wikipedia.org/wiki/Single-responsibility_principle). It would make it easier for other contributors to develop your library as the project grows and it would make testing cleaner.
Thanks @dlasecki. By this do you mean separating some of the code in utils into modules with a more specific scope?
@rmlarose Yes. Currently, the utils module has 3 responsibilities: simplifying exponents, comparing circuits, comparing dicts. E.g. you might create a module called ExponentSimplifier.py. Also, note that the method for comparing circuits is pretty lengthy. It might benefit from being decomposed into smaller methods - content of each if clause might be defined as a separate method. For the equal method, I also wonder if that would be wise to put it into a class that extends Cirqâ€™s Circuit class. It is usually where equal functions reside.
Also, note that not all methods in the current utils should be denoted as private (leading underscore).
Thanks @dlasecki, I generally agree but utils.py is too small to warrant breaking up at this point. The scope of this issue is large right now so I will close this -- feel free to open new issues with narrower scopes/clear objectives.
Upstreaming circuit equality to Cirq may be useful but is up to the Cirq devs of course. I believe there already is a notion of circuit equality, but not the one we wanted here.
