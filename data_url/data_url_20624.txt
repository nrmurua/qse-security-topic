MacOS Catalina 10.15.7, Xcode-12.1. Branch OQS-OpenSSL_1_1_1-stable.
Most of the test fail:
Configuration:
We haven't been running OpenSSL's make test on macOS.  Are you able to investigate to find more details on the failures?  One question we had was whether the failures occur when building with static libraries versus shared libraries?
Are you able to investigate to find more details on the failures?
I certainly can and will - especially if you offer a guiding hand, telling what to look for, and where.
One question we had was whether the failures occur when building with static libraries versus shared libraries?
I've just built oqs-openssl with shared libraries, and am observing the same kind and quantity of errors.
I must add that while I'm not building the "stock" OpenSSL-1.1.1 (switched to master long time ago), all the tests of OpenSSL_1_1_1-stable and OpenSL-3.0 always pass (and if one doesn't - I report, and more often than not it's fixed in a few days ;).
I certainly can and will - especially if you offer a guiding hand, telling what to look for, and where.
Thanks for this offer, @mouse07410 . So here'd be my take for starters:
Not having a Mac makes this a bit challenging on my side: Are there some logs somewhere showing more output than "Dubious"?
Another question --as we have last sync'd OQS-openssl with 1.1.1h: Could you please check/validate that a "stock" 1.1.1h passes make test on your Mac and that the configuration options between that and the ones for OQS-openssl are identical?
Last point: Could you validate locally that make test on an Ubuntu VM on your box yields the same results I see below? Test OK for me with this config (also clang):
Not having a Mac makes this a bit challenging on my side:
That's where I come into the picture. I have a Mac, and will run whatever tests are necessary.
Are there some logs somewhere showing more output than "Dubious"?
I believe so. Need to dig a little, and maybe ask for help from the OpenSSL gurus. I'll get it and provide the details.
Another question --as we have last sync'd OQS-openssl with 1.1.1h: Could you please check/validate that a "stock" 1.1.1h passes make test on your Mac and that the configuration options between that and the ones for OQS-openssl are identical?
Here's my configuration for OQS-OpenSSL_1_1_1:
Needless to say, I can't replicate it exactly on the stock OpenSSL_1_1_1h because of the small issue of the default OQS groups ;). So this is what I did instead:
Results were very encouraging: all the tests that ran - passed.
Last point: Could you validate locally that make test on an Ubuntu VM on your box yields the same results I see below?
Will do a little later.
OK. Tried to run one test requesting more details, and got a confusing report - it seems that despite being configured with no-shared, the tests look for @rpath/liboqs.0.dylib:
Config data:
liboqs seems to exist only in shared form (liboqs.dylib on Mac), as when I built it I set -DBUILD_SHARED_LIBS=ON.
After re-building liboqs with -DBUILD_SHARED_LIBS=OFF (created only the static library) and re-linking OQS-OpenSSL_1_1_1 with it, the tests are passing.
In general I use and prefer shared libs. Building the OQS-OpenSSL with shared instead of no-shared causes the same error:
The problem evidently is in the @rpath/liboqs.0.dylib, especially since running apps/openssl succeeds (e.g., it finds the dynamic liboqs library just fine:
Another strange thing is - I don't see the OQS ciphers in the above list. Any reason why???
@mouse07410 Thanks for the diligence and tracing down the issue. If I get it right this is now no longer an OQS-OpenSSL issue (tests pass in static build) but rather one for upstream (13413 for shared build)?!?
Another strange thing is - I don't see the OQS ciphers in the above list. Any reason why???
The OQS algorithms are strictly speaking no (classical) ciphers. That's why we chose to "encode" them as groups (or curves, following the EC terminology -- which admittedly may be a confusing term).
If I get it right this is now no longer an OQS-OpenSSL issue (tests pass in static build) but rather one for upstream (13413 for shared build)?!?
I'm not 100% certain yet - but it surely leans that way.
The OQS algorithms are strictly speaking no (classical) ciphers. That's why we chose to "encode" them as groups (or curves, following the EC terminology -- which admittedly may be a confusing term).
Understood, thanks. My concern is this: the main reason for using this OpenSSL fork is employment of PQ algorithms - however I haven't figured how to tell what algorithms the compiled binary supports. Could you help here, please?
I'm not 100% certain yet - but it surely leans that way.
OK - I'll then consider this dealt with for the time being. Please close the issue if/when you're sure.
[...] how to tell what algorithms the compiled binary supports. Could you help here, please?
One trick is to call openssl speed test (any non-existent algorithm name will do) and all groups that have been configured in are output.
Let me close this, for now at least. It's tracked upstream, as the problem does seem to belong to the OpenSSL proper.
