Is your feature request related to a use case or problem? Please describe.
It would be fun to be able to work directly with qubits and gates in the REPL.
Currently all the state is stored in the simulator, so you have to create a simulator and circuit to do anything. This limits ability to play around.
Describe the solution you'd like
Would be nice for qubits to maintain a reference to some shared state vector and gates, circuits, etc operate on that via the qubits. It would be a big project to figure out exactly how that works with simulators, devices, optimizations, noise, and such. But I think once we do something like this, it opens up interesting possibilities like saving the state vectors, persisting qubits between sessions, sharing them, rewinding and retrying things in different circuits or simulators.
If this is done then #3677 would probably follow on whatever we do here.
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
Maybe not. State doesn't really have a canonical representation that is simulator agnostic. So at least a simulator probably has to be involved. Perhaps simulator could expose the act_on function so that you could skip circuit creation? Does that really buy anything though?
I think the core of the issue here and #3677 is that simulator does too much. It is responsible for maintaining and transitioning state space as operations are applied, traversing the circuit, maintaining measurements, among other things.
I'd propose breaking this into at least two separate things: a Simulation Algorithm and a Simulation Engine. The simulation algorithm would only be concerned with creating initial state from qubit sets, and modifying that state based off the current state and an operation. The simulation engine would be responsible for traversing a circuit and feeding operations into the simulation algorithm.
Simulation Algorithm: Init state given qubits, update state given operations
Simulation Engine: traverse circuit using simulation algorithm
This creates a simpler interactive mode, where you only need qubits, a simulation algorithm, and some gates. It also solves #3677 since the simulation algorithm would have the functionality to create a state space from a list of qubits.
Then this allows you to do optimizations and tweaks around the simulations themselves independently of the simulation algorithm. For example, caching, aggregating waveforms, splitting into unitary/non-unitary parts, parallelization, etc. Perhaps there's an opportunity for even further decoupling of simulation engine pieces in the future, but this seems like the first and most fundamental issue to handle.
Need to investigate other simulators and determine whether this type of decoupling is possible.
Closing in lieu of #3686
