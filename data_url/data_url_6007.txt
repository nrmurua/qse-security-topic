After repeated execution of circuits (a common scenario found in variational algorithm),
A example script:
The error typically happen around 100 to 200 loops.
The simulator should be able to indefinitely execute the script.
Not sure.
Your test script is basically launching and backgrounding infinite simulation job subprocesses through python multiprocessing. And for this particular example of a 20 qubit circuit on density matrix simulator each of these concurrently running jobs would require ~18 TB of memory to store the state.
So I think the true issue here is each process is not being terminated with en error for insufficient memory.
As an aside for local simulation you should make sure you block on the job result in the while look so you aren't spinning up an infinite number of async simulation jobs through python. Also parallel execution should be handled through parallel circuit execution of the qobj, otherwise thread resources will not be managed correctly.
Hi @chriseclectic, thanks for the reply. I understand that 20 qubits is not a good example (and I should have called .result() to enforce that the script got run.
But if we have a 10 qubit example, the same loop failed after around 200 loops with the error message:
(actually similar thing happened and inspired me to do the test)
There was a memory leak in the GPU simulator that has been fixed in master (#717 ), that might be the cause for the cuda error you were seeing? This has been fixed in master, but is not in the stable release yet. We are working on a patch release at the moment that might include some of these things.
I will also  try and make a fix for the issue of not raising an error if there is insufficient memory for the CPU case.
Great! Looking forward to the patch!
