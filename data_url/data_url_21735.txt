Issues generating 64-bit integers in ARTIQ compiler. Works in @portable, not on core.
Desired program: convert number from one base to another using division. Using for ad9912 DDS chip running on UMD's hardware.
See doctests above.
This function typically produces 0 when run on the core, probably because binary_freq_tune_word_max is only registering as 0. However, np.int64(10**9) seems to produce the desired result every time.
This says to me that constant folding/propagation compiler passes are not being done by ARTIQ/LLVM on the IR.
Related: #1242 , #1225
This is correct. 2 is a 32-bit integer which you are raising to the 48th power modulo 2**32, which yields 0. Same problem with shifting 1.
int64(2)**48 should work.
And the constant folding passes are being done, but they are consistent with the type system.
Thanks. If constant folding is implemented correctly, it never changes semantics of the code being compiled. As such, your assertions about constant folding happening or not are irrelevant (unless you are trying to highlight a bug in constant folding passes, that is.)
