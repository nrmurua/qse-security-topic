Describe the issue
I was trying to generate random positive semi-definite matrices using the function rand_herm but the eigenvalues clearly don't seem to be random. For example, if I choose the dimension to be 3, then the eigenvalues are always like 3.something or 4.something or 5.something; if I choose the dimension to be 4, the eigenvalues are always like '4.somethingor5.somethingor6.something`, and similarly for other dimensions.
To Reproduce
The terminal output is
Expected Behaviour
The eigenvalues should be random.
Your Environment
The function rand_herm doesn't return a uniformly random sample from the space of Hermitean matrices -- instead it uses by default a simpler procedure of generating a random matrix with moderately sized entries and then calculating M + M.conj().transpose().
The following note in the rand_herm documentation explains how to select the eigenvalues:
If given a list/ndarray as input 'N', this function returns a
random Hermitian object with eigenvalues given in the list/ndarray.
This is accomplished via complex Jacobi rotations.  While this method
is ~50% faster than the corresponding (real only) Matlab code, it should
not be repeatedly used for generating matrices larger than ~1000x1000.
Specifically one may generate random eigenvalues and supply those.
I don't think anyone is against improving the rand_XXX function to have better statistical properties, but they're primarily used for testing and simple trial data at the moment, so their implementations have been good enough so far.
Looking at our algorithm, it does seem a bit questionable for positive-definite matrices, but to be fair, what constitutes sufficiently random?  The eigenvalues being chosen on the interval (0, 1] is also pretty arbitrary.   When you start throwing in extra constraints like "matrix density" and "positive-definite", it becomes difficult to sample a useful measure that has an intuitive definition of random.  We're certainly not against improving the algorithm if you've got ideas, though.
The current algorithm (noted in the docstring) is "diagonal dominance" - basically we add extra stuff onto the diagonal to ensure that the eigenvalues end up all positive.  That's why you see them getting bigger as the dimension increases.  To some degree, it's the intended behaviour.
@hodgestar: this is specifically about positive-definite matrices, and supplying eigenvalues is incompatible with that (though perhaps that's a bug!).  It shouldn't be too difficult to make that work by messing around with the Cholesky decomposition, but that would be hard to get right with respect to the density.
@jakelishman Yes, I was imagining supplying only positive eigenvalues in the list.
Oh yeah, of course.  For some reason I forgot that it wouldn't make sense to specify pos_def with negative eigenvalues in an array.
Supplying negative or zero eigenvalues in the list and pos_def=True is certainly non-sensical input and should possibly return an error (and I think doesn't at the moment).
@hodgestar @jakelishman  Thanks for your responses. What I was actually trying to do was to generate random PSD matrices less than identity. Now, of course, one way is to randomly generate eigenvalues and use rand_herm to construct a PSD matrix. What I was also thinking as I was reading your comments was this - is there a feature to generate random POVM (because POVMs are often used in quantum information)?
P.S.: I am sorry if it already exists, I am fairly new to qutip library
QuTiP doesn't have one built in at the moment, but toqito can do it as numpy arrays, which you can just wrap in Qobj.  There's no scope for density there, though (and it would be very difficult to do so, I think!).
QuTiP doesn't have one built in at the moment, but toqito can do it as numpy arrays, which you can just wrap in Qobj. There's no scope for density there, though (and it would be very difficult to do so, I think!).
Thanks :)
