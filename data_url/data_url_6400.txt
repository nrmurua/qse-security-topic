The QFusion ("gate fusion") layer is currently restricted to basically a controlled single qubit gate model, (and simple cases of qubit arithmetic). Single bit gates are fused. Additionally, controlled single bit gates are fused, if and only if consecutive gates on any involved bit exactly match controls and targets. This is "cheap," but it's not likely to give us many real opportunities for fusion, in practice. However, we already have an optimized "uniformly controlled" single bit gate method, which can specify a different single bit operator for every permutation of controls.
If we base controlled gate fusion on uniformly controlled single bit gates, we can fuse in many more cases, whenever a gate acts on the same target and any subset of controls, (though there is a threshold for when the 2-by-2 matrix multiplications are more/less efficient than directly "tensor slicing"). This might improve performance on the QFT, for example.
I intend to develop the threshold efficiency considerations and expand QFusion with this, if it holds up to further consideration, unless someone else would like to do it.
QFusion has been deprecated, for adding complication without returning performance on top of QUnit. If QFusion is revived, this issue can be reconsidered then.
