Exception objects are dangling pointers and could cause memory corruption.

The exception object is actually a dangling pointer pointing to somewhere in the stack and can be overwritten by other code.
If we copy the exception object before raising the exception, we could avoid memory corruption, but we would get memory leak as we cannot deallocate the object after caught.
Update: This cannot be solved by prohibiting the user to capture the exception object. See example 2.
Prints ValueError.
Prints Should not happen, as the memory for e is overwritten in the second raise.
Expected and actual behavior are the same as example 1.
Adding to ARTIQ-7 milestone as we want to keep runtime compatibility with NAC3.
