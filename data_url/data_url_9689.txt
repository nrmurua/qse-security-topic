Currently we have two patterns for Cython classes and it would be nice to be more consistent
Have a Cython class as a superclass of the Python class
examples: cyVariables and Variables, cyConstrainedQuadraticModel and ConstrainedQuadraticModel
The major drawback of this pattern is it does not allow multiple data types, because Cython does not allow templated classes (nor is such a concept really meaningful).
Have the Python class hold the Cython class as an attribute
examples: cyBQM and BQM
This pattern gives us the ability to support multiple underlying data types, but IMO it's harder to understand and requires a lot of indirect methods like
which adds clutter and maintenance and creates a performance problem (partially mititgated by forwarding_method).
One potential alternative to the attribute pattern would be something like
where we create a stub BQM class that just constructs one of the two other datatype classes. Which themselves can inherit from the Cython classes.
That said, this has some issues. Namely it's a bit surprising for a user, and the docs etc will break.
