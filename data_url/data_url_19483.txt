I have just realised that the set methods behave in different ways when the user tries to rerun the circuit.
In principle when setting the precision, backend and device at the beginning of the program the following code will run perfectly using that configuration.
Now, if I flip the set_device switcher after allocating a circuit, the code will run on the new specified device. However, this behaviour is not same for set_precision, which will raise an InvalidArgumentError because the code will mix gates of different precision. Likewise for set_backend, the circuit will always run using the original backend, no errors are raised.
I think we should address this point, in particular because the code is not raising errors or reallocating circuits with the right configuration.
This happens because the precision and backend are used during gate creation, so doing
the gate will be created in single precision and if you try to run afterwards in double precision it will crash. Note that this is not true for the DistributedCircuit where gate matrices are created during execution (unless the user calls c.set_gates()). This is because the gates have to be created in each device seperately.
On the other hand config.DEVICES is only used during circuit execution so it is possible to call set_device multiple times and re-execute the same circuit without problem.
I think there are two options:
Thanks for the summary, I was thinking about option 2, however the flexibility we will loose could be relevant.
We could just include a simple warning message without an explicit crash for set_precision and set_backend.
