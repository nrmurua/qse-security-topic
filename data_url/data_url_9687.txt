Description
dimod does not parse constraints correctly when we define both lower bound and higher bound in a single line. It dismisses the first part of the expression.
Steps To Reproduce
Output:
{'c08e0e6': Le(ConstraintView({'x': 1.0}, {}, 0.0, {'x': 'INTEGER'}), 100.0)}
Expected Behavior
The above expression should give the same output as:
Output:
{'cb82aca': Ge(ConstraintView({'x': 1.0}, {}, 0.0, {'x': 'INTEGER'}), 5.0), 'cdcf213': Le(ConstraintView({'x': 1.0}, {}, 0.0, {'x': 'INTEGER'}), 100.0)}
Environment
Right. We don't currently support bounding on both sides, should either raise an error or support this feature.
I am inclined to go with raising an error, because we would treat this as two constraints under the hood, and the API expects only one (e.g. it returns a single variable label etc).
