Information lost while storing data
I just have a simple circuit and want to store the final state after applying some gates.
If i print the final state with v.draw('latex'), it is giving me the state I need/expect. This is
want to store in a vector, but the data stored is the one that is printed if I apply array_to_latex(v)
which is only 0s.
Why are the floats not properly stored?
#Initialize circuit
qcfinal= QuantumCircuit(12)
one = [0,1]
qcfinal.initialize(one,5)
#Apply some Us
qcfinal.cu(4.26, -1.14, -0.198,0,5,0)
qcfinal.cu(-1.84, 3.54, -2.07,0,5,1)
qcfinal.cu(5.34, 0.186, 2.96,0,5, 2)
qcfinal.cu(-3.31, 4.03, -3.7,0,5, 3)
qcfinal.cu(3.69, -3.84, 3.92,0,5, 4)
sim = Aer.get_backend('aer_simulator')
qcfinal.save_statevector()
result = sim.run(qcfinal).result()
v = result.get_statevector()
#array_to_latex(v)
v.draw('latex')
Just run the code and try both methods of printing the result.
I finally need a vector with the results which are printed by the command: v.draw('latex')
No response
I'm not sure what you mean by "the information is lost".  The vector you get out isn't all zeros, it's just that it's a 4096-element array where only 32 of the elements are non-zero.  Both of those display functions are truncating the output.
The Statevector class already is a vector containing the state, but if you want a raw Numpy array, you can just do v.data to get it.
Thank you really much for the quick answer!
For some reason it is working now. I just might have overseen the values.
Originally I had the following code which I broke down a little bit:
(I think I just oversaw it because of the size of the final matrix)
#Creating the circuit for L time steps
#Creating u_l
u_l1 = ones(40)
u_l2 = np.random.uniform(0,1,40)
u_l = np.concatenate((u_l1,u_l2),axis=0)
one = [0,1]
V = np.zeros((4096,80))
for i in range(u_l.size):
tic = time.perf_counter()
qcfinal= QuantumCircuit(12)
qcfinal.initialize(one,5)
for j in range(i+1):
#Apply U1
qcfinal.cu(4.26, -1.14, -0.198,0,5,0)
qcfinal.cu(-1.84, 3.54, -2.07,0,5,1)
qcfinal.cu(5.34, 0.186, 2.96,0,5, 2)
qcfinal.cu(-3.31, 4.03, -3.7,0,5, 3)
qcfinal.cu(3.69, -3.84, 3.92,0,5, 4)
qcfinal.barrier()
#v.draw('latex')
np.savetxt("Matrix.csv", V, delimiter=",")
Good that you've got your problem solved!
