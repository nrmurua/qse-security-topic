Is your design idea/issue related to a use case or problem? Please describe.
Would be a step in #4582 (comment), but probably also valuable on its own.
Describe your design idea/issue
Currently there's no low-level way to update a Clifford tableau or ch-form given a gate, i.e. there's no equivalent to apply_unitary. Clifford transforms are all done via the act_on protocol, which requires a lot of additional setup to use. It would be nice to have a low-level protocol like apply_to_tableau(gate, tableau, axes), that allows one to interact with a tableau natively without the act_on ceremony. Similar with ch-forms.
Once these exist, we can remove all the act_on isinstance checks and just allow the simulators to fall back naturally to the apply_to_tableau functions. Once this is done, simulators will all function consistently: use act_on for "control" logic (subcircuits, classical controls) and use quantum-state-representation-specific protocols for all quantum calculations.
As noted in the linked PR, while I think this is an improvement, I don't think this is the best solution. The best option would be a protocol that just returns some representation of the gate in a way that any Clifford simulator can use. That would allow 3rd-party Clifford simulators to be built, whereas this current PR is locked to the two cirq.clifford simulators and I believe puts too much state-representation-specific logic into the gates themselves.
If such a thing is possible I'd say we should do that instead. I don't know stabilizer theory well enough to know if such a thing is possible though. (Upon quick review of M&I, it looks like a get_pauli_factors(): Sequence[Tuple[PauliId, Angle, Axis]] (where pauliId is an enum of I,X,Y,Z and angle is one of 1, -1, i, -i) would be sufficient?)
Discussion from the sync:
@tanujkhattar @viathor tinyurl.com/clifford-simulators-refactor
Discussion from sync:
@viathor Can you please take a look at this?
