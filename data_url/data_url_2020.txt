The usual Tuple[cirq.Qid, cirq.Qid] is simple but JSON doesn't serialize tuples.
This concepts appears often when working with different kinds of circuit description and it would be nice to have a specialized class which behaves like tuple (is hashable and comparable) with automatic JSON serialization.
Hey @mrwojtek
Can I work on this?
And for the clarification, it should look like this, right?
We have the following Qubits in the new Tuple.
q3 = cirq.NamedQubit('q').with_dimension(3)
p3 = cirq.NamedQubit('p').with_dimension(3)
Then the tuple should implement an automatic JSON serialization which results in the following JSON string:
["{\n  "cirq_type": "_QubitAsQid",\n  "qubit": {\n    "cirq_type": "NamedQubit",\n    "name": "q"\n  },\n  "dimension": 3\n}", "{\n  "cirq_type": "_QubitAsQid",\n  "qubit": {\n    "cirq_type": "NamedQubit",\n    "name": "p"\n  },\n  "dimension": 3\n}"]
And also the other way around. (from JSON to Tuple)
cirq.Qid is an abstract class. @mrwojtek what types of qubits are you actually trying to serialize? JSON should work fine with tuples, but note that they will be loaded in as lists since there's no distinction in json between lists and tuples. If you're desperate for them to be loaded in as tuples you can:
I would like to store the common Qid types as used in Cirq: GridQubit or LineQubit and what I really need is for this pair of Qids to be a hashable.
The list is not hashable so the conversions as you mention are necessary. On top on that, I not only need to load pairs but also to save them; and Json complains when it needs to serialize a tuple.
After filing for this issue I also realized that I do care that the hash function be symmetric in each of the qubits. This becomes very specific for my use case, and not scalable for tuples with large number of qubits.
In the end, after putting more thought don't think this should become a concept in Cirq and I'll create a specialized solution for my needs.
Feel free to re-open this if you feel otherwise.
