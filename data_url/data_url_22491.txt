Current gateware, runtime, software versions.
I would expect a watchdog exception.
artiq.test.coredevice.test_rtio.CoredeviceTest.test_watchdog runs fine.
The comms cpu runs fine after.
No output on the console.
There should be a "watchdog expired" entry in the core device log. This problem is merely that the watchdogs expiring currently close the connection without reporting a specific error code.
IMHO watchdogs being un-catchable from within kernel code would be ok (if the alternative is difficult). But then I would like to catch them (the connection closing) from regular code.
Making them catchable should be doable by having the comms-CPU assert an IRQ line of the kernel-CPU. The problem though, it asynchronous exceptions in Python have race conditions (http://dept.cs.williams.edu/~freund/papers/python.pdf).
Speaking of race conditions, are you talking about ARTIQ Python or host Python?
The paper talks about a problem in host Python that we would reproduce if we implement asynchronous watchdog exceptions.
We won't have that problem in ARTIQ Python since ARTIQ Python code does not allocate or free resources (except memory but memory is inherently managed correctly in presence of stack unwinding).
The problem happens with all try...finally... blocks, no matter whether they allocate resources or not.
I don't think so. Would you write a specific example where this is a problem in ARTIQ Python?
There is another (independent) detail: what to do when a core device watchdog kicks in while waiting for a RPC to complete.
We should probably unittest this corner case too (not done atm).
Can we move the whole thing to 2.0?
FWIW we can move the "catching watchdog timeouts on the core device" to 2.0. But if it is at all possible, I would like to have the band aid in 1.0 that I mentioned above: where I can catch the watchdog exception in the host-python layer that called the kernel. That seems completely unaffected by the other problems.
