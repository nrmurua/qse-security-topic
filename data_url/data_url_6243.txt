Using BasicAer qasm_simulator, the behavior of a circuit changes depending on the order in which quantum registers are added to the circuit.
from qiskit import QuantumRegister,ClassicalRegister,QuantumCircuit
from qiskit import BasicAer,execute
from qiskit.tools.visualization import plot_histogram
q = QuantumRegister(2, 'cntl')
qout = QuantumRegister(1, 'tgt')
c = ClassicalRegister(1, 'c')
qc = QuantumCircuit(qout, q, c)  # here's where we create the circuit
qc.h(q[0])  # Toffoli gate with two |+> inputs
qc.h(q[1])
qc.ccx(q[0],q[1],qout[0])
qc.measure(qout,c)
backend = BasicAer.get_backend('qasm_simulator')
job = execute(qc, backend, shots=512)
result = job.result()
print(result.get_counts())   # produces expected outcome -- 75% zero and 25% one
q2 = QuantumRegister(2, 'cntl')  # now we do the same thing, but create the circuit differently
qout2 = QuantumRegister(1, 'tgt')
c2 = ClassicalRegister(1)
qc2 = QuantumRegister(q2, qout2, c2)   # just changed the order of q and qout
qc2.h(q2[0]) # Toffoli gate with two |+> inputs
qc2.h(q2[1])
qc2.ccx(q2[0],q2[1],qout2[0])
qc2.measure(qout2,c2)
backend = BasicAer.get_backend('qasm_simulator')
job = execute(qc2, backend, shots=512)
result = job.result()
print(result.get_counts())  # result is 100% zero
The output should be the same in both cases.   I see the expected behavior when using the Aer provider, and when running on hardware.
Thanks for reporting @gregbyrd , actually BasicAer is part of Qsikit-Terra (qiskit-aer is all about performant simulators). I have double checked anyway that everything is working with our Aer QasmSimulator.
Maybe @ajavadia or @chriseclectic can help here though.
Should I move this issue to qiskit-terra, then?  I wasn't sure which to use.
That would be better, sure! Thanks @gregbyrd
BTW @gregbyrd , that might be the same issue: Qiskit/qiskit#1859
Am I right?
It could be the same as this one:  Qiskit/qiskit-terra#1838
I think this was already fixed in Terra 0.7.2, so closing it.
