I am trying to create an exponential of some operators multiplied by time-dependent functions. I am using the standard method to define the time-dependent operators. However, the expm method cannot exponentiate this list format. Is there another way to obtain the exponential of quantum operators multiplied by time-dependent coefficients in qutip?
You can directly call the expm() method on the individual Qobj parts you have, but I'm slightly confused as to what mathematical operation you're representing.  The time-dependent list format represents the sum of several objects, and in general exp(A + B) isn't the same as exp(A) + exp(B) or exp(A) * exp(B), which is why we don't have an expm() method for it.
Maybe Qobjevo can be of help. See this notebook at this point by @Ericgig and @jakelishman
Thank you @jakelishman and @nathanshammah. I am trying to write exp(a*f(t)), where a is the Harmonic Oscillator annihilation operator and f(t) is a function of time to obtain a propagator. I need to check whether the time-evolution I got from directly solving an Hamiltonian is the same obtained from the propagator, for which I have the analytic expression.
The operator a * f(t) is not Hermitian, so taken alone, it typically isn't a valid Hamiltonian.  If your Hamiltonian is actually a * f(t) + a.dag() * conj(f(t)), then the exponential of it is the displacement operator.  You could get a numerical version of that using qutip.displace(conj(f(t))).
If you're looking for more general numerical solutions for propagation, then you should look at our solvers: qutip.sesolve for purely unitary dynamics, and qutip.mesolve or qutip.mcsolve for dissipative dynamics.
@jakelishman
I have collapse operator like

that $\sigma_{y,z}$ are spin matrices.
How to write collapse operators for Mesolve:
is it possible to write it as [C0,[C1,C1_coeff],...] ?or any other way?
I'm not sure what exactly your form is there - the markdown formatting has mangled it.  If you write a codeblock surrounded by three backticks (```) like:
it might help
@jakelishman my last comment was written in a bad way. I edited that. Is it clear now?
If the a are just constants (i.e. not bosonic annihilation operators), then you can expand the exponentials.  Consider the Taylor expansion of e^{i a f(t) \sigma_y}, and you should be able to get to something like cos(p(t)) + i sin(q(t)) \sigma_y, which is the form you want.  If you don't actually have the i in the exponential, you still get a similar thing, but with sinh/cosh instead.
If the a are bosonic annihilation operators, probably best to use mesolve instead, but there may be other tricks/transformations that I can't think of off the top of my head.
yes 'a' is a constant.I have 'i' in 'f(t)' but my spin matrix is 3.3 and I can't use the equation you wrote because it's for 2.2 pauli matrices. If I understood right, you say that except using Tylor expansion I can't right my collapse operator directly like what I wrote.
@jakelishman
Actually it probably doesn't shake out to a single time-dependent operator like I thought it might at the start.  You can still do the Taylor expansion to try (you can find a similar result for 3x3 spin matrices to the 2x2 case), but there's not going to be a cancellation I thought there might have been.
Right now, QuTiP doesn't support arbitrary time-dependence in collapse operators, so if you can't find a way to write it in that form, you might have to do the integration manually yourself until we've added it - the QuTiP guide explains how QuTiP does the integration.
