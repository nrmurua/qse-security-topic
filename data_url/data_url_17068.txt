qiskit.tools.parallel_map defaults to running jobs serially whenever the user is running on windows (since the default behavior of multiprocess.Pool under windows is considerably different from than that of mac/linux.) However, there are still some cases (like transpiling for RB) where there may be potential benefit to being able to parallelize jobs under windows.
I tried removing the windows condition on: https://github.com/Qiskit/qiskit-terra/blob/master/qiskit/tools/parallel.py#L110 and running the unittests locally on my windows vm. It doesn't seem to behave reliably. When I ran the whole test suite I had some hangs which I'm still debugging.
The test_parallel tests failed reliably because test.python.tools.test_parallel.TestParallel.test_parallel_circuit_names the circuit names are split by pid like on *nix: https://github.com/Qiskit/qiskit-terra/blob/master/qiskit/circuit/quantumcircuit.py#L81 (this is probably fixable somehow though). Without that there are duplicated circuit instance numbers which causes the test to fail. Honestly though this test is kind of broken though because all it should really be testing is that 10 circuits got made no that their names are unique if we don't guarantee unique names across processes on all platforms.
Ok got the stack trace from the hang it's:
I assume this is because we don't have fork() and however python is implementing parallel processes on windows something we need to run is not defined. I'll dig some more into what could be causing this traceback.
That being said I'm not sure which test the hang is actually coming from, I just ran all the tests that have transpile in their test id (which was 445 tests) and it worked fine. So I expect it's an edge condition in one specific use of parallel_map that's causing an issue (and is likely why this was disabled). I'll try to track down which test is causing the issue.
It's test.python.tools.jupyter.test_notebooks.TestJupyter.test_jupyter_jobs_pbars every other test passes (except for the parallel circuit name one which we can come up for an independent fix for probably) if I enable parallel processes in parallel_map on windows.
