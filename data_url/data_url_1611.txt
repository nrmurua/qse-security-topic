There's quite a wall of boilerplate code to go along with the cirq.google tutorials to handle the various cases: [simulator, engine] x [colab, ipython, other] x [explicitly set, environment variable].
We should factor this out into a library function that you can call to do auth and get a device and sampler (and maybe an engine? we don't have a simulator analog of engine)
I'm totally pro this change, it would cut a lot of the cirq.google notebooks. I think this would be an ideal starter project for someone.
Can you please give an example of such boilerplate code, I want to pick up this issue, but I am new and not sure of what tutorial exactly is being talked about.
e.g. cell 3 of https://github.com/quantumlib/Cirq/blob/master/docs/tutorials/google/floquet_calibration_example.ipynb
Are these the tasks I am supposed to perform?
Should the line-length be in the final return type, and are the rest of the steps correct?
I am facing the following issues in executing these plans, I have made a PR of my current state, could someone please let me know if I am on the right track and how to resolve these two issue? Thanks.
The code that was copied from the tutorials includes IPython and google.colab, both of which do not have type hints. I am unable to add my stubs. This is what is making the Type check fail.
The other issue is the coverage, the authenticate_user method actually attempts to authenticate on Google cloud, I cannot provide a test project id and processor.
Rest of the work on the PR seems to be complete to me.
