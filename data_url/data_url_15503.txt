I can successfully create DAGCircuit objects by importing them from networkx graphs. Those objects seem to behave correctly, but whenever I try to draw them using the dag_drawer function, I get an error. I verified that the error only occurs for DAGCircuit objects imported from networkx graphs - in fact, I can draw a dag correctly, but if I convert it to networkx and back (new_dag = from_networkx(dag.to_networkx())), then new_dag can no longer be drawn.
outputs
That DAG objects created from networkx graphs have the same properties as those created from quantum circuits.
Honestly, I'm thinking it's time that we deprecate and prepare to remove the networkx converters for the dagcircuit. We originally had them when we first switched to use retworkx because the api functionality was more limited. But, I'm not sure there is much value in having them anymore as retworkx can do a lot more than 2 years ago and we can quickly add any functionality its missing. Is there a particular function or use case you have for converting to networkx graphs?
That being said I think the issue is in the from_networkx has no context about registers and the dag_drawer only works with registers for edge labels and in and out node labels. The graph representation can't really know about any registers with the circuit generally because that's metadata from a circuit . It might be a good use case for a networkx graph attribute to store the registers list, but I think given the pending deprecation I mentioned above it's not worth doing that. The dag_drawer method needs to be updated to work with bits directly and not only work with registers. I'll push up a fix to do this shortly
Hi. Yeah, I see where it's coming from. In my view, networkx is a handy tool for interacting with DAGs flexibly. I'm playing around with some custom transpilation methods, and as a beginner, using networkx means I can find a lot of examples / tutorials / discussion online. But I see where you're coming from, and you might not want to support this kind of usecases.
From my perspective, it would be most flexible to set things up such that if a DAGCircuit can be initialised without some metadata, then all in-built functions that operate on DAGCircuits don't crash even if the metadata is not provided. Alternatively, some metadata could be added by default if not explicitly specified?
