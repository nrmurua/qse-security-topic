I think we can use rmul and lmul to create a class that wraps numpy matrices nicely such that you can write things like
H = 0.5 * X * X + 0.2 * Y * I
or if you want to use labeled qubits
H = 0.5 * X(q1) * X(q2) + 0.2 Y[1].
This would be useful as a base for at least a few cases I can think of
You could even use these as substitutes in other places where we are currently using numpy arrays.
Is * the pointwise product, the matrix product, the tensor product, or the kronecker product?
@ only appeared in python 3.5, so I'm not sure if we can use that for matrix multiplication?
Another thing is that there are implicit kroneckers in the first, and in the second the qubit order is necessary to define the Kronecker order.
I think it's fine for the tensor order to be implicit in the application order. On the other hand, X * X really really looks like it should be the identity to me.
Obsoleted by the introduction of PauliString and PauliSum.
