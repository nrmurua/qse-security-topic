These can be easily implemented by just applying each Pauli term to a clone of the density matrix.
This will be 15 terms (at most two Paulis in each) of existing ops
advice from Cai: probs of 2-qubit inhomogeneous depolarising noise should be passed as a 15-element list with order {IX, IY, IZ, XX, XY, XZ, ..., ZZ}. This is because they'll likely be auto-generated
Note: use pauli product properties (e.g. XZ = -iY, but  XZ rho XZ = iY rho Y (-i) = Y rho Y) to get next density-matrix contribution without having to 'clone away' the previous Pauli
Suggestion from Simon: no state cloning, just use existing dephase function with rotations in between (which can be combined) to change dephase axis from Z to the others.
e.g. (accounting for probs)
dephase // p + Z p Z
rY(pi/2)
dephase // p + Z p Z + X p X
rY(-pi/2)
rX(pi/2) // combine these into rY
dephase // p + Z p Z + X p X + Y p Y
rX(-pi/2)
While this may require more comms than cloning and use of 'add density matrix', it requires no extra memory.
Furthermore, if min{prob(X error), prob(Y error)} <= prob(Z error), then one could first depolarise by min{prob(X error), prob(Y error)}, then dephase Z immediately by the rest, then rotate to max{prob(X error), prob(Y error)} and depol. This skips one intermediate rotation gate, but is awkward code and depolarising requires communication anyway.
Implementation on new_gates by Balint by converting Pauli probabilities to a Kraus map, which was 10x faster than the previous implementation
