Hello,
I'm pretty new to TFQ. I have a basic question.
Say I have a set of  simple quantum circuits that are my training circuits - T
I want a QNN that consists of two parameterized quantum circuits (PQC_1 and PQC_2) , one before and one after the action of the circuits in T. Where PQC_1 and PQC_2 take different parameters.
In summary, I want to be able to train a QNN with the structure: PQC_1 -> T -> PQC_2 -> Measure.
In TFQ it appears that the tfq.layers.PQC structure must always take readout operators, and so this is not fit to my purpose.
Also when I try to use tfq.layers.AddCircuit the parameters do not seem to be stored in the way I want for optimization.
Is there a simple way to construct something of the above form?
Thanks!
There are probably several ways to code this, but two immediately come to mind. If T is of a constant circuit structure (or is a small finite set of structures) that simply vary by the parameters, that is basically the same as a data re-uploading PQC. There are several implementation of this in TFQ, one example can be found in the tutorials section (https://www.tensorflow.org/quantum/tutorials/quantum_reinforcement_learning). If your T circuits are inconsistent, then you could just use the expectation layer (https://www.tensorflow.org/quantum/api_docs/python/tfq/layers/Expectation) and create the full circuits yourself. See a trivial example of that below:
Thanks so much!
No problem! Any updates on this issue or can it be closed?
