I am running an iterative method that requires calling mesolve many times.
At some point, the program crashes. It seems that every time mesolve is called, the list of arguments passed to the gcc complier grows. Eventually that list is too big for gcc and returns errors and stops the program.
I wrote a simplified code that eventually leads to that problem. It took close to 2 hours to reproduce, and but maybe you can figure out a way to reach that point faster (faster calls ? more arguments passed to gcc to make it reach that point faster?). The screen capture shows how many calls were required in my case, how many seconds had elapsed since the program started, as well as how the error manifests.
test_qutip_error.txt

I experienced this problem a while ago, both on my laptop and amazon instances, on Qutip 4.2.0 with Python 2.7.15. Both with the Anaconda and pip installs.
Are there any ways to fix this? I need this for my research. Thank you very much !
If you use functions instead of string as coefficient of your Hamiltonian, this error should not happen.
It should also be faster in your case: string are a little faster (<10%) but take ~1 sec to compile. With 3 sec evolution, the compilation time is not worth it.
If your Hamiltonian is always the same, you can reuse it by setting options.rhs_reuse = True, but we don't have much documentation for this.
Thank you for your answer @Ericgig !
So, even though we are not using any quotes in our code, this internally maps to the string approach ?
I am trying to understand how to do what I want using callbacks instead, I could use a bit of help.
This is what the original code I shared here reads:
I tried to understand the documentation here: http://qutip.org/docs/latest/modules/qutip/mesolve.html
What I think I need to do is the following:
I am a bit unclear whether or not "args" is a list or a dictionary and how I can access it inside my callbacks. I made an attempt but it returns errors: maybe it would be easy for you to fix some lines of this example and tell me if I am on the right track? Or do you have a link to an example, maybe ?
I am just targeting the innermost portion of the code, here:
Thank you for your help !
Array for coefficient are made Cubic_Spline and compiled in 4.2.
In 4.2 when using function coefficient, args can be anything and are passed directly to the function. But must be a dictionary with string as key when using string.
What I would do is:
I have a similar issue when using sesolve, but the way I set up my problem is quite different than the example given by @ShunjiL4t1qbit . As a result, I am not sure how to incorporate the information given in this post to solve my own problem.
Should I go into detail about my problem on this post or submit a New Issue?
Thanks!
What platform are you using?
What platform are you using? @nonhermitian
I am running these simulations on two linux systems: my laptop running on Ubuntu 18.04.2 LTS and my work cluster running on CentOS 7.6.
On the CentOS 7.6 device (the more important to fix), I am running Python 3.6.8 with QuTip 4.3.1, scipy 1.2.1, numpy 1.16.4, and cython 0.29.10.
Just to get the ball rolling, I will go ahead and ask my question here and migrate it if necessary.
My code performs quantum annealing on a transverse-field Ising Hamiltonian as inspired by D-Wave Systems devices which is explained briefly here, but the essential equation is
.
The A(s) and B(s) factors dictate the time-evolution from the initial Hamiltonian to the final Hamiltonian where s is a linear function of time, i.e. s(t) is linear with slope between 0 and some max and 0 <= s <= 1.
In my code, my sesolve command looks like 'results = qt.sesolve(listH, init_state, discretized_times_list)' where 'listH = [[Hx, A(s(t))], [Hz, B(s(t))]]' and A(s(t)) and B(s(t)) and created by using QuTiP's interpolate.Cubic_Spline function that dictates what the A and B parameters should be at each point in time.
When I make successive calls, it is to do several different things. For example, I may change coupling (h and J) values to create a new spin-glass, adjust number of qubits (larger or smaller H), or anneal for a longer or shorter time.
I am not sure how to directly relate this to what has been posted so far, but perhaps I am not fully understanding the point made in #966 (comment).
So my guess here is that pyximport keeps appending args like -O2 -fPIC etc to the call to gcc until it breaks. Not sure if it is a qutip thing or Cython. Why theory needs to be validated as a first step.
So my guess here is that pyximport keeps appending args like -O2 -fPIC etc to the call to gcc until it breaks. Not sure if it is a qutip thing or Cython. Why theory needs to be validated as a first step.
I don't understand the point "Why theory needs to validated as a first step" in relation to your hypothesis on the issue. Otherwise, I will take a closer look at the qutip and Cython source codes to see if I can track something down.
“My” theory, sorry
