Dear Github Community,
I'm brand new to quantum computing. In particular, I looked at Qiskit and, in this regard, especially the mathematical backgrounds. I also tried to understand common algorithms. I find the QAOA Algortihmus particularly interesting. This is also very easy to understand for the MAXCUT problem.
But now I wanted to dedicate myself to the TSP. Unfortunately I don't find any clues for the QAOA algortihmus. That's why I wanted to ask if anyone had any ideas that I could use as a guide.
I find this platform very interesting, and I would also like to thank you for it.
Best regards
Hi, you can look at this tutorial https://qiskit.org/documentation/optimization/tutorials/06_examples_max_cut_and_tsp.html which shows TSP. You should be easily able to switch out VQE there for QAOA.
I will note that Aqua is now deprecated and it contents have been moved elsewhere. Core algorithms, including QAOA went to qiskit-terra, and the optimization logic here, that included TSP, was moved to qiskit-optimization where the above tutorial exists, though I linked you to the published version of it in our documentation; the original is in the folder here if you want it https://github.com/Qiskit/qiskit-optimization/tree/master/docs/tutorials
Hope this helps.
Good afternoon dear community. And many thanks to "woodsp-ibm".
My experiment now looks like this:
TypeError                                 Traceback (most recent call last)
 in 
----> 1 qaoa_mes = QAOA(optimizer=optimizer, reps=1, quantum_instance = backend)
2
3
4
5
TypeError: init() got an unexpected keyword argument 'reps'
I now have two more questions about this. Maybe someone can help me there.
TypeError                                 Traceback (most recent call last)
 in 
----> 1 qaoa_mes = QAOA(optimizer=optimizer, reps=1, quantum_instance = backend)
2
3
4
5
TypeError: init() got an unexpected keyword argument 'reps'
Does anyone have an idea how I can vary the variable "p", in this case "reps"? From my point of view it would be very interesting to look at the reaction of the results here.
Thank you very much. I wish you a great weekend. And best regards.
Hi, QAOA here in Aqua that variable was called p. When the code was moved to qiskit-terra it was changed to reps to be consistent with other ansatzes there which have similar layer control parameter and that is what it was called - short for repetitions. Here is the current QAOA doc for Aqua https://qiskit.org/documentation/stubs/qiskit.aqua.algorithms.QAOA.html
I will note once again that Aqua, this repository, is deprecated, meaning that we will support it for a short period longer but then it will be archived and not used. I would suggest at some point upgrading to the new version so that you are no longer using Aqua - i.e. do a pip install -U qiskit[optimzation] or pip install -U qiskit[all] where all will get you machine learning etc as well. This way you can directly run the tutorial I referenced.
You can get the circuit of QAOA if you call its construct circuit method. Once you have that you can call the quantum circuit draw() method i.e.
Thanks for your comments, it helped me a lot.
Now I have one more question. I'm sorry if this sounds a bit stupid. Am really a beginner.
How can I plot a histrogram for my results, which shows the individual routes with their probabilities / number of shots? Unfortunately I cannot find any method / attributes for this.
Edit: And was there a command in the old version that did the same as "optimizer_time" to get the execution time?
Thank you very much again!
2nd Edit: This is my result trying to plot. I think it is not the plot of the qaoa result.

You can get the state of QAOA at when it completes and returns its result via result.eigenstate. This would be a state vector or dictionary of counts, the latter when you are using qasm simulator or real device.
result.optimizer_time is still there
Thank you woodsp-ibm,
When I try it with the result of Qaoa, I get the following error:
qaoa_result.eigenstate
AttributeError                            Traceback (most recent call last)
 in 
----> 1 qaoa_result.eigenstate
AttributeError: 'MinimumEigenOptimizationResult' object has no attribute 'eigenstate'
I think MinimumEigensolverResult has this attribute. Where Qaoa is a MinimumEigenOptimizerResult.
Is there a other option?
Ok you are not running QAOA directly you are running MinimumEigenOptimizer and passing it an instance of QAOA as the MinimumEigenSolver. If you look at MinimumEigenOptimizer result you will see it has a field to retrieve the result object from the MinimumEigenSolver used, if that is of interest, which it is for you https://github.com/Qiskit/qiskit-aqua/blob/1f2c316c3a1aca1296f45241d14ad8ae5fbe2027/qiskit/optimization/algorithms/minimum_eigen_optimizer.py#L53
So qaoa_result.min_eigen_solver_result.eigenstate
Thank you, woodsp-ibm!
I'm sorry, I also feel a little bad asking you all these stupid questions. But how can I then plot this result in a histogram in order to get a visual overview? Just like to see in the tutorial:

plot_histogram(qaoa_results.get_counts()) or plot_histogram(qaoa_result.min_eigen_solver_result.eigenstate.get_counts()) doesn't work.
How about simply plot_histogram(qaoa_result.min_eigen_solver_result.eigenstate) The eigenstate should be a dictionary of counts already; you do not need to call get counts. Eigenstate  is a vector or a counts dictionary depending on the backend type you run it on - with qasm_simulator it will be counts.
Thank you so much for your help, I really appreciate it. Trying it also on my own, but the following doesn't work either. But it should actually, right?
Okay, if I do the following now, I'll get the result I want. But..
distance
[[ 0. 79. 28.]
[79.  0. 63.]
[28. 63.  0.]]
brute_force_tsp(w, N):
...
order:  (0, 1, 2)  distance:  153.0
order:  (0, 2, 1)  distance:  153.0
Best order from brute force = (0, 1, 2) with total distance = 153.0
Result QAOA with QP:  [1. 0. 0. 0. 1. 0. 0. 0. 1.]
means classicaly:  [0, 1, 2]
Route length:  162.0
best order = (0, 1, 2) with best distance = 153.0
The rounten length is incorrect.
Stil, so far these are all results that can almost be expected. But if I now plot the eigenvector, the result is rather unsatisfactory.

Shouldn't the desired result crystallize out more clearly? I mean here the result that was correctly calculated above. Do you have any idea what is wrong there?
I guess if it can be distinguished as the right solution you could argue its clear enough. And of course in problems there can be more than one solution. With these too its easy to validate the answer that was found to ensure its correct. Do you know whether the optimization process stopped when it found a minimum or did it stop ahead of that, maybe closeby because of maxiter of COBLYLA. You can check how many evals were done on the result.
I believe this discussion is complete so I am closing this issue.
