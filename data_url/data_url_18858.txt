Hello ‚úãüèª
Many real-time systems (sometimes solely) support fixed-point representation for real numbers.
Even though floating-point is usually preferable, fixed-point is sometimes needed (e.g., because of the underlying ALUs, ease of implementation, memory restrictions, or speed requirements of some of the arithmetic operators).
As OQ3 should be able to represent physical circuits, I think it would be beneficial to support a fixed-point type (with specified non-negative sizes of integer and factor parts). This will allow converting a generic OQ3 circuit to a new OQ3 circuit with only fixed-point arithmetic (with some algorithm, optimization, and induced errors obviously).
I further specifically suggest using two's complement for sign representation.
I guess the sizes can be required in compile-time, surely it's OK for starters.
Maybe it can look something like this:
IMHO this is important as the compilation transformations from floating-point to fixed-point might insert ambiguity, errors, and latency (depends on the HW and compiler obviously). Thus, it's vital to allow to express this early as possible in the process.
Open questions:
What do you think about this issue?
This will allow converting a generic OQ3 circuit to a new OQ3 circuit with only fixed-point arithmetic (with some algorithm, optimization, and induced errors obviously).
I would like to point you to the current OQ3 Spec:
https://github.com/Qiskit/openqasm/tree/master/source/language
where you will find many answers to your questions.
What would be the advantage, and use case, of a fixed point type that introduces conversion errors by design?
Thanks for replying so quickly! I did not quite understand your reply.
Also, I'm familiar with the spec. The "open questions" are open-for-discussion questions regarding only the proposed feature (and not regarding OQ3).
The errors are not mitigated by not adding this feature if the target systems only support fixed-point (as some do).
As for the advantage, as I said, some control systems only support fixed-point arithmetic, so an error will be induced somewhere. I suggest allowing to express this issue in OQ3 and enable tackling it as soon as possible, as OQ3 aims to be an MLIR. Otherwise, each compiler from OQ3 to a control system will have to handle this issue on its own.
Obviously, if the agenda is "we only want to focus on HW systems that support floating-point arithmetic", then this feature is less important. üòÖ
We actually had this exact fixed-point type in the language until fairly recently (see #267), but we couldn't really come up with any actual use-cases for it, and it was mostly just making a lot of mathematical operations difficult to work with in a general sense, so we removed it to ease the burdens on implementations.  In particular, about your points:
There is a degree to which we can't hope to represent every possible piece of hardware processing, so we do need to draw the line somewhere.  The classical processing capabilities of OpenQASM 3 are a lower priority than getting all the quantum representations correct, because the (very approximate) execution model we expect to have is that almost all non-trivial run-time classical operations are handled within extern functions, which could be defined in any programming language.
If you have a strong use-case for why we need a fixed type in the core language, in a way that wouldn't be suitable for an extern definition, we could bring it before the types working group again.
Echoing @jakelishman's sentiment:
If you have a strong use-case for why we need a fixed type in the core language, in a way that wouldn't be suitable for an extern definition, we could bring it before the types working group again.
One possible use-case would be if the real-time systems which support fixed-point operations but not floating-point operations, would be likely to arise in important roles in a quantum processing unit, in a capacity other than in representing angle values (which are one fixed-point representation in OpenQASM 3, albeit not of real numbers as such). If there is a reason to expect this to become important, that could motivate us considering once more the inclusion of a fixed type.
I think I now understand your stance on this.
Do we think that dynamic circuits will never include coherence time calculations? A made-up example:
If the answer is "dynamic circuits will only require feedback, control flow, and integer arithmetic", and also we do not want to be able to represent some physical experiments, then the issue is indeed unneeded üôÉ.
Otherwise, I think we should address fixed-point operations, as I suspect most control systems will only support fixed-point.
As for induced inaccuracy: this is exactly why I think it is important to be explicit and allow for this compilation pass to be expressible in the language than hidden underneath.
The TSC discussed this at today's meeting. The basic feeling is that supporting fixed-point directly in the language leads to a great many complications, while at the same time all of the functionality of fixed-point numbers can be implemented using integers, which are supported, resulting in users having direct control over the rich number corner cases. At this point several of us feel that there are more productive ways to spend our time than on trying to address and justify all of the various arbitrary decisions that need to be made to fully support this. We are not opposed to adding support in future.
In your specific example above, the value a needs to be converted to an angle before being used as an argument to the Rx gate. The estimate_phase function might as well directly return the angle necessary. This can be accomplished using integer math and casting to an appropriate bit and then angle.
If there is anyone that is interested in adding language-level support for fixed-point numbers to OpenQASM 3 then we welcome a PR for discussion. Some things that should be addressed in such a PR:
Closing for now, pending on any response to the above questions.
Happy to revisit this issue, feel free to reopen if anyone wants to take up advocating for this feature.
