When pulse.build produces a ScheduleBlock and it is submitted to be executed by the backend via execute(schedule_block, backend) an error AttributeError: 'ScheduleBlock' object has no attribute 'calibrations' . is raised.
Execute should accept a ScheduleBlock as well as execute and this should be submitted to backend.run.
Within execute when matching on Schedule instead match on a Union[Schedule, ScheduleBlock].
@taalexander can I have a go at this?
If yes, would you be able to elaborate what you mean when you say match on Union[Schedule, ScheduleBlock]? Sorry but I was a bit new to Pulse. Thanks!
go for it @TheGupta2012, I've assigned to you ðŸ˜„ You can check out qiskit/execute_function.py for how Schedules are handled, and adapt to handle ScheduleBlocks as well
Hey @taalexander , I have a small doubt. I have added a small unit test for the updated code but the thing is that it is dependent on backend.run or execute function. Since aer-simulator is not installed in terra, the test fails. Is there any kind of workaround for this so that I can correctly add a test for the added functionality? Here's the test I added in test/python/pulse/test_block.py :
Error message :
Thanks!
Hi @TheGupta2012 can you push your test code to your branch please? I'm not seeing your error when I try your test, maybe double check you have all the requirements installed (make sure you've followed the steps here)
@TheGupta2012: Terra's CI pipelines install Aer, so it'll be available on CI.  Locally, you need to ensure that you've installed Aer yourself to run the tests.  If you are writing a test that absolutely requires Aer, then make sure you also put in a unittest.skipIf decorator that checks if Aer is available.  There are some examples of those in the tests if you search for the string "qiskit-aer doesn't appear to be installed" in the tests folder.
Thanks a lot @jakelishman, I did not know that the testing suite contains aer too! I've added the decorator but I wanted to know does the CI pipelines then install all of the qiskit components i.e. terra, aer, aqua and ignis ? Is that necessary to install them from source locally too? Thank you!
If you look in the azure-pipelines.yml file in the repo root, you can see the whole set up procedure.  If I remember correctly, Terra's CI for most of the tests only installs Aer (since Terra and Aer have some co-dependence), and we only install Ignis for the tutorials.
We also only install aer on a subset of ci jobs and only from a release on pypi. We do this very specifically to avoid adding an accidental bidirectional dependency between aer and terra (where aer depends on aer and aer depends on terra, even if just for testing) because the dependency should only be in a single direction (and aer depends on terra).
We also only install aer on a subset of ci jobs and only from a release on pypi. We do this very specifically to avoid adding an accidental bidirectional dependency between aer and terra (where aer depends on aer and aer depends on terra, even if just for testing) because the dependency should only be in a single direction (and aer depends on terra).
I had initially thought that the tox environment I had locally was almost similar to what the pipelines used (for Windows). Thanks a lot for all these insights!
Apparently, when I pushed my test to the branch, it failed with this error: qiskit.providers.aer.aererror.AerError: 'PulseSimulator requires a system model to run.' Would anyone be able to highlight what is missing when I try to run the circuit on the fake backend?
Full traceback : traceback
Taking a look at your code I think It's failing because of line 141 in fake_backend.py where system_model is not being set because it looks like PulseSystemModel (imported on line 139) doesn't seem to exist? Not sure if it used to exist and got removed or something, maybe @mtreinish has a better idea?
I think this is a bug in Terra's FakeBackend caller - #7059.  Abby: PulseSystemModel is in Aer (qiskit-aer/qiskit/providers/aer/pulse/system_models/pulse_system_mode.py), so it doesn't appear in the Terra repo.
