The current implementation of the gate RZ is simply to call Rn(theta, {0, 0, 1}). That is good. The current definition of the rz in the QASM is gate rz(phi) a { u1(phi) a; }. They will end up with two different matrices. Both are correct, but they just look different. Let me illustrate them in this image:

The Rn(theta, {0, 0, 1}) will be in the form of "A"; gate rz(phi) a { u1(phi) a; } "B".
Since the latter looks prettier, would it be nice to shift the phase by Î¸/2, as suggested in the image, before the cmat RZ(double theta) const returns?
How do you think?
Thanks! The only issue is that a phase becomes important in a controlled-operation. Say that the matrix is Id_phi := e^{i \phi} x Identity. Then this unitary produces the same effect as Identity if acting on one qubit. But, if we construct something like CTRL-Id_phi, then the effects are visible, e.g. acting this gate on |00>+|11> will produce |00> + e^{i\phi}|11>, which is not just a phase times the initial state. In our case, we need to be consistent.
Currently the qasm rz returns gt.RZ, see 
But if one uses qiskit, one would expect (as you mentioned), to have rz return diag(1, phase). I am tempted to just make rz return diag(1, phase) (which will be different from gt.RZ, so we implement the qiskit spec correctly.
I assume that the other rotations don't have inconsistencies (rx and ry), do they?
So I ended up implementing rz as the QISKIT specs, i.e. diag(1, e^{i\phi}), and kept gt.RZ as is  in qpp; also documented in ast.h why the choice. Basically now every QASM code is fully compliant with the QISKIT implementation (which is slightly different from the openQASM specs, as you mentioned). The gates in class Gates use the standard Nielsen & Chuang conventions though (the same as the one in the openQASM specs).
Great. A well-thought-out solution. Thanks.
The rx and ry are consistent.
