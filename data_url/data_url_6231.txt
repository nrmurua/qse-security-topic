@padraic-padraic I noticed some unusual behaviour while testing the CH simulator. If I run a bell preparation circuit and insert a t gate (which should not change the output) instead of returning {'00': shots / 2, '11': shots / 2}, it appears to return {'00' : shots} or {'11': shots}.
Test circuit that should return counts = {'00': shots / 2, '11': shots / 2} since the final t-gate commutes with the last measurement.
This returns either counts ={'00' : 1024} or counts = {'11' : 1024} with roughly even probability.
It should return something close to counts ={'00' : 512, '11': 512}.
I'm not sure, I mentioned the problem to Sergey and he is also looking into.
Hey Chris,
This is exactly the kind of caveat I mentoned when it comes to output value estimation.
In the first case, the Bell preparation circuit is purely clifford, so we're sampling using the method for the CH state outlined at the end of  section IV A in
However, for the case of a single T gate, then we have introduced multiple states in the decomposition and the simulator is using the Monte Carlo method to estimate the output distribution. Because there's only a single measurement stage, it tries to optimise by only mixing the markov chain once and then taking n_shots further samples.
But, because our distribution looks like | _ _ |  (in the computational basis), then the markov chain picks a random initial state, converges to one of the two peaks, and then is stuck there as no single bit moves are possible. Try rerunning the circuit with ch_mixing_time=100 and ch_disable_measurement_opt=True.
Given this can come up with relatively simple cirucits, let me know if you think we should alter the default behaviour of the method to rerun the monte carlo for each sample. The method is better suited to cases where the output distribution is going to be non-zero on most amplitudes.
@padraic-padraic adding {"ch_disable_measurement_opt": True} seems to fix this issue so maybe that is a safer default value?
Yeah, if you notice in the tests I set that parameter for a lot of them, while also dialing down the mixing time to speedup repeat shots. I'll make that change and push it with the segmentation fault fix once I've tracked it down.
Sounds good! Would you be interested in making a Juptyer tutorial for using the CH simulator that we can keep in qiskit-tutorials/aer to explain some of these options and best practices / possible pitfalls when using the CH simulator?
Yeah, I'd be happy to do that! I'd actually considered writing a blog post or something similar to help act as a users guide for the method.
A blog post to go with it would be great too!
