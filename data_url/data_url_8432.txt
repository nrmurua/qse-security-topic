Hi,
It seems Qobj.overlap is slower than calling raw numpy methods on full objects when computing a bunch of overlaps with the same vectors. This is typically the case in my rework of the floquet module.
Minimal code to reproduce is:
Which outputs
0.8274698257446289
0.024214982986450195
(numpy version is 40 times faster)
Is it something expected? Thanks
Ok. Wouldn't it be possible for qutip to have an efficient overlap method when the states are dense as well? Like, fallback to the numpy version?
Otherwise, I guess adding a note in the doc about this particular use case, when computing overlaps with dense states might be useful. I did not find anything like this, and it would help make code using qutip more efficient. This could be here for instance.
For most of the operations, e.g. +, -, *, numpy will be much faster than fast_csr when the matrix is dense. There is probably a good case for having an option to convert to full to make these operators when one knows that the data will be dense. However it would reduce efficiency to check density each time. Will take some thinking about to make it in a tidy way though.
A more general discussion of a dense qobj is in #437
The density is actually already computed for you since you know number of nonzeros and shape automatically.
Closing for same reason as #437.
Has this issue been resolved? Because I could see the same problem in the latest version of Qutip too!
Hi @dev-aditya, did you try running the code with QuTiP 5.0.0? It is currently in a pre release which means you need to install it with pip install --pre qutip. This new version introduces many changes and since it is a pre release there may be some rough edges still. The main reason you will see a performance improvement for this issue is the new data layer implementation. In a nutshell, it now supports not only sparse arrays, already present in QuTiP 4, but also dense arrays (numpy-like arrays).  Dense arrays are better suited for this operation and hence you should expect an improvement using them. I hope you can give a try to QuTiP 5 and feel free to let us know how it performs ðŸ˜„.
