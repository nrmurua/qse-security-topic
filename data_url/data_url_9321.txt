Constructing hamiltonian matrix seems to not work for more than 64 atoms. Can be useful to be able to get hamiltonians for more than 64 atoms with blockade approximation where the relevant subspace is actually much smaller.
To Reproduce
ham_subspace=mat(ham, subspace)
Doesn't work for hamiltonian and subspace built on more than 64 atoms, even with a comparably small subspace dimension.
Error output
ERROR: LoadError: MethodError: no method matching ismatch(::Int128, ::Int64, ::Int64)
Closest candidates are:
ismatch(::T, !Matched::T, !Matched::T) where T<:Integer at ~/.julia/packages/BitBasis/svELN/src/bit_operations.jl:190
Stacktrace:
[1] (::BitBasis.var"#38#40"{Int64, Int64})(b::Int128)
@ BitBasis ~/.julia/packages/BitBasis/svELN/src/bit_operations.jl:319
[2] _main_loop(subspace_v::Vector{Int128}, map::Dict{Int128, Int128}, U::PermMatrix{ComplexF64, Int64, StaticArraysCore.SVector{2, ComplexF64}, StaticArraysCore.SVector{2, Int64}}, ctest::BitBasis.var"#38#40"{Int64, Int64}, locs::Tuple{Int64})
@ BloqadeExpr ~/.julia/packages/BloqadeExpr/pdOm3/src/mat.jl:82
[3] _cunmat(subspace_v::Vector{Int128}, map::Dict{Int128, Int128}, cbits::Tuple{}, cvals::Tuple{}, U0::LuxurySparse.SDPermMatrix{ComplexF64, Int64, Vector{ComplexF64}, Vector{Int64}}, locs::Tuple{Int64})
@ BloqadeExpr ~/.julia/packages/BloqadeExpr/pdOm3/src/mat.jl:65
[4] mat
@ ~/.julia/packages/BloqadeExpr/pdOm3/src/mat.jl:36 [inlined]
[5] (::BloqadeExpr.var"#17#18"{ComplexF64, Subspace{Int128, Vector{Int128}}})(x::PutBlock{2, 1, XGate})
@ BloqadeExpr ~/.julia/packages/BloqadeExpr/pdOm3/src/mat.jl:44
[6] _mapreduce(f::BloqadeExpr.var"#17#18"{ComplexF64, Subspace{Int128, Vector{Int128}}}, op::typeof(+), #unused#::IndexLinear, A::Vector{AbstractBlock{2}})
@ Base ./reduce.jl:410
[7] _mapreduce_dim
@ ./reducedim.jl:330 [inlined]
[8] #mapreduce#731
@ ./reducedim.jl:322 [inlined]
[9] mapreduce
@ ./reducedim.jl:322 [inlined]
[10] mat
