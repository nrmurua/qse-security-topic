Using cirq.channel you can get the krauss operator / quantum operator ( https://en.wikipedia.org/wiki/Quantum_operation ) for each operation in a circuit. You can then use this to update a density matrix state (I think). Start with a specified state, apply all the operations, sample from the result. Find optimizations to make it faster in special cases, such as using cirq.unitary first.
Question: does it make sense to have an assumption that the same specific noise operator (e.g. amplitude damping) would apply to each operation in the given circuit?
Yes that makes sense, but it's not part of this issue. Every operation is responsible for saying what its channel is, and we implement it faithfully.
Then this issue isn't really about noise at all then, but rather implementing simulation of channels, right?
So should this issue be based on assumption that every operation already implements SupportsChannel class?
If yes, then adding this dependency seems like a prerequisite to this one.
(E.g. assume that the chosen simulation device would somehow transform the abstract operations from the circuit "blueprint" into channels). Does it make sense?
Perhaps the way to go is to define a SupportsApplyChannel protocol analogous to SupportsApplyUnitary. Any implementation of SupportsApplyUnitary should naturally transfer over to SupportsApplyChannel.
Other option could be to assume that the channels representing noise are inserted into the circuit at random between the "proper" gates (if it would make sense).
DensityMatrixSimulator exists. Does that satisfy the conditions for closing this issue @Strilanc ?
Closing this because it roughly exists.
