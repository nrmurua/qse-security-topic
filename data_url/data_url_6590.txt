
The dostring states "This method returns a result which allows access to the entire wave function". But it doesn't really. The returned SimulationTrialResult hides the final state in a private _final_simulator_state variable.
The array returned in SimulationTrialResult._final_simulator_state seems to be too large by a factor of 2, as if a qubit is being added somewhere.
The object in SimulationTrialResult._final_simulator_state is a numpy array, which causes SimulationTrialResult.qubit_map to fail.
The initial_state method parameter is silently ignored. It does does seem possible to set the initial state.
The test test_cirq_qsim_simulate_fullstate does not test any properties of the final fullstate.
See also: Cirq issue 2755
Other Cirq simulators seem to use the following pattern:
This should resolve items (1), (3), and (5). Regarding (2), IIRC qsim stores its amplitudes as floats (not complex values) which would result in the observed 2x increase in array size. I'll get PRs started to address these.
Item (4) is somewhat of a separate issue: qsim always expects an all-zero input state, but we can add the necessary X gates internally. I'll open a separate issue to track this.
The amplitude array seems to have qubits in the opposite order than I'd expect from cirq. Something like this is needed.
qsim uses the following bitstring qubit order convention: |q_{n-1} ... q_2 q_1 q_0>. If you need |q_0 q_1 q_2 ... q_{n-1}> then it is probably better to reshape the array in C++.
