Add an algorithm interface for computing state overlaps (similar to the ExpectationValues of #6864) of two states, |psi> and |phi>: <psi|phi>.
Computing overlaps is a primitive task that's used in several algorithms, such as quantum kernels or evaluating the Quantum Fisher Information. There exist several techniques to evaluate the overlap, so it would be useful to have this as modular building block which can be plugged into an algorithm. Similar to the expectation values, an overlap algorithm could become a runtime program that backends can provide.
The base class would take two circuits defining the states (or potentially also a Statevector) and allow evaluation of the overlap itself and the absolute value squared of the overlap. We distinguish between the two since there are methods which only compute the absolute value.
The exact design should likely follow the design of the expectation values in #6864, especially in regard to whether the state1/2 can be exchanged via setters or whether the Overlap object is copied upon modification.
Implementations should include:
If the circuits preparing the states are parameterized, the Overlap caches the transpiled circuits for efficient repetitive evaluations. For example, in QN-SPSA we evaluate the overlap of the ansatz with the current parameters and a slight shift in the parameters:
And the quantum kernel and QN-SPSA algorithms could take an overlap (or potentially a factory of overlaps) as input:
