Hi,
I would expect mesolve and the corresponding implementation with a d1 term in general_stochastic to give the same result when the stochastic evolution (d2) is set to zero. However, this is not the case (see the following minimal working example).
Am I mistaken in the assumption that the d1 term should give the same deterministic evolution as what is calculated by mesolve, or is there another issue?
(this is maybe similar to Issue #1379)
Thanks!

For these kind of problems, you should use smesolve, you can see what equation it solve here.
general_stochastic should be used only in last resort. While it allow to use the stochastic solver mechanic with your own functions, it use the same options and mix of Qobj, Qobj.data and array, etc., without the layer to glue everything together...
Here, the issue is that it use the same options as ssesolve and smesolve, which per default normalize the state before computing the expectation values, but do not know that it's supposed to be an density matrix, thus normalizing the state as if it was a ket...  You can pass normalize=False to general_stochastic to obtain results closer to mesolve, but I would recommend not to use general_stochastic in the state it is now.
Thanks for your reply!
The above code was of course only an example for demonstration purposes. The reason to work with general_stochastic is to add a term $ dρ(t)= ... + i f(t) [\sigma_z,ρ(t)]dW(t)$ to the stochastic evolution of the density matrix. Can you recommend a way to do this, without running into the issues you mentioned for general_stochastic? I don't see a way how to do it using smesolve.
You can set sc_ops=[1j*sigmaz(), f]] in smescolve.
The computation smesolve does is:
Which is what you want:
But it add a dissipation term in d1 and if you don't want it, there is no easy way around it...
Thanks again for your helpful reply!
I was able to use this and correct for the extra dissipation term in d1 by adding Lindblad dissipator term with opposite sign to the Hamiltonian part. In this particular case:
