I am trying to use mesolve to solve an annealing problem using density matrices.
The Hamiltonian evolves with time, $H(t) = \dfrac{t}{T}H_p + (1-\dfrac{t}{T})H_d,~ 0\leq t \leq T$, and I aim to solve the corresponding master equation using qutip, $\hat{\dot{\rho}} = i\left[\hat{H},\hat{\rho}\right]$. I have been doing this with a state vector approach, and the code works fine. With my knowledge of density matrices, I would assume that I can simply replace $\ket{\psi}$ with $\hat{\rho} = \ket{\psi}\bra{\psi}$, and use this as my initial state in mesolve. This would obtain density matrices for sln.states at each time step, however this seems not to be the case.
Code:
Bacon is a class I wrote that forms $H_d$ and $H_d$ Hamiltonians using tensor products.
Hp is
Hd  is
For completeness, here is the class:
The code returns the error incompatible Liouvillian and state dimensions: [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]] and [[8], [8]]
Adding the commented line #initial_state = qt.Qobj(initial_state, dims =  [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]])   returns the error Shapes don't match: (64, 64) @ (64, 1)
I am confused as to why there is a 64x64 matrix, even though my inputs were 8x8 matrices for Hd and Hp and the input density matrix is also 8x8.
I am inputting an initial spin state $\ket{\psi} =  \dfrac{1}{8} (1,1,1,1,1,1,1,1)$, which is the lowest energy eigenstate in the basis of $H_d$
I believe mesolve is combining Hd and Hp into a 64x64 matrix, perhaps computing their tensor product. Why would this be the case? If not, how can I solve my problem using a density matrix as an input, such that the output states at each time step is an 8x8 density matrix? Essentially, I am looking for the correct initial state input.
Please let me know if anything needs to be clarified and thank you in advance.
The dims in the line you commented out appear to be incorrect. They are the dims for the Liouvillian (i.e. operator over the density matrix) and not of the density matrix itself. Specify dims=[[2, 2, 2], [2, 2, 2]] instead.
Slightly longer answer; If you don't specify the dims when creating a Qobj from an ndarray, QuTiP assumes the dims are the shape of the array. Your Hamiltonian is constructed by tensoring together operators on single qubits, so it's dims are more structured and QuTiP detects the mismatch.
This worked perfectly, thank you!
