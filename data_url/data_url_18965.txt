The current Qubit class in the chip module is not suitable for a Rydberg Atom simulation.
In particular, I am interested in the position of a qubit in a lattice and the pairwise long-range Van Der Walls (VdW) interaction.
What I have in mind is the simulation of the dynamics for the following Ising-type Hamiltonian for N qubits:
H = \Omega(t) \sum_{i} \sigma_{x, i} + \delta(t) \sum_{i} \sigma_{z, i} + \sum_{i<j} U_{i,j} n_{i} n_{j}
where
I would like to introduce a new subclass called RydergAtom that inherits the functionalities of the PhysicalComponent class. The RydbergAtom will then contain the position of the atom in the lattice.
In order to build the VdW term, a new Coupling class could be written in which the relative position of the two atoms has to be considered.
The Hamiltonian function for the VdW will then be specified in the "hamiltonians" module.
To create the RydbergAtom subclass the following alternatives were considered:
The components for the model are
q_i = chip.RydbergAtom(..., position=[a, b],...) : the i-th atom in the lattice at the position [a,b]
The drives, i.e. the amplitude and the detuning are:
amplitude = chip.Drive(..., connected=[q_1, ..., q_N], ...)
detuning = chip.Drive(..., connected=[q_1, ..., q_N], ...)
and finally the interaction:
interaction = chip.VanDerWalls(connected=[[q_1, q_2], ..., [q_{N-1}, q_{N}]])
All of those components will be then given as parameter to the Model class:
model = Mdl(None, # individual, self-contained components
[amplitude, detuning, interaction], # Interaction between components
)
The observation is completely correct that the current Qubit class is really a superconducting qubit and the current Model a superconducting chip. So, I'd propose to try and make the Rydberg simulation inherit from Model directly. That would give you more freedom to implement the Hamiltonian, etc.  I know, it is not well documented but for the rest of the code to work, the Model needs to provide very few methods, most importantly get_Hamiltonian(signal) where signal is a dict, in your case something like
This seems to be the easiest way to realize the ordered sum. This class would need to have only the U_ij matrix to be initialized, as the number of qubits is the dimension, right?
Again, I know it's not ideal, but starting with a minimal RydbergModel class and implementing only the methods required seems to be the way to go. This can also provide some learnings about how to properly define the interfaces.
This class would need to have only the U_ij matrix to be initialized, as the number of qubits is the dimension, right?
Yes, the coefficients U_{i,j} scale as N * (N - 1), where N is the number of the qubits, and they are a function of the distance between two qubits i.e. |\vec{r}{i} - \vec{r}{j}|.
