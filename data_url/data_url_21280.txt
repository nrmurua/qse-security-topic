Passing a kernel function as an argument works fine. However, annotating the receiving function breaks with a TypeError:
This raises a root:Terminating with exception (TypeError: Callable[args, result]: result must be a type. Got artiq.compiler.types.TMono('NoneType', OrderedDict()).) error.
Unfortunately, the ARTIQ compiler isn't compatible with standard Python type annotations; the equivalent would be artiq.compiler.types.TFunction.
Thanks for that pointer. It seems like TFunction is present in artiq.compiler.types but not in artiq.compiler.builtins or artiq.language.types, which is presumably why
produces error: type annotation for argument 'f', '<class 'artiq.compiler.types.TFunction'>', is not an ARTIQ type.
Do you know the rational behind this, or is it an oversight?
Try something like TFunction({"a": TInt32}, {}, TNone).
Thanks @whitequark but that gives
Defining it instead as
gives
And I'm not sure how to pass the class type in, since this method is a part of the class that's being defined, so the class does not yet exist at the point of its definition.... (f: TFunction(OrderedDict({"self": TestTyping,"a": TInt32}) doesn't work)
Trying
but still a no-go:
Ah yes. I don't think you can currently write that annotation. In fact I don't think it's realistic to expect to be able to write annotations for arguments that involve curried functions (that is, methods) passed to them, with the way the compiler is currently structured.
For background, the compiler was written to support global type inference exclusively, and annotations were added for a few edge cases (syscalls and unconstrained arguments).
