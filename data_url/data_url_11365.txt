Now when you call q.results.plot_cost() you get a plot of cost vs number of function evaluations. Like the following:

It could be interesting to have another method that plots cost vs number of iterations, so as to see the cost at the end of each iteration of the classical optimizer.
How would we do this? We would need:
The first part is easy (I think), but the second one ... I mean, that is optimiser dependent and it may not be trivial.
With @vishal-ph, we thought it could be nice to have this method when we were looking at a graph like the following:

Here the maxiter was 20, so only 20 iterations have been performed but 250 evaluations are displayed. It is rather difficult to see the actual evolution.
I don't think we need to do the average, but just take the last evaluation of each step. This one is the optimized cost if we stop the optimization at that iteration.
For example for spsa:
You would plot the variable besty vs niter
