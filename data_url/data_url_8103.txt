Describe the bug
As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically.
In brmesolve the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the a_ops fail a check in cy/brcodegen.py when using a Cubic_Spline type.
To Reproduce
On the cases it gives an error (sol3, sol4), it is Exception: Invalid a_td_term. from br_codegen.py (aop_td_funcs()).
Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying c_ops.
Expected behavior
My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: 
"When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-dependent terms that are given in the string-format, then the cubic spline representation will also be passed in a string-compatible format. In the string-format, the interpolation function is compiled into c-code, and thus is quite fast. This is the default method if no other time-dependent terms are present." 
If my understanding is incorrect and brmesolve can not accept Cubic_Spline objects, it means it is currently impossible to use this function with non-analytic functions (i.e. only ones we can write out explicitly such as 'exp(-w)'), and seems a major drawback (considering all other solvers in QuTiP are more flexible in what can be accepted to specify time-dependence).
Your Environment
QuTiP Version:      4.6.2
Numpy Version:      1.18.1
Scipy Version:      1.4.1
Cython Version:     0.29.24
Matplotlib Version: 3.1.3
Python Version:     3.7.6
Number of CPUs:     4
BLAS Info:          INTEL MKL
OPENMP Installed:   False
INTEL MKL Ext:      True
Platform Info:      Darwin (x86_64)
As stated in the docstring in the function, the a_ops Cubic_Spline must be a tuple (f(w), g(t)). This was my mistake (possibly this could be updated in the online documentation on BRME). Closing this as there is no error.
Although I will note there is a legitimate error if the array passed to qt.Cubic_Spline is too large. In this case, np.array2string uses the default threshold argument which means the saved array is compressed (e.g. [0,1,2,...,8,9,10]). The way to fix this is to explicitly set the threshold argument.
@jsmarsha11 Thank you for reporting this and figuring things out. The use of np.array2string is indeed suboptimal and will hopefully be removed as part of the solver rework in QuTiP version 5 which we hope to release later this year.
