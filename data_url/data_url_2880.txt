It seems to me that the cirq.X and cirq.Y gates perform each others' operation instead of their own when applied in a circuit.
When I run this code,
it gives the following output,
which is actually Y applied to |0⧽ (Y|0⧽ = -i |1⧽). Similarly, when I apply Y to q1, what I actually get is X|0⧽ = |1⧽:
Meanwhile, the matrices themselves seem to be defined correctly:
This feels like a bug to me.
I think this is because the simulator is automatically rewriting your circuit into Xmon operations, which use implement exp(i pi X). This is equivalent to X, but only up to global phase.
If you limit yourself to measurement results, instead of inspecting the global phase of the wavefunction, there should be no difference. You generally want all of your analysis to be insensitive to global phase anyways.
The proper test for confirming whether or not it is "really" the X gate or the Y gate is to see how it acts on an eigenstate of the operation. X should turn |0>+|1> into |0>+|1> (up to global phase), whereas Y will change it into |0>-|1>.
Yes, perhaps I was a bit too quick concluding the gates were swapped.
After some more testing, I found out the actual gates (marked with primes) are implemented as follows:
I agree that all analysis should be insensitive to global phase, but this is counterintuitive and may hamper debugging of future applications written in Cirq.
By the way, exp(i π X) = I cos π + i X sin π = –I, which is not equivalent to X. Or did you mean exp(i π) X?
Ah, right, I meant pi/2.
