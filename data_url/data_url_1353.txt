Description of the issue
Moments should sort the operations (eg: by qubit ordering) and then print the moment diagram so that overlapping operations have a consistent ouput. This is important to make sure that tests that depend on diagrams don't break because the insertion order of operations in a moment changed. IIUC, the insertion order of operations in a moment is irrelevant for the user for all practical purposes and hence two moments with same operations inserted in different order compare equal; but their diagrams don't.
See example below:
Cirq version
0.15.0.dev
Do you have a good example of a place where we do this type of testing and it is fragile like this?  Testing of circuit equality for complicated circuits via diagram equality seems odd to me.
This is extensively used in tests for transformers, mainly because it's much easier to visually inspect the before/after circuit diagrams and understand the action of a transformer.
For example: https://github.com/quantumlib/Cirq/blob/master/cirq-core/cirq/transformers/optimize_for_target_gateset_test.py
Also, I'm not sure if I would call every circuit that contains two 2q operations on non-adjacent qubits as "complicated" circuits.
There are a few cases where stimcirq treats the insertion order as significant, but it only applies to operations that apply to zero qubits. So please don't re-order those in the diagram.
This is extensively used in tests for transformers, mainly because it's much easier to visually inspect the before/after circuit diagrams and understand the action of a transformer.
For example: https://github.com/quantumlib/Cirq/blob/master/cirq-core/cirq/transformers/optimize_for_target_gateset_test.py
Also, I'm not sure if I would call every circuit that contains two 2q operations on non-adjacent qubits as "complicated" circuits.
This feels really error prone to me.  It delegates the equality to the float to string precision of the text diagram code.
There are a few cases where stimcirq treats the insertion order as significant, but it only applies to operations that apply to zero qubits. So please don't re-order those in the diagram.
It treats the order as significant in the diagram?  (I'm not parsing this sentence...first part is about insertion order, second is about diagram).
In order to avoid surprising behaviors (e.g. in the course of debugging), we should adhere to common sense laws that a user would intuitively expect to be true. One of those laws is
x == y => f(x) == f(y)
for all f. In particular, this should hold when f=str.
Re @dabacon 's point about error-proneness of relying on string comparisons in tests: I agree and think we should avoid that. Ideally, a unit test should exercise minimum amount of code other than code-under-test. This way a bug breaks a small number of tests which aids in determining where the bug is. At the moment, a bug affecting string diagrams would break a huge number of unit tests. The same is true about any changes to diagram rendering code.
Discussion from cirq cync:  We should sort by qubit for the string representation so that string equality matches type equality.  We should not change internal representation of moment in case people are depending on the order of operations.
