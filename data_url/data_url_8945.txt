I'm experimenting with generic encoder/decoder circuits along the lines of this post :
https://quantumcomputing.stackexchange.com/questions/28715/how-to-interface-stim-to-a-generic-qiskit-decoder/
I define the code through a binary matrix ("amat" in the examples).
I then generate a tableau from the matrix using  "MatToTab" which is based on something Craig posted in the past
From tableau I get a circuit using "TabToCir" which is also based on a previous post from Craig.
I then check the encoding and decoding...everything seems to work fine; at least for the codes I tested so far.
The new version of stim (1.10) has a built-in tableau to circuit mechanism. So I switched to using that.
For code5 ([[5,1,3]]) and code8 ([[8,3,3]]) both methods work. For code7 ([[7,1,3]]) the old method works
but the new one doesn't. Here's what I see:
codeX.Test(1) runs the sim using the new tableau to circuit method
codeX.Test(2) runs using the old function.
import stim
print(stim.version)
1.10.0
import code5
code5.Test(1)
All corrected
code5.Test(2)
All corrected
import code8
code8.Test(1)
All corrected
code8.Test(2)
All corrected
import code7
code7.Test(1)
decoding failure +_______ state 0
decoding failure +Z______ state 0
decoding failure +Z____ state 0
decoding failure +Z__ state 0
decoding failure +Z state 0
decoding failure +X state 0
decoding failure +Y______ state 0
decoding failure +Y____ state 0
decoding failure +X__ state 0
decoding failure +Y__ state 0
decoding failure +X state 0
decoding failure +Y state 0
decoding failure +__X state 0
decoding failure +____X state 0
decoding failure +______X state 0
decoding failure +______Y state 0
code7.Test(2)
All corrected
codes.zip
You're using circuit[::-1] to get the inverse of a circuit, but the circuit contains operations that are not self-inverse. It's not enough to run them in reverse order, you need to invert them e.g. turn the S gates into S_DAG gates.
Probably the simplest thing you can do is to get the inverse of the encoder by using TabToCir(MatToTab(amat).inverse())
Ah, my mistake, the issue is slightly more subtle. The circuit only contains self-inverse gates but individual instructions contain sequences of gates that overlap in their targets. So the order the operations are applied within an instruction also needs to be reversed. But the proposed fix will still work.
I'm not sure I understand this. Using TabToCir(MatToTab(amat)) already works.
The problem shows up when I use the new built-in method :
encoder= tab.to_circuit(method="elimination")
The TabToCir function is not used in this mode
Use decoder= tab.inverse().to_circuit(method="elimination") and get rid of encoder[::-1]
that fixed the problem...thanks
