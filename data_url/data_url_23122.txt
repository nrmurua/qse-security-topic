Maybe we can collect the math that is done on this page..
https://github.com/lneuhaus/pyrpl/wiki/Spectrum-analysis
just to discuss here in order to not disappear in the wiki page on spectrum analysis.
Concerning our discussion before, I think:
I agree with the simplest option, it is the most robust and simple way of implementing it for the first release: RBW readonly and filter-dependent, padding by a fixed amount of zeros to make the peaks look smooth.
Next problem will clearly be the aliasing. I am now convinced we need to throw away a fraction of the data. Take a component at f_nyquist + epsilon. It will appear at f_nyquist - epsilon in the spectrum, and you can always find epsilon small enough such that the filter response is not significantly different between  f_nyquist - epsilon and  f_nyquist + epsilon. For a visual illustration of a combination of filtering + rejecting some frequency bins, see for instance http://www.ni.com/white-paper/4278/en/#toc2
I will now plot the transfer function of our 4 filters (or even worst, the averaging window of the scope alone), but I am afraid it is much less steep than what is plotted in the link above...
I am currently implementing the transfer function correction on the branch "spectrumanalyzer"
(I will probably stop until my presentation on friday though...)
Flatness test passes in baseband mode (so the scope tf is well modeled), but fails in iq, there is still some discrepency between the observed and modeled tf there. When I take the ratio, I get something that looks like a low pass, but with a non-zero saturation amplitude at high frequency...
now we are much further: we can now rewrite specan tests with the white noise source. we can also clearly see the non-flatness of the filters. what should we do about it? I tried to find the bug and spent a little time on the filters (see related discussion), but in the end i took an ad-hoc approach (see code of filter attribute). either we extend this approach to a multiple-frequency model i.e. fit the responses we observe and unittest flatness), or someone else should try to understand why we dont get the filter modeled right. But since the main candidate is timing bugs in the fpga, maybe the ad-hoc approach is best
the remaining issues in this are already contained in #59 and #242
