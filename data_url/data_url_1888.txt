Is your feature request related to a use case or problem? Please describe.
If cirq-unstable is installed in a virtualenv and you pip install cirq, the virtualenv gets into a bad state. This is because they are different packages with separate metadata, but they put the python code in the same location in a cirq folder in site-packages. So pip thinks both are installed but in fact only the most-recently installed package is "active".
If you try to fix such a situation by uninstalling one package, the code gets removed but pip still thinks the other package is installed. The other package is now in a broken state (can't be imported, etc.). The only way to recover is to uninstall both packages and then install one of them again.
Describe the solution you'd like
I'd like pip install cirq to fail if cirq-unstable is installed, and vice-versa. I did a quick glance at setuptools docs to see if there is some way to specify packages that must not be present, but I couldn't see anything. It also doesn't seem to work to add a package requirement like cirq != *. I'm not sure if there's any other mechanism we can use to accomplish this.
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
We have internal workarounds for this to try to keep people's virtualenvs in a good state if they accidentally install both versions, but it'd be great if we could prevent the problem from happening at all.
This sounds like a useful feature, I don't know immediately how to resolve it, but in theory it might be possible. Will flip to triage/accepted when we have a way to do this.
Idea: the problem is that cirq-unstable is a different package from cirq, while in reality is just a different version.
Maybe we should publish pre-releases to the cirq package from master, and then pip install cirq --pre would simply pull the latest pre-release version from pypi.
Thoughts?
I think we used to do something like that, but then changed to use a different package for the unstable releases instead. You're right that just having one pypi package would fix the problem and it's probably the "correct" way to do things. I don't remember the reasoning for created a separate package, but perhaps @Strilanc or @dabacon can say more.
I posted a question on SO about this after a bit of experimentation.
There is no way to implement this using the two separate packages. The main reason is that setuptools will build the wheel and the wheel has no means to specify post/pre install hooks. See this SO answer.
The remaining options:
My instinct is to prefer 2a. I think 1 is going to get even harder in the future due to recent pip resolver changes where it tries to be more strict about installing dependencies, and 2b also makes life more difficult for anyone who want to use the pre-release versions.
If we needed to limit to just one nightly pre-release per day, that would probably be ok. People who need to track more granularly than that can always check out the source and build a wheel for themselves.
Sounds good, 2a it is - I'm going to merge tomorrow #3527 unless no-one objects loudly :)
