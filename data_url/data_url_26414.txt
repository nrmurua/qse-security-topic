Usually the atom_info of a cif file (e.g. Material Studio) will follow the following order
But cif file generated by ase may follow order like
which will cause subroutine read_coordinate_cif in topology_cif.F take _atom_site_label as the atom type. For example, the type of oxygen atom is O1, but the other oxygen atom is O2.
The result is that atom kinds is equal to the number of atoms, which may lead a HF funcitonal calculation cost several times the time. My solution now is turn USE_ELEMENT_AS_KIND on. But I still wish this bug can be fixed. The following are my modifications to the code, please let me know if there are any problems. With my respect.
Thanks for the great analysis. Your patch looks good. Do you want to send it as a pull request or should I take care of it?
Have you checked this with the latest version? We fixed a similar problem some months ago.
Generalize CIF file reader (#2843)
Have you checked this with the latest version? We fixed a similar problem some months ago. Generalize CIF file reader (#2843)
Thanks for the great analysis. Your patch looks good. Do you want to send it as a pull request or should I take care of it?
After further research into this issue, I discovered that things are not as simple as I initially thought.
The code modified in this commit (#2843) is exact where I thought where the bug is. But When I try to run the example by using newest version of CP2k, which is tests/xTB/regtest-1/tcif.inp, also generated by ase, it doesn't show the same error. atom kinds shows 5, which is correct. But my input file and cif file still show the wrong atom kinds.
Please forgive my lack of understanding about CP2K. This patch maybe only fix my problem but cause more problems. I will not send PR for now until I figure out where the bug is.
Here is my input file and cif file. If it is convenient for you, you can try to reproduce this error and fix it.
testsuite.zip
Thanks for the reply!
My understanding of the CIF file format is that the lines with _atom_site_ are the column headers for the subsequent table of atoms.
Therefore, I'm really puzzled by the CYCLE before ii = ii + 1 because it effectively shifts the headers of all later columns:

Agree, so my first thought was different sequence of _atom_site_type_symbol and _atom_site_label may cause the bug. But the test file in #2834 shows that my thoughts could be wrong. I need further investigation.
How about this:
Now I figure out why the example in #2843 won't cause this bug, METHOD xTB will turn the option USE_ELEMENT_AS_KIND by default.

