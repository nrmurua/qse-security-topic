The overwrite() method of PulseStorage is intended to provide a way to (completely?) replace a stored pulse with a new/alternative version. However, if that pulse has subpulses, these will not be overwritten using the current implementation of PulseStorage and JSONSerializableEncoder, thus potentially resulting in a corrupt pulse in storage where the top-level pulse being overwritten but referencing old, unchanged subpulses.
However, just overwriting subpulses in every case might corrupt other pulses that also reference those subpulses. A possible way might be to keep the current behavior of trying to overwrite only the top-level pulse but aborting with an error if a change in subpulses was detected, but this also feels off.
We must clearly define our semantic for overwriting pulses (and implement accordingly). Comments please @terrorfisch
Assuming that overwrite() should only replace the most top level pulse and FAIL if a subpulse differs from a different pulse already in the storage, this has been resolved in branch issues/281_pulse_storage_flushing. That branch is in turn based on 250_serialization_backward_compatability, so a pr will have to wait until #266 has been merged.
I think this behavior is ok. Maybe we can write a short helper function that overwrites all differing subpulses if anyone requests that.
Closing as I merged this into the overhaul branch.
