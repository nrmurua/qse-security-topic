Considering the following example:
When transpiling with optimization 2, here is the result:
Reducing the circuit to two U2s. However, when considering a basis without u3, the BasisTranslator fails.
Maybe there is a missing equivalence in SessionEquivalenceLibrary?
I think this is expected, the ['u2', 'cx'] basis isn't universal. If you look at your working example the first run of the basis translator outputs:
To use the basis translator In the working example the basis translator is going z -> u3. The optimization passes after the basis translator are what simplify things further to just 2 u2s. (the final u2 pair are coming from optimize1qgates which knows how to simplify a u3 to a u2, which it only can do after commutative_cancellation removes the cx gates). To make the basis translator work with just ['cx', 'u2'] you would need a direct path from 'z' to 'u2' which I don't think you can do (at least from my looking at the matrix definitions for both gates, but maybe there is way I don't see)
Agree with @mtreinish , I don't think there's more the basis translator can do here.
