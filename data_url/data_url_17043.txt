As a part of automating more of our daily workflow with https://github.com/mtreinish/qiskit-bot
one of the things that we'll no longer have to do manually is create a changelog file. We write real documentation for releases using reno now and the changelog is mostly overlapping with data in the git log and github PRs so there's no need to manually curate that anymore. qiskit-bot will generate a changelog for us by using the commit msg summary from the squashed merge. It looks for tags in the git history and uses that as categories for the changelog. For example see: https://github.com/mtreinish/qiskit-terra-sandbox/releases/tag/0.16.2 which was generated by the bot based on tagged PRs.
For this to work we need to assign tags to each category heading in the changelog, right now there are defaults set in the bot: https://github.com/mtreinish/qiskit-bot/blob/master/qiskit_bot/config.py#L25-L31 but before we deploy the bot into production we need to pick tags and categories that map with them. We can add new tags or reuse existing ones. It doesn't matter as long as we decide.
One idea I had was add a new class of tags with a changelog: prefix to indicate we want this PR included in the changelog. For example adding new tags like: Changelog: New Feature and Changelog: BugFix.
I like the idea of using specific changelog tags (and probably removing the existing similar tags), we would have to be more diligent about labeling issues (which we rarely do) or PRs (which we very rarely do). Is the label pulled from the PR or from the linked issue?
Also, it's not uncommon for a single PR to result in more than one changelog entry (e.g. deprecate some feature and concurrently add its replacement.) Using two PRs is one option, but it may not always be obvious at the outset of a PR. Is there a way to handle cases like this? Multiple changelog labels?
It's based on PR labels (which can be changed after the merging too to give us that adjustment lever). The way it works is when a release is tagged the bot looks at the git log for the release finds all the PR numbers for a release then checks those PRs for labels it knows about. If there are any labels it adds the commit msg summary line to that section in the changelog.
For the multiple entry case I'd argue we would want those cases to be multiple PRs in general. We should strive to have one logical change per commit.  But I was thinking about that to a certain degree and it's possible to have a PR labeled with more than one category and the bot will add the commit summary line to all the tagged categories for a PR.
Just to demonstrate I pushed a release to my sandbox repo with multiple entries for a patch while testing the production deployment configuration. The bot generated this release: https://github.com/mtreinish/qiskit-terra-sandbox/releases/tag/0.18.0
