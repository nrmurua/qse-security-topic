Error message:
Run the example in README.md:
Should print the output without error.
N/A.
Many thanks!
Hi,
I'm not sure what the difference with Aer and BasicAer.
But I tried to run it using Aer it worked for me.

I'll try to check BasicAer in qiskit Terra.
Awesome, thanks @realistix30 , Aer works for me, please let me if BasicAer works on your side. Cheers~
You're welcome! It seems this is just a work around. I'm still not sure about the underlying issue. I asked around slack and they said the BasicAer will be replaced by Aer once Aer is stable. There are also other differences between them. You can check here. https://qiskit.slack.com/archives/C7SJ0PJ5A/p1591566437406400?thread_ts=1591311954.362500&channel=C7SJ0PJ5A&message_ts=1591566437.406400
the h gate is not defined in basic aer this is why it is not working.
Can the README.md file be fixed to reflect this? Thanks.
@jaygambetta Thanks for telling us the reason why. I thought it was something more complicated. If that's the case, @zhangl64 suggestion would be enough to prevent this error. Can I update the README.md file to close this issue?
sure  but  adding just this gate to basic aer will also fix it which might be good as a backup as well.
adding H after
https://github.com/Qiskit/qiskit-terra/blob/0382d50d309374583071abebc73f889ade08c9e5/qiskit/providers/basicaer/qasm_simulator.py#L510
should fix it as well if basic aer is used. personally I would love to rewrite basic aer to be smarter or remove it all together, this is something we have been discussing.
That's a better option. Will update BasicAer to add H. It will be my first contribution so I'm excited.  Please assign this issue to me and I'll make a pull request to close this issue. Thank you very much for the guidance!
no problem -- add a test and let me know if you have questions or problems.
BasicAer supports a set of basis gates u1, u2, u3, id, cx, unitary. You should transpile your circuit to its basis gates before running assemble like you would for running on a real backend:
I don't see any reason to add H to BasicAer when you can just transpile
Hi, what is our agreed fix for this issue? It seems one purpose of adding H is also for convenience? Would it still work the same without transpiling it?
@chriseclectic because many of the examples have h and we dont need to transpile for them. It does not hurt to over complete it.
In the suggested PR adding H to BasicAer, @ajavadia said:
Hi @realistix30. I don't think we should add a single gate and do an ad-hoc fix on an issue.
First, I don't quite understand the original issue, because it is based on running a circuit without transpiling it for the backend. This kind of thing is not a recommended way of running code on any backend. If you transpile, the gates will be translated to the correct basis.
I'm happy to consider something like this if the issue is that rewriting the circuit in a minimal basis makes certain simulations too slow. But that is not how the original issue is presented. And performance has never really been a consideration in BasicAer (that's why Aer exists). But if we go this route, I think we should add all the gates in the standard library and properly test them. My recommendation is not to do this unless there is a clear case first.
Removing bug, since README was updated in #4954. This is a discussion issue now.
According to #7633 (comment), this issue will be fixed by addressing #7670, because then BasicAer will support any gate that has a matrix. @jakelishman is that right?
Yeah, it would thanks.  I suppose in theory we could add h to its list of supported gates at that time as well to assist the transpiler, but if BasicAer's logic essentially just becomes Statevector(circuit) (with some splitting to handle mid-circuit measurements), it'd support it by default.
Would you prefer to leave this open for tracking in your mentorship project?  If not, we can just close the issue - any discussion on it is stale, and basically covered by #7670 as you say.
I say we leave it open for now since it's technically a separate issue.
As this has staled, and as #4625 (comment) points out, the failure in the original issue is not a bug, I'm going to close this issue now with the decision that it's not necessary that BasicAer has a h instruction.  Its purpose is principally just for testing the provider paths, which require transpilation to the basis set.
If there's more to say on this, please re-open this issue.
H, P, and U was added in #10673
