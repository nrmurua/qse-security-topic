Arithmetic of ParameterExpression does not clean up the content of .parameters if the ParameterExpression is not parametrized anymore. Might be confusing and lead to an accumulation of irrelevant parameters in longer computations.
There are some comments in ParameterExpression that suggest that we're interested in tracking which parameters have historically existed, which makes me nervous that some parts of the code are relying on this behaviour.  See for example: https://github.com/Qiskit/qiskit-terra/blob/e507f2813e2d73a814cd0cc4d840b9d2eb8f8fbc/qiskit/circuit/parameterexpression.py#L126-L131
Perhaps Kevin knows more (@kdk), since he's the author of that comment (and most of ParameterExpression!) in #2537.
I think that comment is to avoid the following: assume you construct a circuit with some parameters and it just happens that these cancel out (like two Rx rotation angles with opposite sign), if SymPy would remove this parameter, binding it would fail since it doesn't exist anymore. But the user might be unaware that is was optimized away so that's weird ðŸ˜„
In general this is a reference-counting problem here; it's not enough to say "if this expression loses parameters, remove them from the symbol table", because there might be other expressions that also use the parameter.  I think here it shouldn't be too bad to implement a basic ref-counter for the parameters in ParameterTable because there's no such thing as a cyclical reference when you're talking about atomic parameters.  Still, it's a non-trivial addition, and I didn't have time to look at it properly now, or when I was doing #6802 :(
edit: looking again, I think when I wrote this comment I was thinking more about QuantumCircuit than the ParameterExpression stuff that's actually being talked about.  The ParameterExpression only bits may be simpler, though of course there may be some performance concerns if we start re-checking the parameter list at every step.
