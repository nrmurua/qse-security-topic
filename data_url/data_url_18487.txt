Our present integration of the CFG/BasicBlock material with the compiler-hook material topologically sorts the blocks and applies the compiler to each in turn. This preferences the intelligent readdressing (viz., by virtual SWAPs) of programs that appear earlier in the program, but this has little correlation with the 'intensive' parts of the programâ€”tight loops can appear anywhere.
Alter the sorting mechanism to prefer using virtual SWAPs (and, ideally, some mechanism for minimizing SWAP distance over JUMPs) in tight loops. This is highly nontrivial and probably cannot be done perfectly automatically. A naive solution would already be good, as would an ability for the user to give the compiler hints.
