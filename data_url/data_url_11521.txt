The ability to easily create a summed pauli operator from expressions has come up more than once. Here is an excerpt from one such Slack discussion
I am trying to construct an operator from the primitive Pauli operators I, X, Y, Z. I'm doing things like (I-Z)^(I-Z) + (X-iY)^(X+iY), so the operator I wind up with is a SummedOp of TensoredOp of SummedOp of those primitives. What's the most Pythonic way of reducing this to a SummedOp of PauliOp? [At least, that's the form that I had working when I was converting from a pyquil PauliSum object.] Alternatively, is there a preferred way of constructing such operators?
If I do this in Aqua (I-Z)^(I-Z) + (X-Y)^(X+Y) then this is indeed a complex nested type but you can run eval().to_pauli_op() on it so ((I-Z)^(I-Z) + (X-Y)^(X+Y)).eval().to_pauli_op() and the result is a SummedOp.
Also, I understand now that the eval() method converts op to its matrix form. So...I don't expect it to work for systems with a "useful" number of qubits (ie. if I can turn my operator into a matrix, I may as well just solve my system classically). I believe that pyquil implements Pauli commutation rules to construct and simplify its PauliSum objects more-or-less efficiently
Links to Slack discussions for more info:
@t-imamichi @ikkoham I do not know if what you are looking at would address such a feature enhancement request. Something to perhaps bear in mind, even if this is not directly addressed in the near term by the summed pauli op function you are looking at.
Thank you, I think we can support this. I will try it.
