Acceptance Criteria
The dispatcher should have its own config independent of the SDK config
covalent logs will need to retrieve server logs over the network
Maybe better defaults for the sublattice and postprocessing executors? Both steps require deserializing a workflow function and therefore require its deps to be installed in the executor environment. The workflow_executor designated for these tasks currently defaults to "dask", which refers to the local (relative to the server environment) Dask cluster.
The delete endpoint needs to be validated, and make sure that deleting results happens via this endpoint
There needs to be a way to parameterize the dispatcher address. Currently it defaults to localhost and the only way to change it is in source.
We will need to handle covalent version mismatch between the client and server. IMO the easiest way to do this is to have the client always send a version query param (or header?), have the server check that against it's own version, and return 417 if they don't match. see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect
@santoshkumarradha @wjcunningham7 could you review these comments and lmk if you think this is a comprehensive list?
We may want to think about how executors are managed. Are they installed only on client side or both client and server side?
there may be file transfer dependencies in #673 #589 AgnostiqHQ/covalent-staging#506
We may want to think about how executors are managed. Are they installed only on client side or both client and server side?
They will need to be installed on both sides
@scottwn this seems like a complete-enough list
Slack conversation regarding another little fix https://agnostiqworkspace.slack.com/archives/C02JS6NAFV3/p1659645839675899
the resolution should be to default the result path in config to an absolute path instead of the relative result.
cc @cjao
A more detailed reproducer for results_dir handling:
This will not work in remote dispatch:

sync will have to get the list of dispatch IDs via HTTP
The Covalent server needs to log into remote executors like Slurm or SSH on the client's behalf. If the client refers to locally stored private key files or AWS credentials files during workflow construction, a remote Covalent server won't be able to find those credentials at runtime.
