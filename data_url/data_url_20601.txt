I'd like to implement the use of this openssl version with Java however I can't find the provider required to consume it in java. If this is already implemented I'd love to be pointed at it, if not its an extremely important library that must be built for widespread adoption.
We have liboqs-java which wraps the core PQ crypto functions from liboqs into Java, but we don't have a provider in the sense of the Java Cryptography Architecture.
Is there any plan to support an open source JCA provider?
Is there any plan to support an open source JCA provider?
What do you mean?  For our java wrapper to use a JCA provider, or to offer the wrapper as a provider? (Short answer: no plans for either, but we welcome contributions.)
Currently I'm attempting to swap the OpenSSL version used by one of the products at my company to OQS. The problem lies in a JCA provider not supporting PQC. Which means I can not use the Java Key Store, nor can I hardcode the key & certs directly onto the machine to test.
The provider doesn't seem to be the only issue however, the java.security package can not handle any PQC certs as RSA, EC and DSA are hard coded. For example consider the keyfactory, it doesn't support the PQC algorithms. https://docs.oracle.com/javase/9/docs/specs/security/standard-names.html#keyfactory-algorithms
I think my team will have to wait on oracle to update JDK before we trial moving our applications over. Dependancies are immense.. Although, if you have other suggestions on how it might be possible to implement I'm all ears.
@mrshneaky I have to admit I'm a bit at a loss as to why OpenSSL has dependencies on Java: Can you shed some light on this? Generally I'd assume you can switch OpenSSL as long as it's providing the same APIs (which we very much strive for with our fork). Or is it that you use Java for key management and not OpenSSL? If the latter, I'm afraid you indeed have to wait until the owner of that not-quite-open-source ecosystem moves on PQC.
Per @baentsch's comment, I don't fully understand the Java dependency, but independently, yes, we are dependent on the crypto API of various OS and platforms for integration, including the JCA. They have to open their platforms for us to be able to integrate PQC. That's why we are only able to integrate in applications that solely depend on openssl (or boringssl, like chrome) in open-source development.
Hey all, thanks for your concerns.
The product I'm trying to integrate PQC into does indeed rely on java for key management. I'm not quite familiar with every part as they've switched between crypto implementations over the years. I was hoping to switch out the openssl versions to enable PQC but no such luck. netty is what the team uses to manage openssl.
@mrshneaky Thanks very much for the link to netty. Following it a few steps, I felt like falling into Alice's rabbit hole, finding lots of "wondrous things", e.g., many wrappers (of Java code to native and vice versa, apparently) working around various JDK shortcomings (ALPN, etc.)....
To cut things short, is my understanding right that you basically want to add PQC to Tomcat, i.e., Java EE/Jakarta? If so, I'd see two options for you:
--> You'd need to decide what you want to achieve (and in which time frame) and what infrastructure you can/have deployed: I'd be glad to assist with getting option 2 above going, but cannot really help with any "Java stuff": My experience on that is seriously dated (15+ years, to be precise :-)
I have been down the rabbit hole too! Combined with the code base provided by the product team it's tough determining the best place to perform 'OQS surgery' as I'm starting to call it.
The IP owners make it extremely difficult here, but we are definitely starting with a proof of concept. I do have control of both client and server for the app. Thanks for your offer of assistance. Where is the best place to discuss further?
Where is the best place to discuss further?
As this is a "demos"/POC question, what about here?
