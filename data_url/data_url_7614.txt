This issue is for listing what shoud be support in the first version.
In general, this package will use a block tree to store the structure of a quantum circuit. Each block is a quantum gate with index.
Blocks are subtypes of AbstractGate with additional information about its position in a quantum circuit, it is a container of subtypes of AbstractGate. The final structure will looks similar to Julia's own AST tree.
Generic Block will not be type stable since this will store any possible instance of the subtypes of AbstractBlock.
The structure is known for a rotation block:
we don't actually need to store what's inside there
and we assume a rotation block is contiguous on quantum register, and for rotation operations like
Then we will have two rotation blocks.
What will be included in our first version (v0.0.1) is listed below.
Blocks are conbination of multiple gates on multiple qubits.
List some reference and resources here:

With its matrix form cached blocks, the process of evaluation can be accelerated
with directly calculation with its matrix form.
NOTE: All constructors of blocks will not be exported.
Abstract block supertype which blocks inherit from.
Abstract block supertype whose subtype has a square matrix form.
Block that concentrate given lines together.
M: number of active qubits.
a naive wrapper of a sequence of blocks.
Exported
Abstract block supertype which measurement block will inherit from.
abstract supertype which cache blocks will inherit from
abstract supertype which composite blocks will inherit from.
ChainBlock: chain a list of blocks together, will check its input and output shape.
Exported bindings
KronBlock: fuse a list of blocks together with kronecker product
exported bindings
abstract supertype which all primitive blocks will inherit from.
Gate: block for simple gate type (GT) without parameters. Their matrix form is a constant matrix. Therefore, there will only be one matrix allocation no matter how many instances are created.
Exported bindings:
PhiGate: block for phase gates
Exported bindings
Rotation: a primitive block for rotation gates (not RotationBlock)
Exported bindings
RotationBlock: a primitive block for arbitrary rotation: Rz Rx Rz
Exported bindings
RotationBlock is not PrimitiveBlock, it is consist of single qubit arbitrary rotation blocks.
Then we can just use a KronBlock with a ChainBｌｏｃｋ. But if there is any specific optimization for this we can always define a PrimitiveBlock for this architecture.
or
