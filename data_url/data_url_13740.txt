Title is pretty self-explanatory, but need to add functionality for angle. This includes an AngleNoise channel based on cirq and also an add_angle_noise function that can be used as a scale_noise function.
I'm adding this to the second milestone.
Great!
@yhindy Is this likely to make this milestone or should we push it to the next one? I know you're busy finishing up the semester.
Requirements:
Requirements:
Question about #1: should the scale_noise function return NUM_SHOTS circuits? When implementing the noise sampling, it is on a per-shot basis unlike unitary folding.
One issue in order to get this to work:
I need cirq's CXPowGate,  CZPowG, which are only available in cirq 0.8.0. Will we be updating mitiq to be compatible with this version?
I need cirq's CXPowGate, CZPowG, which are only available in cirq 0.8.0. Will we be updating mitiq to be compatible with this version?
Yes the current Cirq dependency is 0.8.x.
Question about #1: should the scale_noise function return NUM_SHOTS circuits? When implementing the noise sampling, it is on a per-shot basis unlike unitary folding.
I'm not sure I fully understand, but in general it should return one circuit. If it returned NUM_SHOTS circuits instead of one, what would the differences in the returned circuits be?
Ah this is a good point @yhindy that I think may require some updating of our abstractions. Let me know if I understand this correctly.
Parameter noise scaling doesn't result in a single circuit, but rather probabilistic perturbation onto the circuit every single time that it is run. Thus the natural type would be something like:
where what is returned is a generator of QPROGRAMs, e.g.
If in advance you knew how many you needed then you could do
where the returned list has length num_shots.
Of course this breaks the type of scale_noise in both cases.
Given the current setup, I think this could be done by altering the executor every time that the noise scale changes. The conceptual change that this new method introduces is that noise scaling and execution are not always decoupled. In this case there is some state that needs to be passed between them.  Would likely be worth thinking about how best to do this. It will also come up in PEC and randomized circuit compiling stuff I think.
Am open to suggestions if there's a simple way to do things using the current abstractions.
Idea:
Change type of executor to take in executor(Callable([] -> Circuit) -> expectation value).
Noise scaler needs to have form above ^ where noise scaler returns generator.
This could require a larger architecture change. Need to discuss
Superseded by #276 and #265.
