We recently got the compilation error C2398 (interestingly, it is C2398, not C2397, as listed here) during nightly build on Windows platform.
The ln 106 in tfq_calculate_unitary_op.cc is this.
The remedy in MSDN docs is specifying the type casting, e.g. static_cast<ptrdiff_t>(j) and  static_cast<ptrdiff_t>(k) in my understanding.  In addition, when I looked up the definition of tensorflow::Tensor::tensor(), I found out:
I am curious about if static_cast<size_t>() is also possible or not. However, we really want to take 64-bit address due to the big size of tensors, but the fact that size_t can be 32-bit, dependent of platforms, and I am worrying if it is intended behavior or not.
I hope to hear your ideas. Thanks!
Ahhh I saw the build failure. I had come to the same conclusion but opted to use size_t I'm not as worried about 64 bit indexing for unitary matrix for the following reason:
A unitary has memory footprint 2^2n * 64 bits, indexing into output_tensor using a size_t will work up to 31 qubits meaning we'd need to have allocated 35 Exabytes before we hit an overflow error. So I think narrowing down to size_t or ptrdiff_t is safe in this case.
With state it wouldn't be because 2^n * 64 bits with 33 qubits is still in the gigabtyes range so in state we do need uint64_t. I just opened #218 for your approval :)
Oops, interesting. I retriggered the windows build, and found out this message:
Please let me open a PR to fix it after a few minutes. Thanks.
Oops guess windows is still picky about the difference between size_t and ptrdiff_t haha.
Saw windows compiler was satisfied with our remedy :) @MichaelBroughton  Thank you for your help!
https://pypi.org/project/tfq-nightly/0.3.0.dev20200424/#files
