I was wondering if it was possible to find ground states for spin chain Hamiltonians with long-range interactions i.e. beyond nearest neighbor.
Currently, this is how I create a nearest neighbor MPO e.g. for the XX model
where L is the length of the spin chain and h is a coupling constant.
What I would like to do is create an MPO for a Hamiltonian with arbitrary long range interactions e.g. a term with three sites might look like
However, when I naively try to do this, I get the following error:
Is there any way to get around this error? Thank you.
Since this is for DMRG you just need to find an MPO representation of the Hamiltonian H, i.e. entries of it tensors.
Thinking about finite state machines is one way (the following has quite a clear pic)
https://arxiv.org/abs/1909.06341
Alternatively just define the single term MPOs then sum them and compress (both of which quimb can do).
https://arxiv.org/abs/1611.02498
However do you just need short-range but 3-body terms like XXX or long range interactions like XIIIIX or arbitrary long range, k-body terms like XIIXIIIZ? The efficiency (bond dimension of the MPO) will depend on this quite a lot.
Here's an explicit example for the kind of thing you might have to do for the 3 body term you give:
Those 5 lines roughly described, as we travel along the chain:
Having this stuff automatically done in quimb would be nice! But I suspect also fiddly to handle the most general cases.
Also just to illustrate the other method, here we add our 3 body MPO to the heisenberg MPO, compress it, then find the groundstate:
Thank you very much for the explanation and references. Ideally, I would have arbitrarily long range k-body terms, but these may be truncated.
I think I understand this procedure though I need to read [1909.06341] carefully.
Say, I want to add a h * XZIX interaction. Then, I would instead create the MPO as:
Is this correct?
That looks right. Complications are:
or you could re-use the first X and branch from the '1' state instead:
Alternatively, you can just define them all separately, sum them, then compress. But this might get slow for many terms and is not guaranteed to find the optimal bond dimension.
In case he has any recommendations @mattorourke17 I think knows a lot more than me about these things.
Thank you, that's very helpful.
