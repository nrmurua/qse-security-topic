If we attempt to check if two gates are the same, it fails. I am not able to figure out why it happens.
I need to do something along the lines of
I noticed that the __str__ and __repr__ in https://github.com/qutip/qutip/blob/master/qutip/qip/circuit.py#L115 only return the name, controls and targets and do not show the arg_label or arg_value. This becomes important when we wish to do something like a pi/2 vs a pi/4 rx rotation. Both the gates would look same in this case unless the arg_value is considered.
Perhaps we wont ever compare two gates with targets/controls specified but even this fails
Checking equivalence of gates now requires the user to check each attribute individually. While this is an explicit way of doing this but is there any merit in having a direct checking of gates? In any case, is there any benifit to fixing the above mentioned behavior and having a gate checking function where one does not need to explicitly check all the parameters ?
I can't really see an application for checking whether two Gates are equal. Even if all the parameters are the same, but it will not be in the same place in the circuit, so it won't be doing the same job. This does not mean that there is not one. I just can't think of one.
However if there exists a __eq__ method, then it should just be checking whether the two gates would perform the same unitary operation, which I guess means comparing the name, arg_label and arg_value.
If you want to check whether it is the same Gate in the network, then can you not use is as it should be the same object.
I might be a bit confused here. What do the targets and controls params do? Do they specify circuit connections?
I can't really see an application for checking whether two Gates are equal.
Well, I needed something for the ICM code I was writing. If a gate has the argument pi/2 and is a rotation about rx, it is called a "V" gate and later there is some conditional replacement for the V gate. But I guess we could always declare a dictionary that maps the gate.name and gate.arg_label to something. That's what I am doing here in this commit
What do the targets and controls params do? Do they specify circuit connections?
target and controls specify the index of the qubit you want to apply your gate to. In a QubitCircuit, gates are added in a list. Indexes give the sequence of gate addition. The targets and controls arguments give the qubits which are affected by the gate. For example if you wish to apply a Hadamard to qubit 3 you would set targets=[2]. Similarly, if you wish to apply a Toffoli gate with controls on the first two qubit and targets on the 5th then you would set those parameters as targets=[0,1], controls=[4]
Now I feel we do not need a gate checking and user can do it by declaring a dictionary but I suggested this because if someone were to just compare two gates directly, he would get a false result. But I think this situtation would be very rare. If there is no further need for this then I think I should close this.
Thanks for the detailed explanation. I understand quite well I think now.
I think you could raise a small PR that implements a __eq__, __cmp__ and __ne__ for the Gate
I think a Gate would be considered equal if it has the same name, arg_label and arg_value.
You might have to be careful when checking the arg_value. If it is an irrational, then you have to consider the precision to which you would consider it equal.
You might have to be careful when checking the arg_value. If it is an irrational, then you have to consider the precision to which you would consider it equal.
I think arg_label is used to get around that. The angle will be specified as r"\pi/2" or r"\pi/10" just to get around the precision issue. I could just use that. If the arg_value needs to be compared then I think 3 decimal places should be fine. But I ll keep a check which first looks for the arg_label and compares it. If that is None then goes for the arg_value comparison.
Reference also to #440 to have an overview of QIP issues there.
@quantshah are you raising a PR for this?
No, this can be closed for the reasons discussed by @ajgpitch
There would be no general use case for checking if two gates are equal. One always needs to check something specific about the gates (say targets, Unitary etc.) Closing.
