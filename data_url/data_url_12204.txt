Running several of the UCCSD variational chemistry examples (NaH dissociation curve using VQE and UCCSD) run extremely slow.  Is this expected?  It's taking over 24 hours.
If done this on a Ubuntu VM with 4 cores and 16GB of RAM and on a Mac with 4 cores and 16 GB RAM.
The time you need is related to the problem size and your setting.
By using UCCSD, you create a very long circuit for NaH (2784 operations with depth 1655), and you also evaluated a large distance between two atoms, which makes harder to converging to ground state energy if you only have HF guess.
And as you can see that the number of evaluation you needed at the bottom to build the whole dissociation profile. (~40000 evaluations in total)
On my laptop (4 cores with 16 GB memory), each evaluation take me about 3 seconds, so it requires about 33 hours.
if you are interested to see how many time you need per evaluation and the circuit summary, you can turn on the Aqua logging.
Thanks for the info.  I'm running on my Mac.  It has been running since Friday and is only on step 20.
I'll probably cancel it and add the logging you indicate to get a better idea what it actually is doing, since that's what I'm really interested in anyway.
Has anybody looked into parallelizing some this processing?  It might be a bit problematic since we are dealing with Python.
Hi Joe,
One other thing may be worth trying. You can run the following code in a python interpreter or notebook cell:
If your result is 'statevector_simulator_py', then your installation or execution of the cpp simulator may have failed, in which case it would be failing over to the python simulator, which is considerably slower.
I'm not sure if it is important or not but the routine is trying unsuccessfully to find nlopt.  Maybe that is causing the problem?   I am using the default environment for Anaconda, and I install qiskit, aqua and aqua-chemistry using pip.
2018-11-15 07:04:21,493:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.components.optimizers.nlopts._nloptimizer error No module named 'nlopt'
2018-11-15 07:04:21,495:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.components.optimizers.nlopts.crs error No module named 'nlopt'
2018-11-15 07:04:21,499:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.components.optimizers.nlopts.direct_l error No module named 'nlopt'
2018-11-15 07:04:21,502:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.components.optimizers.nlopts.direct_l_rand error No module named 'nlopt'
2018-11-15 07:04:21,504:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.components.optimizers.nlopts.esch error No module named 'nlopt'
2018-11-15 07:04:21,507:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.components.optimizers.nlopts.isres error No module named 'nlopt'
2018-11-15 07:04:21,551:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.classical.cplex.cplex_ising error CPLEX is not installed. See https://www.ibm.com/support/knowledgecenter/SSSA5P_12.8.0/ilog.odms.studio.help/Optimization_Studio/topics/COS_home.html
2018-11-15 07:04:21,554:qiskit_aqua._discover:DEBUG: Failed to load qiskit_aqua.algorithms.classical.cplex.simple_cplex error CPLEX is not installed. See https://www.ibm.com/support/knowledgecenter/SSSA5P_12.8.0/ilog.odms.studio.help/Optimization_Studio/topics/COS_home.html
no, it is not, without those packages, you won't be able to use those components (e.g., nlopt is a global optimizer) but it won't degrade your speed.
@hellmersjl3ds do you still encounter any issue for the simulation?
I haven't tried again in a couple of months, but I'm assuming the problem still persists.
@hellmersjl3ds with qiskit-aqua and qiskit-chemistry from the master branch, on average, each evaluation only require 0.5 seconds on a 4 core macbook.
Nonetheless, it is reasonable to take a long time if you would like to build a whole dissociation curve.
I've run NaH for two distances, pts = [1, 3.8]. Time taken by the job was 13:14:46 when run on an HPC with backend = BasicAer.get_backend('statevector_simulator').  The number of steps was 522 and 10,000 for the individual VQE eval. I think plotting a complete curve would actually take more than 2 days. So, how's this advantageous?
Closing this as it is quite old. And is more or less a question thread as to why things take a long time.  Can be reopened in the Aqua repo if need be.
