We now have the method matrix in a few classes (various linear combinations and pauli strings since #3096). We should define a protocol for this to make it easier to endow objects (especially the not-necessarily unitary ones) with matrix representations.
Then we can take advantage of it in protocols.unitary so that objects that have a matrix also have a unitary (as long as the returned matrix is_unitary). This would simplify classes that currently have both matrix and _unitary_.
Also, we should rename matrix to _matrix_.
Discussed on Cirq Cynq: Let's figure out where introduce this protocol would help reducing duplication.
@cduck pointed out that we should use the protocol if we have types that don't know their matrix, but conceptually have a matrix that can be computed via other properties (c.f. unitary computing unitary from decomposition etc).
This suggests that protocol may in fact be appropriate - it would infer matrix from unitary and so we would only need to add _matrix_ to types that don't have unitaries (a lot fewer than all objects that conceptually have a matrix). WDYT?
In addition to the first point, I think there should be some need for users to ask for the matrix of an arbitrary object without needing to know the object's type.  Do you have a case where you use gate.matrix instead of cirq.unitary(gate)?
In other words, what does mat = cirq.matrix(obj) mean?  What can I do with mat without inspecting the type of obj?
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
