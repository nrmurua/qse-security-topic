When running the following program,we can get different unitary matrixes with different values of optimization_level.The representation of unitary matrixes are equal when optimization_level=0,1,2,but it behave strangely when optimization_level=3.
Here is the output message,it display the matrixes of optimization_level=2 and 3.
unitary1:
Operator([[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],
[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],
[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j]],
input_dims=(2, 2), output_dims=(2, 2))
unitary2:
Operator([[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],
[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],
[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j]],
input_dims=(2, 2), output_dims=(2, 2))
The two circuits are not equivalent.
It seems that one of passes in optimization_level=3 delete the swap gate by mistake.
No matter what the value of optimization_level is, the matrixes should be equal.
No response
This isn't a mistake, it's because the transpiler is free to reorder which hardware qubits each logical qubit is encoded in, and this mapping can change over the course of the circuit.  swap at the end of the circuit is done for free, because we can just swap the "logical" qubit mapping without actually doing anything.  If you put measurements after the swaps, you should be able to see this in the output of QuantumCircuit.draw.
Once layout and gate routing are being considered, the single matrix form is a bit misleading.
Thanks!That's really something I didn't consider.
