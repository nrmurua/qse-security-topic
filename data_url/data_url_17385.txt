If a circuit includes snapshots, the qasm produced by circuit.qasm() cannot be used to create a new circuit as the relevant gate definition is not included.
This raises a QasmError as the gate definition for snapshot cannot be found.
it should not be included. We actually need to remove circuit.qasm() and replace with an export and things in the the circuit that are no Qasm should just be ignored.
Shall we close this issue @maddy-tod ?
I think this problem needs to be addressed, but we can open a separate issue for it if that makes more sense.
It seems to me that raising in warning when a non-qasm instruction is being ignored as part of the generating QASM is a good compromise.
Of note: at the moment, qc.qasm() currently throws a TypeError on this example, because snapshot does not define Instruction.definition:
so we also need to fix either the handling in QuantumCircuit.qasm or that instruction.
âœ… Issue reproducible in the latest version of terra!
Output:
TypeError                                 Traceback (most recent call last)
/var/folders/6q/5vy060nd70n18078bjnxwpjr0000gn/T/ipykernel_11605/1172236089.py in 
8 qc.snapshot('1')
9
---> 10 qcc = QuantumCircuit.from_qasm_str(qc.qasm())

~/opt/anaconda3/envs/QiskitDevenv/lib/python3.9/site-packages/qiskit/circuit/quantumcircuit.py in qasm(self, formatted, filename, encoding)
1437
1438                     existing_composite_circuits.append(instruction)
-> 1439                     _add_sub_instruction_to_existing_composite_circuits(
1440                         instruction, existing_gate_names, existing_composite_circuits
1441                     )

~/opt/anaconda3/envs/QiskitDevenv/lib/python3.9/site-packages/qiskit/circuit/quantumcircuit.py in _add_sub_instruction_to_existing_composite_circuits(instruction, existing_gate_names, existing_composite_circuits)
3012     instruction to existing_composite_circuit list.
3013     """
-> 3014     for sub_instruction, _, _ in instruction.definition:
3015         if (
3016             sub_instruction.name not in existing_gate_names

TypeError: 'NoneType' object is not iterable
Output:
TypeError                                 Traceback (most recent call last)
/var/folders/6q/5vy060nd70n18078bjnxwpjr0000gn/T/ipykernel_11605/3987447273.py in 
2 qc = qiskit.QuantumCircuit(1, 1)
3 qc.snapshot('1')
----> 4 qc.qasm()

~/opt/anaconda3/envs/QiskitDevenv/lib/python3.9/site-packages/qiskit/circuit/quantumcircuit.py in qasm(self, formatted, filename, encoding)
1437
1438                     existing_composite_circuits.append(instruction)
-> 1439                     _add_sub_instruction_to_existing_composite_circuits(
1440                         instruction, existing_gate_names, existing_composite_circuits
1441                     )

~/opt/anaconda3/envs/QiskitDevenv/lib/python3.9/site-packages/qiskit/circuit/quantumcircuit.py in _add_sub_instruction_to_existing_composite_circuits(instruction, existing_gate_names, existing_composite_circuits)
3012     instruction to existing_composite_circuit list.
3013     """
-> 3014     for sub_instruction, _, _ in instruction.definition:
3015         if (
3016             sub_instruction.name not in existing_gate_names

TypeError: 'NoneType' object is not iterable
With the updates to the OpenQASM 2 parser in #9953, the issue as originally presented is fixed.
It's unclear to me that snapshot should have been allowed to be exported at all (since it's a non-unitary Instruction) - imo that should be an error in OpenQASM 2 as the circuit is unrepresentable - but that's a separate issue (see #7351, #7750).  I'm going to close this as "somewhat fixed" now, and to leave coverage of my other concern to other open issues.
