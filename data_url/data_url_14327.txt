When using the OptimizeCliffords transpilation pass, the code assumes that the gates in the circuit are of the object Clifford. Note that the CNOT gate, X, S, etc gates are in the Clifford group, but they are not instanceof Clifford.
This distinction is not clear in the documentation and users might think that their circuits are optimized by the pass even though they did not have the right type of Clifford gates in the circuit.
Hi @Aerylia!
The PR #8907 was merged yesterday, and in particular it defines a new CollectCliffords transpiler pass that walks over a circuit and collects blocks of "clifford" gates into "Clifford" objects.
The OptimizeCliffords transpiler pass was the initial proof-of-concept transpiler pass that shows that we can do things more intelligently by adding Clifford objects to quantum circuits as abstract mathematical objects. It will likely be deprecated in the near future.
We don't yet have a perfect workflow to resynthesize "clifford"-like parts of the circuit, but we are actively working on this. The workflow that we are slowly converging to is along the following lines (the code below should run fine with the current "development" version of qiskit):
This produces the output shown below.
The first circuit is the original circuit. It consists of various gates in the Clifford group but also a Toffoli gate in the middle. The second circuit is the circuit after the CollectCliffords transpiler pass. It consists of two Clifford objects separated by the Toffoli gate. The third circuit (the output was automatically split into multiple lines) is obtained by synthesizing the two Cliffords.
There are still multiple things to be done on our part, such as extending CollectCliffords transpiler pass to construct Clifford objects from gates in the Clifford group and other Clifford objects, or extending high-level-synthesis to accept the coupling_map argument. We are working on this.
If your are planning to write new synthesis methods for Clifford which anyone in the qiskit community would be able to use, the best approach would be to create a new repository in https://github.com/qiskit-community and implement Clifford synthesis routines based on the "high-level-synthesis plugin interface". For an example how to do the latter, please see the code at https://github.com/alexanderivrii/KutinSynthesisPlugin; please keep in mind that this is a hastily-thrown-together proof-of-concept code to synthesize linear functions using Kutin et al's method (and this code may even have bugs). In fact, we have a PR #9098 that adds a cleaned up version of this code to qiskit itself.
Please tell me if these comments address the issue. And of course, any comments on the suggested workflow are highly welcomed.
One somewhat related question. Let's suppose that our quantum circuit has many cnot-gates, but also some phase and hadamard gates. How to decide whether it's best to collect and to resynthesize blocks of CX-gates (using synthesis routines for linear functions) vs. blocks of CX+phase gates (using synthesis routines for these) vs. blocks of Cliffords gates?
