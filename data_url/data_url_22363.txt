Using 1.0 on Windows, running the code below, setting t to be anything longer than 0.2 results in ttl15 staying high indefinitely.
The pulse is working fine. The RTIO FIFOs are reset by the next exeriment. #391
You can ttl15.sync().
If there is no experiment after it doesn't turn off. self.ttl15.sync() fixes it, but do we need to call it for every pulse then?
There is the idle kernel.
No. Until that hidden and undesirable resetting of the FIFOs is fixed, you have to make sure that the pulses pushed into the FIFO are executed. Just sync() (or a gate and count()) at the end of the experiment.
Looks like that basic tutorial/description of how ARTIQ RTIO works and how experiments are executed is desparately needed.
Again, not well documented anywhere unless you like reading through old closed issues.  The documentation for artiq.coredevice.ttl() should explicitly state that the kernel will load the FIFOs and exit, and if a new experiment comes in (including idle kernel), it will clear them
@jordens yes, a good description of how the kernel "thinks" and what the process is for an experiment executing will save you from being asked all these same questions yet again for each new user who starts up with ARTIQ :)  This architecture description/tutorial is very much needed.
Paraphrasing what others have said and meta-diagnosing is not very helpful.
Your suggestion to extend the API documentation doesn't cut it. Describing the concepts there would be wrong.
Are you guys helping each other locally a bit? That might avoid some of this ping pong until the documentation is perfect.
you have to make sure that the pulses pushed into the FIFO are executed. Just sync() (or a gate and count()) at the end of the experiment.
Or wait until core.rtio_counter() is above now(), as I pointed out in other issues.
