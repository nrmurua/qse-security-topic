For the same underlying operator, MatrixEvolution.convert and PauliTrotterEvolution.convert return different results.
Evolved operators (represented by matrix_1 and matrix_2) should be close, but are far apart.
MatrixEvolution returns the correct result. matrix_3 computed as follows gives the correct result, which agrees with matrix_2.  The wrong result, matrix_1, differs by nearly a constant phase, approximately exp(-j). This is likely related to the introduction of global phase in circuits.
If we take different operator
then for matrix_1 / matrix_3, we get
Are you sure ? With that operator, I get close to the same result with all three methods. The first is even better if I use PauliTrotterEvolution(trotter_mode='suzuki', reps=6)
I also have the same problem. When I run this code matrix_1 and matrix_3 (which would be the right one) are the same, while matrix_2 is something completely different and it does not matter how many reps are used.
matrix_1 and matrix_3:
while matrix_2:
matrix_3 = sp.linalg.expm(1j*op.to_matrix())
I think you need -1j rather than1j here. But, other than that I get the same results from your code as in the previous examples. I also see that adding reps only changes the global phase difference. The real part appears to approach zero, but the imaginary part seems to approach $\approx 1.05$ . Eg np.log(0.49531658+0.86862885j)  -> (-7.270854866734788e-05+1.052555650202321j)
Hi @jlapeyre ,
just to make sure that we run the same version, could you please run the following code?
What is your output?
This is ratio1
Terra 22adee6
Aqua 63b5029
When I updated aqua, I get the same result as yours. Before I got matrix from my previous comment...
Thanks for your time @jlapeyre , I will close this issue.
I'm reopening the issue. There have been multiple bugs affecting evolution. I think updating solved one issue, but not both (or all). The Trotter evolution still disagrees with "matrix" evolution for some hamiltonians, in particular the one in your first example. This is the global phase problem I mentioned above.
In addition, if you execute the circuit, rather than converting to matrix, there are other bugs. But, that's for a separate issue.
