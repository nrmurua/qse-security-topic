For tasks/backends where you are not dynamically assigning qubits, writing circuits with physical qubits is a must. However, the single-integer naming scheme for physical qubits is not always a great match. There may be multiple types of physical qubit, they may be laid out in a grid rather than a line, etc.
Right now the best solution I can see in the spec for giving qubits names is to put the whole circuit in a subroutine, and pass the physical qubits as arguments. This is a bit clunky and perhaps unnecessarily forces the backend to support subroutines, a potentially complicated feature, just to get semantic qubit names.
I can think of two modifications which could alleviate this:
The first is nice in that it frees the backend from needing to maintain a particular enumeration of physical qubits, and map between the backend names and this enumeration index.
The second is nice in that it would also allow for the additional benefit of giving physical qubits names which are unique to the circuit e.g. maybe in a some circuit $19 acts like an ancilla and could be named as such, while other circuits it may act as a data qubit.
My preference would be to see both changes, but I think (2) alone would be sufficient to remove the pain point.
I must have missed the aliasing section in my previous read. This addresses my concerns.
sounds reasonable @PhilReinhold
See PR #473 and comment on it.
It's fine if you think the resolution should be opposite of that implemented in the PR.
What's important is clarity.
