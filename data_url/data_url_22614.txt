If there are multiple channels, the logging should get its own channel and not be mixed with the regular stdout stuff. But using stderr exclusively for logging would be fine by me as it makes those processes  that don't need extra pipes easy to debug. Then again most processes will need an extra pair just for basic request-reply: that will clash with print() if req-rep doesn't get its own pipe pair.
We've already decided to do this via TCP over localhost, as this is the most portable and least intrusive IPC method.
Pretty intrusive as it kill interaction and debugging through stdio, right? Details please. Is this muxing the channels over one TCP connection? Anyway, what I said still applies mutatis mutandis.
No, no muxing, several TCP connections. You could use wireshark for debugging, which would be vastly more convenient than with stdio.
As for interaction, you could even use netcat.
I don't like TCP for IPC. Keeping the connections closely coupled to their processes as pipes do is better for e.g. handling graceful subprocess termination.
Keeping the logging on stdout/stderr makes processes that don't use pipes (e.g. controllers) easier to debug and runnable standalone.
Does the use of pipes complicate Windows compatibility vs using TCP?
Yes. Python does not officially support pipes on Windows with asyncio, so there will be some hacks involved.
Done and works on Windows, still need to convert applets to it (and generally rework the applet/GUI protocol).
