When trying to fix this issue, I found that RawFeatureVector (a qiskit-machine-learning class which extends BlueprintCircuit) cannot be copied properly using .copy().  This affects other actions that involve copying the circuit, such as parameter binding (which by the way, does not support in-place execution, I am not sure if this is the intended behavior) raw_feat_vector = raw_feat_vector.bind_parameters(bounds).
The following code shows how num_qubits on the copied map is 0, when it should be 2.
An identical copy of the original circuit.
I believe this issue happens because BlueprintCircuit does not have a dedicated copy method. The QuantumCircuit.copy() method does not include a building step, which is fine for normal QuantumCircuits, but for  BlueprintCircuit, this leaves the copy operation incomplete.
On "blueprintcircuit.py" line 59, we can see the build method, which requires self._data==None:
And on the definition of QuantumCircuit.copy() ("quantumcircuit.py" line 1923), we can see that the copy method populates the _data attribute, so this also blocks potential future calls to the _build method (if that was ever an option).
I think that overriding the copy() method for BlueprintCircuit and adding a specific build step  should not be too complicated, and could fix this issue.
I can only reproduce this for the RawFeatureVector, not for other blueprint circuits (like QFT or RealAmplitudes). So here I think the problem is that the raw feature vector explicitly keeps the number of qubits as separate parameter, whose value is not copied.
Oh, I didn't get to try with other circuits, but that makes sense, thanks!   I will keep this issue open until I manage to fix RawFeatureVector just in case.
Fixed!!
