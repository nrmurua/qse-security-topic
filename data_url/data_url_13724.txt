It may be nice to have an option to output more than just the extrapolated zero-noise value in, e.g., the return value(s) of Factory.reduce methods.
For example, if I wanted to fit the line f(x) = a x + b, it would be nice to output the optimal a and b parameters in addition to f(0). This would be useful for visualization and potentially other things.
Access to this data seems like a good thing to me. Though rather than changing the output type, perhaps it could be stored on another attribute of the Factory. This may be more structurally robust.
Re-surfacing this @andreamari @willzeng as it follows Pull #239 with more work to factories. Do we all agree optimal coefficients should be stored in factories?
If so and anyone wants to take this, please assign yourself. Otherwise I can take it.
I'm agreed on storing the optimal coefficients as a Factory attribute
I am happy to do this.
What option do you prefer between these:
Just storing the optimal parameters as a list of floats in  self.params
Storing also the ansatz (a function with signature [scale_factor, params] -> float ). In this way the user can simply do something like this:
best_fit_function = fac.ansatz(x, fac.params)
Storing in self.model an object of a class Model which internally stores both the ansatz and the optimal parameters.
Of those I lean towards (3) as the cleanest. Making it callable as well is a very nice touch. What do you think @rmlarose
Thanks @andreamari. I would include essentially all of these ideas.
It would be nice to have the optimal params as an attribute so people can do whatever they want with them (point 1). This could be initialized to None or an empty list before reduce is called, then they get set in reduce.
For points 2 and 3, one idea for the interface is (note this uses a list of x values (scale factors) instead of just one):
But there's a fair amount of flexibility here.
