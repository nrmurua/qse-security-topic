When working within a DAGCircuit, both the DAGNode instance and the op hold conditional information, in op.control and DAGNode.condition. This is problematic because
Ideally, we should reduce conditionals to being described in one location.
Making the description in the op authoritative would be simpler to implement, the DAGNode property could redirect through op.control. Making DAGNode.condition authoritative would move towards making gates instances more portable, but would, at least in the near term, be inconsistent with how ops are conditioned in QuantumCircuits.
Similarly, the condition kwarg for apply_operation_back could be removed (in favor of having op.control set), or if we think there's a use for leaving it as a kwarg, we should more clearly define the expected behavior when both the condition kwarg and op.control are provided.
Hi there! I'm interested in helping out although I have a few questions,
Please do correct me if I'm misunderstanding anything.
Hi @drholmie ,
(N.B. after this issue was opened, Gate.control was renamed Gate.condition)
The issue for apply_operation_back is that the condition kwargs ignores and can conflict with op.condition. So for example, if I have op.condition == (cr0, 0) and I apply_operation_back(op, [qr0[0]], condition=(cr0,1)), I'll generate a DAGNode with node.condition == (cr0,1) but node.op.condition == (cr0,0). This may in part be resolved by the answer to 2), but at least we can better document the behavior of the condition keyword arg, and the expected behavior if op.condition is set.
I had in mind that we would make one an alias for the other, e.g. DAGNode.condition is a property that reads from/writes to DAGNode.op.condition.
I don't believe there are any active bugs as a result of this issue but its a source of confusion for pass developers.
Thank you for clearing things up :)
If I've understood correctly a solution could also be to change the definition of apply_operation_back from
def apply_operation_back(self, op, qargs=None, cargs=None, condition=None): 
to
def apply_operation_back(self, op, qargs=None, cargs=None):
and then appropriately change mentions of condition to op.condition.
Although this would need to also change in apply_operation_front I'm assuming and other places to change the function call to the less bulkier one.
Is this a viable solution?
@drholmie Sorry for the delay, that sounds like the right plan. (A bug was reported this morning that was caused by this issue, #4044 .)
No worries :) I'll also look into the bug and begin working on this. Thanks for getting back @kdk !
