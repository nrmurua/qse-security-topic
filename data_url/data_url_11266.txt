In OpenFermion, "ops" has been the place we keep data structures. This is somewhat strange actually, but it is a closely followed policy so far with the exception of the Givens rotation code. I think it came from "ops = operators" which is a bit unusual, I know.
As we put more and more helper functions into OpenFermion for compiling circuits in plugins, I wonder if we should consider reorganizing the modules and make one called "algorithms" or something like that where the Givens code would work. This has the downside of potentially breaking people's code but I think having a clear systematic organization is important. Thoughts @jarrodmcc and @kevinsung ?
The reason it's in ops is that QuadraticHamiltonian depends on it. The bigger problem is that we have data structures that use stuff that belong in a different module (I'd argure that general_basis_change in _polynomial_tensor.py also belongs in a separate module) but the only other place we have to put that stuff is in utils, which depends on ops. So I agree that we should have a module that is lower in the import hierarchy than ops. algorithms is a bit vague; perhaps linalg would be better. A lot of the code in utils should probably be moved there too.
This is not the only reorganization I would do if I had my way. I would prefer to do a big restructuring before version 1.0 which would make the library easier to maintain. I mentioned some ideas at #271 but I'm sure I could come up with more. In order to allow us the flexibility to do such restructurings, I think we should be encouraging imports from the top level, i.e.
or
instead of
That way we can move stuff between modules without breaking anybody's code.
givens_rotations is now in linalg, so I guess this can be closed.
