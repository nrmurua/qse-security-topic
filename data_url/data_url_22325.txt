Using 1.1,
If two arguments have the same name but are in different groups, only the second one displays.
The use case here is where we have a variable in the experiment and a value in the fit that would be nice if we could have the same name under different groups.
Groups are only decorative. How would you access test1 in the experiment with the code above?
I should have picked a better example. The actual use would be more like this,
So you would call them differently anyway. One would be self.sc1.test1, the other self.sc2.test1. However, only one of them shows up on the gui.
Arguments are very much like datasets in the sense that their names need to be unique. Since you have to adhere to a global naming scheme for datasets already, is doing the same for arguments not intuitive and least confusing?
Sure, but the same way you could have a hierarchy in the datasets using ., it would have been nice to have similar structure with the arguments. The case I was thinking of was something along the lines of self.tpi from the experiment and self.fit.tpi from a fitting function instead of something like self.fit.tpi_fit.
That would imply that from within a given subexperiment you can never access arguments used in sibling subexperiments or in parent experiments.
Can you do that currently?
From each subcomponent it seems like I can only access variables within it. If I try accessing self.test0 from either of the subcomponents I get the error that those subcomponents don't have any attribute test0.
@r-srinivas Yes and it works fine here (release-1):
Please post the exact error message and steps to reproduce.
If you want test0 in the subcomponents, you have to request it via get_argument/setattr_argument, or have the parent pass it to them.
Okay. But any two subcomponents still can't share the same argument name, right?
I ran into a problem where I wanted to run the following experiment,
The experiment runs as it should, one after the other but on the gui I only see the arguments from one of the two Raman_SB_Scans. The build looks like,
With Scan_1D calling _build in its build function. We can work around this by having two separate experiments, but there could be other experiments where this structure is useful. Having the arguments under different instances not showing up is problematic for that.
You could write a sub-experiment method such as:
and set different values of self.arg_prefix in the sub-experiments.
