From the Language Description in the OpenQASM3 Live Spec publicly available at:
https://qiskit.github.io/openqasm/language/index.html
The human-readable form of OpenQASM is a simple C-like textual language. Statements are separated by semicolons. Whitespace is ignored. The language is case sensitive.
I agree with @steleman, we need to consider this statement, and if we keep it make decisions that are consistent with the above philosophy. Thoughts @blakejohnson , @stevenheidel , @awcross1 , @ajavadia, @levbishop ?
I'd propose weakening the statement:
"The human-readable form of OpenQASM takes some inspiration from languages like C. Statements are separated by semicolons, multi-line blocks are delineated with braces, whitespace is ignored, the language is case sensitive."
But otherwise, we should keep the freedom to make syntax choices that are more natural for the novel kind of work we're doing.
This is also relevant to whether we maintain explicit typing as discussed in #130. I would advocate we do, as in C
I strongly disagree, in principle, with the notion of creating a new programming language by copying-and-pasting one's favorite syntax idioms from an arbitrary number of popular yet otherwise unrelated languages.
There is a science of designing a programming language. It's not just an exercise in copy-and-paste.
The notion of freedom does not belong in a programming language definition.
I agree with what @steleman and precisely because of it is why I would move away from C. I also agree with @stevenheidel in loosening that statement. If want OpenQASM3 to be readable, let's make an effort around it. If we want to restrict the grammar to make the parsing fast, so be it.
Just let us agree on our design values and try not to inherit constraints nobody needs.
If we want to restrict the grammar to make the parsing fast, so be it.
Problem is, parsing speed is not the problem here. Parsing is fast. Even for something as complex as C++.
The complexity starts after parsing is done. That's where compilers spend the vast majority of their time.
I believe this issue has largely been resolved. Can we close @steleman @stevenheidel @taalexander ?
Yes, I believe this is resolved.
+1 to closing it.
