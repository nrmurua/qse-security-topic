I'm trying to help patch CP2K so that it can work with MPItrampoline (by @eschnett, it provides a stable MPI ABI so that you can use different implementations without recompiling the code). This requires patching of CP2K so that MPI constants are only used at runtime rather than compile time (for example).
Unfortunately,  Fortran is not my strong point and I struggled to help write the patch (a gist of the current version for CP2K 8.2 is at https://gist.github.com/ocaisa/49aa4aa6ac1bf43b36cde1716e369824).  One issue was it was unclear where exactly the initialisation of the constants should take place, we have something now that seems to work on that front but some advice on the "correct" place for this would be useful. The other problem is that some variables (like fft_scratch_type%cart_sub_comm) are initialised, and we seem to be failing to hack this initialisation when this type is used. Finally, the patch is causing a segfault right at the end of the application and I don't fully know how to track this down (though I suspect it is related to the second issue):
Note that I'm first trying to ensure that patch works with OpenMPI before testing it (beyond compilation) with MPItrampoline.
If someone with CP2K/Fortran expertise had some advice here it would be very helpful.
Sorry for the late reply. I think, MPItrampoline is a really interesting project that addresses an important pain point with containers.
However, I don't think we should turn MPI constants into runtime values. Instead, MPItrampoline should indeed define its own constants as already suggested.
I'm going to close this for now. I'll be happy to take another look once the issue around MPI constants is worked out.
A note here from MPI 4.0 ยง2.5.4 (since this came up again in eschnett/MPItrampoline#34):
All named constants, with the exceptions noted below for Fortran, can be used in initialization expressions or assignments, but not necessarily in array declarations or as labels in C switch or Fortran select/case statements. This implies named constants to be link-time but not necessarily compile-time constants.
and (from the advice to implementors in the same section):
Using special values for the constants (e.g., by defining them through PARAMETER statements) is not possible because an implementation cannot distinguish these values from valid data. Typically, these constants are implemented as predefined static variables (e.g., a variable in an MPI-declared COMMON block), relying on the fact that the target compiler passes data by address. Inside the subroutine, this address can be extracted by some mechanism outside the Fortran standard (e.g., by Fortran extensions or by implementing the function in C).
The use of select/case statements and the use of PARAMETER were the issues that we were seeing with CP2K.
