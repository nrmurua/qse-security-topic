Is your feature request related to a use case or problem? Please describe.
It looks like at least in sparse simulator there's a single (2^n *  2^n) matrix for the whole simulation. Could this be made more generic and optimizing in the following way:
Describe the solution you'd like
Rather than maintaining a single (2^n * 2^n) matrix, each step in the simulator would take as part of the input_state a Set[Tuple[Qubit[], DensityMatrix]], and yield / feed forward the same. This set would represent the density matrix for each disjoint set of mutually entangled qubits at each step. So for instance if we have 8 qubits q1..q8 and a circuit described below, could we optimize per the below as well?
This would also solve #882: you could add a measurement gate to discard the qubit.
(Maybe these optimizations are already present? Or maybe they don't make sense? Or maybe the optimization would be irrelevant to most real-world cases? Does "noise" break this approach? I'm still getting up to speed on the code, and on QC in general).
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
I think you've more or less independently discovered the TEBD algorithm :-) xref #3630
Oops, so is this entirely covered by the MPS simulator? Would there still be benefit in adding this to sparse_simulator? @tonybruguier @95-martin-orion
The other thing I was thinking was that the independent matrix multiplications could be parallelized at each step. Though the impact there would be negligible unless all the matrices were same-sized.
It looks quite similar indeed, after quickly parsing the Wikipedia page. Note that I am currently working on adding the ability to use 2D topologies. Will let @95-martin-orion comment as there are many things I don't understand.
Yes, the method described here lines up with the TEBD / MPS simulator. I don't think we need to add it to sparse_simulator, especially considering that other simulators (primarily qsim) are preferred when performance is a concern.
On a more general note, one of the reasons Cirq supports such a wide variety of simulators is that different simulators are preferable for different purposes:
By allowing each simulator to focus on its strengths, users can get the best performance possible by choosing the right simulator for the job, rather than relying on a single "general-purpose" simulator. That said, qsim is still our fastest option for most cases.
Cool, I will close the issue.
@95-martin-orion @tonybruguier qq, did the implementation of MPS also solve #882? If not, could/should it?
I don't think so - the intent of #882 as I read it is to provide some way for the circuit itself (as opposed to a simulator executing the circuit) to indicate "Hey, we don't need this qubit anymore, please ignore it." MPS might be able to identify "orphaned" qubits, but other simulators may or may not be able to.
That said, the discussion on #882 doesn't give a clear indication of whether we actually want this ability. I would recommend bringing it up at the Cirq sync or discussing further on the issue before diving too deeply into implementation.
There's also cirq.contrib.quimb which (as I read it) is closer to the original idea in the top post
