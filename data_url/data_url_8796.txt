I was looking to submitting a Rust API implementation, but I was developing on the BetaRelease branch and after moving to the Develop branch I seem to have been caught out by some changes.
Firstly, the CQC version is now 1, but I based my work on version 0 published here. Are the details of version 1 published anywhere?
Also, I cannot get a simple send-receive test to pass anymore. Having created a qubit, I send a SEND instruction, but the backend responds with error code Unsupported (22). I assume this has something to do with the changes between versions. I tried to look for the log file, but I couldn't find it.
This happens when I use the startAll.sh script, but the test passes if I use the startAllLog.sh script. I don't know what the difference is though.
Hi @Wojtek242 !
Yes, I must admit that we are behind with updating the docs for the new CQC interface. We however working on this right now and I will let you know when we've properly documented this.
Hi again @Wojtek242
The docs are now largely updated, in particular for the CQC interface, see here. Unfortunately the C library itself is not yet update to reflect the changes of the CQC, which I've opened up an issue for. However, the Python library is.
I understand that version 0 is completely obsolete and there won't be a CQC backend (including a live non-simulated one) that will support it?
And thanks for the update! I will try to update my Rust library and submit a pull request at some point.
As part of that I may just update the C library and its tests as well given that I based the Rust off of them
@Wojtek242
That's right, version 0 of CQC won't be supported. I'm sorry if this caused you unnecessary work! But version 0 was with the Beta version of SimulaQron and we realised that a lot of unnecessary information was sent using the Xtra header. This is now split into multiple different headers depending on if you for example send a qubit or perform a two qubit gate.
If you anyway want to access previous versions of SimulaQron that use version 0 of CQC you can do so by the "tags" in the master branch (we no longer use different branches for different versions).
If you feel like updating the C library, you are most welcome to do so :)
I don't mind the extra work, I was just curious if I should leave any code to support version 0 in case some backend may still be supporting it. The changes you describe sounds like they will fit in well with the API I wrote so should not be too hard to implement.
I will close this issue now as the new documentation has resolved it.
