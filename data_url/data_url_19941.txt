Originally posted by blackbird1999 May 31, 2023
44>D:\CDK8.1\liboqs\src\sig\falcon\pqclean_falcon-512_avx2\sign.c(1033): error C2440: 'function': cannot convert fr
om 'int' to '__m128i' [D:\CDK8.1\liboqs\buildmt\src\sig\falcon\falcon_512_avx2.vcxproj]
41>D:\CDK8.1\liboqs\src\sig\falcon\pqclean_falcon-1024_avx2\sign.c(1033): error C2440: 'function': cannot convert f
rom 'int' to '__m128i' [D:\CDK8.1\liboqs\buildmt\src\sig\falcon\falcon_1024_avx2.vcxproj]
It appears that the AVX2 code no longer matches that found here https://falcon-sign.info/falcon-round3.zip. In particular, it no longer has the #ifdef for x64/x86 that allows it to compile.
I'm not sure of the steps to report such things. Thanks for your help!
Sincerely,
Jonathan
Should be fixed by pulling in PQClean/PQClean#492 once it lands.
Would it be sensible to add this as a known issue to the 0.8.0 release notes in github (not those in the release itself, of course)? And add this to the next milestone? 0.8.1 or 0.9.0, btw?
Okay, I've added a note to the release notes on Github.
Should be fixed by pulling in PQClean/PQClean#492 once it lands.
Hmm -- that PR fails CI and doesn't look like it's moving since more than a month now.
So what about two more options to get this cleared for the 0.9.0 milestone:
Anyone with more knowledge about the complications of directly importing Falcon from its origin may comment on option 2. But option 1 seems to be very attractive -- at least as a stopgap to move towards our next release: 32 bit MSVC builds don't look like an awfully big use base; other liboqs algorithms don't work on Windows at all). And for the very few users doing that, well, they may (and apparently already do) use the original upstream code directly (if neither option 2 nor the PQClean PR moves), correct @blackbird1999?
At this point, I'd say Falcon not working is a bigger deal than BIKE as one is on a standardization path, and one isn't. However, since OQS states its purpose is "These tools support research by ourselves and others." I can't really argue that this matters unless I want to argue that OQS has moved beyond its original purpose.
Yes, it's trivial for me to merge in the original Falcon code and this can be put off by documenting it as unsupported.
Thanks for that perspective, @blackbird1999 . Do you have a need for further algorithms beyond Falcon? If so, it'd be beneficial for both of us to resolve this for good (i.e., pull upstream code into liboqs so you have one API to deal with and liboqs to have the latest code). If not, option 2 indeed sounds like a "quick resolution" not hurting anybody.
Yes, we're using all the selected for standardization algorithms. I just patched the liboqs falcon AVX files after download so it's still just one API. I'm not pulling down the Falcon sources and using them separately. liboqs's API is too nice for me to want to do that :)
we're using all the selected for standardization algorithms.
That's the argument against option 1 above. A non-option now.
I just patched the liboqs falcon AVX files after download so it's still just one API.
That's indeed a forth option for us, too: Thanks for bringing that up! We have a built-in patch mechanism for "copy_from_upstream". @dstebila : What's your take (as to what's easier/quicker): Do such "rever-to-upstream" patch in liboqs or get PQClean/PQClean#492 integrated and pull that?
Should be fixed by pulling in PQClean/PQClean#492 once it lands.
Hmm -- that PR fails CI and doesn't look like it's moving since more than a month now.
I haven't had a chance to get back to it to try to resolve the outstanding failures.  I don't think there's anything fundamental, it just requires iterating through various tweaks to get the slow builds to pass.
Falcon's upstream is no longer up to date with respect to the "current" version of Falcon; as far as I know PQClean has the only public implementation of the current version of Falcon.
I just patched the liboqs falcon AVX files after download so it's still just one API.
That's indeed a forth option for us, too: Thanks for bringing that up! We have a built-in patch mechanism for "copy_from_upstream". @dstebila : What's your take (as to what's easier/quicker): Do such "rever-to-upstream" patch in liboqs or get PQClean/PQClean#492 integrated and pull that?
If it is possible to get the PQClean problems resolved that it less brittle, I think.
FYI @bhess this is not fixed by #1512 since #1512 pulls from PQClean/PQClean@66e5017 but the Falcon changes landed in PQClean/PQClean@c3abebf.  We can save fixing this until after you've got #1512 sorted, don't want to complicate #1512 unnecessarily.
