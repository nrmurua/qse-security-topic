When I declare a register named with the same name of a gate and then export it in QASM, the exporter generates invalid QASM where the register name clashes with the std gates (due to lack of escaping of the register name).
Run this python script:
Produces this error:
The error happens only when importing the qasm file, whereas I believe the mistake is done by the exporter, which generates a file in which crz is defined both as standard gate (in qelib1.inc) and as register (via my code).
This is the genrated QASM:
I would have expected the QASM exporter to generate a valid qasm, ready to be reimported.
I would suggest to improve the exporter by escaping any register name to avoid clashes with standard libraries.
It would work if we made the exporter to
escape any register name
but I think it would also be good if we have a convention that classical registers should start with '_' or something like that. We can do this for Quantum registers too. The exporter can automatically add these 'convention symbols' while exporting.
Please correct me if my idea is wrong.
We don't typically want to universally escape names, because that makes the output harder to read for users, and it means that reading an exported OQ2 string back into the program gives things surprising names (or we have to have code to attempt "demangling" of names, etc, except we might not be given an OQ2 file with mangled names, so we need to have another "don't demangle" case, etc, etc).
In this case, the problem is mostly just that the OQ2 exporter doesn't put all its defined variables into a global symbol table, so it doesn't notice when there are clashes.  It'd probably be fairly easy to a) ensure that the register name-escaping code takes into account any gates defined in the header files and b) enter the used register names as "reserved" into the object that functions as a sort of symbol-table for gate definitions, so any subsequent gate definitions don't conflict.
