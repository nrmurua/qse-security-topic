Hi,
In running a simple example using the projectq simulator backend I ran into an apparent problem with how the simulator is measuring the qubits.
The program simply initializes one qubit, applies a Hadamard gate and then measures the qubit.
I'm sampling 1000 runs each time, and the function returns the number of times 1 was measured.
Consistently, over 10 iterations the program returns:
[481, 482, 481, 481, 482, 482, 482, 482, 481, 482]
or something very similar, where the number of times 1 is measured is always below 50% by 2-3%.
Is there something I'm misunderstanding about how projectq works?
Thank you!
Here is the code:
`
from projectq.cengines import MainEngine
from projectq.ops import X, All, Measure, QubitOperator, Ry, Rx, H
`
Hi,
Thanks for raising this issue. The problem is caused by the default seed of the random number generator used in the simulator.
When you create a Simulator (in your case implicitly by using the default backend of MainEngine), it requires a random seed for its internal random number generator to make such projective measurements. If no rnd_seed is given, then it chooses a random int between 0 and 1014 (https://github.com/ProjectQ-Framework/ProjectQ/blob/develop/projectq/backends/_sim/_simulator.py#L84) which as you have reported is not a large enough range in your case (though it would require some more data to be sure)
You should get better results when you initialize the simulator outside the loop and reuse the simulator:
because this way not every measurement picks a new seed from the very limited range but only every of the 10 runs and for that the default range of 0 to 1024 should be ok. Or you set the random seed yourself with a larger range:
We will increase the default range of the random seed in the next commits. Let me know if the larger range fixes your problem.
Thank you for getting back so quickly. I hadn't looked at the range of the seed.
Both your suggestions worked for this code, and the larger range will let me implement this more generally.
The change has been merged into the develop branch and will be included in the next release of ProjectQ (v0.4)
