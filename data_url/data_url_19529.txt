@scarrazza, I am opening to discuss how we would like measurements to be implemented. The main question is whether we want to reuse qubits after measurements.
If not, then all measurements should happen at the end of simulation and are equivalent to sampling the final wave function. This allows to efficiently sample as many samples (shots) as we want, without having to re-simulate the circuit.
If we want to allow reusing measured qubits then we have to implement measurements as gates that project the state to the measured value. Since the measurement is non-deterministic, getting many shots would require to run the simulation many times. Therefore this approach is less efficient but at the same time it will be more robust when we add noise.
I think the first approach is reasonable, however we should ask @igres26 what he thinks about this.
We have started this discussion here in person and we have come to some conclusions:
Measurements as gates can be useful to apply a measurement to just a particular set of qubits. A multi-qubit measurement gate, or something similar, is good to keep measures confined.
For noiseless simulation purposes, sampling from the state vector without re-running the circuit is the best option.
The idea is to implement a basic method similar to the one used in cirq to start with.
Include an option to return a dictionary with {'bitstring': # repetitions} (bitstring ordered in the same way as qubit order)
For noisy simulations there is no other option than to run the circuit every time.
In general, reusing qubits after measurements is not something that is done. It has fringe benefits, but it is not something that I think we should worry about much right now.
Perfect, thanks for the clarification.
