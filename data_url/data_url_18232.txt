This issue was reported on the QX by user edumitrescu. It seems that it is possible to add the results of two circuits with the same name but only possible to retrieve the first one. Also the 'id' of the second result object is dropped in favor of the first which seems unapparent.
I'm not sure what the expected behavior should be. If we start associating the qobj 'id' with the result 'job_id' then it might not make sense to have an add function so we can maintain a 1-1 correspondence between qobj and result.
@delapuente @atilag maybe it would be good for you to think about this. The work flow is that due to limits we have with the number of the circuits we need to split the circuits into batches that are able to run. Then to process the data for saving or feeding to other tools @chriseclectic added a sum function for the results. I dont think we want to keep this but it is going to break tools above :-(.
We have two solutions:
The user makes a list of circuits to submit to the backend and if the list is larger than is supported by the backend Qiskit would separate into jobs into different qobjs send them and then combined them in one result and return this results object. If this is the case we can delete the add in the results.
The second is we make the add of results clear that they are from different runs on thebackends. Or we have a simple function that combines the results so its clear to the user that this has happened.
You may ask why do we want the ability to add results from different batches. The answer is because the set it related. I personally would prefer the first one and make the execute wrapper smart enough that it splits and maybe tells the backend that the following jobs are related in some way.
Anyway can you work with @chriseclectic and @sarah-sheldon to determine how we want to make this flow work but the current solution needs to change. The main reason is i think they use it the most for tomography like experiments.
I personally would prefer the first one and make the execute wrapper smart enough that it splits and maybe tells the backend that the following jobs are related in some way.
Right, that is how it should be done. This complexity of splitting the job into several ones, then reconcile the results, should be hidden from the user.
@ewinston can you specify the steps to reproduce or link the original issue?
We are about to merge #773. The functionality there is still the same but this is a good moment to revisit this bug. @chriseclectic @sarah-sheldon could you review the bug description and explain what's would it be the expected behviour?
Closed in #1360, as result addition is marked as deprecated after 0.7
