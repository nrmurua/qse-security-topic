Python has an inbuilt method, eval() to evaluate and simplify a string. I am importing the operators I,Z,X,Y from qiskit.opflow and using the eval() method to evaluate a like ('0.1*I^I+0.3*I^Z') or '(I^I-Z^Z)*(I^X+Y^Y)'. The output adds additional qubits with operator I. I do not suspect that the bug is in python as I have tested it on many other strings.
I actually wish to perform a Hamiltonian transformation as given below.

To reproduce the issue any combination of string of Pauli summed op to evaluated.
from qiskit.opflow import X, Y, Z, I  eval('(0.1*I^I-Z^Z+0.3*I^I)*(0.5*I^I+0.4*X^Y)') 
The expected output is
0.2*I^I + 0.16*X^Y-0.5*Z^Z-0.4*Y^X
but the output obtained is in attachement

No response
https://qiskit.org/documentation/tutorials/operators/01_operator_flow.html#Algebraic-operations-and-predicates
Be very aware that these operators obey the Python rules for operator precedence, which might not be what you expect mathematically. For example, I^X + X^I will actually be parsed as I ^ (X + X) ^ I == 2 * (I^X^I) because Python evaluates + before ^. In these cases, you can use the methods (.tensor(), etc) or parentheses.

It looks like you are trying to multiply two operators together - multiply is only supported for scalar (complex or ParameterExpression which can later be substituted).
@woodsp-ibm Thanks, I can see it makes sense now, the parsing of python is different than what we do on paper. The issue of additional qubits are gone. But is it possible that we can label it as an enhancement and allow more complex mathematical operation like, operator multiplication, simplification of PauliSumOp. Like in above example the return could be (['II','ZZ'], coeffs = [0.4+0j,-1_0j]).
You can call .reduce() on the final expression to simplify it. For example,
That is not done eagerly to avoid overhead if you add a large number of Paulis, but you can always call it manually. ðŸ™‚

Since this functionality exists, I'll go ahead and close this issue. Feel free to comment or re-open if there's still something that needs to be discussed!
