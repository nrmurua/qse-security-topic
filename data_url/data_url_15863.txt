I recently came across this very interesting paper (https://arxiv.org/pdf/2105.09100.pdf) and I've been trying to implement the circuit in qiskit, but I'm not sure if I'm doing it correctly and if the results make sense. Namely, I'm trying to replicate the two circuits below. The thing that confuses me is how the terms of the fourier series are incorporated. The paper says that
1-2QAE(0) = cosine sum and 1-2QAE(pi/2) = sine sum. In the case where the probability function is f(x)=x, the fourier series is just a sine term (2*(-1)^(n+1))/n * sin(nx), so do I only use 1-2QAE(pi/2) and multiply that result by the summation of the n-terms? Also, is n a parameter that should dictate the value of the output? Should the output converge to some value for a high n? Lastly, as far as I understand, the case of f(x)=x computes the mean of the probability distribution given in numerical results, but I don't see the value of the mean given anywhere in the paper, so what can I compare to to check if my code is correct?
I know this is asking a lot, but I just don't know what other resource to consult. If anyone has suggestions I'd be immensely grateful.
from qiskit import QuantumCircuit, Aer
from qiskit.algorithms import AmplitudeEstimation, EstimationProblem
n = 2
omega = n/(2*pi)
beta = pi/2
delta = 1
x = -8
alpha = nomegax-beta
theta = nomegadelta
qc = QuantumCircuit(4)
qc.cry(pi/3,1,0)
qc.ry(alpha,0)
qc.h(2)
qc.h(3)
qc.cry(1theta,1,0)
qc.cry(2theta,2,0)
qc.cry(4*theta,3,0)
qc.draw()
problem = EstimationProblem(state_preparation=qc, objective_qubits=[0])
sim = Aer.get_backend('statevector_simulator')
ae = AmplitudeEstimation(num_eval_qubits=10, quantum_instance=sim)
result = ae.estimate(problem)
est = result.estimation
sint = 1-2*est
def sum(n):
if n == 1:
return 2
else:
return (2*pow(-1,n+1))/n+sum(n-1)
print(sum(n))
print(est)
print(sint)
print(sum(n)*sint)





