When I run the following program, I encountered an error:
It should produce a circuit for the unitary matrix below:
It gives an error message:
Hi @rraymondhp the problem is that eig does not behave as needed for all inputs. Here is one way to fix the problem. If M2 is close to real, round it to a real type before calling eig. If M2 is symmetric, use eigh. If M2 is already diagonal, substitute D and P and skip the call to eig.
Actually it is a problem that occurs here:
https://github.com/QISKit/qiskit-sdk-py/blob/06482631beceba0a3571e925dcdb1a23b97ecdbf/qiskit/mapper/_compiling.py#L162
The NumPy det function is being called, and returns a np.float64 type.  The problem occurs when doing np.float64(-1)**(-1.0/4.0), that leads to a nan being returned.
In contrast, using the SciPy routine scipy.linalg.det returns a generic float type and the same computation succeeds.  This is because the NumPy data types do not support negative fractional powers for negative numbers unless the data type is complex.  The solution is to either use the SciPy routine, or cast the return value from np.linalg.det into complex.
I can submit a Pull.
Ok, thanks @nonhermitian , I guess the problem is different. However, I have run into other issues with this method for the reasons above. The eigenvectors returned from eig are not orthogonal in some cases.
@awcross1 that is possible if the input matrix is non-Hermitian (non-symmetric in real case), even if the spectrum is non-degenerate.
