It seems likely, due to recent tests, that Prob() and related probability checking methods are still unsafe to use with the QUnit -> QStabilizerHybrid stack. The likely reason is that QStabilizer::DecomposeDispose() is insufficient to handle any given in-flight Z basis separable eigenstate in stabilizer formalism representation. Some decompositions that can and should work with a better implementation, don't. However, the Qrack unit tests rely ubiquitously on probability checks for unit test assertions themselves, internally, so many of these bugged cases are likely to be non-obvious, and many simpler cases do work with the current logic.
I have gone ahead and set the QUnit -> QStabilizerHybrid stack as default, because third party integrations that rely on the default stack setting do not expose or internally use Qrack's Prob() based methods at all, as can be checked in our third-party integration (unit) tests. This is a method that would not easily be included efficiently or at all in a true quantum hardware API, and hence the community has already not built around it. (A qubit probability for Z basis measurement is an obvious utility for simulators, but this "observable" isn't expected to be easy to come by on physical hardware.)
QUnit also does not internally use ProbBase(), which calls Dispose(), without such specific prompting as a call to check probability. Unitary gates and quantum measurements should be fine.
For now, if experimenting with the QStabilizerHybrid stack, stick to true-hardware-acceptable APIs, and so external quantum open source stack should be fine, (if not otherwise similarly abused).
Per #508, all API methods are now expected to be safe to use with the QStabilizerHybrid stack. (However, "safe" does not necessarily mean "optimal.")
