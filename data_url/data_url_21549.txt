Is there a way to modify an object from a user-defined class and to create a new object in the kernel code?
I cannot change the attribute self.obj1.a in the following code.
When called in the kernel, modify_object function does not do anything (outputs "1\n1"). When called in the host (uncomment self.obj1.modify_object() line in the build function), the function works (outputs "2\n2").
Also I cannot create an object in the kernel and use it. If the last two lines in the run function are uncommented, it raises the below exception
I am not sure these are bugs or the expected behavior. Is there a way to modifying custom objects in the kernel?
When called in the kernel, modify_object function does not do anything (outputs "1\n1"). When called in the host (uncomment self.obj1.modify_object() line in the build function), the function works (outputs "2\n2").
That's because device values are not synchronized into the host at every RPC for performance reasons. The NAC3 proposal imposes restrictions on what values could be accessed from the host and device to avoid this confusion.
Also I cannot create an object in the kernel and use it.
The current compiler cannot do this. NAC3 will likely support it.
@sbourdeauducq thanks for the help.
That's because device values are not synchronized into the host at every RPC for performance reasons.
Is there a way to force synchronization of the device / host values with the current version of artiq? In some cases, we want to save experimental results in an object and send the results (attributes of the object) to host to save data.
You can pass device values as parameters to an RPC.
Attributes are also synchronized when the kernel exits.
