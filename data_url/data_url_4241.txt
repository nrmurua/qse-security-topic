I'm having trouble measuring ProjectQ's performance. Something is causing a serious slowdown.
For example, I ran these commands from my terminal:
Here are the contents of speed_test.py:
And got these results:
Those rates are terrible. I get higher performance with the python simulator up to 14 qubits:
Last month when I speed-tested projectq, it was getting numbers similar to Quirk: 8000 gates/sec at 16 qubits. I'm not sure what would have changed in the meantime, but performance seems to have dropped by 50x.
I have confirmed in my own debugging that the line self._simulator.apply_controlled_gate seems to be the big offender, but I haven't figured out much more than that.
That's weird. Did you do export OMP_NUM_THREADS=#cores?
Depending on the compiler (icc vs gcc, also version-dependent), threads are not kept alive and that causes a large slowdown.
This is a short speed test on my notebook (battery power). It actually doesn't matter for my compiler too much if OMP_NUM_THREADS=4 or OMP_NUM_THREADS=8
export OMP_NUM_THREADS=4 makes a huge difference:
Given the huge difference in performance, is there a reason this isn't the default?
The OpenMP default is the number of available hardware threads; I don't know why this is the case.
If it's possible to detect this kind of misconfiguration and fixing it, we might want to consider doing that. But the export workaround does solve my particular issue with testing performance.
You may also want to use export OMP_PROC_BIND=SPREAD to increase the simulator performance even more:
By the way, I think it should be qubits.extend(...) rather than append; not that it makes a difference :)
