This method would work similar to cirq.final_wavefunction, but it would return a density matrix instead of a wavefunction (state vector).
The method would take a circuit, possibly do some analysis to decide which simulator to use (e.g. it's faster to simulate using the wavefunction simulator and only create the density matrix at the end), run the simulation, extract a density matrix, and return it.
One notable difference vs final_wavefunction is that final_density_matrix would by default not ignore terminal measurements.
final_density_matrix should take an optional noise: NOISE_MODEL_LIKE=None parameter.
What are the expected use cases for this method? (Given that final_wavefunction already exists and you probably don't want duplicating code).
We want to cover cases where the qubit state at the end of the circuit isn't a pure state. There shouldn't be an issue with code duplication since if noise = None and final_wavefunction returns a column matrix, the shortcut method applies. If not, then we pass the circuit, initial state, and noise model into a DensityMatrixSimulator and use the output matrix from that simulator. In either case, we have to be careful about the terminal measurements in the circuit.
Noise can be injected into the circuit (using with_noise method). It doesn't make sense to provide an alternative way to supply noise, considering that circuit is a required parameter. By the same reasoning, a circuit with noise has the same type so it can always be a noisy circuit (unless I am missing something).
OTOH there is a way to disambiguate, but still there is a question if it is desirable to have noise specified in two different parameters.
Hey, the PR (#2487 ) is missing review for a while - can anyone take a look?
Ping: #2487 still stis unreviewed.
