To the best of my knowledge there is no way to check the status of a job that is called internally by an aqua algorithm when running on real devices.
Your observation is correct. This notion has come up a couple of times recently and we have a work item noted for Aqua where the expected enhancement would be an optional user defined callback, that they can supply if they wish, to monitor an algorithms progress in respect of the job(s) it issues over the course of it's processing.
In the meanwhile, you can turn on the aqua logging to the INFO level to see the ids of all submitted job, and then you can check that the status externally.
However, as Steve mentioned, we will work on the callback solution.
@nonhermitian with PR #549, you can provide a callback to check the status of the submitted job.
the callback is called every wait second. The callback is an argument when you create the quantum instance.
By default, if you set the Aqua logging to INFO, we will log the job id and job status.
However, with the callback, you can do more if you want.
The callback takes four arguments: job_id, job_status, queue_position, job.
The queue_position will be zero if it is not queued.
Here is a simple example of the callback, it simply prints out the argument.
And this is the output after your running your algorithm, including the Aqua logging and callback's printing. (I set wait=1 in the example)
Why not just return the job instance and let the user decide what they want to do with it?
@nonhermitian I do not fully understand why users need to get the job instance back.
For example, for a hybrid algorithm, aqua includes the logic for classical computing and how to interpret the count results from the quantum device.
If users simply get the job instance back, for me, it seems that they need to re-write all logic of classical computing and the post-process of the count results out of aqua.
A specific example, VQE, the quantum part only computes the observation of each Pauli term; then, users need to write the logic to interpret the count results and then handle the classical optimizer and update the variational form from their side. In this case, it seems that the users had already re-written the whole VQE.
If the algorithm only needs to submit one job and then, users can simply call the construct_circuit method to get the circuit and then compile/submit the job by themselves; however, after they get the result back, they still need to re-write the logic for interpreting the count result at their side.
Actually I now consider this closed as we can automatically check job status in jupyter notebooks, and the pubsub hooks to do it in other contexts is already there.
