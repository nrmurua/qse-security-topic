If the device db has two controllers, both using the same driver, they cannot be accessed from the same kernel.
Simple experiment to reproduce
With the corresponding device_db entries
Should work fine with no errors.
A type unification error:
Calling set_output_volts for either of these devices individually works. Calling both from an RPC works, calling both directly from a kernel breaks.
Artiq f5befba
Something similar happens (IIRC) if you want to use one Urukul with sync_device specified and another without or if you have a AD9910 channel with sw_device and another without.
RPCs should be special cased and this should not happen here, the compiler should not know about the type of the controller client class. @whitequark
RPCs should be special cased and this should not happen here, the compiler should not know about the type of the controller client class.
Should it really not? If we do that, other code will become impossible to write, e.g.:
What should happen here I think is that the RPC number should not be encoded into the type, but into the actual value (just stashed into the function pointer). So, RPC function types would only be unified on their return types, not return types and RPC numbers.
I think that's correct.
How common are those direct calls from kernels to RPC clients?
NAC3 does not support them at all as RPCs must be explicitly decorated with @rpc and type-annotated. So you would need to write wrapper functions, e.g.
If this kind of boilerplate is too cumbersome, we can look into a semi-automatic way to generate it. If not, we can close this issue.
@dhslichter @lriesebos
How common are those direct calls from kernels to RPC clients?
For us, all calls to controllers (RPC clients) are wrapped in functions decorated with @rpc. In this way, we can be explicit about the fact that this actually is an RPC call and if it is async or not.
