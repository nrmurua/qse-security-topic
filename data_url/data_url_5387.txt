Benchmarking lightning directly without the Python interface can help in isolating performance regressions between the bindings and the underlying kernels. The purpose of this task is to create a PennyLane Lightning binary without the Python interface, and test the aggregate gate performance.
Your task will be the following:
Your simulation binary should make a user-defined number of calls to a user-defined number of qubits for the following built-in parametric and non-parametric gates:
- Non-parametric: (PauliX, PauliY, PauliZ, Hadamard, CNOT, CZ)
- Parametric: (RX, RY, RZ, CRX, CRY, CRZ)
- User-defined call number can be read from a command-line argument (eg ./binary 10 6 will run each gate ten times in the circuit per qubit, with 6 qubits overall).
Run your simulation for qubit counts ranging from 6 - 22 in steps of 2, and plot the timing results, noting your compiler type, and optimization level. Wall-clock time will be sufficient here.
