Add method to calculate (aI+bX+cY+dZ)^k for k integer as this can then be used to power a depolarizing channel.
AKA implement nearly-quaternion arithmetic. We don't have a way to even make linear combinations of Paulis yet, right? I think there's a series of changes leading up to this change that need to be described.
I'll review where we're at and will post a plan.
OK so this is actually connected to Fourier transforms over non-abelian groups!  Let me try to explain.  TLDR: take the QFT over the Pauli group of the a,b,c,d coeeficients, raise these to a power, and then inverse QFT to recover new Pauli vector!
Let G be a finite group.  Functions on this group to some field (lets just say complex numbers for now)  f: G -> C form a nice ring.  A convenient way to think about this is to represent \sum_x a_x x where a_x are elements of C and x is the group element.  Then you can see that you can multiply such objects together and represent it as another such object (\sum_x a_x x \sum_y b_y y  = \sum_{xy} a_x b_y xy and xy is just another member of the group), and you can also add and subtract linear combinations of them (\sum a_x x + \sum b_x x = \sum (a_x + b_x) x etc).
Now recall that the Fourier transform is a map from functions over G to irreducible representations of G. Lets say the irreps of G are labeled by \rho and that the matrix representation of this irrep at x \in G is the matrix rho_{i,j}(x).  Then  the Fourier transform over G is a mapping that takes functions f: G -> C to functions \tilde{f} : \rho_{i,j} -> C.  Explicitly the FT of f over G at \rho_{i,j} is
\sum_x f(x) \rho_{i, j} (x)
The FT over G of a function f, just like normal FTs retains all of the information about f.  That is given all the \sum_x f(x) \rho_{i,j}(x) over all \rho,i,j values we can perform the inverse FT to recover F.  The inverse FT is given by
f(x) = {1 \over |G|} \sum_\rho d_\rho Tr( \rho(x^{-1}) \tilde{f}(\rho))
where d_\rho is the degree of the irrep \rho and the stuff inside the trace is the matrix product of the irreps.
Now suppose we want to calculate
[\sum_x a_x x]^2
We can write this as
[\sum_x a_x x ][\sum_y a_y y]
= \sum_{x,y} a_x a_y (xy)
= \sum_{x, z) a_x a_{x^{-1} z} z
where we have used z = xy.  In other words his is a new vector
\sum c_z z
where
c_z = \sum_g a_x a_{z x^{-1}}
This is the convolution of a_g with itself.
The trick now is that the Fourier transform of the convolution of two functions f and g (or f with itself) is equal to the product of the Fourier transform o f the functions of f and g.
Let's prove this.  Let f * g be the convolution of f and g, i.e. it is the new function
(f * g)(x) = \sum_y f(y)g(y^{-1} x)
Let's take the FT of this
\tilde(f * g)(\rho_{i,j}) = \sum_ z (f * g)(z) \rho_{i,j} (z)
= \sum_z \sum_y f(y) g(y^{-1} z) \rho_{i,j}(z)
= \sum_z \sum_y f(y) g(y^{-1} z) \rho_{i, k}(y) \sum_k \rho{k, j}(y^{-1}z)
= \sum_y f(y) \sum_k \rho_{i,k}(y) \sum_{y^{-1}z} \rho_{k,j} (y^{-1} z) g(y^{-1}z)
= \sum_y f(y) \sum_k \rho_{i, k}(y)  \sum_w g(w) \rho_{k,j}(w)
= \tilde(f)(\rho_{i,k}) \tilde(g)(\rho_{k,j})
Using all of this we now see that we can use this to calculate things like
[\sum_x a_x x]^4
I didn't realize the convolution theorem applied quite as generally as that.
So nice that we didn't have to use the non abelian QFT (though I guess you did behind the scenes).
Yeah, the algorithm implemented comes out of a derivation which is probably equivalent to non-abelian QFT, though I didn't show this. Might be a subject for another math note when I get a chance! In this case, you'll definitely see it!
