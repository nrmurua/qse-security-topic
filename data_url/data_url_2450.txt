I expected to be able to take a NoiseModel and apply it to a circuit.
noise = cirq.ConstantQubitNoiseModel(cirq.depolarize(0.2))
Then I'd like to be able to
circuit.add_noise(noise)
or
noise.apply_noise(circuit)
Of course there is some vagueness on the resulting circuit, for example when doing this for noisy_moment into which moments do you add the resulting op tree.
Currently I do this via code like
one way to handle the vagueness could be to define noise.apply_noise with a conditional function kwarg to determine where the noise goes, e.g.
then you might do something like
Alternatively, this might belong to a completely different class of NoiseModel where the user overrides noisy_moment with that conditional built in...
This vagueness stems at least in part from a lack of default behavior in NoiseModel. We have a clear hierarchy of potential methods to use:
noisy_circuit which can access the circuits sequence of moments and device
noisy_moments which only accesses a sequence of moments
noisy_moment which accesses a single moment (which can be thought of as a sequence of operations)
noisy_operation which accesses a single operation
Defining at least one of these is essential, but it seems like there should be a default behavior for what happens if you call a method higher up in the hierarchy than the highest defined method.
If noisy_circuit is called but not defined, it falls back to noisy_moments on the circuits sequence of moments. If noisy_moments isn't defined, it falls back to applying noisy_moment on each moment in the sequence. If noisy_moment isn't defined, fall back to applying noisy_operation on each operation in the moment.
This doesn't resolve problems such as if only noisy_moment is defined and noisy_operation is called, but this behavior seems to be the least surprising default.
