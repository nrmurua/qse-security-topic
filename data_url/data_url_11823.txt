In the current implementation of QAOA, one cannot give the initial circuit as input. However, some applications require to prepare an initial state before applying the exponentials, like QABoM. In Grove, it corresponds to the parameter driver_ref of the QAOA method.
This feature is really easy to implement in the current code (it just consists in passing the initial circuit in parameter of the different functions and using it when building the complete circuit if it's not None)
Thanks for the suggestion! Would you like to submit a PR with said enhancements along with proper tests?
Sure, I'll try to do that soon
QAOAVarForm already takes an initial_state as input and uses it through its method construct_circuit. What is the exact type of this attribute and is there a conventional way to instantiate it?
I tried to define my own InitialState class and to pass an instance of this class to QAOA. But the constructor of QAOA starts with the line self.validate(locals()), which gives me the error:
TypeError: Object of type InitialState is not JSON serializable.
Is there any way to make my class JSON serializable?
QAOA directly subclasses VQE, so maybe you'd want to take a look at the VQE code to see how an initial_state is passed along to the variational_form that VQE uses, and just do something similar to QAOA and QAOAVarForm?
Btw, in QAOAVarForm, this line probably should be taken out of the else that it's currently under.
By "Initial States", we are talking about this Aqua component. If what's supplied there isn't enough for what you need, we can definitely discuss more on that as well.
From a user point of view, the ideal would be to pass a QuantumCircuit as input: it's too complicated to ask him to pass a serializable InitialState. But QuantumCircuit is not JSON serializable neither, and this error appears at the first line of the QAOA constructor (when I pass the quantum circuit as an argument), so I don't have the opportunity to turn it into something serializable... Any suggestion?
it shouldn't require passing a serializable InitialState...
i took the liberty of preparing this PR, we can continue our discussion there
@artix41 if would be good if you could help with creating a test or two on qaoa with initial state since the PR does not yet ;)
Great! In your PR, the new argument of QAOA is an InitialState. Doesn't that mean that the user have to prepare his initial circuit as an InitialState? Here is an example of code I'd like to work (but maybe I'm not using Aqua correctly, I still struggle to understand how it's meant to be used):
by "InitialState", we are referring to the InitialState class (and subclasses) that Aqua provides here for constructing a circuit to prepare some desired quantum state(vector)
for example, here is how a random state is prepared; we also support zero (duh) and uniform, as well as passing in an arbitrary vector
Would it then make sense to create a new child of InitialState that takes a QuantumCircuit as argument?
this PR will enable using a QuantumCircuit to create a Custom InitialState
@artix41 both PRs are merged now, please let me know if things work for you now
.. and feel free to PR your test(s) ;)
Thanks a lot for those PR! However, there seems to be a bug that I don't manage to correct.
In the function construct_circuit of QAOAVarForm, the line circuit += self._initial_state.construct_circuit('circuit', q) doubles the number of qubits by concatenating the circuits in rows instead of concatenating them in columns. For instance, here is the results of those few lines, displayed in a notebook:


could you post your complete code?
[edit] i meant complete code up to the prints
@artix41 just in case you still have this problem, make sure you use the same QuantumRegister at both places. a short example:
output is:
Oh, indeed, got it! Here is my frontend code (what I wrote above was just part of construct_circuit in varform.py with some print added into it):
The thing is that the initial circuit was created using a quantum register qr, while another one called q is created in â€¯varform. The problem comes from the fact that when we call initial_state.construct_circuit('circuit', q), it totally ignores q if self._circuit is not None (with your implementation).
Is there a way to redefine a circuit with different quantum registers? That would the solution here.
could you try replacing qaoa's varform's construct_circuit with the following and let me know if it works?
Great solution, my code works well now! Thanks a lot for your help, I will try to push some tests soon.
awesome, thanks for your help!
i'll pr this new construct_circuit now and close this issue
looking forward to your tests ;)
