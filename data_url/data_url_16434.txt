Getting deeper in #4757 a conversation about "valid" initial_layouts popped up.
There is a need to answer two questions:
The example can be is the following, where initial_layout is bigger than the circuit:
Should this be accepted?
If yes, why does layout (wrongly) validate the size of the layout in the from_intlist static method?
If no, why does Layout accept physical qubits pointing to None ?
The intermediate solution is allow any Layout and transpile should do the check before creating the layout.
The question I have is:
This would solve this problem, which seems to originate from a miscommunication of what is a initial_layout. A Layout is a two-way mapping that can be created from a dict or a list. Actually, there are two methods to create it from a list:
If we insist on having the initial_layout as a list that will be used to create a Layout object, we need to guarantee we are using the same semantic in all places.
At the very least, we know that the mapping between virtual qubits and physical qubits is 1:1, so we need to validate this.
The Layout object.
If yes, why does layout (wrongly) validate the size of the layout in the from_intlist static method?
This is definitely weird. Seems like the documentation and code are contradicting each other. If this function is doing what is documented to do, then this test should be for equality.
If no, why does Layout accept physical qubits pointing to None ?
This is okay. If you have a physical device with more qubits than your circuit, then you need to allow physical qubits pointing to None. These physical qubits be using for routing during mapping and might hold a virtual qubit during the process or at it's end.
Some answers:
initial_layout can also be Layout. The transpile function is a very-high-level-user-facing, it is design to be very flexible in the input type.
At the very least, we know that the mapping between virtual qubits and physical qubits is 1:1, so we need to validate this.
I think that's done when the Layout object is created.
If no, why does Layout accept physical qubits pointing to None ?
This is okay. If you have a physical device with more qubits than your circuit, then you need to allow physical qubits pointing to None. These physical qubits be using for routing during mapping and might hold a virtual qubit during the process or at it's end.
I agree.
It was decide that the example should not be accepted. A PR is on the way.
