when generating RB sequence using a seed, the gates of all the qubits with the same pattern size are the same
create a rb_opts dict with 'rand_seed' other than null, and call 'randomized_benchmarking_seq' with that dict.
look at the circuit created (for example look at the first circuit of the first seed - circuit[0][0]), and see that the gates on each qubit are the same (for a pattern of alone qubits, like [[0],[1],[2],[3]])
the gates for each qubit should be randomised separately with a fixed seed (fixed, but different for each qubit)
add the seed number to the rand_seed, so each qubit will have a fixed but different seed
This sounds like an example where it would be much better to share a single default_rng object set with a seed between the different sequence generations than passing the seed value itself.
close by #492
