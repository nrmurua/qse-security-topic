Describe the bug
I think there is a mistake in the Hamiltonian's part inside the liouvillian function:

However, according to Linblad equation it should be:
To Reproduce
Comparison of qutip vs. numpy:
The terminal out put is
(The construction of the Liouvillian with numpy is based on eq. (A6) in:
https://arxiv.org/pdf/1909.11619.pdf#page=16)
Expected behavior
1 is True as expected.
2 should be True and 3 should be False, but the opposite happens because of the sign mistake.
Your Environment
(Probably irrelevant.)
Additional context
Please let me know that you approve the change in the description and I will make a quick PR.
I think the current behaviour is fine, it just depends on the way the kronecker product is done in QuTiP. Pinging @nwlambert.
Yep, nathan is correct, if you check spre() and spost() as well you can see the convention qutip uses.  H in superoperator form acting from the left is given by spre(H) which is equivalent to  zcsr_kron(spI, H.data).
I think this choice was made early on to make it consistent with the quantum optics toolbox in Matlab.
Everytime i do this by hand I do it wrong (same with the ordering in turning states into vectors).
Hi @nathanshammah and @nwlambert, thanks for the quick replies!
Please let me inspect this a bit further, but I would like to hear what you think about the comparison, I still think the numpy's "by-hand" version is correct.
i think this difference comes because, if you look at equation A1 in Fabrizio's paper you linked, they do a row-ordering convention in turning states into vectors.
Qutip does a column ordering convention, as described here
http://qutip.org/docs/latest/guide/guide-states.html#superoperators-and-vectorized-operators
this is an arbitrary choice, as long as you do it consistently with the definition of states and superoperators.  This means in our case -i[H, rho] gives -i[spre(H) -spost(H)] == -i zcsr_kron(spI, H.data) + 1j * zcsr_kron(Ht, spI).
i think row ordering is more intuitive, but column ordering is what we do.
Indeed you are right, it turns out to be a matter of convention and everything is correct (spre, spost, lindblad_dissipator).
For multiple superoperators, I prefer using numpy because of its powerful broadcasting support.
Hopefully, this discussion will help anyone else facing a similar situation. Keep doing great!
