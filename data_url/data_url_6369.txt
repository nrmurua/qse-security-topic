If state vectors are "paged," in equal segments, in powers of 2, then phase and "inversion" gates can be made much less computationally expensive. (See https://sc19.supercomputing.org/proceedings/tech_poster/poster_files/rpost175s2-file3.pdf.) QEngineMultiOCL took advantage of paging optimizations, but the multiple-OpenCL-device focus of that QEngine type distracted from the incidental paging. Meta-gates like X and CNOT acting on page labels rather than amplitude floats absolutely returned performance in that engine type, (to clear personal recollection). Paging should be supported as a "layer," independent of explicitly multi-device design. However, transparent paging might enable sensible multi-device usage, secondarily. (A "mapper layer" would help even further, but this will be addressed separately.)
An optimal page segment for QEngineOCL might have exactly enough amplitudes to cover the default OpenCL work-group size, or else the maximum allocation of (segmented) OpenCL device RAM. QEngineCPU would likely benefit from a balance between operators on amplitudes vs. "meta-operators" on page labels.
Update: this was caused by lack of device memory even though it was not reported at runtime.
Seems to me Qpager has higher bursts of memory then the regular Qengine > OCL implementation; the average time is also higer.
Drivers are AMD 2020 headless opencl on linux
During tests I see 0-results and a hang on qft_cosmology_inverse on the qpager implementation. The regular OCL test passes.
The command given is
./benchmarks --proc-opencl-single -m=24 --single --measure-output=/var/log/"measured_cosmos_$(date +%F_%R).log" [cosmos]
m=24 instead of m=-1 because this will certainly be a value low enough in that it will not give a malloc() error on the OCL device.


I want to support the idea behind QPager, for both potential page-label-based optimizations and multi-accelerator options, but it is obviously unstable, at the moment. For now, I'm going to disable the tests and benchmarks for it, by default, so that it doesn't impede your default tests in builds. Does that work?
Indeed, would be great to move them away from benchmarks yet maybe park them as a part and parcel of the unittest, so that Qpager can be tested when deemed useful and/or necessary; I'm interested in the evolution of this feature.
update after the commit : it would be great to see them in benchmarks as a hidden feature. As code matures information on performance and behaviour can easily be looked up.
QPager benchmarks should be off by default, but they're stable enough to release. Feel free to re-open or start a new issue for any further requests.
