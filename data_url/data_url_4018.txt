On a larger context of implementing quantum algorithm based applications in OpenQL, I need to use the measurement results to continue other classical parts of my Python code.
Since {OpenQL to QASM}, and {QASM Execution on QX}, are 2 separate processes, how can such applications be developed?
E.g.: Special case of quantum searching where there exist multiple solutions but not known in advance. The number of times the algorithm needs to be repeated depends on the result of each run of the kernel.
This is perhaps an architectural change in OpenQL+QX programming paradigm itself.
Perhaps we can derive some ideas from OpenCL kernels getting embedded in C++ code.
Issue solved in
https://gitlab.com/qutech-ce/qx-simulator/commit/089373ec15db3c15a139316f6c6d6325999db0d7
qxelerator can however be as part of OpenQL repo as well.
