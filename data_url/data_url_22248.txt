I want to write an experiment that runs some other experiment that sets some hardware based on a parameter x, and then runs another experiment that generates a fit whose value is y. I then want to plot y v x.  I'm having an issue where I need to add a delay after self.scheduler.pause() in order to ensure that the analyze of an experiment runs before the next experiment is scheduled.
This produces,
Which is what I want. However, if I take away the last delay, I get
Where the second experiment is scheduled before the first one is analysed. Is there a way to accomplish this without a delay? It seems like flush isn't an answer, as if I set that to be True, I get
As Scheduler_Submit_Test_2 was submitted earlier, it gets flushed before Experiment_A runs even though Experiment_A is at a higher priority. Is this expected behaviour or should flush only apply to experiments at the same or higher priority?
Why do you use the scheduler for that - why not import the code of the sub experiment you want and run it directly in the same worker by calling its methods?
If you want to avoid the double entry in the explorer, do this: import OtherExperiment as _OtherExperiment.
If you do need to use the scheduler, I believe that the following should do what you want:
Sub-experiments have different and -- depending on the use case -- unacceptable semantics w.r.t. results.
Have a look at the ipython notebook example. It demonstrates how you could poll for experiment completion. A notification API for this would be a nice feature though.
Thanks, the ipython notebook was helpful. I'll look into using subexperiments but it seemed like that would have other issues. For example, if that has some gui arguments that are used I don't want that to necessarily present itself in the meta experiment, and I'd want the meta experiment to set some of the arguments which would maybe require some restructuring of the experiment code.
As Robert pointed out, with regards to the results it's maybe nicer to have the results of each subexperiment stored separately under its own name. With the meta experiment they would be stored under the meta experiment name, right?
I'd agree, some sort of function that returns when an experiment is done, something like `scheduler.complete(rid)' or something would be handy.
if that has some gui arguments that are used I don't want that to necessarily present itself in the meta experiment
That will take a bit of digging into the ARTIQ sources, but you can remove the arguments of the subexperiment from the GUI and set them from the top-level experiment.
