It seems more logical that DataSet's register_parameter method takes care of type validation of the data against its ParamSpec, because ParamSpec is on the same level as DataSet. Currently, the logic is in DataSaver, hence its scope is now to large. DataSaver should only know how to interface between qcodes parameters (there are many different classes) and DataSet, but not go deep into type checking, etc.
While I agree that there is too much going on in the DataSaver (we are working on refactoring some of that into InterDependencies in #1227), I can't really see any alternative when it comes to validating the type of the data as it is being saved. Am I missing your point?
You're right, but the data is actually saved in DataSet, not in DataSaver. DataSaver's role is to interface between qcodes parameters world and DataSet, right? Hence DataSaver just unwraps Parameters, ArrayParameters, etc. and passes values to DataSet. And since only DataSet knows about ParamSpecs of the parameters, the type checking of values against types in ParamSpec belongs to DataSet. This is my point.
Thanks for clarifying. So although the datasaver must command when the validation is done, the code that knows how to validate (and thus actually performs the validation) belongs somewhere else. Is that it? If so, wouldn't it then seem appropriate to make the ParamSpecs have associated validators? (I'm not saying that the ParamSpecs are parameters, but they are parameters)
don't know, but might be a good idea :)
closing as outdated, and not really relevant anymore.
