When adding or subtracting Operator() objects, the output is not the result of the operation, but the original operator.
from qiskit.quantum_info import Pauli
from qiskit.aqua import Operator
import copy
aux = Operator(paulis=[(1.0,Pauli(label='II'))])
aux.to_matrix()
print('op1=',aux.matrix)
aux2 = Operator(paulis=[(1.0,Pauli(label='ZI'))])
aux2.to_matrix()
print('op2=',aux2.matrix)
print('---Out-of-place subtraction')
print(aux.matrix-aux2.matrix)
aux3 = aux - aux2
print(aux3.matrix)
print('---Out-of-place addition')
print(aux.matrix+aux2.matrix)
aux3 = aux + aux2
print(aux3.matrix)
print('---In-place subtraction')
aux3 = copy.deepcopy(aux)
print(aux3.matrix)
print(aux.matrix-aux2.matrix)
aux3 -= aux2
print(aux3.matrix)
print('---In-place addition')
aux3 = copy.deepcopy(aux)
print(aux3.matrix)
print(aux3.matrix+aux2.matrix)
aux3 += aux2
print(aux3.matrix)
Output
op1= [1. 1. 1. 1.]
op2= [ 1.  1. -1. -1.]
---Out-of-place subtraction
[0. 0. 2. 2.]
[1. 1. 1. 1.]
---Out-of-place addition
[2. 2. 0. 0.]
[1. 1. 1. 1.]
---In-place subtraction
[1. 1. 1. 1.]
[0. 0. 2. 2.]
[1. 1. 1. 1.]
---In-place addition
[1. 1. 1. 1.]
[2. 2. 0. 0.]
[1. 1. 1. 1.]
The expected solution is that the third row of each example should be equal to the second row.
Fix the Operator() method auxiliary function _extend_or_combine()
The following patch fixed the bug
the above patch only fixes for matrix mode. for the pauli mode, another patch is needed (since the right operand is manipulated accidentally.
addressed in #620 and #619
resolved by #620 and #619.
close it since it has been resolved.
