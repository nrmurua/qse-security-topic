For many experiments and applications it is necessary to store arbitrary metadata with a QuantumCircuit for later processing of results after execution. Currently this must all be done locally and requires separate management of this additional data. I would like to request a way to add custom metadata to a QuantumCircuit object that can survive transpilation and assembly and be passed through to the Result object returned from execution on a backend (real or simulator).
An example of a use case for this is Quantum state tomography which involves preparing multiple copies of a circuit with different measurement bases appended. This might have metadata associated to each circuit such as:
Currently to get data of the above form into results you can manually add it to a qobj header as:
Being able to do something like this would be nice:
As an aside it would be nice if the result data and metadata methods were an attribute with getter and setter rather than method, and you could get subsets of results with fancy indexing as if it were a 1D Numpy array eg. result.data to return list of data for all circuits, result.data[i] to return single circuit data, result.data[[i, j k]] to return list of 3 data for circuits i, j, k. Maybe something to discuss for V2 provider results.
I should also emphasize that this metadata field should not be used to contain any data used in the execution on a backend (such as configuration params like shots). Hence it could always be discarded without issue and return the exact same result data (without the metadata).
