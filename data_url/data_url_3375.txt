I've seen http://docs.rigetti.com/en/stable/ which includes some of the API strings via https://github.com/rigetti/pyquil/tree/master/docs/source/apidocs and Sphinx.
Initially assuming you used all the docstrings, I used it as a test case for my flake8 plugin which validates docstrings as reStructuredText markup. This reported various violations. I've looked at a sample, but didn't find any affecting docstrings actually appearing in your documentation.
e.g. Multiple usage of the string |000...00> without slash escaping the pipe, which docutils (and therefore I would expect Sphinx) sees as a malformed inline substitution reference, "Inline substitution_reference start-string without end-string". I used your example to build a new test case for the flake8 plugin peterjc/flake8-rst-docstrings@ee3b66a
I've concluded there is some selection (possibly manual curation) for which of your docstrings appear in the documentation, so perhaps only those need to be valid RST (and you may be checking this anyway via sphinx in strict mode using SPHINXOPTS    = -W?).
I think ideally we'd like for all our docstrings to be valid rst markup.  If the number of violations isn't too large and you don't mind sending a PR, I'd be happy to review it.
I suspect some are false positives (which are interesting to me from the plugin point of view), but the current output:
One is a possibly trivial inconsistency in once using just func as a role rather than py:func, could be harmless depending on your Sphinx configuration:
Others like RST301 Unexpected indentation. are at least in some cases literal blocks not being marked as such (e.g. with double colon or explicitly declaring python code snippets). What is your stylistic preference here?
Others like RST301 Unexpected indentation. are at least in some cases literal blocks not being marked as such (e.g. with double colon or explicitly declaring python code snippets). What is your stylistic preference here?
Feel free to add the appropriate rst syntax for these to parse as code blocks. There are at least a handful of examples of this in the file quil.py, which uses .. code:: sections to delimit Quil source examples.
What is your preference for strings like |000...00> ,  |0><0| or |000...0><000...0| for qubit notation?
Escape the slashes (hard to read in the editor), or wrap in double back ticks (visually different once rendered)?
Or, following docs/source/exercises.rst use math mode explicitly? e.g. |000> becomes:
Hmmm, I think my preference if for backticks, since that is readable both in the source comments and in the generated docs, but I'll defer to @karalekas here.  He's currently (supposed to be) taking a break, but should back on Monday to weigh in.
#1141 (comment)
Quoting that:
As for braket notation, I think that the double backticks or inline math suggestions are the way to go. I'd lean toward double backticks in most situations because we don't need to be rendering math when it is gratuitous, but I'm sure there will be situations where we are writing out equations where using :math: is more appropriate.
I agree, very pragmatic.
closed in #1141
