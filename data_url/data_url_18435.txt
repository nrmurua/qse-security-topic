Given this ISA
the compiler gets into an infinite loop:
Removing either of the pragmas (rewiring or preserve), or adding a "1-2" hardware object in the ISA, resolves the issue.
spooky
Actually, I think I know the source of this bug: the optional argument in https://github.com/rigetti/quilc/blob/master/src/define-compiler.lisp#L508 is supposed to give a sloppy lower bound on the fidelity of an unknown 2Q instruction, so that the compiler prefers to use native 2Q gates, with their presumed superior fidelities, to encode the instruction. The posited bound is 0.5, your first link has CZ fidelity 0.4, and I'll bet that that's the ultimate source of the trouble.
Elsewhere in that same file, we compute the 'generic cost' of a 2Q instruction https://github.com/rigetti/quilc/blob/master/src/define-compiler.lisp#L623 , which is exactly a tight lower bound based on best-known compilation output, and a similar thing in the addresser https://github.com/rigetti/quilc/blob/master/src/addresser/fidelity-addresser.lisp#L202 in order to prime the recombination logic. A good solution to this problem would probably make use of those to replace this hard-coded (and violable) lower bound with something dynamically computed based on the chip spec.
