read_qubo() allocates a buffer of size 50 for the 2nd token of a program (p) line and uses sscanf() to copy the token to the buffer.  If the token is too long for the buffer, memory will be corrupted and a segmentation fault may ensue.
Also see pull request #83 comments about this issue.
Test 1.  The 2nd token of the p line is too big for the buffer allocated for it.  Memory is corrupted, but the program appears to work.
Test 2.  In this case, with a very long rogue token, a segmentation fault occurs.
I could offer a fix using compiled regular expressions to check input lines.  Does MinGW include regcomp() and regexec() ?
