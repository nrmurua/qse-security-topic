This value can be calculated from the eigenvalues of a unitary matrix.
I'm unsure if we should fallback to eigendecomposing unitary for this. The issue is that the bound is supposed to be cheap to compute, and really it's only supposed to matter near zero when deciding whether or not to drop an operation. Even if falling back to unitary, I would probably use a much simpler distance metric to upper bound it (e.g. 2-norm of difference from the identity).
My hope would be that most gates already have cheaper to compute trace_distance methods so that falling back isn't necessary. But if for example a user makes their own gate/operation and isn't quite sure how to calculate the trace_distance to implement their own method, they would at least have some way of getting this information out of the library. Since an explicit calculation of the supremum is possible with knowledge of the eigenvalues, it would also allow us to ensure that our bounds are tight. From the looks of it we are already accessing the eigenvalues and eigenspace projectors inside eigengate to calculate trace_distance.
Eigengate is set up so that the eigenvalues are more directly accessible, which is much cheaper and more stable than doing an eigendecomposition.
If someone makes this change, I will approve it. If they can do it with <1% error when the diamond distance is within 0.1 of 0, without computing an eigendecomposition, by computing some more trivial metric directly from the matrix entries, that would be even better.
