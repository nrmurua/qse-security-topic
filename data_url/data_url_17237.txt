If a Command does not have a name it is currently assigned a default name of p%d where %d is the number of existing Commands. Instead the naming commands should be brought in line with the circuit.register.Register classes default naming policy. There should be a unique prefix and counter for each Command type.
Additionally, validation of the name type should also be performed in a similar manner to the register.
Suggestion for prefix names:
@taalexander I agree with the naming convention. I think this will help make the QObj more readable. Can you assign this to me? I propose creating a small function create_name(key: str) in class Command which could be called from the constructors of the SamplePulse, FrameChange, etc... e.g. __init__ in FrameChange would call create_name('acq') to set self.name. What type of user given names should we accept? Anything that can be cast to a str?
Thank you for taking this @eggerdj. I believe 'Register' accepts names of the form. '[a-z][a-zA-Z0-9_]*'. Perhaps we should also take the time to make Register use create_name in a following PR so as to unify the two naming schemes.
One function for both Register and PulseCommand and its children makes sense. Where should we put the function?
Here is what I had in mind for create_name:
But I'm not sure where it should go. If it would not be used by class Register I would have it live in 'class Command'.
I agree it should live as a classmethod in the Command class for now. To build the custom counter for each subclass is a bit more difficult. I believe a metaclass will be necessary, eg., usecases for metaclasses as init_subclass is Python 3.6+. If this is too complicated I am ok with only having a single counter or all commands for now.
Closed by #2623.
