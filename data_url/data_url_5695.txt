qiskit-aer's setup.py specifies setup_requires and expects scikit-build to install its build requirements if they are missing. scikit-build does this but provides no easy way to opt out. This behavior makes it difficult for some other environments (like conda) to avoid invoking pip and installing packages outside of its packaging system. Ideally, all of qiskit-aer's build requirements would be preinstalled to avoid scikit-build trying to install anything with pip, but cmake is a special case. scikit-build/setuptools try to install it with pip if it is not installed even if the real cmake command is already available on the PATH.
Run pip install --no-build-isolation . in a build environment with all of qiskit-aer's build dependencies already installed except for the Python cmake  package (but with cmake installed on the PATH) and PIP_NO_INDEX=1 set.
scikit-build successfully builds the package.
In this comment, one of the maintainers of scikit-build recommends moving the setup_requires packages to build-system.requires in pyproject.toml because setup_requires is deprecated by scikit-build and by setuptools. In this case, pip has a better mechanism for bypassing the installation of the build requirements. It is also mentioned that the next version of scikit-build will handle the cmake dependency better (not installing it with pip if it is already on the PATH).
I ran into this trying to make a conda package for qiskit-aer (conda-forge/staged-recipes#21404). It is not major issue for that case -- I am just patching setup_requires out of setup.py. It is always nicer not to carry extra patches though.
Yeah, setup_requires is a pretty weird preposition overall, because it isn't even parsed until the setup function is executed, but it generally includes packages that are needed to even reach that point in the script.  I'll see about swapping us over to the PEP 517 form.
