I'm curious if this expm-vector product I implemented in scipy would speed up the qutip.states.coherent(..., method='operator') function?  Maybe this could be checked after the unit tests with TravisCI are sorted out.
I don't think expm_vector can be used in qutip.states.coherent because we need to do a matrix exponentiation without applying a vector multiplication, but perhaps it can be used in an evolution solver?
I have finally gotten around to look at this.  Compared to usual ODE evolution, the expm_multiply (as of SciPy 0.18) is over an order of magnitude slower when testing against simple harmonic oscillator evolution.  Profiling showed that the inf and one norms were the main issue as they cannot call BLAS functions for complex numbers.  I wrote Cython versions that were ~5x faster.  The next profile suggested replacing the dot calls with our own spmv.  All together, I could get a factor of 3x improvement over the base SciPy code, but the spmv is still the dominate time consumer, so there is nothing further I could do to speed things up.
