The present implementation of partial_trace and partial_transpose is not particularly favorable for a few different reasons:
Counterintuitively, the first index is "1" and opposed to "0". The violates the conventions used elsewhere and is a result of these functions originally being converted over from MATLAB
The functions themselves are quite convoluted, and hence, more likely to induce error. While the test suite for these functions is fairly thorough, it is still not ideal.
The solution is fairly straightforward:
Replace the partial_transpose and partial_trace functions with the corresponding equivalent functions provided from the picos module (that is, picos.partial_transpose and picos.partial_trace, respectively.
The other places in the code that make use of either partial_trace or partial_tranpose will necessarily need to be updated along with any mention of usage in the docs/tutorials.
Hi there! I am interested in this issue, it would be great if you can assign this issue to me!ðŸ˜„
Thank you for your interest @ErikQQY ! You have been assigned!
@vprusso I just refactored partial_trace and partial_transpose, but as for those input matrix is Variable matrix generated from cvxpy, partial_trace and partial_transpose in picos can't handle themðŸ˜¢, how do we handle these usage?
For example:



@vprusso I just refactored partial_trace and partial_transpose, but as for those input matrix is Variable matrix generated from cvxpy, partial_trace and partial_transpose in picos can't handle themðŸ˜¢, how do we handle these usage?
Hi @ErikQQY . Thanks for the work thus far and for the question. Two options come to mind:
Note that the above snippet of code is used in both the partial_trace and partial_transpose functions that presently reside in toqito. The general idea is that if the type of the input variable is a cvxpy.Variable then this helper does some gymnastics to convert it into something that the partial_* function can operate on and then converts it back into a cvxpy.Variable` expression.
I believe the same general approach could also be applied to the portions of the code that you pointed to.
Does that make sense?
Yeah, I think the prudent approach is appliable in this case, I think we have two choices:
Yep, I think the approach you outlined in (2) sounds like the way to go!
@vprusso I complete the partial_trace refactor, but as for partial_transpose, the usage of  partial_transpose in toqito is quite different from picos, for example, partial_transpose in toqito is capable of handling non square matrices, while picos can't:
It confuses me a lotðŸ¤”
Hmm, you know, I'm trying to imagine a scenario for when the partial transpose function would ever need to be applied to a non-square matrix. My initial thought is to make the assumption that the input matrix must be square.
As a question, modulo the test_partial_transpose_non_square_matrix and test_partial_transpose_non_square_matrix_2 tests in tests/test_partial_transpose.py, does anything else in toqito require non-square matrices?
Yeah, I think the partial_transpose should be applied to a square matrix, but as a matter of fact, there is indeed a test for non-square matrices in toqito:

Yes, I did indeed see the test for the non-square matrices, however, assuming that the partial transpose is only applicable to square matrices (modulo these tests) I think we can remove these test cases.
I did not happen to see any other places where applying a partial transpose to a non-square matrix is needed so I think we can:
The above is probably not an exhaustive list, but I think it covers the bulk of it. Does that make sense?
Yeah, this make sense to me!
I got another question here:

An MWE can be reproduce using:
As far as I know, picos doesn't have this feature(passing dim as [[dim1, dim1], [dim2, dim2]]), how we handle this by replacing with picos? Do we do the same as we did for those cvxpy variables?
Hmm. That is a bit of a hurdle. Okay, reassess. What if we kept the partial_trace and partial_tranpose functions as they presently are in toqito but we modified them so that the index that they take is an offset of 0 (instead of starting at 1 as it does now).
There may indeed be some extra functionality here in this that actually makes sense to keep, and the ability to perform this operation on non-square matrices might be useful.
Thoughts?
I think that would be the right choice! PR updated!
