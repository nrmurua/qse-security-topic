Multiple execution of the same 'requested' circuit on the same quantum device results with a different sequence of executed gates. There is same random process changing the list of executed gates.
It prevents reproducibility of calculation on the quantum device.
Run this code:
It implements this requested circuit
STEP 0 : benchmark test  = = = = = = = = = = = =
STEP 1 : benchmark test  = = = = = = = = = = = =
The same circuit should be returned by  jobRes.get_ran_qasm(circuit_name) . And it should be as-executed circuit.
Add flag to request the minimal sufficient circuit performing the requested operations.
The one generated now seems to have unnecessary canceling each other operations, which only increase noise level.
You need to pass a fixed seed value to execute. The swap mapping is stochastic.
Yes, and in particular finding the "minimal" sufficient circuit is an NP hard problem. We use heuristics to reduce the number of gates, and this process is stochastic. @nonhermitian correctly points out the fix if you want to get the same circuit every time.
Hi,
after inspecting your code I understood, I should just add seed value when executing the circuit on the backend. This indeed freezes the executed circuit, at least for  backend=ibmq_16_melbourne.
This solves my problem.
Jan
