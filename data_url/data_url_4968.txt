Currently only applyPauliSum() function is available for non-physical transformations:
But it is restricted to Hermitian operators because termCoeffs are real. It is desirable to have a function, which allows arbitrary transformations. For example, the candidate can be like applyPauliSum() but with complex coefficients.
Other candidates are functions like unitary and twoQubitUnitary, but which allow arbitrary matrices. Can these functions be easily implemented by dropping matrix validations or unitarity is used elsewhere internally?
These functions will be very helpful when simulating mixed states as random pure states followed by averaging. Such simulation of decoherence channels requires the application of Kraus operators, which are neither unitary or Hermitian in general.
Hi Gleb,
You're right, general non-unitary matrices are useful, and there's no reason we can't do it. As you suspect, the unitary, twoQubitUnitary, multiQubitUnitary (and even controlled*, multiControlled*) functions don't actually require unitarity. They include a unitarity check just for the user's benefit.
This is a really easy patch - I'll add new functions (e.g. applyMatrix) to the API tomorrow.
If you need it right away, you can simply comment out the validate...Unitary...() call in the aforementioned functions, in src/QuEST.c
For example, comment out line 297 to make multiQubitUnitary accept any matrix, and apply it to state-vectors. (this hack won't work for density-matrices)
Note QuEST has density matrix and decoherence channel support (even Kraus operators) (doc). There may indeed be a regime where state-vector averaging is worthwhile though.
Thanks very much for the good suggestion!
Hello, Tyson,
Thank you for the prompt reply. I'll wait for the commit. You are right, this functional is useful only for state vectors, not density matrices.
Yes, I know that QuEST has density matrices and related stuff, but in our lab, we switched to pure-state averaging because it is a memory-to-time tradeoff. You can easily simulate 25 pure qubits on a laptop, but it will effectively double the number of qubits if density matrices are used, which is incredible.
Hi Gleb,
Sincere apologies for the delay - somehow "tomorrow" became "in two months time".
I've added the new functions (with unit tests) to the develop branch (PR #255), which is kept stable and ready to be used. These new functions won't appear in master until the next release, but in the meantime, we host doc for the dev branch here.
All the doc for the added functions are in the operator doc. I hope this is still useful, thanks again for the suggestion!
Hello Tyson,
thank you! We are happy to implement our algorithm with the provided functions.
