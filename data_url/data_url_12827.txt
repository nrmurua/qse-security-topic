Q# evolution introduced some new language features in the past half a year:
It makes sense to go through the code and check for places where using the new features would improve code readability. Here is the list of all the katas, with ones that have already gone through the update marked as completed.
Can I take this up?
Yes, absolutely!
It probably makes sense to make a list of katas and go through them one by one, opening separate PRs for each kata that needs updates - this way each step has a smaller scope (and the overall work doesn't feel overwhelming) and the conflicts are less likely to occur.
@avinashbhat Could you let us know much progress you've made on this issue? We're hosting a Hackathon tomorrow, and this issue is one of the easier ones to get started with, so if possible, I'd like to split the work on it among several people. On the other hand, I really don't want several people working on the same kata, so splitting it per kata seems like a good idea.
It sounds like a good idea! These are the list of katas that are to be updated. I've marked the one I'm working on. It would be great if you reference the PRs back to this comment to track things.
(@tcNickolas moved the list of the katas to the root comment, so that the issue shows as a list of issues in overall view. Thank you again for putting the list together!)
Changes to be made (also see the original issue description).
@avinashbhat Haven't heard from you in a while - are you still working on updating Q# in DJ algorithm tutorial?
i would like to work on the Superposition kata, if that is all right?
@delbert Absolutely!
hello Everyone, i would like to work on the Measurements Kata now.
delbert
Sounds great!
hello Folks, i'll take up Teleportation, next, if that makes the most sense.
@delbert Sure!
Do you all have a Q# linter addon for VSCode / Visual Studio that can be utilized to help with this?
No, there's no Q# linter at the moment.
I'm not sure this kind of change is straightforward to automate if we're looking to maximize code readability. For example, referring to the 1st element of the array as Head() is a good idea in a context when it is treated differently from the rest of the array (and the rest of the array is treated uniformly, like in GHZ state preparation) but not so good idea if there are just 2 qubits. Analyzing patterns to figure out whether within ... apply or ControlledOnBitString is more readable also doesn't seem trivial to implement.
I expect that when a linter is written, it will start with simpler things like code formatting. And we're already a third of the way there - we'll probably finish this issue before the linter :-)
We can finally mark this issue as complete! Fantastic job everyone, thank you for your work on this!
