The Makefile is getting unwieldy, and it turns out that some tests can't be run on all platforms.
For example, Valgrind is broken on MacOS. This makes the build even more annoying, as the run-valgrind target is now conditional.
We'd also like to produce all errors in one go; not abort after the first make target failed.
It's probably better then to write a Python or more advanced shell script to make these decisions and filter for us. It would probably also help reduce the output from Make (which produces a LOT of noise).
I think it's a good idea to move most of the checks out of the top-level Makefile and into bash or Python scripts.
Whatever we do here, we want to have sufficiently relevant messages logged to stdout, because this is all that you can see when a Travis build fails.
Looking at it more closely, I see you've started that with check_*.py scripts in the test directory, some of which have the semantics that you provide a scheme name crypto_kem/kyber768 as the input.  But there are still Makefile targets for run-testvectors-all, etc.
Could we have a single Makefile target run-checks which then basically does:
We could even wrap this in its own script which nicely catches errors and organizes log output.
Benefits: the Makefile stays short.
Drawbacks: harder for a developer to run all of a certain type of test (e.g., just run-testvectors-all).
I have some time today and could work on this, unless someone's already got some work in progress here.
I talked about this a little bit with Joost already and did some thinking and I've at least identified the following points:
It's probably helpful to have some shared python module to do some common things:
It's probably helpful to use Python's logging functionality, to allow to easily set verbosity and on CI only print out things when things break.
We want the implementation to be python 3.
See PR #25.  It doesn't yet do all the tests that are in the top-level Makefile.  If you like this approach, then we would eventually move all of those over to this approach.
See alternative approach in PR #27.
Things left to transition over:
Also I'm not sure which of these should be run on the qemu-ppc Travis target.
I've done all I can do here.  I'm not sure how you want to move valgrind and sanitizer, as well as the various format/tidy checks, into the pythonic framework.
