Describe the bug
When applying resolve_gates() method to QubitCircuit containing the FREDKIN gate, the following error is produced:
ValueError: Gate RY requires one target
To Reproduce
It might be a good idea to check this for other gates as well as look into the internal of resolve_gates to clean/modify it a bit.
Note: As requested by @BoxiLi, first mentioned by me in #1318
@BoxiLi I am a bit confused with the wording of this issue. Is the goal to find what other gates might be creating ValueError when resolve_gates acts on them ? Then once these gates are identified, figure out the source of error in code of resolve_gates ?
Yep, the resolve_gates() function is quite messy right now and works on a case by case basis. In the FREDKIN case, it was giving this error. The issue would atleast involve resolving the FREDKIN gate properly as a starting point.
As an aside, @BoxiLi Should this issue be moved to the qutip_qip module already? Or should it wait since everything is not setup there yet?
Hi @sarsid I am having trouble reproducing this issue. When I copied above code, I get <qutip.qip.circuit.QubitCircuit object at 0x7fe142c414f0> and not the value error referenced by you. Is there something else I should be doing ?
Just tried this, I still the same error. So the resolve_gates() function works for you? What are the gates you get in the end? Are they correct?
Better also check the qutip version you are using
@BoxiLi I have the latest version installed.
I do not get any gates after applying resolve_gates(). My issue is I fail to get the same error type i.e. ValueError. When I ran the code as it is, I do not get any gates besides an indicator that the code ran successfully. So, I used print(A.resolve_gates()) which gave me qutip.qip.circuit.QubitCircuit object at 0x7fb64044eaf0. This is most definitely not the expected output of resolve_gates() as specified here
What you get is a quantum circuit object QubitCircuit. You just printed its location in your memory because there is not __str__ defined for it. Try
It should give you a list of gates hopefully. You can also try to multiply the gates together to see if they indeed end up to be toffoli.
Thanks for pointing out there's no strings defined for it. When I run this now, the output is a list of gates as defined in _gate_FREDKIN and not ValueError.
Interesting... You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.
You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits.
Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted).
I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually.  Now, I did get ValuError. Thanks !
Dear all, I fixed this issue and sent a pull request (#1489 ).
In the function of _gate_FREDKIN, the syntax like Gate(RY, targets=[0, 1], controls=None) seems to mean to apply RY gate to the qubit 0 and 1 respectively.
I think this syntax is so convenient and suit for latex circuit visualization (e.g. showing the gates with the same depth in the same column).
However, in order to add this syntax, we are likely to need a large modification of the Gate class.
In my pull request, I'm not changing the Gate class.
Instead, I decomposed Gate(RY, targets=[0, 1], controls=None) into two instructions:
This is enough to solve the current issue, and other specification changes such as the modification of Gate class can be discussed later.
Thank you very much!
Fixed by #1489.
