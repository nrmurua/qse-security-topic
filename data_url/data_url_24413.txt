From @zlatko-minev
Get chip Z Implementation
From Thomas:
I had been thinking about how we will handle cases like the multi-level wiring, and the chip stack in general.
Chip Z should, practically, be the Z-coordinate for the particular plane, and a chip could technically have multiple planes. Now do we tackle this via having a sort of chip stack, and a physical chip (eg. chip = 'main') can have multiple said planes, but handled by different naming, such as,
chip = 'interposer_surface', 'interposer_MLW_top', 'interposer_MLW_mid', 'interposer_MLW_bottom'
but interposer is just one physical chip
From Zlatko:
So self.chips needs to be created basically
ATTRIBUTES for chip dict:
From Thomas:
So (roughly), a design can have multiple chips, with said chips being composed of multiple layers.
Layers can be at different 'elevations', something like below;
https://www.techdesignforums.com/practice/files/2013/05/tdf_cdn_3d_stack.jpg
DesignPlanar is just one chip, with one plane, so all the layers have the same z value.
DesignFlipChip would be two chips, each chip having one plane, such that all the layers on a respective chip would have the same z value.
DesignMLW would be two (or more) chips, having multiple planes in each chip (sort of like the link above).
Now what can make something like DesignMLW tricky, is also having to clearly define what is the material between the different planes (for simulation purposes). So we could define each plane as its entirely own 'chip' entity, or have each layer be set what its z value is for determining where in the stack it ends up. Or perhaps what could be cleaner, is having "planes" or "chip stacks", and the user defines which layer is on which plane.
Releated to #56
Enhanced utility
Implement this into the pyaedt renderer.
