Devices (not all) now return the gate and buffer times.  It is therefore possible to return the run time of a circuit to the user.
My thinking is that this is best done as a transpiler analysis pass.
This runtime is a function of how the circuit gets scheduled, though we can make some simple assumptions there.
The real question is, why is this useful given all the extra overhead in loading waveforms, queue, rep rate, etc, which end up dominating the actual runtime?
Agreed the runtime only makes sense in the context of a pulse schedule.
The real question is, why is this useful given all the extra overhead in loading waveforms, queue, rep rate, etc, which end up dominating the actual runtime?
It can be useful for naieve sanity checks, ie., in the case where we want to make sure that the schedule is less than some T2 multiple. This is available in Schedule.duration.
Ok. That makes sense. I suppose a circuit programmer would want to know this without having to explicitly convert to pulse. So I'd wait until we have the basic pulse scheduler (#1921) and then write a circuit analysis pass that takes a (circuit, backend) and returns that time, but utilizes the scheduler.
I think we can close this now, there is both a pulse scheduler  and transpiler can create a scheduled now too (with the scheduling_method kwarg) which will let you get the runtime on the specified backend. Please feel free to reopen this if you think there is more to discuss or do on this issue.
