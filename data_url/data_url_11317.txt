As discussed in #122 it would be helpful if sums of FermionOperators and QubitOperators could be initialized from their string representation so that
my_fermion_operator - FermionOperator(str(my_fermion_operator)) = 0 and
my_qubit_operator - QubitOperator(str(qubit_operator)) = 0.
This should be easy for a beginner to implement.
I'll work on implementing this. I'm new to OpenFermion and would like to get familiar with the code.
I had this issue in mind while completing #194 so I did it in a way that made this task easy to incorporate. Basically you just fill in the body of _long_string_init in ops/_symbolic_operator.py. @max-radin, are you okay with doing it this way?
Yes that makes sense to me. I have written some code for long string initialization in FermionOperator that I can move into _long_string_init.
Great. Keep in mind that the task now is basically to reverse-engineer the __str__ method of SymbolicOperator, which now uses the attributes action and action_string. You may want to take advantage of the method _parse_string. Let me know if you have any questions.
Closed by #201
my_operator = FermionOperator('1.7 [3^ 2] - 8 [4^]')
seems to throw an error whereas
my_operator = FermionOperator('1.7 [3^ 2] + 8 [4^]')
and
my_operator = FermionOperator('1.7 [3^ 2] -8 [4^]')
and
my_operator = FermionOperator('1.7 [3^ 2] + -8 [4^]')
do not. I guess subtraction is not supported as expected? @max-radin can you assist with this?
Also, it seems to always assume numbers are complex, for instance
my_operator = FermionOperator('-1.7 [3^ 2] + 8.0 [4^]') print(my_operator)
returns
(-1.7+0j) [3^ 2] + (8+0j) [4^]
Also, I am not sure how one is supposed to provide complex coefficients.
my_operator = FermionOperator('(2.3 + 1.7j) [3^ 2]')
throws an error.
Yes I'll fix these issues shortly. Evidently, the complex initializer does not support white space, so you'd have to write '(2.3+1.7j) [3^ 2]'.
Thanks Max! I think we should try to be flexible with respect to the white space.
