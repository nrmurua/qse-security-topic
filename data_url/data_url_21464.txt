Consider the following simple experiment
I would expect this to give a clear traceback pointing to the original self.ttl0.off(). Instead it gives a rather unhelpful error
If the exception is not caught, I get a helpful traceback.
If I replace the self.ttl.off() with a simple raise RuntimeError the situation is a bit better
PS if I replace the at_mu(now_mu() - 1000000) with at_mu(0) I don't get an underflow at all. Is that expected behaviour?
It seems that re-raising overwrites the backtrace. I will look into this issue.
Our backtrace does not handle inlined function very well (I get rtio_output(self.target_o, 1 if o else 0) in the backtrace when I don't do re-raise, which is not very helpful), we could look into how to fix this so it can point to the self.ttl0.off(). It turns out it is a bug in my branch, just fixed.
Thanks for opening this issue, I am fixing exception related bugs and working on nac3 exception code generation recently, so we can know what are the existing issues and how we can fix them.
PS if I replace the at_mu(now_mu() - 1000000) with at_mu(0) I don't get an underflow at all. Is that expected behaviour?
I guess you need to call self.core.break_realtime()?
I guess you need to call self.core.break_realtime()?
If I understand Tom correctly, submitting the event at time 0, which should only be further in the past than now_mu() - 1000000, doesn't produce an underflow for him.
I guess this is because when the exception is caught, it is considered as handled, and re-raise would call raise which starts a new unwinding process with the re-raise as the starting point. Will fix in the exception branch together with nested exception and exception allocation support.
