Hi, while I was trying out the Qiskit HHL benchmark, I encountered a minor bug:
(I was executing benchmarks-qiskit-add-hhl.ipynb, without modification.)
At line 785 of hhl_benchmark.py, there is a variable s_int defined as s_int = 1000 * (i+1) + (2**off_diag_index)*(3**b); at line 603 (same file), s_int is recovered as s_int = s_int - 1000 * int(s_int/1000).  However, when (2**off_diag_index)*(3**b) become greater than 1000, the calculated b for true_distr() would be wrong (since anything over a thousand is truncated). See Fig. 1. And therefore the resulting fidelity isn't correct as well. See Fig 2.
Fig. 1

Fig. 2

An easy but temporary solution is to replace 1000 with a larger integer, say int(1e10).
If this isn't a bug, is there any reason why 1000 is set? ((2**off_diag_index)*(3**b) can become greater than 1000 easily.)
Thank you very much!
There was a recent update to the HHL code (last few days).  When we run the hhl notebook as committed to the master branch, this is the plot that results:

Additionally, the output you are showing includes some print statements that were used for debugging but have been removed (specifically the initializing and rem lines).  You can enable verbose mode by adding this line prior to the call to run() in the cell that executes the benchmark:
hhl_benchmark.verbose=True
with this enabled you should see even more output that you are seeing.
Can you please verify that you have the latest code from the master branch?
Note: that calculation ((2off_diag_index)*(3b) does have a known problem, a bit different from what you described.  Turns out that once you get to larger qubit numbers like 15+, we get an integer overflow error as the exponentials grow too large.
This will be changed at some point.  Basically, that formula is just used to create a unique identifier that is used to identify the particular instance of the input parameters for each circuit execution.
At the top of the notebook, there is a variable, max_circuits=3, that indicates how many different input combinations to run at each qubit width. The formula that includes the 1000 is used to create a unique index containing the instance index, combined with the diag and b values associated with the input.
Oh yes! I have changed max_circuit=3 to max_circuit=1 accidentally, which led to the plot in my first post. After I specify max_circuit=3, my output plot becomes similar to yours. Thanks for your help and nice clarification! :)
