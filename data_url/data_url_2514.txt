That we have to reuse code for the displays feels bad to me, I wonder if there are some better abstractions that could help here.
We currently have SamplesDisplay, which computes the display value from bitstrings, and WaveFunctionDisplay, which computes the display value from the wavefunction. SamplesDisplay is not affected by this issue; it should work with the density matrix simulator as is. As I see it, one issue that arises here is whether to
I think we should do Option 2. It seems bad to have two classes that really represent the same concept (e.g. PauliStringExpectationWaveFunctionDisplay and PauliStringExpectationDensityMatrixDisplay). Choosing Option 2 would force people to write code to handle both wavefunctions and density matrices whenever they define this kind of display. That actually sounds like a good thing.
The one hitch I can think of with Option 2 is that there might be displays that only make sense for pure states (I can't think of any right now). But then that should be called PureStateDisplay.
So unless @Strilanc or @dabacon have objections I'll go with Option 2. Maybe you can suggest a better name.
EDIT: I realized we can also have all three classes that I mentioned. I'm going with that for now.
I would go with the three classes, because there are some things that require a wavefunction instead of a density matrix in order to be efficient.
