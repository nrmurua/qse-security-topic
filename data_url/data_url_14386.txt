The binary_probabilities hex_probabilities methods of QuasiDistribution and ProbDistribution return a regular dictionary instance rather than the same original such as is done with Counts when converting key types.
Call quasi_distribution.hex_probabilities() will return a regular dict for example, while calling counts.hex_outcomes() returns a Counts object.
These classes should behave like Counts in that changing the type of the keys should not change the type of object so that key types (int, bin, hex) can be switched back and forth as needed.
I think it would make a lot of sense to have a base dict subclass that is just a keyed default dict that can handle the conversion of keys between integer, bitstring and hextring (like counts currently does) for any value types, and then Counts, ProbDistribution, QuasiDistribution could all inherit from this.
I tried comparison and saw Counts.hex_outcomes() returns a regular dict too.
output
I'm likely to miss your point. Could you give me an example code?
