When working through #1145 it became apparent that OQS_DIST_BUILD is not implemented for aarch64: This also explains initially surprisingly good performance results for "distributable" (presumed 'reference') ARM64 code (open-quantum-safe/profiling#68). See for example 
I think it's probably worthy fixing this. I'm not sure when I'll have a chance to resolve this oversight, but I'll take a look at it asap.
If I'm not utterly mistaken, the reason for the problem is that "required-flags" for aarch64 is empty, thus skipping the logic otherwise adding the OQS_DIST_BUILD ifdefs. So the question is can this be done differently (i.e., keeping it for OQS code generation purposes, but dropping it when compiling -- if necessary)?
Add/Edit: Yes, that'd be possible: Check for/drop -masimd here: Some logic for changing bmi already there...
But then again, how/where is NEON activated (if it needs to?) as seems to be necessary as for example per this? Why isn't neon on the "required-flags" list?
In sum, what about replacing/renaming in copy_from_upstream.py asimd with arm_neon (either without any compiler-option added in the jinja2 template, or inserting -mfpu=neon instead)? Then the OQS_DIST logic/code should be generated automatically.
I think it is the case that aarch64 always has NEON instructions available, so there's no need for an extra required flag.
Which would mean that even distributable builds for aarch64 should always have NEON activated.  Though they might not necessarily have AES or SHA-2 extensions.
I think it is the case that aarch64 always has NEON instructions available, so there's no need for an extra required flag.
This page concurs with this thinking: https://en.wikipedia.org/wiki/AArch64
In that case, #1148 arguably is pointless -- at best it might set the stage for a time when there is code introduced that relies on truly optional ARM64 instructions. In this light I'm fine with closing #1146 either way (not doing anything or adding #1148).
