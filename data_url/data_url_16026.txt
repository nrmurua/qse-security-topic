Our test suite mostly passes when run with pytest-xdist parallelization, giving a pretty nice speed boost.
However there are just a couple places where tests try to reuse the same temp file and step on each others' toes. This can be avoided by --dist=loadscope but that seems a bit fragile and is one more thing to remember.
I know that we can also parallelize using stestr but that is probably unfamiliar to most contributors, and doesn't integrate with tools such as vs code's testing tab (which does know about pytest-xdist). I assume stestr does something similar to dist=loadscope by default which is why this doesn't come up for stestr? Or is it just luck about the way stestr does the distribution to workers?
The offending spots that I noticed are in TestGateMap and TestUserConfig and it seems like replacing the hardcoded filenames with appropriate calls to tempfile.TemporaryFile etc would be a pretty straightforward fix.
For stestr we set the equivalent of --dist=loadscope (at least as for what applies to the unittest model, it doesn't include pytest's standalone functions which isn't part of unittest) in the .stestr.conf: https://github.com/Qiskit/qiskit-terra/blob/master/.stestr.conf#L3 which tells stestr's scheduler to group tests in the same class together (that ugly regex has been baked into a separate option parallel_class in recent releases: https://stestr.readthedocs.io/en/latest/MANUAL.html#grouping-tests).
That being said if we can fix this then we can drop that flag from the config file and it would theoretically give us a bit of speed boost in CI with stestr too because the scheduler can pack the workers better. However, IIRC the last time I tried removing that option  things started failing in: test.python.quantum_info.test_synthesis.TestOneQubitEulerDecomposer.test_one_qubit_clifford_all_basis which was a bit unexpected.
One thing we'll have to be wary of is that sometimes tempfile can have issues on windows ci environments, which is something we've hit in appveyor (in the past) and in azure and gha more recently.
I've seen that failure in the OneQubitDecomposer with pytest-xdist also. It goes away with #5827 so I think its some subtle 387 excess precision issue causing subtle different roundings.
@levbishop I'm new and looking to try something on the easier side to learn about the code base. Was wondering if I could take this ticket?  I have a decent amount of experience in python testing automation so this up my ally.
Welcome, and thanks for stepping in!
