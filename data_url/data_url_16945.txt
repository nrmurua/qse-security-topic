Reported by @ewoutvandenberg , unless a basis is specified, the transpiler does not remove pairs of gate-inverse gate. e.g.
Good point, basis_gates will be drawn implicitly from a backend if one is provided.
So does the bug have any significance? Does transpilation have a meaningful semantic without reference to a backend and its basis gates .OR. a list of basis gates?
There is. Without a backend, the transpiler should be able to (and presently does) apply backend-independent, logical optimizations.
we need to replace the optimize_1q_gates pass with an equivalent of the 2q block collection and optimizer.
First, the block collection would simply collect chains of uninterrupted gates on a single qubit. For this I would prefer the collect_2q_blocks pass to be generalized to handle the 1q case as well.
Next, the optimizer would take the unitary equivalent of the block, and re-synthesize it over the desired basis_gates. We already have methods for this under qiskit.quantum_info.synthesis.one_qubit_euler_decompose. This would ensure maximal simplification of the 1q gate chains.
As an aside it is probably good to be able to also tag Gates as inverse of each other, and teach the transpiler to cancel those. But it won't buy you as much as being able to merge gates.
Looking at this ...
This issue may be solved by PR #3658 which is pending for review and few checks of that PR were not successful.
This seems related to #6576 and #7016.
I think InverseCancellation should just replace CXCancellation in level 1. because #7413
At some point in the last year or so the 1q optimisation passes updated and the examples in the original post now correctly reduce to the identity.  This won't reduce for 2q+ gates, but I think that's acceptable at optimisation level 1.  I think we can close this bug as "fixed", because further discussion about the organisation of the optimisation levels is somewhat separate to this now.
