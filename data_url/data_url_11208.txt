I run openfermion's example to calculate the ground state wave function for Bose-Hubbard model. after running sparse_operator = get_sparse_operator(hubbard_model) command I got this error. can somebody tell me how I can fix this?
from openfermion.hamiltonians import bose_hubbard
from openfermion.transforms import get_sparse_operator
from openfermion.utils import get_ground_state
x_dimension = 2
y_dimension = 2
tunneling = 2.
coulomb = 1.
#magnetic_field = 0.5
chemical_potential = 0.25
periodic = 1
spinless = 1
hubbard_model = bose_hubbard(
x_dimension, y_dimension, tunneling, coulomb, chemical_potential, periodic, spinless)
print(hubbard_model)
sparse_operator = get_sparse_operator(hubbard_model)
#print('')
#print(sparse_operator)
#print('\nEnergy of the model is {} in units of T and J.'.format(
#get_ground_state(sparse_operator)[0]))
TypeError                                 Traceback (most recent call last)
 in 
20
21 # Get scipy.sparse.csc representation.
---> 22 sparse_operator = get_sparse_operator(hubbard_model)
23 #print('')
24 #print(sparse_operator)
~/OpenFermion/src/openfermion/transforms/_conversion.py in get_sparse_operator(operator, n_qubits, trunc, hbar)
65         return qubit_operator_sparse(operator, n_qubits)
66     elif isinstance(operator, (BosonOperator, QuadOperator)):
---> 67         return boson_operator_sparse(operator, trunc, hbar)
68     else:
69         raise TypeError('Failed to convert a {} to a sparse matrix.'.format(
~/OpenFermion/src/openfermion/utils/_sparse_tools.py in boson_operator_sparse(operator, trunc, hbar)
1265         raise ValueError("Only BosonOperator and QuadOperator are supported.")
1266
-> 1267     if trunc < 1 or not isinstance(trunc, int):
1268         raise ValueError("Fock space truncation must be a positive integer.")
1269
TypeError: '<' not supported between instances of 'NoneType' and 'int'
So you need to set trunc=x for integer x>=1 in the call to get_sparse_operator --- this should solve your problem.
The Bose-Hubbard model at U<infinity can have any number of excitations on any site. To make it's Hilbert space finite to get a matrix representation, you need to truncate this at some point, this is defined by the trunc parameter.
However, I think the error message here is designed badly - the 'or' statement should be switched around as it's currently failing while checking for the error - leading to the actual error statement being a bit hard to understand. I'll push a fix.
