Actually in the last weeks I have spent many (almost all) of my free hours testing and trying to understand how QuantumComputer.py works, even to try to help in some way.
Maybe someone might ask, "But why? This app is just an experiment! ".
Exactly! Precisely for this reason, because it was designed and developed to study quantum logic.
QuantumComputer.py is a laboratory, and things do not always (almost never) go exactly as we planned in the lab experiments. In addition to the reasons for studying and researching, there is another: I love the idea of having a quantum computer in my pocket!      :)
QuantumComputer.py is a complex and robust application, encoded in a just single file!
You can send it attached in a whatsapp message! Even though most people have no interest in it, or even understand what it is ...      :)
But this study of Dr. Christine has the potential to be easily distributed, shared by students around the world, making quantum computing as popular in this early 21st century as the Abacus was 4,000 years ago.
Anyway, I have plenty of reasons to spend my free hours on this project.   :)
Now, I found a weird result from a banal test.
May be this could be useful to solve some logic constraints of CNOT.
Follows the test done in the IBM Quantum Simulator:
Note that Q0 set to |1> with X gate.

The QASM code:

And the result from IBM Quantum Simulator:

IBM show it in binary order 43210 as “00001”   (or “001”)
In reverse (natural) order 01234, the result will must be “10000” (or “100”)
But the QuantumComputer.py result is different...  "010"

This is the Python source code used in all tests:
CNOT Situation.txt
See the screen of source code used:

When the Q1 is set to |1>

IBM show it in binary order 43210 as “00010”   (or “010”)
In reverse (natural) order 01234, the result will must be “01000” (or “010”)

But the QuantumComputer.py result is different...  "100"

When the Q2 is set to |1>

IBM show it in binary order 43210 as “00111”   (or “111”)
In reverse (natural) order 01234, the result will must be “11100” (or “111”)

In this test QuantumComputer.py result is EQUAL to IBM !   "111"

I hope these test cases can shed some light on the CNOT algorithm.
Hi Marcus,
Did you ever resolve this issue ?
