@whitequark can we rewrite this to fit or do we need the alternative, transaction-style with parallel?
@jordens we need the latter.
I think we should be able to keep with parallel, see #193 (comment).
This is an extremely annoying issue that, on reflection, I'm unsure if I can handle robustly. In short, there are two propositions that the compiler has to prove:
Unlike #192/#193, where the propositions are easy to prove and the challenge lies in introducing the semantics in a way that creates a great user experience, here we have a much more complex situation. The point (2) is impossible to prove without whole-program analysis and severe dataflow restrictions. It would not even be enough to completely inline all invocations that depend on attribute values into the toplevel function, because self can be aliased and changed elsewhere, in places where dataflow is still opaque.
Essentially, the only thing that would work reliably (in light of mutable attributes) is completely linearizing the program not only with regards to control flow but also data flow; making sure that in every case that an attribute is retrieved, the object from which the attribute is retrieved is always the same. Of course, this is far too restrictive, although this is not unlike how the old compiler worked.
Yet again, what I really need here is immutable attributes, just like #193 begs for immutable bindings. If only there was a good way to express this in Python...
The point (1) can be expressed using the same mechanisms as used for #193 and it should be as powerful, so that part is less problematic.
This should not be needed as with parallel will use the "dumb" implementation that should support this case. The interleaving implementation will be renamed with sequential.
