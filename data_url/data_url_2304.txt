Now that we are using python 3, importing is much lazier and it's possible for us in many situations to just import cirq instead of individual modules.
Pros:
Cons:
After discussing with @cduck I think I might be confused about how lazy or not lazy import was, and whether this changes from 2 to 3.
In any case, here are some ideas we came up with that could be used to prevent unwanted dependencies between packages, and to catch accidental usage of e.g. class X(cirq.Gate) instead of class X(cirq.ops.Gate).
In cirq/__init__.py first import all sub modules and only flatten sub modules afterwards. If a sub-module has a file touching cirq.Gate at import time, it will fail due to running before cirq.ops was flattened into cirq.
If module A is not supposed to depend on module B (i.e. B comes after A), then end A's __init__.py with _A_initialized = True and start module B's __init__.py with from A import _A_initialized. This will force an exception at import time if B's init imports a file that imports A. And the error message that results is decent, though not great:
The idea for enforcing the dependencies doesn't work as well as I'd hoped. E.g. you can still import cirq.circuits inside cirq.ops when it's set up without triggering it.
One thing that can be done is e.g.
It's kinda weird to assert "I don't depend on X" though.
The closing PR implements @Strilanc's idea (1) and solves (2) with a test that verifies import order.
