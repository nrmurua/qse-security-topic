I have had some problem triggering this bug as it sometimes appears and sometimes does not.
The behaviour is as follows:
Output
This nasty bug has been resolved with e8b2b17. The reason for this bug was in-correct implementation of functionality reading hardware configuration file. For instance, to check if eqasm_compiler is specified in the configuration file, the following condition was used:
This is the incorrect way. The problem with this is if an entry is not available for eqasm_compiler, it will be created and null will be assigned to it. The correct way to test if eqasm_compiler is specified according to the documentation is:
OR
This same logic was used at multiple places and this resulted in various kinds of hard to track bugs. Secondly, the second compile of program was seeing various entries with null values causing crash/exceptions. So I added test_stateful_behavior() in test_bugs.py to compile the program multiple (50) times. The generated output from all these compiles has also been tested to be same.
To whom it may concern: the entire register allocation code was not only stateful but also dependent on Python's garbage collection logic to free registers; any ql.CReg constructed and remaining in Python's object storage would (continue to) claim exclusive access a control register regardless of the program or even platform being compiled for. So whenever some IPython kernel that happens to be running in the same Python process has a CReg in memory anywhere, no other program can use that CReg, and thus the numbering would be different. Some instructions seem to only be defined for specific registers, so you'd get an error when trying to add an instruction when the OpenQL-allocated register just so happens to be incorrect.
The test Imran wrote for it didn't catch it, because it did ql.CReg() outside of the test loop, and (probably) Python would even be smart enough to clean the objects if you'd do the assignment in the loop. But there are no guarantees here.
I ran into it while updating all the tests to check their output against golden versions, and there was non-deterministic behavior all over the place. I just tore out automatic register allocation entirely for now as part of our cleanup efforts, since Hans and I are not sure whether classical registers are even being used by anyone anymore.
I just checked, pycQED currently does not use any creg, so you don't break anything there...
