The test vi test/python/test_dagcircuit.py is too basic and contain no assert.
The tests in the testsuite should test something.
Right now, the test only implicit test for this file is "there is no exception".
Add asserts for the expected structures.
Some use cases for the DAGCircuit.
Investigating which operations are being performed in the circuit:
2-qubit operations and ignoring barriers
Inspecting qargs with node["qargs"] to find out which qubits are used in an operation.
Given a list of swaps (Tuple[_V,_V]), produce a DAGCircuit that implements the swaps. The fact that the input type _V does not directly map to a DAGCircuit qubit necessitates the inputmap dictionary, that maps _V to DAG qubits.
I would also like to note that the whole checking if "swap" is in the basis seems like it should not be necessary. Maybe by defining a gate that can decompose, if necessary, to c-nots. I have not figured out how to use the DAGCircuit.add_gate_data to do anything useful.
Subsequently to making a DAGCircuit which implements the swaps I append it to my existing DAG (arch_circuit):
It would also be great if we could compose back without an explicit wire_map. It could then just assume that each wire is mapped to a similarly-named wire on the other dag. And each unused wire would then be an identity circuit.
Note: By inspection I found out the above code is wrong but runs without a hiccup and adds a q quantum register of size 3 (as defined by some other code) to arch_circuit. The arch_circuit at first only contains registers (i,0) for iâˆˆ[3]. Thus it is not checking the wire_map properly.
I would like to note that the documentation of compose_back is ambiguous in the explanation of wire_map. What type does the dict have? Does it map input_circuit qubits to self or vice-versa?
Corrected code from item 5 above:
where the mapping circuit and inputmap are produced by the circuit function at item 4 above. And _circuit_name is a function I need to convert my node ids to safe quantum register names:
This is fixed in #1043.
