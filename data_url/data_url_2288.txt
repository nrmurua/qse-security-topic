Quantum gates can be built from simpler gates using operations such as taking (normalized) linear combinations, tensor products and compositions. Cirq has a means of representing linear combinations (using LinearDict and related classes), but for now doesn't have an explicit way to represent tensor products or compositions.
One use case for TensorProduct is provided by #1884. Compositions would enable a simple way to represent certain gates, e.g. FSimGate as iSWAP composed with CPhase or YXXY (to be moved in from OpenFermion-Cirq) as FSimGate with Z rotations.
What this means in the bigger picture is that complex gates in cirq could be modeled as abstract syntax trees where inner nodes correspond to operations that combine gates (such a linear combinations, tensor products and compositions) and leaf nodes correspond to a limited set of primitive building blocks (such as Paulis).
This type of representation makes the most sense for general matrices and makes me think we should have a separate class for this, with implicit type conversion when using gates or operations in this class.
It would be nice if we could write code like
(P.X | P.X) | (P.YY + P.YY)
(I used or for tensor product but probably a debate about what that symbol should be).
Python has a "matmul" operator that could be used for tensor product:
My reason for suggesting | was that it does make sense to matrix multiply two pauli matrices, so that might cause confusion.  Who wants to lobby Python to add the first unicode magic method, âŠ—? lol
Closing as it's too complex to implement at this stage.
