Building liboqs with gcc-11 on an Apple Intel Mac yields build failures related to the Keccak xkcp_low code.
Reproduce by checking out main, and then running cmake -GNinja -DCMAKE_C_COMPILER=gcc-11 ...
Reproduce by checking out main, and then running cmake -GNinja -DCMAKE_C_COMPILER=gcc-11 ...
Is /usr/local/bin/ as shown in the trace above indeed the location of the homebrew installs? What's the output of gcc-11 --version?
Reproduce by checking out main, and then running cmake -GNinja -DCMAKE_C_COMPILER=gcc-11 ...
Is /usr/local/bin/ as shown in the trace above indeed the location of the homebrew installs? What's the output of gcc-11 --version?
Yes, /usr/local/bin/gcc-11 is the Homebrew installation of gcc.  The output of gcc-11 --version is gcc-11 (Homebrew GCC 11.2.0_3) 11.2.0.
But I am perplexed by the output clang: error: no such file or directory: 'macOS=1' -- I don't understand how/why it's calling out to clang.
I don't understand how/why it's calling out to clang.
Me neither. That was the reason for my question above. What happens when you run the failing command manually? (/usr/local/bin/gcc-11  -I/Users/dstebila/Dev/OQS/liboqs/build/include -fPIC -march=native -Werror -Wall -Wextra -Wpedantic -Wstrict-prototypes -Wshadow -Wformat=2 -Wfloat-equal -Wwrite-strings -O3 -fomit-frame-pointer -fdata-sections -ffunction-sections -Wl,-dead_strip -Wbad-function-cast -Wa,-defsym,macOS=1 -MD -MT src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600_avx2.dir/KeccakP-1600/avx2/KeccakP-1600-AVX2.S.o -MF src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600_avx2.dir/KeccakP-1600/avx2/KeccakP-1600-AVX2.S.o.d -o src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600_avx2.dir/KeccakP-1600/avx2/KeccakP-1600-AVX2.S.o -c /Users/dstebila/Dev/OQS/liboqs/src/common/sha3/xkcp_low/KeccakP-1600/avx2/KeccakP-1600-AVX2.S)
-> Same reference to clang?? What's the output of (the OSX-equivalent of) ldd on /usr/local/bin/gcc-11?
The output of the above command (with some extra -v in there to increase verbosity) is as follows:
It looks like, regardless of what compiler is used, the macOS assembler as is used, and as is really clang/llvm underneath.
I just noticed that the most recent commit on the XKCP repository is a patch to the exact file in question specifically around adjusting syntax for macOS.  Which makes me hope that perhaps if we update the XKCP code, we can remove -Wa,-defsym,macOS=1 from our CMakeLists.txt file and then this problem will go away.
It looks like, regardless of what compiler is used, the macOS assembler as is used, and as is really clang/llvm underneath.
Might it be an option to set CMAKE_ASM_COMPILER explicitly then?
I don't know of another assembler that even could be used.  As far as I know the command for the GNU assembler is gas, but that command isn't present on my Mac.
Btw, GNU assembler also could be named as and it's usually in binutils package.
If it's not present sometimes gcc itself could be used as assembler AS=gcc. (Perhaps, it will call llvm-as in that case too, so never mind.)
Fixed by #1173. Thanks @jschanck !
