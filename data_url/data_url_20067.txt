When looking at a test config output, not all build options can be seen and some have to be (but can be) inferred. This issue to ask whether all OQS_ build options should be explicitly output by https://github.com/open-quantum-safe/liboqs/blob/main/tests/system_info.c:
doesn't show whether OQS_SPEED_USE_ARM_PMU had been set.
As a practical riddle along these lines: Who can explain/tell the performance difference in (terms of) configs between these two runs of speed_kem?
???
When looking at a test config output, not all build options can be seen and some have to be (but can be) inferred. This issue to ask whether all OQS_ build options should be explicitly output by https://github.com/open-quantum-safe/liboqs/blob/main/tests/system_info.c:
It seems like that would be worthwhile to avoid ambiguity / confusion.
As a practical riddle along these lines: Who can explain/tell the performance difference in (terms of) configs between these two runs of speed_kem?
???
I see that AES and SHA2 extensions are active on the latter, which *checks notes* makes things slower?
It seems like that would be worthwhile to avoid ambiguity / confusion.
Working on it.
I see that AES and SHA2 extensions are active on the latter, which checks notes makes things slower?
Weird, AES and SHA2 extensions present that make things slower?!? Shouldn't stuff with extensions available be faster? We might at least want to phrase the output differently....
@dstebila Could you please take a look at branch mb-configupdate?  This lists/explains all build options in the comment and adds the missing output as and when branch 'ds-pmu-option' lands. A better suggestion as to how to state presence/absence of OQS_DIST_BUILD still solicited.
@dstebila Could you please take a look at branch mb-configupdate? This lists/explains all build options in the comment and adds the missing output as and when branch 'ds-pmu-option' lands. A better suggestion as to how to state presence/absence of OQS_DIST_BUILD still solicited.
Regarding the various OQS_DIST_*BUILD flags, we could just print that out directly too â€” although parts of it can be inferred from other output, that assumes we've got all the rules correct everywhere, so it might be helpful for debugging purposes to directly output which of those is set.  Same for OQS_DEBUG_BUILD.  Looking through oqsconfig.h, there's also OQS_ENABLE_TEST_CONSTANT_TIME.
so it might be helpful for debugging purposes to directly output which of those is set. Same for OQS_DEBUG_BUILD. Looking through oqsconfig.h, there's also OQS_ENABLE_TEST_CONSTANT_TIME.
Well, oqsconfig.h is an awfully long list (258 entries if grep didn't lie :), so outputting everything wouldn't be sensible. My proposal was to ensure all options documented in the wiki shall be made visible (by direct or indirect outputs). I agree, it may be reasonable to also document OQS_ENABLE_TEST_CONSTANT_TIME there. If you'd want to take a pass at completing the Wiki, I'll follow up amending this branch and do a PR.
oqsconfig.h is long, but most of that is algorithm enable lines, which aren't relevant to this discussion.  The only other one that seemed relevant was OQS_ENABLE_TEST_CONSTANT_TIME. I've now added that to the Wiki.
