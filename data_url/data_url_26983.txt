If yes, what is the input looks like?
Hi, you cannot specify dummy atoms in QUICK input. In QUICK/AMBER QM/MM simulations, these are specified in AMBER input.
is there an example of specifying dummy atoms in AMBER input for QUICK/AMBER QM/MM simulations? I have looked for the amber manual but failed to find out a description of dummy atoms.
Thanks in advance!
My apologies.. I thought you were referring to link atoms, which are automatically added by AMBER.  Can you please be more precise? What are you trying to use dummy atoms for?
I am currently trying to modify the source code of QUICK/AMBER for a special QM/MM simulation. I need to calculate the energies/gradients of QM subsystem and a slightly revised QM subsystem at each step of a QM/MM simulation. The revised QM subsystem is just having one atom removed.
I am wondering if it's possible to convert the atom being removed to a dummy/ghost atom, so that there's no need to modify a lot of information including the basis set when switching from the initial QM subsystem to the revised QM subsystem.
I see. There is no instant solution for this; but off the top of my head, you can set the charge of this atom to zero (stored here: https://github.com/Madu86/QUICK/blob/master/src/modules/quick_molspec_module.f90#L38) and the corresponding contraction coefficients to zero (stored here: https://github.com/Madu86/QUICK/blob/master/src/modules/quick_basis_module.f90#L99).
Thank you so much! I will have a try at it.
Sure. I haven't tested the following subroutine but something like this should do the job.
You can put the call to this subroutine before sad guess call in the api: https://github.com/Madu86/QUICK/blob/master/src/modules/quick_api_module.f90#L496. And you will have to redo the guess after changing the contraction coefficients. Good luck!
We should also add dummy atom and ghost atom support to Quick. Ghost atoms are important for instance for counterpoise corrections to basis set superposition error. I would suggest to use
This would require only small modifications to subroutine read_quick_molspec() in src/modules/quick_molspec_module.f90.
Hi Madu86, this is so great!! I really appreciate it!
I have another question, what is the size of gccoeff array? (MAXPRIM,nbasis)? (nprim,nbasis)? or something else?
By the way, I see that the beta density matrix (denseb) is written to file in quick_calculated_module.f90#L333 but is read into alpha density matrix (dense) in getMol.f90#L265, is this normal? Also, I notice a typo in a print-out in quick_files_module.f90#270. The 'DATE' should be 'DATA'.
We should also add dummy atom and ghost atom support to Quick. Ghost atoms are important for instance for counterpoise corrections to basis set superposition error. I would suggest to use
This would require only small modifications to subroutine read_quick_molspec() in src/modules/quick_molspec_module.f90.
@agoetz. Yeah, I agree.
Hi Madu86, this is so great!! I really appreciate it!
@jjlex You are welcome.
I have another question, what is the size of gccoeff array? (MAXPRIM,nbasis)? (nprim,nbasis)? or something else?
Its MAXPRIM, nbasis: https://github.com/merzlab/QUICK/blob/master/src/modules/quick_basis_module.f90#L254. MAXPRIM is set to 10: https://github.com/merzlab/QUICK/blob/master/src/modules/quick_size_module.f90#L39.
By the way, I see that the beta density matrix (denseb) is written to file in quick_calculated_module.f90#L333 but is read into alpha density matrix (dense) in getMol.f90#L265, is this normal?
This is wrong. I haven't looked into implementation that writes and reads the .dat file and currently this feature in QUICK is broken.
Also, I notice a typo in a print-out in quick_files_module.f90#270. The 'DATE' should be 'DATA'.
Thanks for pointing this out.
@jjlex thank you very much for pointing out bugs and typos. If you see something that needs fixing feel free to submit a pull request. Any contributions are appreciated!
Hi Madu86, thank you for your code of making ghost atom. I am testing it in a system containing only one hydrofluoric acid molecular. In the system, the first atom is H and the second atom is F.
I am using the 6-31G* basis set, so the 'nbasis' is 17 (2 for H and 15 for F). Thus there are 17 rows in gccoeff.
When I set the variable 'atom' to 1, the code set the data in the first two rows of gccoeff to 0.
But when I set 'atom' to 2, the code didn't set all the data in row 3-17 to 0.
Because I am not very familiar with the knowledge of basis set, in my understanding, if I want to change F into a ghost atom, all the data in raw 3-17 should be set to 0. Is this understanding wrong?
The original content of gccoeff
H
0.21494   0.36457   0.41505   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.18138   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
F
0.99264   1.83123   2.96611   3.90926   3.35590   1.14071   0.00000   0.00000   0.00000   0.00000
-0.75451  -0.33892   1.00415   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.32996   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.11382   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.92920   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.11382   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
3.34147   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
3.34147   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.92920   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
atom = 1
H
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
F
0.99264   1.83123   2.96611   3.90926   3.35590   1.14071   0.00000   0.00000   0.00000   0.00000
-0.75451  -0.33892   1.00415   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.32996   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.11382   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.92920   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.11382   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
3.34147   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
3.34147   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.92920   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
atom = 2
H
0.21494   0.36457   0.41505   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.18138   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
F
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
4.54838   3.51072   1.49035   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.39493   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.11382   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.92920   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
3.34147   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
3.34147   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
1.92920   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000   0.00000
Hi @7cube, as mentioned, I didn't test the code snippet I posted yesterday. It turns out there was a bug. Here is the fixed version:
In the previous code, I missed looping through all basis functions. In your HF example, there are 6 shells (for H atom: 2 s shells, for F atom: 1 s shell, 2 sp shells, 1 d shell) and 17 basis functions (for H atom: 1 s function from each shell, for F atom: 1 s from s shell, 2 s functions from the sp shells, 6 p functions from sp shells and 6 d functions from d shell).
For atom=1, you should now get the following:
for atom=2:
Note that in the above output, I am only printing coefficients of the first 6 primitives of each basis function.  Let me know if something is not clear.
@Madu86 Thank you very much. I tested the new code for HF and H2O with basis set STO-3G, 3-21G, 6-31G* and 6-31++G**. In all the tests, it worked very well.
If this works, can someone open a PR for this?
