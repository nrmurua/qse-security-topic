Hello team!
I was following the Quantum data tutorial and just realized there's a very minor yet misleading typo in the mathematical expression.
In Section 2.1, $V(\theta)$ should be $$V(\theta) = \prod_{i=1}^n \exp(-i\theta (X_{i}X_{i+1}+Y_{i}Y_{i+1}+Z_{i}Z_{i+1}))$$ rather than $$V(\theta) =  \exp(-i\theta\sum_{i=1}^n (X_{i}X_{i+1}+Y_{i}Y_{i+1}+Z_{i}Z_{i+1}))$$ since tfq.util.exponential works correctly when its input Pauli sum is commuting. The above expression matches the Hamiltonian ansatz (L4) of the original paper.
Thank you!
I think the function v_theta(qubits) also needs to be changed.
It is probably worth adding that equation in, maybe incorporating something about how V(theta) is doing the trotterized approximation via:

But, why should the function be changed? The code implements a 10 trotter step approximate of the exp(-i theta H), which is what L4 seems to indicate.
Because tfq.util.exponential is intended to use on commuting PauliSum objects, while ref_paulis isn't commuting?
Ref pauli's (in the first data point) contains the following:
Each term in the hamiltonian is X_i X_(i+1)+ Y_i Y_(i+1)+ Z_i Z_(i+1) which does commute with the next term X_(i+1) X_(i+2)+ Y_(i+1) Y_(i+2)+ Z_(i+1)i Z_(i+2) right?. I verified this numerically with: print(ref_paulis[0].matrix() @ ref_paulis[1].matrix() == ref_paulis[1].matrix() @ ref_paulis[0].matrix())
Results in
If the terms don't commute, there should be an error, e.g. ValueError: Given an operator has non-commutable terms, whose exponentiation is not supported yet: X((0, 0))*X((0, 1)) and Y((0, 1))*Z((0, 2))
Two qubit operators on (i, i+1) and (i+1, i+2) don't commute.

I think each element of the input list is treated separately, not as a sum. So [H1 + H2] will throw error if they don't commute, but [H1, H2] won't throw error because it considers them different hamiltonians (and those are different list elements I mentioned).
