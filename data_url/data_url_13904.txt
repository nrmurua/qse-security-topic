Seems that the simplifier sometimes messes up the qubit numbering.  In particular sometimes the qubit index can be negative (which I think is a bug but maybe you want to allow it) and the qubit count is off.  For example, the following obviously has three qubits but qubit count reports only 1.
(Also I think that both these methods should return ints not floats but opinions may differ)

example.zip
Since commit 0ea2c41 g3.normalise() will normalise the qubit numbers so that the inputs are on qubit values 0, 1, 2, .... The qubit_count() currently returns the highest qubit value, which I agree is not very intuitive, and the function might best be renamed. To get the amount of actual qubits you could use something like len(g3.inputs) when input and output nodes are specified (which they wouldn't be in your case since you are importing from a qgraph file).
n.b. As a hack for quanto inter-operability, the qubit index is stored simply as minus the Y-coordinate in the qgraph. So, positive Y-coordinates = negative qubit indices. Since the qubit count is the max of the qubit indices + 1, you can see how this will go wrong. I guess this also explains why these end up floats and not ints for you.
Generally, giving pyzx a circuit (in either QASM or Quipper ASCII format) is more reliable than giving it a circuit-like qgraph file.
Thanks guys.
I suggest that :
Would it break quanto interoperability if the y-coords were all normalised to positive integers?
Would it break quanto interoperability if the y-coords were all normalised to positive integers?
If that was done then importing and exporting a graph would not give back the same graph.
the qubit_count() always returns to an int (just put the cast in the return statement)
Yes, I've been thinking of changing this function to simply return the amount of nodes that are labelled as inputs, as this makes more sense.
Yes, I've been thinking of changing this function to simply return the amount of nodes that are labelled as inputs, as this makes more sense.
Seems a good idea, and it's what the name implies, even if it's not how it's currently documented ("the value of the highest qubit index given to a vertex"). Currently both the name and the documentation are wrong (since it's actually one more than the highest qubit index):
