Hi,
I'm running the following test:
The tests fail because the resulting states have a phase shift. Is there a mean to remove or compute the phase shift already in the API? Or to compare two states up to a phase shift?
@antoine-bussy That's a good point. In the API, we basically translate the measurement to Kraus operators, so the resulting i-th state is effectively K_i|psi>. In this case, it'll be |+><+|psi>, so indeed you get a phase. This I agree is a bit counter-intuitive for basis measurements, but it is consistent with the literature, e.g. [Nielsen and Chuang Sec. 2.2.3, "Quantum Measurements"]. So for now I'm tempted to leave it as is. Most of the time in QM one doesn't talk about the "resulting" state, and if one does, then usually says the resulting state belongs to the "ray" in the Hilbert space P*H (where P is the projector onto the basis state, and P*H denotes the subspace of H onto which P projects). I.e., P*H:={P|psi> | |psi>\in H}.
To get rid of the global phase, simply divide the resulting state by one of its coefficients, e.g., resulting_state[0]/resulting_state[0][0].
In general, if you have |psi0> and |psi1>=e^{i\phi}|psi0>, then you compute the phase as psi1[0]/psi0[0], so psi1 * psi0[0]/psi1[0] will give you back |psi0>. Hope this helps.
Also, the simplest way to compare two states up to a phase shift is to simply compare the projectors onto them, i.e. prj(resulting_state[0]) and prj(resulting_state[1]) with prj(st.plus()) and prj(st.minus(), respectively. The projectors will absorb the global phases.
For qubits, prj(st.plus()) is also defined as st.px0, and prj(st.minus()) as st.px1, since one uses them quite often; also st.plus() is pre-defined as st.x0 and st.minus() as st.x1.
So in your code, this will translate to:
Thanks, it helps a lot.
Of course, phase is only relative, so forcing resulting_state[0] to be real is kind of arbitrary.
I'm only at Sec. 1.3.3 of Nielsen and Chuang, so I don't really want to jump ahead in my examples with projectors.
My formula for phase removal was more... obfuscated ðŸ˜…
which also only works because st.x0[0] is real.
I will go with the ray criterion with a collinearity test:
Thanks again!
@antoine-bussy That's a nice test. I may implement such a "collinear" function in q++.
Not so nice... I wasn't satisfied with it because it doesn't generalize well to upper dimensions, so I switched to a Cauchy-Schwarz-based test:
@antoine-bussy Indeed, I was just thinking about that...
