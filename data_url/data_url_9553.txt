Currently, an instance of the class Variable can have two different behaviors, depending on whether its size is 1 or greater. This dynamic polymorphism can be annoying when trying to treat the instance only relying on its type. For example, from qaoa_mis, we have to write a specific condition to make sure t_list and s_list will be iterable. It's cumbersome, and makes it impossible to correctly type-hint them:
In usual programming languages, arrays having only one element are allowed and have the same behavior than if they were bigger.
I think it would be great that the Variable keeps the same behavior regardless of the size (currently, __getitem__ will raise an error when it's equal to 1). It could also be renamed VariableArray, because it will be an array in all cases, and when we want to really create a variable that is not an array, we could benefit from VariableItem that could be renamed to just Variable.
The above code would be simplified to:
The function declare_variable could additionally be split into declare_variable (without size) and declare_variable_array (with size equal to or greater than 1).
