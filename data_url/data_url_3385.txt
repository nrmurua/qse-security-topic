After installing ForestSDK on my Windows computer and initializing the server mode for the qvm & quilc, I encounter the following error when trying to access the qvm via a jupyter notebook
get_qc(''9q-square-qvm")
JSONDecodeError                           Traceback (most recent call last)
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_base_connection.py in parse_error(res)
71     try:
---> 72         body = res.json()
73     except JSONDecodeError:
~\AppData\Local\Continuum\anaconda3\lib\site-packages\requests\models.py in json(self, **kwargs)
896                     pass
--> 897         return complexjson.loads(self.text, **kwargs)
898
~\AppData\Local\Continuum\anaconda3\lib\json_init_.py in loads(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)
353             parse_constant is None and object_pairs_hook is None and not kw):
--> 354         return _default_decoder.decode(s)
355     if cls is None:
~\AppData\Local\Continuum\anaconda3\lib\json\decoder.py in decode(self, s, _w)
338         """
--> 339         obj, end = self.raw_decode(s, idx=_w(s, 0).end())
340         end = _w(s, end).end()
~\AppData\Local\Continuum\anaconda3\lib\json\decoder.py in raw_decode(self, s, idx)
356         except StopIteration as err:
--> 357             raise JSONDecodeError("Expecting value", s, err.value) from None
358         return obj, end
JSONDecodeError: Expecting value: line 1 column 1 (char 0)
During handling of the above exception, another exception occurred:
UnknownApiError                           Traceback (most recent call last)
 in ()
1 # run the program on the QVM
----> 2 get_qc('9q-square-qvm')
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_error_reporting.py in wrapper(*args, **kwargs)
236             global_error_context.log[key] = pre_entry
237
--> 238         val = func(*args, **kwargs)
239
240         # poke the return value of that call in
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_quantum_computer.py in get_qc(failed resolving arguments)
607         if qvm_type is None:
608             raise ValueError("The device '9q-square' is only available as a QVM")
--> 609         return _get_9q_square_qvm(name=name, connection=connection, noisy=noisy, qvm_type=qvm_type)
610
611     # 4. Not a special case, query the web for information about this device.
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_quantum_computer.py in _get_9q_square_qvm(name, noisy, connection, qvm_type)
462                                   noisy=noisy,
463                                   requires_executable=True,
--> 464                                   qvm_type=qvm_type)
465
466
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_quantum_computer.py in _get_qvm_with_topology(name, topology, noisy, requires_executable, connection, qvm_type)
439         noise_model = None
440     return _get_qvm_qc(name=name, qvm_type=qvm_type, connection=connection, device=device,
--> 441                        noise_model=noise_model, requires_executable=requires_executable)
442
443
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_quantum_computer.py in _get_qvm_qc(name, qvm_type, device, noise_model, requires_executable, connection)
404                                noise_model=noise_model,
405                                device=device,
--> 406                                requires_executable=requires_executable),
407                            device=device,
408                            compiler=QVMCompiler(
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_quantum_computer.py in _get_qvm_or_pyqvm(qvm_type, connection, noise_model, device, requires_executable)
370     if qvm_type == 'qvm':
371         return QVM(connection=connection, noise_model=noise_model,
--> 372                    requires_executable=requires_executable)
373     elif qvm_type == 'pyqvm':
374         return PyQVM(n_qubits=device.qubit_topology().number_of_nodes())
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_error_reporting.py in wrapper(*args, **kwargs)
236             global_error_context.log[key] = pre_entry
237
--> 238         val = func(*args, **kwargs)
239
240         # poke the return value of that call in
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_qvm.py in init(self, connection, noise_model, gate_noise, measurement_noise, random_seed, requires_executable)
436
437         self.requires_executable = requires_executable
--> 438         self.connect()
439
440     def connect(self):
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_qvm.py in connect(self)
440     def connect(self):
441         try:
--> 442             version_dict = self.get_version_info()
443             check_qvm_version(version_dict)
444         except ConnectionError:
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_error_reporting.py in wrapper(*args, **kwargs)
236             global_error_context.log[key] = pre_entry
237
--> 238         val = func(*args, **kwargs)
239
240         # poke the return value of that call in
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_qvm.py in get_version_info(self)
452         :return: Dictionary with version information
453         """
--> 454         return self.connection._qvm_get_version_info()
455
456     @_record_call
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_error_reporting.py in wrapper(*args, **kwargs)
236             global_error_context.log[key] = pre_entry
237
--> 238         val = func(*args, **kwargs)
239
240         # poke the return value of that call in
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_base_connection.py in _qvm_get_version_info(self)
376         :return: String of QVM version
377         """
--> 378         response = post_json(self.session, self.sync_endpoint, {'type': 'version'})
379         split_version_string = response.text.split()
380         try:
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_base_connection.py in post_json(session, url, json)
56     res = session.post(url, json=json)
57     if res.status_code >= 400:
---> 58         raise parse_error(res)
59     return res
60
~\AppData\Local\Continuum\anaconda3\lib\site-packages\pyquil\api_base_connection.py in parse_error(res)
72         body = res.json()
73     except JSONDecodeError:
---> 74         raise UnknownApiError(res.text)
75
76     if 'error_type' not in body:
UnknownApiError: 
Your request could not be processed. Access to "127.0.0.1" is not allowed through this proxy.
This could be caused by a misconfiguration, or possibly a malformed request.
Tech support information: network_not_allowed moreless

For assistance, contact your network support team.


Your request was categorized by Blue Coat Web Filter as 'Uncategorized'. If you wish to question or dispute this result, please click here.


Name: 


Phone: 


Email: 

The server has failed to return a proper response. Please describe the problem
and copy the above message into a GitHub issue at:
https://github.com/rigetti/pyquil/issues
Sorry, I can see clearly after copying the error message into the browser that it is a proxy issue on my side.
