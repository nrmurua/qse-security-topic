What needs to be done
while investigating changes to do error estimation, I find ExponentialUtils with right parameters gives the right results now
ExponentialUtils package seems to gain a lot development this year (e.g much much faster matrix exponentials) and it is more generic so that our Measurement/ForwardDiff code could work without copying their implementation of matrix exponential exp! (it is now generated by a matrix function compiler instead of the previous manually optimized version, so it's gonna be harder to maintain if we copy that)
cc: @Wang-Shengtao @GiggleLiu
That sounds great! So are we planning to switch back to ExponentialUtils?
What is the cause of the previous error? Do you have a test case that shows it can give us a correct result for the case that it breaks on?
From the benchmark I can not see the difference in performance.
What is the cause of the previous error? Do you have a test case that shows it can give us a correct result for the case that it breaks on?
the above example was wrong with expv or the default parameters of expv timestep @GiggleLiu
From the benchmark I can not see the difference in performance.
The main reason is generic, the discrete emulator currently fails on error propagation as well as forward diff, which can be fix by copying their exp! code but now if we switch back we don't have to copy it. The performance improvement is small for the fully allocated case. I still need to fix the complex support of expv timestep if we do the switch then I'm expecting a small ~1.5 speed up based on our previous experience by removing the extra krylov subspace allocation.
for reference, this is the original bug report I made last year and now it's correct
I think I'll move this out of internal preview since this doesn't affect the interface
I think we are unlikely to do the switch in the near term, there is no obvious benefits right, the ideal implementation would be a refactor of EU.jl expv_timestep to make it work with complex number and better on CUDA, which I don't think will happen anytime soon, so I'll close this issue first.
