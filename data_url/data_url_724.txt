The example qpp_qasm.cpp takes this snippet as an input:
OPENQASM 2.0;
include "qelib1.inc";
qreg q[2];
qreg qqq[1];
x q[0];
creg c[2];
measure q -> c;
// if (c==1) x qqq[0]; // This is to prove the c is equal to one here.
creg ccc[1];
measure qqq[0] -> ccc[0];
We will get this:
That looks intuitive because the "last dits" can be evaluated to 4 if the 1 is the most significant bit, and the final state matches that.
But, if we look at theif (c==1)in the QASM code above, the classical register c is evaluated to 1 at that point. That seems to suggest the 1 in the "last dits" is the least significant bit.
I cannot find anything specific to bit numbering of the classical registers in the QASM spec. If the particular evaluation of classical registers is a Quantum++ implementation decision, would it be nice to have an engine function to print out the values of the classical registers in addition to the existing statistics? That would clearly indicate the presentation of the "last dits" and the classical register values are different things.
More important, I hope the bit numbering of other quantum platforms is compatible with that of the Quantum++.
Thanks.
@DevelopDaily When interfacing with OpenQASM, Quantum++ evaluates the dits in little-endian order. So indeed the [1 0 0] is interpreted as 1 (and not 4). There is already a member function, QEngine::get_dits(), that retrieves the classical dits from the last run of the engine (separately from the statistics). This is now documented in qpp::QEngine.
Overall I don't think there is any particular convention on what endianness to use. In Quantum++, the classical registers are supposed to be just that, and not necessarily re-interpreted as a value. But I agree, when interfacing with OpenQASM, one need to clearly specify what ordering is used, which, in our case, is little-endian (which is what's used in OpenQASM standard).
Note that for most other native stuff, Quantum++ assumes big-endian, e.g., this code outputs 2 (and not 1)
Output:
Is this addressing the issue?
Thanks!
Fantastic! Now, I notice both get_dits() and get_dit(). It is a sheer joy to work with the Quantum++ API.
Thanks.
@DevelopDaily Thanks, glad you like it!
