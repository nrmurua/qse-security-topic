Henry Case notifications@github.com wrote:
henrydcase commented on this pull request.
@@ -23,9 +23,9 @@ void PQCLEAN_KYBER768_poly_compress(unsigned char *r, const poly *a) {
t[j] = (((PQCLEAN_KYBER768_freeze(a->coeffs[i + j]) << 3) + KYBER_Q / 2) / KYBER_Q) & 7;
}
nit: the README.md says All integer types are of fixed size, using stdint.h types (including uint8_t instead of unsigned char)
This still has to be fixed everywhere in the code, if we want to really
require it.
Originally posted by @cryptojedi in #29 (comment)
I've seen there is also u8 type used somewhere in the code. But I wonder - what's real motivation for "not using" unsigned char? The only 2 things I can think of:
Something else?
FWIW, according to Wikipedia:
POSIX requires char to be exactly eight bits in size.
Makes sense. Now, I vaguely recall TI compiler having 16-bit char.
For the sake of documentation: a related issue that came up in discussion yesterday was the fact that some platforms interpret char as signed char, while others treat it as unsigned char.
There are compiler flags -fsigned-char and -funsigned-char for GCC that force either one of the two, but nothing obvious that explicitly warns about its use. We'll probably have to do some more complicated parsing (or #define-magic?) to check for types like long long anyway.
We also decided to postpone this to (probably) round three or after, because it seems like a lot of work that we did not want to put on all of the second-round candidates.
See discussion in #79
