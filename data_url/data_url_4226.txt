I discovered that after executing the statement
the setups and default_engines module are still not available, even though the rest are. This was quite confusing to me when I was using the compiler tutorial as a template, since the statement
wouldn't work for me. It took me some time to figure out that in the tutorial, the reason it works is that the statement
was executed earlier, and this is due to the lines
in the __init__ function of MainEngine.
This behavior seems undesirable because it's not transparent when the statement projectq.default_engines() becomes available. One solution would be to make it clear somewhere (perhaps in projectq/__init__.py what modules we want to expose to people. I still don't understand how the modules are getting exposed.
Yes, the reason for this is that we are still using import projectq.setups.xxx to load setups, instead of having it as a function which would also make it possible to switch back and forth between setups in the same run.
The problem is that this would be a breaking change, same as the improved error handling (depending on how it will be implemented). In any case, these two changes are planned for the next release.
