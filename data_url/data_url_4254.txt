There are operations that have a well-defined behavior for any number of target qubits, including 0. For example, an increment operation performs a -> (a+1) % 2**n. When n=0, it reduces to the trivial identity operation 0 -> 0.
But if I define an increment gate and apply it to no qubits, instead of nothing happening I get an exception:
Of course most people won't trigger this on purpose, but empty cases have a knack of appearing when code interacts with other code and handling them gracefully saves everyone time. For example a decomposition that needs to increment n-k of the qubits in a register should work for k qubits without any issue, but because of this bug the decomp would really only work for k+1 qubits unless a special case was added.
Do you know a nice way to fix this issue? We could check for empty lists directly in the or-operator or, alternatively, allow commands with no target qubits and then throw them out. Both don't seem very graceful...
There is a partial fix, just for controls, in #50
My wild idea for how to fix it is to move the engine-selection out of the qubits and into blocks like this:
But I'm still debating the strengths of that approach. It nicely simplifies the Dagger/Control/Loop/Compute cases, but it deals poorly with generators, coroutines, and async methods (since they turn this intended-to-be-lexical scoping mechanisms into a dynamical scoping mechanism).
I will send you an invite to a doc where I'm listing out things I want to propose.
Well, the controls part is no longer an issue but thanks for catching that!
Yes, I'm also wondering if this would not introduce too much boilerplate code. After all, having a nice and easy-to-learn syntax is a huge plus :)
Concerning the doc: Great, thanks.
Do you have a gmail address? It's in a google doc that I can only share with google accounts.
Yes, I sent you an e-mail.
We currently don't have any example where an application of a gate to an empty list would make sense. Our current design does not prohibit implementing this if it is ever needed for a specific case.
I am closing this issue now. If there is a gate implemented where the application to an empty list make sense, please open a new issue and we could then discuss adding this feature for that explicit gate.
