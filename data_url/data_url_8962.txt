in src/stim/py/stim.pybind.cc there is the following comment:
would it make sense to split all the pybind functions up into functions defining the python classes and functions defining the python methods, so that order no longer matters (other than all classes defined before all methods) This is already the case for some, but not all of the binding code. There is also some inconsistency between how things are named. We have pybind_$TYPE_methods and pybind_$TYPE_after_types_all_defined, but as far as I can tell, there isn't a semantic difference.
Yes, it would make sense to do this. It's just so sloggy that I did it only on demand as needed. Doing it all in one method is a great way to confuse people adding methods when they trigger the safety check in the documentation generation that makes sure it doesn't happen.
Do you have a preference for naming convention? I am leaning towards pybind_$TYPE and pybind_$TYPE_methods
That scheme sounds good to me.
OK took a shot at this: #342
Fixed by #342
