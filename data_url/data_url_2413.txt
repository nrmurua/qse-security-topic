Seeing as how we're dropping python 2 support, this seems like a natural time to do it.
I've run into a few issues recently w.r.t. things existing in the typing module or not. We could also start using features like data classes and attribute/variable type annotations.
+1 for bumping.
data classes
So, versions 3.7+
The biggest issue I see with doing something like this is whether or not we are limiting integration of cirq into projects that operate on earlier python 3 versions. We may want a release that is compatible with 3.5/3.6 so that it isn't a jump from 2.7, >=3.5 to 3.7 only
https://www.jetbrains.com/research/python-developers-survey-2018/ contains some info on version adoption
I'm not very familiar with how backward incompatible 3.x versions are.
FWIW: colab uses 3.6.7.
We definitely don't want to become incompatible with colab.
Based on Dave's link, 54 percent of the users surveyed are on Python 3.6 vs 11% on 3.5.
I think I've thought of a hacky solution to the 3.5-is-forever-confusingly-broken problem.
When we release the next package, we mark it as compatible with 3.5 (and even 2.7). But at import time we check if the version is 3.5 or lower, and if it is then we blow up with an error message saying "you either need to upgrade to python 3.6 or you need to install the old version of cirq==0.whatever".
Now, when people on an old verison pip install cirq without specifying a verison, they get a very loud and well explained error (instead of a confusing error that only shows up after using the package for 10 minutes).
The cost is we do the wrong thing for people who wanted pip install cirq from 3.5 to actually install the old version. But we keep telling people not to do that, and give them a workaround, so it may be acceptable.
