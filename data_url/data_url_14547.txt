The OpenQASM3 exporter is comparing bit arrays to integers. This is an implicit type casting to an unsigned integer.
Produces
It should compare bit arrays to bit strings.
Or alternatively
Update the exporter to emit valid QASM3.
Thanks!  There's quite likely other places where we've made some mistakes like that - it'd be good to try and catch as many of them as possible before release.  By the way, do you have the Terra reproducer for your example?  I think you may have just accidentally copied the QASM in twice.
I think we let this go through as "valid" QASM 3 by a reading of the line
An n-bit classical register containing bits can also be reinterpreted as an integer, and these types can be mutually cast to one another using the type name, e.g. int[16](c).
that thought that the use of "and" is implying that the creg -> uint conversion can be implicit.  But we shouldn't have relied on implicit behaviour; we should emit a proper cast operator in the if check: if (uint[...](c) == 3).
(By a very strict reading of the spec, bitstrings aren't technically allowed anywhere except as a direct assignment to a classical register at the moment.  But that's insane and something that the types WG is changing - the syntax is just under discussion, because we want to avoid implicit different-length interactions.)
Thank you Jake, I've updated the example. Currently the backend is handling the QASM3 as it is now appropriately.
Perfect, thanks - I think I've got your fix in #7153, if you're fine to handle casts?
Hi Jake, let's put this on hold until next week. I need to verify if we are handling explicit casts. I know we are currently doing implicit casts such that the existing output works. Maybe you can confirm/update on support here @lcapelluto?
Yep, that's no problem at all.  I actually thought as well: implicit casts are questionable in the OpenQASM 3 spec at the moment, but these particular ones are very OpenQASM 2-ish, and so there's a good chance that bit[5] x; probably will end up with some implicit rules for casting to uint, just for ease of transition from one language version to the other.
I reckon that at some point in the future, once the backend supports them fully, putting in the explicit cast in the generated output is probably going to be the safest choice. Right now though, let's do what makes sense for our tools to work together properly. We can leave the PR on hold indefinitely - there's no rush to get it in.
