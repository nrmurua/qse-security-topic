weyl_coordinates was unnecessarily computing the entire
diagonalisation of the M2 matrix, even though it only needed the
diagonal.  The diagonal is just the eigenvalues (no matter the
degeneracy pattern), so this can be computed directly without the random
algorithm used to find the diagonalising SO(4) element.
The transformation to the magic basis is factored out into one place, so
only one location is responsible for it.  Factoring it out into a black
box also lets us store the basis and its adjoint with unusual
normalisations, to minimise floating-point errors when applying it.  By
storing one matrix directly as
B = np.array([[1, 1j, 0, 0], ..., [1, -1j, 0, 0]])
and the other as
B_dagger = 0.5 * B.conj().T
the normalisation of the transformation is maintained, but the two
individual matrices are not.  This is better because now all the
elements of B and B_dagger are exactly representable in
double-precision floating point, so B @ B_dagger is now exactly the
identity, rather than differing by 1ULP in all elements of the diagonal.
This commit does not change the random algorithm used in the
diagonalisation, though it does significantly reduce the number of times
it will be called.  It is possible to do by calculating the eigenvectors
of M2 with a general-purpose routine, then manually orthonormalising
degenerate subspaces and finding real spanning vectors, but it generally
takes 1.3x to 2x as long to do this, with no meaningful improvement in
accuracy.
LGTM. I appreciate the comment explaining the randomized algorithm
