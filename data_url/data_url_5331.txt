I've read all about the readme file but I'm not very familiar with C++ programming. Python is mostly used. What if I want to creat a quantum circuit like a GHZ state with 4 qubits? How should I test it?
Have you been able to build the ddsim_simple binary?
If so, you can call ./ddsim_simple --simulate_ghz 4 --display_vector --ps to create a GHZ state from |0000ã€‰.
Hi, thank you for your reply and this command works. Here are the returns.
ddsim/build$ ./ddsim_simple --simulate_ghz 4 --display_vector --ps { "state_vector": [ +0.707107+0i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, +0.707107+0i ], "non_zero_entries": 2, "statistics": { "simulation_time": 0.000069, "measurement_time": 0.000002, "benchmark": "", "shots": 0, "distinct_results": 0, "n_qubits": 4, "applied_gates": 4, "max_nodes": 9, "path_of_least_resistance": "1111", "seed": 0 }, "dummy": 0 } 
But can you tell me more about the arbitrary quantum circuit running? For example I may want to change the rotation angle from each qubit in the GHZ state. The code is like:
rx(q0,theta1);cx(q0,q1);rx(q1,theta2);cx(q1,q2);rx(q2,theta3),cx(q2,q3)
I thought this quantum circuit will get a different result from GHZ state. And how should I create such a circuit by myself?
I'd say the best way to create these circuits is implementing them in either the real or OpenQASM (I recommend OpenQASM).
The 4 qubit GHZ is implemented as follows:
Saving this as ghz_4.qasm, you can run this with ./ddsim_simple --simulate_file ghz_4.qasm --ps --display_vector.
From there I'm sure you'll be able to include your rotations to perform the entanglement on arbitrary states :)
Thank you! It helps me a lot. Here is my code and correspond returns.
OPENQASM 2.0; include "qelib1.inc"; qreg q[4]; creg c[4]; U(1.5,0,0) q[0]; cx q[0], q[1]; U(1.2,0,0) q[1]; cx q[0], q[2]; U(0.2,0,0) q[2]; cx q[0], q[3];
And after running by using ddsim_simple command I will get:
/ddsim/build$ ./ddsim_simple --simulate_file qasm_test.qasm --ps --display_vector { "state_vector": [ +0.600872+0i, 0, +0.411079+0i, 0, +0.0602883+0i, 0, +0.0412454+0i, 0, 0, +0.0384241+0i, 0, -0.0561644+0i, 0, -0.382959+0i, 0, +0.55977-0i ], "non_zero_entries": 8, "statistics": { "simulation_time": 0.000102, "measurement_time": 0.000002, "benchmark": "qasm_test", "shots": 0, "distinct_results": 0, "n_qubits": 4, "applied_gates": 6, "max_nodes": 15, "path_of_least_resistance": "0000", "seed": 0 }, "dummy": 0 }
Thank again :)
