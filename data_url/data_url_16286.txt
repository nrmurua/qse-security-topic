The nightly benchmark machine flagged three classes of performance regressions from #5083
The first is an across the board jump in the baseline memory consumption. For example:
https://qiskit.github.io/qiskit/#passes.PassBenchmarks.peakmem_merge_adjacent_barriers?machine=qiskit-benchmarking&os=Ubuntu%2018.04&ram=16%20GB&p-n_qubits=14&p-depth=1024&commits=20c5e152
this is seen on both benchmark machines reporting there and across all benchmarks. It's not actually clear to me whether this is caused by #5083 or some environment change that occurred on both benchmarking machines at the same time for this commit (which seems unlikely but possible, and is something we saw before #4689 ).
The second is on disassembly:
https://qiskit.github.io/qiskit/#assembler.DisassemblerBenchmarks.time_disassemble_circuit?machine=dedicated-benchmarking-softlayer-baremetal&os=Linux%204.15.0-46-generic&ram=16GB&p-n_qubits=1&p-depth=1024&p-number%20of%20circuits=100&commits=20c5e152
And the third is for the random hex circuit transpile benchmark:
https://qiskit.github.io/qiskit/#random_circuit_hex.BenchRandomCircuitHex.time_simulator_transpile?machine=dedicated-benchmarking-softlayer-baremetal&os=Linux%204.15.0-46-generic&ram=16GB&p-n_qubits=14&commits=20c5e152
this is small though and we can likely ignore it. I expect it's because the circuit being transpiled there contains u3 gates: https://github.com/Qiskit/qiskit/blob/master/test/benchmarks/random_circuit_hex.py#L67
Just to add a data point, 46397db was also flagged as an across the board (smaller) memory regression, though the diff looks similarly innocuous.
I ran transpiler_levels.TranspilerLevelBenchmarks.peakmem_transpile_from_large_qasm(0) locally (picked a random benchmark that was shown as regressing on both  20c5e15 and 46397db ) and got the following
This was on osx (python 3.6).
Yeah, I think its safe to ignore the memory usage regression, I don't think it's valid at this point. I'm wondering if it makes sense to just delete the peakmem benchmarks from the suite since they this is not the first time we've seen this kind of change in them.
I'm going to keep this open because there are still the smaller runtime performance regressions.
I'm going to keep this open because there are still the smaller runtime performance regressions.
Is this still a thing?
No, that regression was as part of 1q transpiler optimization performance improvements in 0.17.0: https://qiskit.github.io/qiskit/#random_circuit_hex.BenchRandomCircuitHex.time_ibmq_backend_transpile?commits=20c5e152 and then a worse regression was introduced by b32a5317
