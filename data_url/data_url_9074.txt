Many simulators typically group noisy channels as pairs (unitary, error channel).  When translating this into Stim, it can cause a significant blowup in the representation of the circuit (e.g. requiring a new line for each noisy gate).  It would be a nice feature if Stim had a function that could automate the compression of such a circuit into an equivalent representation that minimized the number of lines.
You're referring specifically to the fact that operation fusion doesn't work when you do
and this imposes annoyances onto the code creating the circuit?
That is one example in which compression would be nice.  Sometimes, circuits aren't represented in a way that groups operations, but in Stim's case, it makes the output much smaller.  If there is an easy way for Stim to reformat a circuit into its 'best format', that would be a nice feature.
Would this include re-ordering measurements? Like, suppose the circuit says
Should the compression combine that into
and rewrite all the detectors to compensate for the 1,2 measurements swapping order, or should it be sure to maintain the measurement order?
Another potentially tricky case is moving a measurement over a detector.
Hypothetically, I suppose it would be nice to have the option of not permuting the measurement/detection record, as one might want to keep this ordering invariant.  It also seems simpler as one wouldn't have to redefine the detectors during the reordering.
Ideally, of course it would be nice to have all three choices - don't change the circuit representation, do change it but preserve the measurement ordering, and finally give a minimal representation.  However, if the second is simpler, it might be a nice middle ground.  This is all assuming that even the second option is simple enough to warrant the effort.
I'm going to close this as won't fix; I think these kinds of circuit-rearranging optimizations are out of scope for stim itself. There's a whole world of Clifford optimizations to circuits and I want to stay well away from it; it's the caller's job to provide a good circuit. I may expose methods for making circuits worse though (e.g. simplifying it so it's easier to consume; restricting the gate set not using loops etc).
