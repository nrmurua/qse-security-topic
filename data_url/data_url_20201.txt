Before the release we should check the algorithm datasheets to make sure they are up to date.  Before doing that, we should identify which things merit manual checking.  We don't have a specification of what things should be present in the file.  So I'm looking for some discussion in this issue about what to include.
Seeking feedback from @baentsch @christianpaquin @xvzcf @vsoftco
I must admit I at first was at a loss where the above-mentioned "algorithm data sheets" can be found: Didn't find them either in Wiki pages nor README... But then... docs! Never ran gen_docs either :-)
May I thus suggest a (more prominent) link to them, maybe from the License section? And/or the [Algorithms supported](https://github.com/open-quantum-safe/liboqs#supported-algorithms section)?
The liboqs License section itself might be simplified then by stating MIT as the baseline license and the intention to not have code licensed incompatible with MIT (e.g., GNU or proprietary) to be included -- and then remove all line items presently listed: That should stop 'unwelcome' contributions and maybe motivate keen observers to notify us of such 'incompatibilities' without us having to take responsibility for documenting (again) which license rules which algorithm.
To your questions:
When optimised versions of the algorithm(s) are available this is documented by processor-specific extensions to the oqsconfig.h #defines generated during build.
In addition, I wonder whether it needs the 'added to liboqs by' section.
Also, repeating myself, I'd suggest to remove the explicit 'License' line item and rather augment the line item "Author's website" with "Author's website and license information: " [Link]. Together with the suggested README.md#license simplification suggested above, this should deal with license 'review' once and for all.
It has always been hard to keep these files in sync with the implementation. I'm not sure they were ever useful in isolation. Perhaps we should consider creating a spreadsheet (in docs/ or on the wiki), with all the KEM/sig in one table; might be more useful to compare the primitives.
The kem/sig code files have a implementation version and contain the primitive sizes. It would be nice to have a test to make sure they match (future work... let's not slow down this release with yet another task...) Perhaps also check the license with the new SPDX macro (although external folders do not contain this info...)
I'd say just keep implementation version.
Agreed.
Agreed.
See #755
