Currently, the allowed behavior of gates, phases, and barriers is different than resets and measurements;
One can apply a gate/phase/barrier on a list of singular qubits or quantum registers but can only reset or measure a singular qubit or a single quantum register.
This is also apparent in the AST: List[Union[IndexedIdentifier, Identifier]] vs. Union[IndexedIdentifier, Identifier].
This feature request proposes that resets and measurements will also accept a list of qubits or quantum registers, as in:
measure q1, q7, myQubits;, reset q1, q7, myQubits;.
This will:
I think the main inconsistency is that barrier is variadic, while reset isn't.  All the others are quite natural, to me at least:
Personally I'd have thought "implementation-aware improvements" like grouping measures should be handled by those specific implementations' compilers. The sequential measure statements should contain the same information and the spec allows reordering of instructions.  We have the barrier statement that means "don't re-order these instructions", so it's not 100% clear to me why we'd need a second explicit form for that.  That said, I'm very aware that it's easier for implementations if the intent is spelled out by the programmer.
Perhaps this is a course of action that keeps everyone happy:
I haven't thought through all the ramifications of that (it could be slightly confusing with regard to arrays, perhaps?), but something like it could be a way to enforce the idea of "quantum instructions all have a fixed number of operands, but broadcast over registers", which is good for consistency, while allowing more ad-hoc groupings of qubits and bits.
That would mean that instead of barrier q0, q1;, we'd have barrier {q0, q1}; and reset {q0, q1};, but then it'd go further.  The following operations are all logically already valid OpenQASM 3 statements:
it's just that the user has to manually write
The new syntax for I'm suggesting for these particular operations is just sugar that pushes this mechanical transformation onto the compilers rather than the programmers.
The new part of the steps I had above is the overload of measure to allow it to operate on registers instead of only bits, for example as
This is a much more contentious point as the spec stands right now, because the type of alias expressions and the assignment semantics between them aren't currently defined.  That would need some careful consideration, but I think we could work together to make something consistent if it'll enhance OpenQASM 3's usability for real-world applications in the near term.
