This issue has two parts:
In fold_gates_at_random gates can be sampled multiple times AND (because the new circuit is built up iteratively, folded gates can also be sampled. IMO it should be possible to resample the same gate but we should not be sampling from folded gates.
In fold_local , if you are stretching by more than 3X, then multiple folds need to be made to get to the target stretch. IMO this type of refolding should be allowed (I don't see away around it to get to the target stretch).
This extended the conversation raised in #10 What do you think @andreamari @rmlarose ?
I agree at 99%. IMO,  I would also avoid re-sampling the same gate. Let's make an extreme example: imagine the case stretch=3, isn't more natural to uniformly fold all the gates of the circuit? Anyway, my doubt is probably a negligible subtlety.
Agree.
I would also add a third point: when we need to fold more gates which are originally in the same moment, should we create a new moment for each new gate, or should we instead add gates "simultaneously"  (i.e., InsertStrategy.EARLIEST ).
I agree with @andreamari's point. We should knock out gates once they have been sampled so that they are not re-sampled.
yep
Good point. I think it would be best to add gates as soon as possible otherwise the circuit length will grow much longer than we we want. @rmlarose what do you think? You know the moments in cirq a bit better than we do
So fold_gates_at_random should really only be used with 1 < stretch < 3, since if stretch = 3, we are going to fold every gate, which isn't random.
Just to summarize, if 1 < stretch < 3, we are going to uniformly sample from "real" gates (not "virtual" = folded gates), and allow for folding real gates more than once.
The reason I created a new moment for each [operation, inverse(operation)] pair was to make indexing easier. Each new fold adds two moments, and therefore we know how to reference moments/gates in the original circuit and in the new folded circuit.
With a different insert strategy, it becomes less trivial to keep track of this. I don't think it's impossible, but definitely not as simple.
It should be possible to squeeze as many gates into a moment as possible, for example perhaps something as simple as shorter_circuit = cirq.Circuit(longer_circuit.all_operations()).
[on sampling] @rmlarose (if I interpret what @andreamari and I are saying correctly) the proposal is that for 1 < stretch < 3 we are going to uniformly sampled from "real" gates that have not yet been folded. Not allowing for folding real gates more than once. This means you are unbiased about where you progressively fold but do end up smoothly approaching a fold of the whole circuit.
[on insert] Does cirq already have some kind of "squash" compilation method? I guess the concern with that would be that it would also squash the circuit that we have been given by a user. Perhaps we could "squash" our folded part and leave the original circuit unaffected?
[sampling] Ah, got it. So we don't fold "real" gates more than once. Makes sense.
[insert] There's several circuit optimization functions, I'm not sure if they can act on particular moments but am looking into this.
@rmlarose as @andreamari is taking the fitting method issues. Can you pick this one up? If so please go ahead and assign it to yourself.
Pull #18 fixes the main issue of sampling/folding gates correctly. i.e., only fold each gate once, and don't fold gates which have already been folded.
I think the note about inserting or optimizing depth is more minor and can be addressed separately, if desired.
agreed. I'll close this issue for now
