From @chriseclectic:
There is a mismatch between how Terra treats conditionals, and how conditionals are expected in the Qobj schema. Specifically, Aer supports conditionals in the new format.
The difference is:
Terra you set a conditional based on the value of an entire classical register represented as an integer: Eg:
Qobj you set a conditional based on a single "register" bit being 1. Eg:
So for single bit classical registers you can just write all measurements to a register field and be done with it. Eg. {"name": "measure", "qubits": [0], "memory": [0], "register": [0]}, but for conditionals on multi-bit ClassicalRegisters you will need to use the boolean function (bfunc).
The bfunc is a qobj instrution: { "name": "bfunc", "mask": "0xF", "relation": "==", "val": "0x5", "register": 0}. This applies a mask to all register bits, and returns a bool for (register AND mask) relation val.
So I think one way to handle this would be to have all measure operations (for simulators) write to both the memory and register, and then enlarge the register by 1 if there are conditionals and have each conditional have a bfunc writing to the additional register location and using that location for the conditional check.
Eg:
Compiling to something like this should work:
For an experiment you may not have unlimited register slots so you would only want to write to register the measures that are later used for conditionals. So you might want to do that in your implementation.
in #1629 I made it work using the old style to pass the test but to move it to the new style we need to discuss if we are going to introduce register_slots yet.
can this be done for 0.8
fixed via #1778
