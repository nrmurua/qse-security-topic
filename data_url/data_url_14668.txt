It is possible to define a pulse gate over multiple drive channels, but attached to a single qubit (see #5916).  However, this executes successfully on a backend and is thus in some sense "valid".  However, doing build_schedule(trans_circ, backend) yields an error because of overlapped pulses on the channels to which the pulse gate is not officially attached. e.g.
It is unclear whether this is a "bug" or not, but since the circuit executes on the backend with no errors (not sure if the answer is correct though) it is being scheduled at some point in the pipeline with no errors.
I am assuming this is not really the error, but reporting as such because the circuit executes on the backends.
This is not an error as far as I'm concerned. The mapping between a qubit at the gate-level and channels at the pulse level is determined by the calibrations that are defined. Channel indices mapping to qubits is merely a convention that breaks down in strongly hybridized systems, or high-crosstalk environments.
Channel indices mapping to qubits is merely a convention that breaks down in strongly hybridized systems, or high-crosstalk environments.
I am not sure what this means in this context?  Is the failure of build_schedule here not a bug?
I misinterpreted the problem you were describing. This is indeed a bug, likely related to making assumptions I am not in favour of described in my confusing comment above.
@itoko could you please take a look at this problem? It is a result of the scheduler assuming there is a fixed map between delays on qubits and delays on channels. This is an example of where scheduling at the circuit level is difficult because it does not have a working knowledge of the lower-level gate-channel dependencies. To do this properly at the circuit level, the scheduler must introspect the resources required at the pulse level (channels) and determine that qubit 1 is a spectator of h(0) due to the resource overlap between h(0) and delay(100, 1).
Please take a look at the minimal example below:
