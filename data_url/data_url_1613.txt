Is your feature request related to a use case or problem? Please describe.
Certain use cases involve creating gates that should not be optimized.  For instance, if you add spin echoes to an idle qubit to decrease dephasing errors, you do not want a merging optimizers to collapse them down again.  Other benchmarking cases may want this as well.
Describe the solution you'd like
I would like to add a tag (either to cirq-core or to cirq-google) that specifies that compiles should skip this gate.  Perhaps NoOptimizeTag() or something like that.
[optional] Describe alternatives/workarounds you've considered
What is the urgency from your perspective for this issue? Is it blocking important work?
P1 - I need this no later than the next release (end of quarter)
High priority nice-to-have, since it is blocking a nice end-to-end example of combining various optimization techniques together in order to increase fidelity.
I thought this was done as part of #2642.  It seems like tags were implemented but not NoOptimizeTag().
Hey! I'm new to cirq and I want to create/use a NoOptimizeTag. How should I do it? More specifically, I was hoping to create a cirq equivalent of barriers in qiskit/openqasm, so would there be a way to tag a group of successive operations with a NoOptimizeTag? Thank you!
Created a draft pull request for this issue. Created a nocompile tag and edited the drop_negligible optimizer so as to ignore any gate that has a nocompile tag to it. Need to create test cases for the drop_negligible. Will continue editing the other optimizers as well and create tests for them.
This will be taken care of during the transformer patterns roadmap item. #3237
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
We need to further clarify the requirements for supporting NoCompile tag in transformers. For example, Let op be an operation tagged with NoCompile tag which occurs in moment i.
I would expect a NoCompile tag to satisfy only 1. and a barrier to satisfy 1. and 3..
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
All circuit optimizers have been migrated to the new transformer framework, which supports adding no compile tags for every transformer. I'll therefore mark this as complete and close the issue.
