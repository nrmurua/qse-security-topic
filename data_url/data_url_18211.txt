Summary: I Can't test the compiler function in the software developer challenge because of a json error.
The program should tell me how much faster and better my compiler is compared to the QISkit reference compiler.
This is what I get instead
Run a script that contains:
This issue is preventing me from testing the performance of my implementation of the compiler function.
Version used: qiskit version: 0.4.5
Environment name and version (e.g. Python 3.6.1): Python 3.6.2 :: Anaconda custom (64-bit)
Operating System and version: Ubuntu 16.04
I tried to reproduce the error by executing the test file, but I couldn't because the score() function takes too long to finish on my computer, anyway the evaluate() worked fined.
Do you always get this very same error every time??
Do you always get this very same error every time?
Yes. From HowTo-QISKit_Developer_Challenge.ipynb
Hi, @vtomole. Could you try backend = 'local_qasm_simulator' instead of backend = 'local_qiskit_simulator' as workaround?
(Note that local_qasm_simulator is slower than local_qiskit_simulator, though)
I guess the error implies that _qiskit_cpp_simulator.py failed to handle stdout string from qiskit_simulator.exe with some reason (and try to decode null string -> error).
New error from running HowTo-QISKit_Developer_Challenge.ipynb
The missing file in the last comment is restored (download the latest version of the developer challenge).
I have not been able to reproduce the original issue though.
@atilag
I ran  HowTo-QISKit_Developer_Challenge.ipynb again on 8 GB RAM. Specifically: https://github.com/vtomole/qchackers/blob/master/software/qiskit/test.py. I got
It looks like my machine is not powerful enough to test these circuits. What do you recommend i do?
@vtomole, are you running on Windows? I'm wondering if that's why you get errors from the faster local_qiskit_simulator.
Your test script shows you are using the local_qasm_simulator, which is a slow simulator written in Python. So I'm not not surprised that the simulations do not finish in a reasonable time. You may use this slower backend to test your solution on the smaller circuits for now (5 and perhaps 16 qubits). But for the 20 qubits you really need the local_qiskit_simulator, implemented in C++.
@atilag is working on a Windows solution to this I think (#265).
@ajavadia  I'm on Ubuntu 16.04. Re-running with local_qasm_simulator now.  I'll update you on the results.
@vtomole Your hardware should not be a problem. The largest circuits in the tests have 20 qubits, so the quantum state vector easily fits inside memory (~16MB). The problem is just that local_qasm_simulator is Python-based and slow. You will have to run the large circuits using a c++ simulator. QISKit's native c++ simulator is local_qiskit_simulator.
Here is another solution:
You can run your circuits using Project Q's simulator. This is another fast c++ simulator. Here are the steps:
Verify that you have local_projectq_simulator.
3. Change backend=local_projectq_simulator
4. In challenge_evaluation.py, wherever you see seed=None, change it to seed=1.
5. In challenge_evaluation.py, change GLOBAL_TIMEOUT = 3600 to GLOBAL_TIMEOUT = 7200.
6. Run the score function again.
Let me know if this works.
test.py: https://github.com/vtomole/qchackers/blob/master/software/qiskit/challenge_24_1_2018/test.py
@vtomole this is the original issue you reported, with local_qiskit_simulator. Did you try the Project Q simulator that I mentioned above?
I installed projectq, but the back-end is not being detected.
@ajavadia I solved that problem here: ProjectQ-Framework/ProjectQ#202 (comment).
It runs on local_projectq_simulator now.
Do you get those errors when you run it on your machine?
@vtomole, great, i'm glad it worked.
that is a numerical precision issue that has been observed on some systems with some input circuits. it is being tracked elsewhere (#158). it is specific to the current compiler implementation, so the improved compiler that you submit does not have to encounter this error.
i will close this issue but feel free to reopen if you run into other problems.
