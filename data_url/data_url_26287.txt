Write a function that calculates the "Choi rank".
Refer to page 79 of https://cs.uwaterloo.ca/~watrous/TQI/TQI.pdf for the definition of the Choi rank.
In short, the Choi rank is the rank of the Choi representation of a quantum channel. The input to the function should be either a set of Kraus operators or a Choi matrix. If the former, the Kraus operators should be converted to a Choi matrix. Calculating the matrix rank of the resulting Choi matrix would yield the desired "Choi rank".
This task would also require adding test coverage for the function along with ensuring it is included in the docs. Refer to the style guide and code contributing guidelines for more information.
I'd like to tackle this one.  What do you think about this naive implementation?
So for example choi_rank(choi_matrix = toqito.channels.choi())would return 6.
By the way, where should this function be included? It seems like it could fit inside channel_metrics
I think this has the bulk of the idea of what the Choi rank should include. A few points:
Consult the other functions in channel_props--for instance is_positive.py. This takes in an argument phi with type hint annotation Union[np.ndarray, List[List[np.ndarray]]]. From there, the argument phi is treated accordingly depending on whether the user provided a np.ndarray (a matrix) or a List[List[np.ndarray]] (a list of Kraus operators).
Make sure you achieve 100% test coverage and create a file test/test_channel_metrics/test_choi_rank.py where you cover the cases when the input is either provided as a matrix--or a list of Kraus operators. Again, you can look at test/test_channel_props/is_positive.py for guidance on format.
Also ensure the auto-generated docs pick up on this function by adding toqito.channel_props.choi_rank indocs/channels.rst under Properties of Quantum Channels.
By the way, where should this function be included? It seems like it could fit inside channel_metrics
I would classify this under channel_props as this is a property of a channel--not a distance metric of channels.
As a separate but related point, you should be making alterations to a forked branch of master. The channel_metrics folder is a feature to be released for 0.0.7, but the one on the PyPi server is 0.0.6. However, if you're on a branch forked from master, this shouldn't matter and you should be able to see and access the channel_metrics folder. Hope that makes sense.
