@AdriaanRol re qdev-dk-archive#8 (comment) but taking it out of #8 because that's too long to find anything anymore!
Is there a way to add docstrings to parameters that are created through the add_parameter function?
I looked into this a bit - it would be quite difficult, as help(param) looks at effectively type(param).__doc__ (ie the class attribute), NOT at param.__doc__. I propose we make a property param.help and reference this in the (static) docstring for Parameter
Just got some ideas to what would be useful in a docstring
Another option would be the following: in add_parameter we create a subclass of StandardParameter (or whatever we create there) with a specialized docstring. In code it would be something like
If this is the way to go I will adapt the code and make a PR.
@eendebakpt cool idea - my only concern is whether this will be picklable for multiprocessing.
@eendebakpt , would it be possible to inherit this custom class from whatever it is called from. The example I am thinking of is the manual parameter. I would like this function to work for that aswell.
I image the super() function allowing this sort of behaviour but I am not sure.
@eendebakpt , I like your solution but I see one issue. If any instance of a parameter created using the add_parameter class creates a custom subclass it will not be possible to do any checks on type anymore. I'd say this is a minor issue at best but something we should consider before implementing this in any case.
Otherwise I guess this implementation will give the full functionality of docstrings (including the auto complete in notebooks) right?
We are not there yet. Pickling does not work straight away (not sure why this is important), and type checking is hard (instance does not work either).
I think this is important to solve, having functions (and parameters) without documentation is not really acceptable.
Right, that's what I was afraid of. Pickling is necessary so that measurement loops, which run in a separate process, can use the parameter on Windows. And it doesn't work because it requires all classes to be importable, which this clearly isn't because it's defined dynamically.
Interestingly, though I still don't see a good solution for help(param), the jupyter shift-Tab tooltips do show instance variable docstrings:

so the simple solution that one would like to work, of just overriding __doc__ in the instance, isn't completely useless.
In Spyder overriding __doc__ works in the console (but not the editor). I suggest we add a keyword to add_parameter and add_function to override the __doc__. This can do no harm as far as I can see, and  it does help in some cases.
Overriding the build in help function is another option, but that might me more complicated.
In #69 I have added the docstrings to the parameter and function classes. The Keithle drivers uses this only for the .nplc parameter, but if it works well I will add more docstrings. Could you please comment?
@eendebakpt , I really like the ovewriting the instance doc, mostly because this is how I normally access and use docstrings.
@alexcjohnson I propose another addition, default docstrings. If docstring is None, automatically generate a docstring for an instrument that shows the following
This is information that is very convenient to have accessible at a press of tab and should be easy to implement.
@AdriaanRol that sounds great - perhaps appending those to any provided docstring. What you want from the Validator should all be available from its repr. @eendebakpt do you want to add this to #69 ?
@alexcjohnson and @eendebakpt , If we implement the default generated docstring in combination with what @eendebakpt implemented I propose we close this issue :)
Agreed, as soon as we merge #69 lets close this.
PR #69 is updated with comments made here and in the PR. The currently generated docstring is not very pretty, but sufficient for me. Feel free to improve on this if you want. If #69 is merged I will close the issue.
#69 is in master.
