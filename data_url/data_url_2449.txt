fails with Can't simulate unknown operations that don't specify a _unitary_ method, a _decompose_ method, (_has_unitary_ + _apply_unitary_) methods,(_has_mixture_ + _mixture_) methods, or are measurements.: cirq.Rx(sympy.pi).on(cirq.NamedQubit('q')) -- which could be led back to if protocols.is_parameterized(rads) returns True  for sympy.Basic objects.
However, as sympy objects are acting most of the time as numbers - the printout of the circuit is
Which is very nice vs the numpy version:
Where this came up: when importing QASM files (#1602), the printed circuits look significantly better when the angles read in symbolically. I did convert them to float of course but I feel like we are losing information there.
Not sure what the implications on performance or functionality, but it looks like something worthwhile to think about as sympy expressions might be more precise/offer more functionality through symbolic manipulation.
What do you think?
I think we can get away with resolving this issue without too much fuss. Instead of returning True if we find a sympy object, determine if the value is parametarized via the is_number property of the object in the is_parametarized function.
if isinstace(val, sympy.Basic): return not val.is_number 
Edit: inverted logic
I just tried my suggestion and surprisingly only one test failed. It was due to numpy complaining about not knowing how to multiply sympy constants with standard numpy data types. This can be patched over by making the appropriate numeric casts inside apply_unitary, and unitary for each gate in the repository but that is a bit more fuss than I had originally anticipated. I just tried it with Rx and Ry and got your code snippet to run after adding a measurement to the circuit. I can take this issue if there is interest in this feature. @balopat, @Strilanc , @dabacon thoughts?
I think the proposed solution keeps the meaning of is_parameterized clean.  It does however mean that consumes of the objects need to always try to cast numeric values when they are consumed.  It would be good to try the solution to see what those later look like and if they are maintainable / reasonable
Verified that this is still an issue.
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
Should we keep this open?
We totally can, there was not much movement on it - if the impact is not too bad on performance with all the casting in __unitary__ for every parametrizable gate, then we can have this just for the sake of prettier circuit outputs. Do you see this valuable? Why did you comment on it? Just reviewing stale closed issues or because it came up in a use case?
