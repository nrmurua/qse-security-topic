
Using qutip 4.7.2, I have found that using
to get the possible outcomes of a measurement and the probabilities for each is extremely expensive and also sometime returns (invalid/unphysical) negative numbers for some probabilities. This seems to happen with larger systems (8 qubits and above). The negative probabilities are of order $10^{-12}$, so most likely this is a numerical precision issue.
P.S. This is my first time reporting and issue for this code, so I apologize if I'm doing so in the wrong place or if I have left out information.
Welcome, and thanks for filing your first issue.
measurement_statistics_observable determines the eigenvalues and eigenstates of the supplied operator, so it's likely to be slow as the size of the system grows. If there is a means to speed it up, we'd be happy to give that a try. You could also try the alpha release of QuTiP 5 (pip install qutip==5.0.0a2) and compare performance there.
Are you only seeing the negative probabilities when state is a density matrix? Perhaps we can make the code a bit better and explicitly tidy up the small unphysical negative probabilities.
The negative values problem is definitely present when state is a density matrix, and right now that is the only case I have tested.
I understand it will be very slow for larger systems (exponentially so), but in my application is seems to be much slower even than the time evolution of the function, which seems like it should be more computationally complex. Given that, I suspect there is some room for optimization.
What's the best way to tell if there are any relevant differences between 4.7.2 and the 5.0.x alpha?
QuTiP 5 changed the underlying data representation of Qobjs completely.
The time evolution is potentially much less complex than the eigenstate problem. Consider that if one has the eigenstates and eigenvalues, one has essentially solved all possible time evolution problems for that operator. Again, this is not to say we couldn't do something better here.
Thanks for clearing that up. I had tried to poke around to see what had changed, but I hadn't gone deep enough to see what changed with the qobjs themselves.
That's a good point about the eigenstate problem. I forgot about that because the observable I'm interested in is very very simple (it's diagonal), so it seems like it should be trivial to compute the measurement statistics. But to do that, qutip would have to know the observable is simple so it could take advantage of the symmetries. Are there any flags I can give it to tip it off? Or can I some how pass the list of eigenstates 'manually' so it doesn't need to find them itself?
In QuTiP 5 you can constructor your operator and then do op = op.to("diag") to tell QuTiP to use a diagonal representation for the operator. This should make finding the eigenvalues extremely fast. Let us know if it isn't.
