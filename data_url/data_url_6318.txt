I'm experimenting with "mirror circuits" to validate recent high-width benchmarks, and I've detected a potential problem in the optimal stack when QStabilizerHybrid is used. Mirror circuits do not necessarily return to their starting point.
This doesn't seem to affect the QUnit -> QPager -> QHybrid stack, though, in tests so far.
https://arxiv.org/abs/2008.11294
Nope, the issues seems like it might be in QUnit and affect both stacks. I'll debug, this weekend.
A little more prodding seems to indicate that the bug only arises when we call SetReactiveSeparate(true). This leads me to suspect that the bug is in TrySeparate() variants in QUnit.
A have a test for random mirror circuits, locally, and I have it spitting out circuit definitions and initial permutations for failures. When I try one of these outputs as its own unit test, it passes across the board. It's possible that I have a bug in the new test leading to false positives. Alternatively, there might be problems with asynchronous concurrency that are causing nondeterministic failures. Still looking into it.
Testing with mirror circuits has led me to realize that there are a significant number of incorrect edge cases in QUnit. However, the good part is that random mirror circuits make identifying and isolating these bugs very easy, as we've seen in the past couple of days. It might be an ongoing project for a few weeks, but I want to continue squashing bugs that we identify with random mirror circuits, in QUnit and across the whole layer stack. I'll track progress in this issue.
I fixed every edge case I found, this weekend. There might still be some limited edge cases at higher width/depth, but QUnit and QStabilizerHybrid are performing a lot better, in general. Running test_mirror_circuit_4 many times locally, I believe the nondeterministic stabilizer layer bug there has also been completely fixed. I'll continue testing tonight and this week, to exhaustion.
After a solid week of catch-and-patch, I have a 10th mirror circuit test coming up tomorrow. I've been drilled into stabilizer for the last few tests, because that is the only place I see low width/depth test_mirror_circuit failures occurring. It's likely that this is the last systemic bug in the stabilizer code, but I have a deterministic unit test failure for it, which very rarely occurs for the 4x4 fully connected circuits I've been using, (or 4x8 with mirror). I found it with 5x5, but I haven't paired the test down, yet.
There will be no new feature development, before fixing test 10, or however many tests it takes. I've slid in a sizeable amount of stabilizer domain extension in the process of mirror circuit debugging, for the last week, but we're close to 100% stable, and I think test 9 was a newly introduced bug from refactoring while debugging.
QUnit->QStabilizerHybrid->QHybrid stack now seems to be reliable up to my system's capacity! We can pass at least 100 consecutive test_mirror_circuit trials at maximum width for my system, about 27 qubits. At significantly lower widths, we can pass hundreds of thousands of consecutive trials, but 27 qubits in width is time-limiting to test, so far.
However, with QStabilizerHybrid fixed, we seem to run into some bugs when adding QPager into the stack. Debugging this will be my next development priority.
There might still be one small edge case in stacks with QStabilizerHybrid involved, but even those stacks seem to be overwhelmingly reliable, now. QPager needed some significant work, but, also, QUnit->QPager stacks are now stable, as of this morning.
3 weeks later, I think we can close this! By the end of the weekend, this might motivate a tagged release.
