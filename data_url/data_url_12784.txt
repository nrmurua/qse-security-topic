In the solution proposed, you apply the CNOT operation and if they all return 0 it  means the two solutions are equal. Then you "uncompute" because you stored the result of CNOT in q1. I did not understand this. I think it has to do with the fact that CNOT returns "Unit" docs? Which I didn't understand either. Could someone please explain ?
All Unitaries in Q# return Unit while performing the required transformation on the input qubits.
Here storing the result in q1 means the unitary represented by
leaves q0 unchanged and stores the XOR(q0,q1) in q1.
In the proposed solution the CNOT gate has been used to simulate a XOR gate.  A XOR gate returns 1 if its inputs are different and 0 otherwise. The CNOT gate flips q1 if q0 is in the state 1. This is same as an XOR gate with the side-effect of storing the output/result in q1.
If all bits in XOR(c0,c1) are zero. This would imply that c1 and c0 are identical. This is again the property of XOR gate that XOR(x,x)=0
(ControlledOnInt(0, X))(c1, target); essentially applies the X gate if  c1 has all bits as 0 i.e. c1 has an integer representation of 0. This is used to flip the target bit if equality is confirmed. However c1 still contains the XOR result but this can be undone or uncomputed by repeating the same procedure again. Remember XOR(x,XOR(x,y)) = y. Similary Applying CNOT again undoes its affect.
Ok, I kinda knew all this but couldn't link the code with the actual functioning. Thanks for explaining, all these solutions make me feel like I just saw a clever proof for something !
