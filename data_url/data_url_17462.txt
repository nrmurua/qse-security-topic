As per the title, the quantikz library for tikz, available here, seems to have better drawing options for circuits. Also, the development of qcircuit seems to have stalled, while the author of quantikz is very quick to respond and integrate changes in the library.
This issue is related to #763
@maddy-tod actually this is an separate independent issue. #763 is about rewriting the python logic in the latex module to use a python library to handle actually writing out the latex code. (although I've been meaning to rewrite that issue to just be a general rewrite of the latex backend to be more clear, using a python lib or not) This issue is about changing the library we use in the LaTeX output generated by the python code.
@tigerjack I'm not sure I see an advantage for switching everything to use quantikz instead of qcircuit. While qcircuit doesn't have many patches in the last year, we haven't had any real issues with it. When we do (see adding barrier support for example) the maintainers of qcircuit are also very responsive to our needs. Do you have any concrete examples where quantikz provides an advantage over qcircuit for our use case?
@mtreinish from a programmatic perspective, I don't really know if they can be any advantage, I have not looked at the code to generate the latex in qiskit. I can only brought my personal experience using both of them directly in Latex and I had a much easier lifetime in using quantikz with respect to qcircuit .
In the qiskit specific example, I think that exporting a simple circuit to quantikz could allow user to better personalize the circuit after qiskit have generated it.
Something like this

or this (look at the output bundle)

and even this

are not easy, if not impossible, to obtain in qcircuit.
It also allows to personalize the style of lines and gates, which could be useful also directly in qiskit in a similar way to what happens now with the matplotlib, with the main difference being that the latex source exported from qiskit can be directly modified. Indeed, it is a library of the well known tikz package, which is extensively used to generate figures and diagrams in Latex.
Also, and maybe most important of all, the syntax is pretty similar to qcircuit.

But again, it's only my experience, and maybe others have been widely using qcircuit without any problems.
So I can definitely see the advantage of using a tikz based package over an xymatrix/xypic based one like qcircuit. Tikz does provide a bit more flexibility in how you can interact with it, like in the first example you copied from the docs. The other 2 (minus the blue shading in the 3rd) are actually natively supported by qcircuit and in the docs. But, as you mention don't that provide an advantage for the way qiskit uses it, it would be more for people consuming the latex_source output to manually annotate. As for the style options the xypic and xymatrix packages support these things to a certain degree but they're not integrated into qcircuit which makes it difficult to modify the style of a circuit. If this is something people see value in we can probably easily add this to qcircuit.
We could do a side by side feature comparison, but it looks like they're mostly comparable and the author of quantikz based it off of qcircuit. But, after looking through the quantikz manual pdf the only thing really missing which is a blocker for any potential switch is support for barriers. The \slice command is close, but not quite all the way there. It only supports inserting the dashed lines through all bits.
That all being said I'm not particularly tied to using a specific library over the other. But, I prefer to avoid the code churn because generating latex programmatically like this is always going to have a set of quirks and by switching libraries we're going to trade a set of known quirks for new ones. I don't think we can even consider doing this until after 0.8 is released. But even then I'm not super inclined to rock the boat and switch unless there is a reason why qcircuit isn't working for us which we would fix by switching to quantikz (which I don't think there is).
@mtreinish yeah, just thought it was worth considering the switch since qcircuit seems to be a bit staled and most importantly quantikz is actively developed and based on the well-known tikz.
For the second picture, by the way, there is no way that I'm aware of to group the output bits (see CQuIC/qcircuit#32). But again, this is usually needed only in post-processing the latex_source.
Regarding the barrier, I think you're right, I don't see any command to select the number of involved wires.
@1ucian0 If you think this is worth a shot, I'd like to give it a try ðŸ™‚
I would encourage rewriting the latex circuit drawer to leverage the yquant library:
https://arxiv.org/pdf/2007.12931.pdf
https://github.com/projekter/yquant
It is based on TikZ and pure TeX, and is extremely flexible and easy to use. I recently typeset all the figures in here using this library: https://arxiv.org/pdf/2104.14722.pdf
There are some features of Qiskit drawer such as "justify" or "show_idle" or "show_barrier" or drawing "layout" that need to be maintained, but I'm hoping that the bulk of the code should become leaner as this library does the heavy lifting.
I would encourage rewriting the latex circuit drawer to leverage the yquant library:
https://arxiv.org/pdf/2007.12931.pdf
https://github.com/projekter/yquant
It is based on TikZ and pure TeX, and is extremely flexible and easy to use. I recently typeset all the figures in here using this library: https://arxiv.org/pdf/2104.14722.pdf
There are some features of Qiskit drawer such as "justify" or "show_idle" or "show_barrier" or drawing "layout" that need to be maintained, but I'm hoping that the bulk of the code should become leaner as this library does the heavy lifting.
In that case, wouldn't it be better to add an optional argument like backend="qcircuit" in the circuit_drawer function, only considered when the output argument is set to latex or latex_source, so that the user can choose between qcircuit, quantikz and yquant?
The rationale for this would be to let the user choose the framework they want to work with once the circuit has been exported to the LaTeX source. On the bright side, this only means adding code rather than changing/removing some, adds flexibility for the end-user and allow to deprecate more easily a method, were it not to be maintained anymore. Of course, that'd mean that the code would be harder to maintain, so I'm not sure whether that would be worth the effort.
It sounds like a lot of code to maintain for marginal utility.
Why not writing those drawers as external tools on top of qiskit-terra? We can work on a common plugin interface, if that's needed.
@1ucian0 I'm not sure I understand what you mean, can you elaborate on this please?
A circuit drawer is a rather independent module. It would be possible to write a drawer as a fully independent package on top of qiskit-terra. There is no need to modify terra.
Closing this for now, as a I think it should be implemented independently of terra. Please reopen (and tag as discussion) if you disagree.
