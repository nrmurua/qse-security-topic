We have many different ways of specifying the same gate. An X gate could an instance of PauliString, of XPowGate, of PhasedXPowGate, of (in the future) PhasedXZPowGate, of MatrixGate, you get the idea. It would be nice if I could just say cirq.match(might_be_x, cirq.X) in order to recognize X gates, and cirq.match(might_be_x, cirq.XPowGate) to identify X rotations.
I always accidentally write if isinstance(op, GateType) instead of if isinstance(op.gate, GateType) and then lose ten minutes figuring out what's wrong. It would be nice if this was not a possible mistake to make, e.g. if cirq.match(op, cirq.IdentityGate) worked and also if cirq.match(gate, cirq.IdentityGate) worked.
Currently, in order to identify an identity operation from an Any you have to say if isinstance(obj, cirq.Operation) and isinstance(obj.gate, cirq.IdentityGate). It would be nice if this had no and in it, e.g. if cirq.match(obj, cirq.IdentityGate):.
I often want matching to be approximate. For example, PhasedXPowGate(exponent=0.2, phase_exponent=1e-10) should match into XPowGate when tolerance is larger than 1e-10.
One other use case is for the matching system to handle wrapped classes.  For instance, TaggedOperation wraps an underlying operation, but it is really the same "type" except with some extra tag information added onto it.  One can imagine other uses similar to this with wrapper classes.
The "this gate is really this gate" pattern is probably good, but one thing about it is that is really really hard to discover.  This might make the case that it should be a protocol.  Combined with #2939 which suggest adding protocols to docstrings automatically this could lead to better discoverability.
Xref: Organize gate relationships #3242
Is this still seen as useful? It seems like probably a big effort, so do we think it would give reasonable ROI? If so I may want to start looking into it.
Is this still seen as useful?
Absolutely.
You'll have to talk to @tanujkhattar about this though, as he is introducing the concept of gate sets and reorganizing compilers, both of which will benefit / touch on / depend on this feature. Above all, here we'll need an agreed design - the longest part of this effort will be to figure out something we can all agree on.
cirq.match(to_match, match_against)
I propose we implement the first version of the cirq.match and replace all isinstance  checks with cirq.match.
@tanujkhattar Do we think this is done with GateFamily?
Yes, implementing equality across types for (potentially parameterized) gates is a hard problem. The preferred way to do this for specific use cases now is to use cirq.GateFamily (eg: see cirq_google.FSimGateFamily).
I'll mark this as closed now.
