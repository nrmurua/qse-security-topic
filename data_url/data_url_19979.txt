There are 2 ways to init the signatures. One is to initiate with
signer.Init(sigName, nil)
After that, a keypair can be generated with
signer.GenerateKeyPair()
which returns the public key.
The second way is to initiate with:
signer.Init(sigName, secretKeyBytes)
This function doesn't return a public key. I also didn't find a function like:
signer.publicKey()
Is there a best practice for extracting the public key? It would be great if this function would be part of the liboqs-go library.
No, there's no method for extracting the public key from the signature object, since the signature object may not know the public key due to being initalized via signer.Init(sigName, secretKeyBytes).  Note that being initialized with the secret key does not necessarily imply one can derive the public key, since there may not be a one-to-one mapping from secret keys to public keys.
Because it's for falcon possible to deterministic derive the public key from the private key, can we open this issue again?
Or maybe move it to liboqs?
https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/3Cu70s0doYY
As this is a general API question, not specific to one language wrapper, reopening it here for wider discussion.
My personal vote would be to not include an API that cannot be implemented for all PQ algorithms. The discussion thread referenced above also hints at a very special, Falcon-only, use case. Opinions to the contrary welcome.
I agree with Michael, I'm not inclined to add an API that can only be implemented by some algorithms.
Agree as well
