For the quantum case, the kernel maps a set of operations executing a particular function. The main motive to split the code into kernels for me is functional encapsulation, and managing repetition. Basically, I like to see the kernel as an n-qubit custom unitary gate.
I have a kernel K, but in different parts of the code, I want to apply the kernel on a different set of qubits. (think of defining a matrix multiply kernel in OpenCL and using it for various matrices).
The OpenQL structure currently does not allow that as the qubits are hardcoded while defining the kernel. However, since I have conditionally invoked kernels, I need to use at least the same names of the Kernels.
I don't want:
So currently, I am deleting the kernel and redefining it (as shown in screenshot)

A better mechanism for implementing kernels would be to keep the kernel definition qubit-independent.
While adding the kernel in the program, the qubit set can be passed as an ordered list.
Closing because of lack of activity
