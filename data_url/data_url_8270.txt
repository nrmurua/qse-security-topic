On my Mac (Mojave 10.14.5) the latest development version of qutip tests can fail at different points.
First, I run into an abort trap at ptrace.
Then, upon another run, I bumped into this other abort trap error
This is in a conda environment with qutip development version with
and
Upon a third run, tests ran fine, and then the bug found in #1158 occurred.
There is a chance that this is the same bug as #1495, which has a fix posited in #1498 - it matches all the versioning criteria, though on that issue we hadn't detected a problem with this particular test at these dimensions.
This segfault is still very occasionally present on Mac as of QuTiP 4.6.0 and the current master (624405e).  Unfortunately, I've not been able to find any sort of reliable reproducer, so I can't offer a huge amount of insight into what might be causing it.  Here's an example output:
This was done with commit 624405e, SciPy 1.6.2 and Numpy 1.19.5.  My BLAS version has chopped and changed an awful lot, but I believe that run was with MKL implementations.  The "random" stack trace from pytest looks to me like the error came about during garbage collection, and I really don't imagine pytest is to blame.
We have in the past had issues with some bad calls in SciPy linalg functions, so it's possible that they are the cause again, but I doubt it; we'd expect the stack traces to reliably show scipy to be the problem in that case.
I wasn't able to reproduce this segfault on Windows, but that doesn't mean a huge amount, because I also can't reliably reproduce it on Mac.
I suspect that the cause is some dodgy handling of pointers in the struct CSR_Matrix type in qutip/cy/sparse_routines.pxi, but this is just a suspicion.  As far as I remember, I have never seen this segfault when using the dev.major branch, which completely removes CSR_Matrix and replaces it with a much more robust Cython CSR type, which adds to my suspicion, but again, because the reproducer is unreliable, I cannot be sure.  I have tried running these failing tests through valgrind before, but unfortunately to no avail.
Note that the above reproducer uses Python 3.8, so this is not just limited to Python 3.7.  This is potentially an important note, because 3.8 minorly changed how Py_malloc is handled in builds.
Ok, I think I may have some more information.  I am fairly sure that this is the same bug as #1120, #963 and #944 (which I believe was not actually ever fixed).  I'm going to put the information here.
My working theory is currently that this is a MKL bug on Mac.
For posterity, let me just dump out some information.
This issue is still present using Andrew's Malloc.py file as of the current master branch (commit 624405e), and is in QuTiP 4.6.0 and most previous versions.  I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of PYTHONMALLOC.  The most telling is pymalloc_debug, where the entire operation completes (it prints "500"), and then the fault occurs.  This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens.
This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming.  I think that in all cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only detected at garbage collection.
Here is the output of a Python 3.8 crash on the Malloc.py file with some additional debugging enabled.  This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:
The above Malloc.py file uses scipy.linalg.eig via use of an eseries version of correlation.  The current test of superoperator representations uses choi_to_kraus which also calls scipy.linalg.eig.  Here is a file kraus.py that can  reproduce these segfaults semi-reliably (may need to run it a few times to get it to trigger):
For example, here's a similar command on this file:
So these both use scipy.linalg.eig, which is suspicious.
To see if I could track it down, I had a go with valgrind.  This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind.
Here is the output of valgrind running on the kraus.py file I wrote in the previous section: kraus_valgrind.txt (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator).  The important part is
Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library.  I ran valgrind on the Malloc.py file above, and get the exact same invalid write, which is promising.
So the most likely public Python call is scipy.linalg.eig.
Ok, so now let me cut it down to a minimum eig.py:
Note that this file does not even use qutip.  You can run PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times).  It's not always the same message as above, e.g.:
However if I run it within valgrind:
the exact same.
I'm now reasonably convinced that this isn't directly an issue with QuTiP.  I suspect it isn't an issue with scipy either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that scipy passes some invalid pointers when dropping down to BLAS/LAPACK.
I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down to C and link directly against MKL.  I may have a look in the future, but I've had enough of it today for sure.
See also #1694 and numpy/numpy#20356 for further issues with MKL on numpy.
I'm closing this because the minimal reproducer doesn't involve QuTiP and because we've already reported some MKL issues to numpy. If there is more to do here, I suspect it is opening and issue with numpy and hoping the maintainers here have enough knowledge / desire to help dig further.
