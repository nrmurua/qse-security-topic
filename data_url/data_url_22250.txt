I'm using artiq 2.0 on windows. It seems like you can use scheduler.check_pause() without having scheduler.pause(). This has the nice functionality of graceful termination in the kernel. For example,
Runs as per normal, and if a termination request or higher priority experiment is scheduled, it terminates gracefully. I'm not sure if this is a feature or a bug but it could be nice to include it in the documentation that this can be done. From the manual (https://m-labs.hk/artiq/manual-release-2/management_system.html?highlight=scheduler.check_pause#artiq.master.scheduler.Scheduler.check_pause) it doesn't seem clear that this can be called without scheduler.pause.
I'm not sure if there are any side effects of using check_pause like this but it seems to work as I described as far as I can tell.
If it's a bug, there would be unexpected behavior. What's happening that's not expected?
IMHO the documentation of check_pause() is complete. It does exactly what it says it does. How you react to that is at your discretion. You could also do different things like actively kill jobs when check_pause().
If you disagree, please suggest a sentence or two that make it clear that exactly this use case needs to be included in the documentation.
I guess from the source code pause isn't under the scheduler class in artiq/master/scheduler.py, but it could be useful to be listed in the Scheduler API Reference for completeness.
For the description, I would add under Pauses
For the check_pause description,
Mainly, from the description it seemed that check_pause needs to be called with pause but that isn't the case. It would be useful for users to be aware of that. An example experiment that uses this could also be handy.
