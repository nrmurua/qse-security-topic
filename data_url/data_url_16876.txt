Most gates are uniquely defined by their type and parameters, and potentially # of qubits / # of control qubits. This includes all gates in the standard extensions, unitary gates, and controlled gates provided they stem from the former. UnitaryGate defines its own __eq__ for this purpose, the rest however do not. The exception to this are gates that do not have a more specific type other than 'Gate', in which case they are fully determined by their 'definition'.
Currently, the default __eq__ function from the Instruction class compares all of name, #qubits, definition, and parameters. Between predefined controlled gates, manual controlling, inverting, and combinations thereof, there a many different paths that can be taken to arrive at the same gate but with differing definitions. Shouldn't there be an __eq__ function, maybe in the Gate class, that takes this into account so that gates can be identified as equal even if their definitions differ?
I don't know know if other functionality relies on definitions being equal, which would complicate things.
Are there any examples of gates you would expect to be equal, but which fail Gate.__eq__? If you are interested in checking that two gates implement the same unitary, the operator class supports this via Operator(gate1) == Operator(gate2) (or Operator(gate1).equiv(gate2) to ignore differences in global phase.)
One useful consequence of adding gate equality is that it makes it possible to check circuit equality, this is something we do a lot in the pulse module for pulse schedules. It makes writing tests and other classes simpler.
This for example should return True in my opinion:
but doesn't due to differing definitions.
Currently something like XGate().control(3).inverse() == XGate().inverse().control(3) also returns False, although #3534 alleviates this in some cases.
I was not aware of the operator comparison, but maybe it still makes sense for gates to behave this way.
This discussion seems stalled. Some updates
C3Xdg seems like working now:
The FredkinGate now is called CSwapGate, and still wrongly returns False:
However
The problem of Gate equivalence is similar to the problem of circuit equivalence (and the problem if hiding not scalable operation in a seemingly innocent == operation. My impression is that we dont want to move that way. Therefore I'm closing this as wont fix. Please, reopen if there are new elements to the discussion.
