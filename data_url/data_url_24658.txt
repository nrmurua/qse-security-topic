Since we now have an official pypi package we should define a policy for releases.
This has to include at least:
I'd further propose that "productive" usage of qc-toolkit in the labs also should ideally not rely directly on this repository anymore but on the pypi releases, as this allows for better control over which features are included at what time/in which version.
We should also have release notes. Some projects do it via a file that has to be updated with each pull request.
I agree, we should have release notes. Sympy apparently just started to use an automated process for this where release notes are pulled from pull requests, which is interesting but I guess also highly optional for us now. A file should do for our current scope.
I think we could follow sympy's hints on what makes a good release notes entry for this (as far as they are applicable).
We should probably also put version constraints on our dependencies so that updates to those do not break qupulse versions.
E.g. say the current version of dependency xyz was 1.3.2 at the time of release, our dependency requirements should not allow versions never than that in setup.py, i.e. all dependencies should be always stated with the highest compatible upper bound at the time of release, but not left open.
I strongly opt against that. If every package would do that you would get into a dependency hell. We can do it if there is a specific bug that we cannot fix on short note.
Each version restriction needs a specific reason.
We cannot change published releases when a dependency gets an update that is incompatible but we need to make sure they still install correctly. The only way to do this is to have reasonable upper bounds for the version.. I grant you that fixing the upper bound to the exact current version of the dependency is probably overzealous but we should at the very least not allow a major version upgrade, probably not even a minor version one (i.e. in the above example restrict xyz<1.4 (or at least xyz<2)).
This blog post also argues in favor of this (and it's not the only one) https://blog.miguelgrinberg.com/post/the-package-dependency-blues
I think a major version restriction is the only one that makes sense. I still opt against it as even major updates can be compatible while minor arent (like our sympy case).
We settled with defining certain package versions in the requirements.txt that we test against while allowing all versions in setup.py unless there is a specific reason not to.
