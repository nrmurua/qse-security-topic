The transpiler passes for qubit routing via SWAP insertion currently implemented in Qiskit do not take the commutativity of the circuit into account. However, for algorithms with a high number of commuting gates, such as QAOA circuits, the order of these gates can have a significant effect on the performance of the transpiler pass.
As a proposed solution, current SWAP passes like SabreSwap could be extended to work with the dependency DAG of a circuit instead of its DAG.
Another approach consists of using fixed SWAP layers for a given physical coupling map. In more detail, given a device coupling map, one can fix a series of SWAP gate layers that change the qubit positions in the physical coupling map in a manner, such that each qubit is adjacent to each other qubit at some point of the process. As such, for any pair of qubits, there exists a point in the process where a two-qubit-interaction of the pair can be applied within the connectivity constraints of the device. The corresponding transpiler pass will then iteratively apply layers of this fixed strategy and insert gates of the original circuit whenever they can be executed.
The graphs below show the results of a benchmark of the different transpiler methods described above for QAOA circuits corresponding to MaxCut problems of varying size and density. We compare the transpiler passes on the number of CNOT gates and the depth of the output circuits as well as the transpilation time. In the last graph, the transpiler pass for the commutative Sabre SWAP includes a commutation analysis (building the dependency DAG from the given DAG) whereas the fixed strategies build the QAOA circuit from scratch, resulting in a much lower transpilation time. The transpilation time for commutative Sabre would be significantly lower, if passing the dependency DAG directly.



