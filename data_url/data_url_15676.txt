Information
This issue is closely realted to issue "Unable to load pulse defaults due to amp being a list #4162".
What is the current behavior?
PulseDefaults from_dict() method fails if a Parameter variable is chosen as amplitude parameter in a command sequence.
Steps to reproduce the problem
Call the PulseDefaults.from_dict() method with a parameter type argument in the default_dict.
What is the expected behavior?
A parameterised amplitude in the instruction_schedule_map in the backend should in my opinion be able to contain a parameterised amplitue.  Such that custom circuit instructions can contain amplitude values that then can be bound to the parameterised amplitude value in the backend.
Suggested solutions
Either don't use the _to_complex function in the from_dict() method in the pulse_qobj module or rewrite the _to_complex function to allow for parameter type variables and to solve issue #4162 also complex numbers in a list format.
The Qobj is being deprecated as an IBM-specific API in favour of the new #5885 backend interface. Is there a particular reason you need to use the Qobj rather than add a parameterized schedule to the backend.defaults().instruction_schedule_map directly?
We are going to support qpy format also for schedule #7300 Probably this is good replacement of current Qobj.
The Qobj is being deprecated as an IBM-specific API in favour of the new #5885 backend interface. Is there a particular reason you need to use the Qobj rather than add a parameterized schedule to the backend.defaults().instruction_schedule_map directly?
I just tested the instruction_schedule_map.add() function and even ScheduleBlock objects with parameterised durations are possible, which is great. I never noticed that and was working with Commands to define the PulseDefaults of a Backend, which does not allow for parameterised durations. According to the API documentation  of PulseDefaults, it still requires Commands that require a sequence of PulseQobjInstructions and there is no deprication warning for those. I am a little confused. The idea is to create the ìnstruction_schedule_map in the backend not via the Commands in the PulseDefaults during the initialization of the Backend, but to instatiate a Backend without ìnstruction_schedule_map entries and add them post initialization by the ìnstruction_schedule_map.add() method?
If Qobj is deprecated, does that mean that the assemble() function will become depracated as well? I have a probject that relies on the PulseQobj created by assembling a Schedule.
A bit background on how this is intended would be much appreciated. Thank you.
The idea is to create the ìnstruction_schedule_map in the backend not via the Commands in the PulseDefaults during the initialization of the Backend, but to instatiate a Backend without ìnstruction_schedule_map entries and add them post initialization by the ìnstruction_schedule_map.add() method?
That is the rough idea. In the new interface you will instantiate the backend as a provider and add the instruction_schedule_map to the Target at construction time.
If Qobj is deprecated, does that mean that the assemble() function will become depracated as well? I have a probject that relies on the PulseQobj created by assembling a Schedule.
Yes, the plan is to deprecate this from official recommended workflow. However, it will still be available in qiskit for the near term and will be then ported to the https://github.com/Qiskit/qiskit-ibmq-provider. You should always be able to copy the code into your project so long as you maintain the appropriate copywrite/licensing.
Given the above comments, I'm going to close this issue as "stale" or "obsolete" now.  If there's more to say on it, please feel free to re-open.
