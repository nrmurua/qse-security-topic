Is your feature request related to a use case or problem? Please describe.
cirq.PauliString drops identity gates by default and only stores non-identity terms. Therefore, a pauli sum hamiltonian $H$ acting on $N$ qubits and containing $M$ different pauli strings as part of the paul sum will contain $M$ * Avg(#non-identity terms per pauli string) different terms.
However, if we want to represent the same Hamiltonian as a sum of dense pauli strings (gate version, which can be applied on any set of target qubits); the number of terms in the representation will scale as $M * N$. For chemistry Hamiltonians; $N$ can be upto 1000 and $M$ is at least $N ** 2$; therefore the dense pauli string representation will scale as $N ** 3$ or more; which is pretty bad. As an example:
Describe the solution you'd like
We should provide a way to store a dense representation of dense pauli strings which ignore identity terms, similar to pauli strings; so it can easily scale for large Hamiltonians.
What is the urgency from your perspective for this issue? Is it blocking important work?
P2 - we should do it in the next couple of quarters
Discussion from cirq sync:
We should do it. In terms of implementations, it's probably best to add a flag to DensePauliString which can control whether the internal representation is sparse or not since we are not allowed to do breaking changes after Cirq 1.0 and changing internal representation of dense pauli strings by default would be a breaking change (is it?? cc @95-martin-orion @verult @MichaelBroughton )
