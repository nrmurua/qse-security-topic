It should be possible to create a pulse schedule by passing only the number of qubits in the schedule and possibly other memory and register information, e.g.
Then it should be possible to append pulses to this object using, for example:
This is also closer in spirit to the QuantumCircuit class.  This removes the need for getting a device specification before constructing the schedule; A step that is required for the pulse simulator.
I agree that helper methods/interface should be added for schedule construction. I should point out that we initially started very close to the builder interface that you describe, but as we concerned the problem at hand that we had to solve, we evolved to the current data structure.
I would not hold the QuantumCircuit to be the reference implementation as this is changing in v0.9, likely to have many of the attributes of the pulse Schedule implementation. They should meet somewhere in the middle. The key component of Schedules that I wish to keep intact is their immutability, this allows rapid reuse and construction of composite schedules.
The crux of your suggestion essentially involves merging the DeviceSpecification and Schedule classes. I think what you are describing is effectively a builder interface on top of the pulse schedules data structure. This is something I could support if it could be done while maintaining the desired existing features.
This could be done by renaming the current schedule to Schedule -> CompositeSchedule, and then have Schedule have both a DeviceSpecification and a Schedule. I do worry that at this stage it becomes hard to maintain immutability
This issue I see (and we ran into this when we tried this approach)
for proper comparison how this should be done with the current API.
Note that at each step it is clear that a function is being called and a result returned.
This could be easily modified to also be like
which would do the same as the former behind the scenes and which most closely aligns with the QuantumCircuit.
I am fine with this:
Tracking the device specification enhancement in #2479.
Closed by #2621.
