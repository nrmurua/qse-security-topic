As requested in #9176 (comment) and the 2 followup comments, we tend to prefix deprecated things with Deprecated. or Pending deprecation. as the very first part of the docstring. That is helpful so that in the autosummary listing the table of contents for everything, we indicate it's deprecated. Otherwise, you have to click through to the class/function/etc to see the deprecated directive.
We need to probably automatically handle (error?) if the docstring author already put the value in the docstring.
However, this feature is blocked on #9699. With @deprecate_arg, we would need to modify the docstring for individual arguments, We don't attempt to do that currently due to its complexity.
I'm not super wild about this, mostly just because I think that the documentation will be better if the surrounding text clearly says that the objects in the table below are deprecated.  I don't think deprecated objects should ever be mixed into an autosummary table with non-deprecated objects, whereas doing something like this, or doing it manually as was done before, encourages lazy documentation practices.1  I'm also not enthusiastic about any further handling or auto-errors in the docstrings - these rewrites are already getting very complex.2
Honestly I think that about autosummary full stop, but I think that's a pragmatic trade-off to make it easier for people to ensure that there's at least some documentation. ↩
In retrospect, I'm actually more in favour of a strategy where we have the Sphinx theme define a bunch of replacement rules for things like |deprecation_message| and then had people just stick that in suitable places rather than doing docstring rewrites, but I don't want to waste time suggesting this completely alternative approach now. ↩
