Currently it is not possible for e.g. XPowGate to represent the operation |-><-| - |+><+|. The reason is because the phase angle on the + state is defined to be a multiple of the phase angle on the - state (|-> angle in half turns = phase exponent, |+> phase angle in half turns = phase exponent * global shift).
This notion of a global shift is unique to EigenGate, and not going to be familiar to users.
Because it's both unfamiliar and inflexible, we should change it. I recommend that we change to separately storing the phase to apply to each eigenstate. This is how PauliString works, and I'm feeling much better about that class after writing it than I was/am about XPowGate.
This change would involve fixing many gates, but mostly all of them are implemented in terms of EigenGate.
I can take a stab at this. My proposal is as follows:
Remove _global_shift entirely
Add abstract methods _default_eigen_shifts and _eigen_spaces
Make _eigen_shifts an instance variable and optional keyword argument in the constructor
Refactor _eigen_components to build output from eigen_spaces and self._eigen_shifts
Add helper method with_eigen_shifts to produce an otherwise identical gate with the provided shifts
Add validation method to ensure that user provided shifts passed into with_eigen_shifts or the constructor are consistent with default_eigen_shifts.
Adjust _value_equality_values to compare eigenvalues and _eigen_spaces since these are really the two key factors in defining what an eigen_gate does and will account for different combinations of eigen_shifts and exponents landing on the same set of eigenvalues. This seems like it could also resolve equality issues brought up in #1179 .
How does this sound?
I think this would be reasonable. Slightly clunky for gates that have three eigenvalues, but I don't see how to avoid that.
Hey, @c-poole! Are you working on this? I'd like to fix #1179 before its birthday and it seems like your suggested approach addresses both issues. I can implement it, unless of course you're already on it.
I have this partially implemented. I can finish it up reasonably soon. I'll make this my next focus.
We determined in the meeting today that we'll be introducing a new (name TBD) class to replace EigenGate and move all of the Cirq native gates to use the new class with it's greater flexibility instead and figure out how we want to phase out EigenGate in favor of new class (name TBD).
@tanujkhattar @MichaelBroughton this seems like a big pre 1.0 item if we ever want to do it.
From cirq sync:
It's worth creating a new gate type but moving all existing gates before cirq 1.0 will be a lot of work and we don't have the bandwidth right now to get this done.
