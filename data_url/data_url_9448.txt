cache = DiscreteEmulationCache(ts, hs[0]);
r1 = copy(r)
RydbergEmulator.emulate!(r1, (ts), hs; cache=cache);
Jinguo and I found that, for the above code, if the hs[0] contains X term with zero strength, the emulate function does not do anything. Jinguo mentioned that this may be related to how the cache function is written.
Yes. I think the cache should take hs, rather than hs[1] as the input. So that it can check the coefficients of all h during evolution.
yes, I think this is why it errors. but I can't be sure since your example is not runnable, for future issues, it is always preferred to have a MWE (minimum working example) that allows people reproduce the error.
