Serialization of a ParamResolver uses the following method:

Conversion of param_dict to a list is necessary due to the JSON requirement that dict keys be built-in types, but the ordering of that list is suspicious - items has no guaranteed ordering, and the code does not explicitly sort it.
This becomes troublesome when looking at the JSON serialization test, which compares JSON generated from two representations of the same object. Somehow, this test consistently passes for ParamResolver despite the apparent freedom in the order of the param_dict list.
How does this work? It seems fragile at best, considering that CircuitOperations (see #3580) fails without sorting its qubit_map dict prior to serialization.
From https://docs.python.org/3/library/stdtypes.html#dict
Dictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.
Changed in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.
Thus this worked since 3.6 and is explicitly okay to depend on since 3.7.
Ah, then I think I see the cause of the CircuitOperation nondeterminism. The qubit_map field is populated from circuit.all_qubits(), which is a set:
I'm reasonably certain that sets make no guarantees about iterator order, so this makes sense.
