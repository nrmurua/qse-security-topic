Compilation does not cancel two sequential and identical CNOTs (i.e. using the identity cx^2 = 1) unless coupling map information is supplied as a kwarg. Since such cancellation has no dependence on device, this seems like an oversight.
A related issue as that the coupling map kwarg arguably should default to the coupling map of the backend when this is supplied as a kwarg.
Until this is fixed, there is a workaround of course: just give the coupling map! (Edit: or maybe not, see additional comment below)
More details can be found here.
I'm not so sure any more that the workaround actually works. For example, run
The output I get is
It doesn't cancel the CNOTs, and it adds in rotations of 2 Pi !
I think you find another issue in your workaround, so created a new issue #159 for that.
In current mapper, swap_mapper -> direction_mapper -> cx_cancellation -> optimize_1q_gates run in this order (only when coupling map is given). What happens in this case is:
So I think adding cx_cancellation before direction_mapper may be a solution to fix this issue.
@itoko @decodoku  is this still an issue? ... If it's not, I'd love to close it.
@atilag I think this issue should be addressed in the refactoring of the mapper based on the transpiler @ajavadia is developing. Leaving it as a reminder may be good.
on hold, since will be addressed by a mapper pass in the new transpiler architecture.
This actually just has to do with building a default pass manager, in the absence of a user-defined default. Basically the CXCancellation pass must be called, even in the absence of a mapper (e.g. when backend is simulation). It currently is not. We can use the Fixed Point feature to iterate and cancel more CNOTs. I think this is fairly easy to do.
closing as tracked in #1161
I think this issue is slightly different to #1161, since allows us to track the CNOT cancellation pass itself.
@1ucian0 this should be covered by issue #1161. If we do issue #1161 correctly then it will cover this issue. @ajavadia do you agree with me.
The brand new CX cancellation pass does not require backend information anymore, so I'm closing this issue. The broader issue about the default passmanager setting is tracked in #1161 .
