Thanks so much for this project! I've found it useful and have learned a lot from studying how it's organized.
I'm running into an issue that when I need to override packages in the qchem.pkgs.python3 set, the overrides already applied by the overlay (here) are apparently wiped out.
For example, I'd like to do something like the following:
But this fails with error: attribute 'openmm' missing.
I think this is related to the long-standing issue in nixpkgs: NixOS/nixpkgs#44426
One of the workarounds mentioned in that issue is for overlays to expose pythonOverrides directly so that multiple overrides can be composed downstream using lib.composeExtensions. I wonder if you'd consider a PR exposing this in the overlay, or know of a different workaround?
I've tried getting it done without the lib.composeExtension by using pythonPackages.nix again but it lead nowhere. My attempt feels complicated and leads to infinite recursions:
NixOS/nixpkgs#44426 is very unfortunate and the arguments pythonPackages.nix requires makes it indeed difficult to use it as an overlay separately. I also have no better idea than exposing the partially applied python overlay function.
Nevermind, the code above is obviously nonsense, I am not even using qchemPythonOverrides in there. This however works;
@sheepforce thanks for looking into this! Your solution makes sense to me, but I think I've just stumbled upon an even simpler fix that seems to work for my case (I might be missing some subtlety, though).
I hadn't realized this before, but if passed a function instead of an attrset, override will pass in the existing overrides. Something like this is working for me:
I think there may still be an issue with passing multiple overlays to nixpkgs (which it looks like your example solves). I've noticed some other projects (e.g. jupyterWith) compose packageOverrides. I wonder if a change like this would be useful here?
I am surprised that python3.override uses this old: pattern, but as it seems to work, I think your solution and similarly the one of jupyterWith is the best candidate so far. So yes, I think we should use it. @markuskowa do you agree?
Thanks so much for this project! I've found it useful and have learned a lot from studying how it's organized.
Glad to hear that is useful.
I did not have time to look into the problem. I have to admit that the overlay structure for Python is not nearly as advanced as the rest of the overlay. We had only a very few Python packages in the beginning and was no priority at the time. However, now we have more Python packages, and I agree that we should fix it. @sheepforce and @mcwitt: if you have a working solution, please to go ahead and open a PR.
@mcwitt your solutions you've linked looks nice, would you open the PR and possibly include an example in the PR, that shows that it works as intenden? ðŸ™‚
The pythonOverlay is now at least available in the flake, as of a386e4
