A frequent use-case in simulation and compilation is having a pyquil program, and needing to determine the unitaries associated with each gate. The current approach to do this is to determine the name of the gate, and import it from pyquil.simulation.matrices.
This issue proposes a cleaner way to approach this use-case by including a gate definition with each instance of the gate.
The property would contain a DefGate instance associated with the gate.
For fixed gates, unitary() would return a simple numpy array. For parametric gates, the return type would depend on the gate parameters provided. The user could provide scalar values for the gate parameters, resulting in a numpy array as the unitary, or they could provide Parameters, in which case the expressions would remain in the unitary. A mix is also supported.
The unitary method would return a numpy array or complex numbers for fixed unitaries. For parametric unitaries, it would pass the gate arguments to it's definition which would produce either a fixed unitary or one with expressions.
With a set of fairly simple changes, users would be able to straightforwardly determine the unitaries associated with each gate in a program.
Modifiers. This is a considerable benefit of the proposal. Modifiers can be handled automatically by the unitary method. For the dagger modifier, by taking the conjugate and for the controlled modifier, by adding a block-diagonal identity to the top left. Currently,this is a painful case to handle.
DefGates in the program. If a user overwrites a standard gate definition in their program, the definition associated with the unitary would be incorrect. Two approaches are possible.
Option 2 handles the most common use-cases, but could be confusing if gates are removed from the program context.
In Cirq, gate ops have a __unitary__ method for this purpose. It raises an error when parameters are not numerical values.
https://github.com/quantumlib/Cirq/blob/f715527bdf0da4763cd196ce2be59832a530dec1/cirq-core/cirq/ops/eigen_gate.py#L338
