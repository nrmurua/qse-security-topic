It seems odd to keep qrun_factory as an external function which inputs a factory instead of a method of Factory. The functions qrun_factory and run_factory only use next and push which every child class of Factory has.
Am I overlooking anything here? If not, I think its better OOP design to make a method of Factory which performs the same function as qrun_factory.
This may help with #143. For static factories, this run method could fold all circuits initially then send all folded circuits in a batch. For adaptive factories, this run method would send jobs sequentially.
Sounds reasonable to me!
This a good point, especially for run_factory.
Maybe I would think twice about making  qrun_factory a factory method since it would break the current nice separation between fully classical objects (mitiq.factories) and quantum stuff (mitiq.zne functions). But if it is necessary we can break it.
I think the separation doesn't need to be quite this strict at the end of the day. The Factory still just treats the quantum part as a black box executor function from Circuit to float.
What we definitely want to avoid is any code creep that introduces circuit manipulations or execution in the Factory directly (besides the noise_scale and executor black boxes).
