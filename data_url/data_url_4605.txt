I am coding a VQE-like program, where the initial state is not |0>, instead it has to be given and should be fixed for the optimization loop. However, when running the loop, the initial state is changed and I do not understand why. See the simplified code:
If you do a couple of prints before and after the final_state sentence, you will see that the value of the initial_state is changed, and then when running the loop everything is completely messed up. It took me a while to see that this was the problem. Even when creating a new variable the problem still persists:
I fixed it by adding a + 0, so the value is not modified:
I do not know whether I am doing something wrong, or it is a bug.
@bpcarlos, this is more a feature than a bug, in the sense that this behaviour is required in order to avoid large memory usage when the number of qubits is large (so you don't hold in memory the initial and another copy which will be updated during the gate application).
Now, we should probably include a more explicit documentation about this feature.
As @scarrazza explained this is because we do in-place updates to the state vector to reduce memory consumption at large number of qubits. As far as I know this is the case with other libraries. For example in Cirq if you pass an initial state to the simulator as a numpy array you can check that your array is modified after simulation.
Another simple solution to this (other than the +0 trick) is to use np.copy:
final_state = ansatz(params)(np.copy(initial_state))
Note that doing test_state = initial_state does not create a new array, it just creates a new reference to the original array. If you do test_state = np.copy(initial_state) then you create a completely new array. If you do this for many qubits (eg. >28) you will notice that RAM usage doubles.
I see, make sense. @AdrianPerezSalinas did you notice this when implementing the tangle? You also had to fix the initial random states. How did you go through it?
As @scarrazza explained this is because we do in-place updates to the state vector to reduce memory consumption at large number of qubits. As far as I know this is the case with other libraries. For example in Cirq if you pass an initial state to the simulator as a numpy array you can check that your array is modified after simulation.
Another simple solution to this (other than the +0 trick) is to use np.copy: final_state = ansatz(params)(np.copy(initial_state)).
Note that doing test_state = initial_state does not create a new array, it just creates a new reference to the original array. If you do test_state = np.copy(initial_state) then you create a completely new array. If you do this for many qubits (eg. >28) you will notice that RAM usage doubles.
Okay. Thanks @stavros11 and @scarrazza.
