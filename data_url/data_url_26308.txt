I'd like to make a number of improvements to our regtesting script:
Give test types meaningful identifiers instead of just  numbers.
Allow to check also other outputs besides the stdout.
Allow for multiple checks after running an input file.
As a first step, I'd like to move the do_regtest.py script from cp2k/tools/regtesting to cp2k/tests.
Are there any comments or concerns?
I am in favor of your ideas as it allows us to reduce the number of calls and thus runtime of the test suite to CP2K whereas you second idea allows us to test common mistakes in input files of CP2K assuming that we can then check them improving the coverage.
What about to add a new macro ? CPTEST(TAG, VALUE)
What would be the advantage over our current pattern matching?
These patterns are surprisingly stable. The last time one had to be update was more than two years ago.
Ok, now I see where you're going. You want to eliminate the TEST_TYPES entirely. That is indeed tempting.
However, I see two downsides:
I agree that adding a new test pattern is  a bit  cumbersome. I'm hoping to alleviate this by moving to a more familiar syntax, i.e. changing TEST_TYPES to test_types.py.
I think JÃ¼rg's proposal is worth a try, since it has some pros, If I got his idea right:
The tagged output could be optionally activated by a compile flag like -D__REGTEST
Thats's true and a price to pay, but if you are revising TEST_TYPES anyway, a new more flexible scheme could already be considered for its design.
Yes, I'll definitely add support for that by allowing consecutive lines in a TEST_FILES to use the same input file.
Since our output format hardly changes in reality, I'd deem this only a small advantage.
I agree, this would be a useful feature on its own. It's essentially #215.
The tagged output could be optionally activated by a compile flag like -D__REGTEST
I don't know. I'd rather not give the code an opportunity to behave differently when being tested.
...if you are revising TEST_TYPES anyway, a new more flexible scheme could already be considered for its design.
The new test_types.py will be very extensible. So if someone builds #215 then we can readily tie it into our testing.
If testing and the collection of key results will become a combined feature, then there is, of course, no need for a -D__REGTEST compile flag.
