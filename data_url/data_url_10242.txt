here are some code snippets that work and doesn't work
lets initialize stuff:
here if I send in an empty dict for h, and define the active qubits to be the qubits used in J, its all good
---> [-4.0]
Now if I change my h submission into a [0]*2048, I get the following error, which is possibly due to creating a h -dict from the 0 h list that turns all activatable qubits active
----->
I can prove the above statement by replacing the definition of activeQ to include all alive qubits
---> [-4.0]
This is actually a bug.
even when h is sent in as a dict it is still not handled properly.
[Just to first document the discussion we had offline.]
All qubits referenced in h or J are declared active.
If you supply [0] * 2048 for h, all 2048 qubits will be active, that's the expected behaviour. But as we concluded previously, it's probably not most intuitive. That's why we said we'll switch to (or at least strongly prefer) the dict definition for both h and J).
I'm investigating your last comment (dict bug).
example:
gives
the only way to not receive an error is if I define initial states as
Yes, I'm getting the same error.
The problem is SAPI downstream expects 3s for inactive qubits in initial_state, and we're trying to abstract inactive qubits away from users. initial_state (or any other solver-specific parameter) is not modified by the client. And in general it would be hard to modify it, unless we declare initial_state is uniquely named and a general solver param.
That being said, I don't see any other way of moving forward.
We'll have to handle initial_state with special care, treat it as a unique unicorn... And open a pandora box of specialized parameters pre/post-processing.
