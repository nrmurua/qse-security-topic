Let qobjevo be a QobjEvo with array-based time dependence, like QobjEvo([[qt.num(2), np.random.randn(100)]], tlist=np.arange(100)).
Calling qobjevo(t) returns a Qobj which is obtained by interpolating between the provided samples using scipy.interpolate.CubicSpline(tlist, samples, bc_type='not-a-knot')(t).
When qobjevo is passed to a solver like qt.sesolve, instead something equivalent to the following seems to be used internally:
scipy.interpolate.CubicSpline(tlist, samples, bc_type='natural')(np.clip(t, tlist[0], tlist[-1]))
No response
The interpolation which is used when calling qobjevo(t) should match the interpolation used inside the solvers.
I find the out-of-bounds behaviour inside the solvers (constant) more intuitive than the one used in qobjevo(t) (extrapolate). Between the different boundary condition types, I have no preference. The easiest would probably be to change the interpolation used in qobjevo(t) to match the one used inside the solvers.

Thank you for reporting.
In the development version, the QobjEvo as been reworked and behave the same in the solver as outside.
The out-of-bounds behaviour as been fixed to "constant" and the boundary condition always use scipy's default (we may add this as an options).
With the present version, to get the QobjEvo that you call behave like they do in solver, you can call qobevo.compile(). This is an extra step used to speed up QobjEvo in solver.
