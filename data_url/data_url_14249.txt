This is just a small quality-of-life idea for working with Pauli objects. As people get interested in working with larger numbers of qubits, it's common to end up with sparse Paulis, like III....IIIXXYYZIII...III. It's not that hard to work with these long strings, but it might be easier if there were support for more human-readable/writable labels. For example, it may facilitate working with 2-local noise models as in https://arxiv.org/abs/2201.09866.
Proposed additions:
that work with labels formatted something like 10 X(3,5) Y(4) Z(8) instead of IZIIXYXIII, where the first number is the length. Open to ideas on the format. The explicit numbering may also reduce endianness confusion when working with Pauli labels.
Analogous operations could eventually be added for PauliList and SparsePauliOp.
SparsePauliOp already exists of course, but it doesn't quite cover this use case since AFAIK it's mainly designed to work with a list of N-qubit Paulis that is sparse with respect to the set of all N-qubit Paulis, as opposed to a single N-qubit Pauli that has weight << N. It also brings in more complexity vs just working with a Pauli object.
SparsePauliOp does have a from_sparse_list() constructor with some of this functionality. So maybe an alternative approach would be adding from_sparse_list() functionality to Pauli. But allowing for sparse labels feels more user friendly to me.
I'd be happy to unify sparse handling including allowing the base Pauli class to be created from a sparse specifier.  I do think that Pauli needs a serious think about it (and all related objects) are constructed, though - there are a lot of different ways that all use a massively overloaded default constructor.  I'm concerned that adding a second label format that reuses an existing type will be more confusing to users, not less.
Aside from user confusion, my reasons against wanting another pure-string format are:
As a minor thing with the current proposal, were we to go this route: any new format also needs to include the ability to specify a complex coefficient for the Pauli as well, which this currently doesn't.
Thanks Jake, those are great points. Would be great to have readability without all the string parsing.
Extending the from_sparse_list constructor to also work for Pauli rather than only for SparsePauliOp seems kind of natural. That could just require an input without the arbitrary coefficients allowed in SparsePauliOp, so for Pauli it could be (string, qubits),  and for PauliList it could be [(string, qubits), ...].
If we're open to other options, would be awesome if we can somehow address these:
We could for example check both these boxes with the format
(x_qubits, y_qubits, z_qubits, phase),
combined with the existing num_qubits argument of from_sparse_list as well. Avoids string-parsing entirely as a bonus. So then
('-XYXYXYXYZZ', (3,13,6,19,22,25,18,33,12,50) )
would become
((3,6,22,18), (13,19,25,33), (12,50), 2),
which is mostly easier to read/write, and where the specifier length generally growing as the Pauli weight, rather than as twice the Pauli weight.
