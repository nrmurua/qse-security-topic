Hello,
I downloaded the last version of qbsolv and compiled it on Xubuntu. When compiling, I get the following warning:
main.c: In function 'main':
main.c:65:20: warning: overflow in implicit constant conversion [-Woverflow]
long seed       = 17932241798878;
Is there a way to avoid it? Warnings are usually not a big concern but it's always good to avoid them..
I hope this helps,
JM
It should just truncate the number to fit within an int, you should be able to add an L to the end of the number to tell the compiler to treat the constant as a long and then it wouldn't need to convert it.
I'm not near my computer or I'd test it, but if it isn't L then there is some other suffix that can be added.
The only thing to note is that because it's the seed, the actual seed used will be different if it doesn't truncate is, which shouldn't matter but worth noting.
Unfortunately, the L did not work. I also tried LU and U but same thing. Anyway, I now understand that this warning is not so important since we are simply setting the value of a seed for the generation of random numbers.
Thanks for the explanation Matthew!
JM
This is likely my fault in assuming that long = 64 bits on most machines today.  compile this c program on your machine and execute to see results,, on OSX results are:
int 32, double 64, long 64, long long 64, float 32, time_t 64
int
main(void)
{
printf(" int %lu, double %lu, long %lu, long long %lu, float %lu, time_t %lu \n",
8 * sizeof(int),
8 * sizeof(double),
8 * sizeof(long),
8 * sizeof(long long),
8 * sizeof(float),
8 * sizeof(time_t));
return 0;
}
I compiled the test and this is what I get:
int 32, double 64, long 32, long long 64, float 32, time_t 32
Thanks,
JM
I will get more explicit on sizes throughout the code.  Here is a new version of sizes.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int
main(void)
{
printf(" short %lu, int %lu, long %lu, long long %lu, float %lu, double %lu, long double %lu \n",
8 * sizeof(short),
8 * sizeof(int),
8 * sizeof(long),
8 * sizeof(long long),
8 * sizeof(float),
8 * sizeof(double),
8 * sizeof(long double));
printf(" int8_t %lu, int_16_t %lu, int32_t %lu, int64_t %lu \n",
8 * sizeof(int8_t),
8 * sizeof(int16_t),
8 * sizeof(int32_t),
8 * sizeof(int64_t));
return 0;
}
short 16, int 32, long 64, long long 64, float 32, double 64, long double 128
int8_t 8, int_16_t 16, int32_t 32, int64_t 64
Thanks for the new version. This is what I get:
short 16, int 32, long 32, long long 64, float 32, double 64, long double 96
int8_t 8, int_16_t 16, int32_t 32, int64_t 64
JM
