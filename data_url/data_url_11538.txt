Qiskit Aqua version:
'qiskit-terra': '0.17.0',
'qiskit-aer': '0.8.0',
'qiskit-ignis': '0.6.0',
'qiskit-ibmq-provider': '0.12.0',
'qiskit-aqua': '0.9.0'
Python version:
Python 3.6.11 | packaged by conda-forge | (default, Aug  5 2020, 20:19:23)
Operating system:
macOS Cataline Version 10.15.5 (19F101)
Problem spotted when executed the NumpyEigensolver for an operator.
The matrix and the spectrum of an operator (specific case) is changed when using to_opflow() (automatically called for legacy operators in the NumpyEigensolver).
Given a list of Paulis strings with coefficients in a dictionary (particular case), giving it to WeightedPauliOperator to construct the matrix with qubit_op= WeightedPauliOperator.from_dict(pauli_list)  then matrix = to_matrix_operator(qubit_op).dense_matrix upon diagonalization produces correct expected eigenvalues.
Then, when switching to_opflow(), with qubit_op_opflow = qubit_op.to_opflow() then
qubit_op_opflow_matrix = qubit_op_opflow.to_matrix() the matrix and eigenvalues are modified.
The spectrum of an operator (given as Pauli strings and their coefficients) should not change upon switching to_opflow().
Inspect the to_opflow() method and Pauli label to Pauli object converter.
Thanks for the issue.
I found that to_opflow() mistakenly converts a imaginary number to a real number.
minimal code
This returns a Pauli X.
I will fix this issue.
