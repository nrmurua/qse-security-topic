In 0.8.x we started the process of migrating the python interface to only work natively with QuantumCircuit objects. However, one thing we did not expose as part of that was a way to pass a parameter bind table with the a parameterized circuit. Previously the qobj interface enabled users to pass a parameterizations table in the qobj header and let aer handle the binding. That interface doesn't exist when passing a circuit directly. We need to fix this so a user doesn't lose this functionality when qobj as an input is deprecated and removed.
From an interface perspective, now that the circuit interface is in use, I'd think this is now a bug. As reported by @jgermain48 in Qiskit/qiskit#2864 (comment) , currently attempting to run execute(circuit, aer_qasm_simulator, parameter_binds=[...]) will raise a QiskitError.
Updating 
FYI...the code I was trying to get working was a tutorial on BBPSSW Distillation that was a 2020 IBM tutorial winner.  It gives the same error.  https://github.com/a-auer/qiskit .  I notice that the tutorial calculated a parameter (single value per run).
job = execute(ancilla_tomography_circs, backend_QASM, shots=1024, parameter_binds=[{theta: F_to_theta(0.75)}])
ancilla_results = job.result()
#(where F_to_theta results in a single value to bind to based on fidelity):
def F_to_theta(F):
if F < 0 or F > 1:
raise Exception('Fidelity must be between 0 and 1.')
else:
theta = np.arcsin(2*F - 1)
return theta
The code example I reported this against also seems to bind to a single value of 1:
job = execute(circuits,
Aer.get_backend('qasm_simulator'),
shots=512,
parameter_binds=[{theta: 1}])
An example of parameterization I found that worked required a range be set:  https://qiskit.org/documentation/tutorials/circuits_advanced/01_advanced_circuits.html
theta_range = np.linspace(0, 2 * np.pi, 128)
job = execute(qc,
backend=BasicAer.get_backend('qasm_simulator'),
parameter_binds=[{theta: theta_val} for theta_val in theta_range])
