I found the bug with _save_ctr being incremented in an unexpected and undeterministic way.
The problem was that we were counting the number of calls to _save(). However, _save can be called either by the main program execution, or by the _save_timer callback. In this case, even if nothing is saved by the continuous scope operation (what the unittest is supposed to ensure), a remaining save attempt that was pending from a previous a call (1 s earlier) can artificially increment the counter by 1.
--> The right solution (I believe) is to only count the synchronous calls to _save (because delayed saving is supposed to be an internal implementation detail of the memory tree). So I moved the actual saving activity into a function _save_no_counter() that is now called by _save(). The _save_timer is now connected to _save_no_counter such that no increment of the counter or warning is triggered by the callback.
The problem with the previous solution, is that it seems to be in contradiction with the logic behind the unit_test "test_two_trees" of test_memory.py.
Anyways, I am really puzzled with this test...
If we really want to test the actual count of writing to file in memory_test.py AND the number of calls to _save() from higher level modules, then I can make 2 separate counters:
_save_requested_counter
_save_tofile_counter
All this discussion concerns the above mentioned commit 66f6fa8, of which I am not sure that we want to merge it without modifications.
I am ok with your suggestions, I'll implement that right away...
In fact _save_now and _write_to_file are redundant.
--> In addition to what you suggested ( _save_without_counter()->_write_to_file(); _save_requested_counter->_save_counter; save_to_file_counter->_write_to_file_counter;), I removed _save_now (and replaced all occurences by _write_to_file).
Unittests OK
