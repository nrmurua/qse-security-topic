I am using ControlledPQC and PQC for a couple of times in quantum machine learning. My question is that since I don't have any encoding data to be integrated into the quantum circuit, how can I just apply a ControlledPQC or PQC on just states that initialized as 0 states. In tutorials of PQC, they have been using some classical data and then encoding them and then applying the tfq.layers.PQC and finally compiling all these into tf.keras.Sequential. But in my case, I have input as qubits initialized as  states?
Is there any way to apply PQC in this case?
Edit: I came across tfq.layers.Expectation which takes a circuit and a bunch of parameters as an input. But I don't get to know how to use tfq.layers.Expectation epoch-wise on a bunch of data? Is there any sample of code available where I can apply it on a very small data, say tf.random.normal? How can tfq.layers.Expectation be used as tf.keras.layers.Layer class?
To apply it on a |0> state you can just define an tensor in_ = tfq.convert_to_tensor([cirq.Circuit()]) then do PQC(in_). You can input arbitrary circuits (I think they have to be serializable though) as an input as well (not just an empty circuit).
Thanks for the reply!
I have a piece of code that I implemented:
Is this circuit taking in |0> state or an encoded part? This has been taken from https://github.com/lockwo/quantum_computation/blob/master/TFQ/RL_QVC/atari_qddqn.py and https://github.com/lockwo/quantum_computation/blob/master/TFQ/RL_QVC/policies.py
Good to see my code be useful to others. The input flow goes circuit_tensor -> encoded -> ansatz_circuit -> Z, Z ops. The circuit tensor input is the |0> state. It looks like the layer input (i.e. the input to the call function) are the encoding parameters.
Thanks for the reply!
I have updated my above code as follows:
In this I haven't taken anything input, and the initial states, I suppose, are to be |0>. But the error I am coming up is when I call the function inside tf.keras.Sequential layer.
But the output comes out to be:
python <keras.engine.sequential.Sequential object at 0x7f40337cfe80> 
which is not what I desire. I need the measured values to be in the output rather than this keras.engine.sequential.Sequential. Is this possible anyhow?
You have to actually call it (not just print what it is). So do quantum() rather than quantum.
After doing quantum(), I'm getting an error:
Is there something that I am missing?
Are you doing quantum or quantum()? It seems like the object is being printed, not the result of the call.
After doing quantum(), I'm getting an error:
Is there something that I am missing?
It looks like TF models require an input to all call functions (makes sense, TF tries to make a compute graph mapping inputs to outputs) and it doesn't like that you aren't passing anything when calling
Well, in my case batch_size is the input that I am using. Following is the tweaked code:
Here, in the call function, I have applied batch_size which is what I am taking as an input (which isn't necessary, yet Layer.call needs an input argument). Yet I'm getting an error.
Can I use tfq.layers.ControlledPQC as a variable and then apply tape.gradient and optimizer.apply_gradient?
You can apply it to the trainable variables of a ControlledPQC, yes
Cool. Will take this into consideration and try to implement it in an another way.
Thanks a lot for the replies!
I have got one doubt that is kinda creating a problem. Say that I have built a circuit on 2 qubits, which are, cirq.GridQubit(1,0) and cirq.GridQubit(1, 1). Consider that the circuit consists a bunch of rotation operations and CNOT gates in it. Now, I have applied this quantum circuit through tfq.layers.ControlledPQC and for the observable part I have applied cirq.Z(cirq.GridQubit(1,0)). Does this observable means that it will measure the expectation value in |0>,|1> basis AFTER all the operations (rotations and entangling gates) has occured or BEFORE all these operations. Because in the MNIST example they have considered the readout at cirq.GridQubit(-1, -1) which kind of creates a doubt that the observable will be giving the same output as in the MNIST example?
It is after, the ControlledPQC circuit is applied after the input then the result is generated
