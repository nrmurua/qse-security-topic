Some circuits need to make use of a large, fixed number of parameters. For example, variational algorithms setting rotation angles as independent parameters, to be sourced as an array from a classical optimizer. See the VariationalForm class and RYRZ algorithm in aqua as an example.
https://github.com/Qiskit/qiskit-aqua/blob/40218c2e6ea6c76791139101ac005b9a2bf7b256/qiskit/aqua/components/variational_forms/ryrz.py
With the current Parameter definition, this is possible but cumbersome. It requires the user to define, name and manage a Parameter instance for each gate they plan to vary.
It should be possible to define a parameter vector of fixed length, and access elements of that vector as individual parameters.
Possible syntax:
When binding, we should verify that the supplied list matches the length of the vector and that all parameters in the vector are bound. (Partial binding within a vector is not supported.)
I've written up a PR (#2379) with one go at the interface, keen to hear thoughts:
This results in:
I recognize that the autolisting may not be your style... the alternative is not not name them at all and have them only 'live' as elements of the list (in which case the name can be more of a property, denoting the vector name and index?). I'm not sure which is better.
Hey @dongreenberg , this looks great. I think the auto-naming here is fine. We can make it clear through the documentation how the names of parameters in a ParameterVector are generated, and I think either θ_n or θ[n] should be clear to users.
I like the array (θ[n]) notation better, will change to that.
Just to close this loop before I submit, the interface now looks like:
producing:
