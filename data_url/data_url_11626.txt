Right now, the to_circuit method only works on the operator primitives but not on ListOps. I think we should try to add this method for the ListOps too. If in some cases it is not possible, e.g. because the operator is not unitary, we can raise an error.
Example:
Though i.to_circuit and X.to_circuit both work.
Note that some combinations, such as CircuitOp @ PauliOp, work because the composition does not return a ComposedOp but the type of the left-hand-side operator.
Hi @Cryoris
I implemented a simple solution that works on ListOps

and raises error for non-unitary operators

I will create PR as soon as I extend the tests.
Thanks for looking into this.
Please do not paste images of code. Rather use quoted code blocks as in the first comment in this issue.
@Cryoris Referring to the opening comment in this issue: Are you suggesting supporting to_circuit for derived classes only (eg SummedOp) or also for instances of ListOp ? The latter is meant to be container supporting vectorized operations.
The idea was to add it only for derived classes, meaning: TensoredOp, ComposedOp and SummedOp.
If we want we could also add it to the ListOp itself but then it should return (nested) lists of circuits. But maybe let's start with only doing it for the derived classes.
@Cryoris I moved the methods to the child classes, please see the PR.
