This issue is meant to drive discussion on the format and content of the configuration file used in OpenQL. I believe that three different topics should be discussed:
i) format and relevance of current constraints;
ii) simplifying mechanisms to describe gates differently based on the targets (qubits) they are applied to. Eg. 2 qubit gates may need to be described differently depending on chosen target tuple
iii) with the addition of the CC backend, additional keys were added to the configuration file. Since these should fully describe the hardware constraints of our system, I believe it would be worthwhile to converge on how these are described to OpenQL. Maybe @wvlothuizen could help in this by highlighting what the new additions are, and how they are intended to be used
Why are 3 issues written in one issue?
When documentation on this has been read and the above is assumed solved, I'd like the text of this issue to be rewritten because it is not exact enough to address it further.
The reason why all three were written in one issue is that all were related to the structure of the configuration file.
Nevertheless, these GitHub issues that I and Adrian created should only be seen as a first attempt at driving development of several aspects of OpenQL. Therefore, if you believe splitting some of them could be beneficial, that is perfectly fine.
Until now, the rcscheduler was primarily written for CC-Light. Dependences on CC-Light in all but a few CC-Light backend passes are pushed down behind generic interfaces to platform specific implementation classes (that are to be created). The first such is the resource constraint manager; this is now being designed.
Also the current resource constraint descriptions in the configuration file are made CC-Light specific, so that the CC resource description system can start freshly, copying selectively from CC-Light. With this, most if not all of the CC-Light fields in the configuration file, are then only needed by CC-Light, so they can be dropped for CC.
When that has been achieved, the CC rcscheduler should be configured properly, and the CC mapper. After that, this issue needs to be reevaluated.
Getting cc_light gate parameters in scheduler and mapper has been pushed down to the implementation of the cc_light resource manager, making scheduler and mapper more generic.
Next is to replace cc_light_resource_manager object creation in scheduler and mapper by plain resource_manager (and select for cc_light internally from the platform attributes).
Changes were tested in the lab
