We want to make sure using and developing Mitiq is as reproducible as possible. When this comes to dependency management or packaging, we use requirements files to list what Python will need installed to use or develop Mitiq. When specifying dependency versions, you can either pinning as loosely as possible or give explicit exact versions for everything as well as versions for the dependencies dependencies.
Loosely bounding can be a good strategy, but it makes it harder to guarantee that package managers on different OSs and at different times choose the same version. Explicit specification is pretty common for production sorts of environments as it leaves little to chance.
This is generally done with lock files in other languages but there isn't a great option for Python. There you would have your requirements file, and at build time the compiler would generate a lock file (if there wasn't one already). I found this guide helpful for the pipenv tooling, and it's pretty straight forward to do with conda (just export the env after building).
I think I would prefer to make a conda package for mitiq, as that gives us the most flexibility moving forward for dependancy management.
What would be needed then is a conda env file at root which when we do releases/things that change dependencies we would re-generate a conda env lock from the looser conda env and also commit the fully pinned lock file as well.
This originally came up considering ways to speed up CI runs by caching the requirements (which checks based on the hash of the requirements file for changes).
This issue had no activity for 2 months, and will be closed in one week unless there is new activity. Cheers!
