My intention is to run rsa3072_dilithium2's hybrid algorithm and see the result of the hybrid certificate and understand how it works.
However, I faced some difficulties.

(1) I want to ask if this is the intended result of the certificate?
(2) What is the implication of unable to upload public key?
(3) Since it is a hybrid certificate, why can't I see both the RSA and the Dilithium's signature, and instead I am seeing a single long signature?
(4) For the signature Algorithm's identifier, is there a table to translate the identifiers to their corresponding signature names and their corresponding name?

Thanks in advance !
Sorry for the delay answering - was doing a bit of "digital detox"... :-)
Here's feedback to your questions:
I want to ask if this is the intended result of the certificate?
Yes and no: Plain openssl doesn't know about this algorithm, so cannot load it. Try OQS-OSSL (./apps/openssl) and you should get an error-free output.
What is the implication of unable to upload public key?
See above: Most likely you used a stock (non-OQS) openssl in your command.
Since it is a hybrid certificate, why can't I see both the RSA and the Dilithium's signature, and instead I am seeing a single long signature?
Because such simple "appending" is how we presently have it defined. There's a discussions going on how to do it "right", e.g., #300. Feel free to chime in if you feel strongly either way.
For the signature Algorithm's identifier, is there a table to translate the identifiers to their corresponding signature names and their corresponding name?
Kind-of, yes: The master file for this is here
@hengyongming : Did the answers above provide sufficient explanation? Are you OK to close the issue?
@baentsch Yep it does answer my question. Thank you so much for replying me, really appreciate it.
Just an additional question, I am wondering how the signing of the certificate works for hybrid algorithm.
My guess is that the certificate will be signed with a traditional algorithm and PQ algorithm in parallel. The signature obtained will then be appended together to form a final signature.
Is there any way for me to confirm my guess? Thanks in advance!
Is there any way for me to confirm my guess? Thanks in advance!
Yes, you can read this comment and the code below implementing it. Added: Check out pkey_oqs_digestsign
@baentsch Alright thank you so much ! I really appreciate it.
