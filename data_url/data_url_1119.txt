Basically, I want this to work:
This requires overloading the result of cirq.depolarize to be a normal depolarizing channel when given a probability, and a time based depolarizing channel when given a duration. Then ConstantQubitNoiseModel should be modified to notice when a wait gate appears, and that it has a time dependent operation, and have it work.
But t1 decay isn't depolarizing (?) It's asymmetric
This may fall into the scope of the "generate noise models from calibration metrics" changes I'm working on - if I see an opportunity to include it, I'll add this in.
@Strilanc, what is the expected behavior for gates with implicit durations? e.g. should it respect the implied duration of 25ns for an xy gate on Sycamore?
This looks like it should be possible with the current DensityMatrixSimulator behavior, but I think adding a new noise model type (TimeDependentNoiseModel?) may be better than trying to fit this behavior into the ConstantQubitNoiseModel.
I think this is a case where ease of use would lead to very bad coupling.  Basically you have a noise channel being used as a noise model (ok, this was an added feature) and that noise model needs to be aware of a particular noise type to modify how it works (i.e. it needs to look at the duration of any gates it is associated with).  This feels like something that if it is supported should ONLY be in the noise model side of the world, and making this "easy use" will lead to a lot of confusion across the channel / noise model boundary.
(Also what Matt said, though you can define a "probability for unit time" and then use p*(t/t_unit))
