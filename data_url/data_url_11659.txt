When one tries to evaluate the expectation value of an operator by default is Aer fast expectation with Aer qasm simulator and not BasicAer  and you cannot get back the statistical noise from the number of shots. If you set variance=True again the variance is not computed (since it is snapshot based calculation).
In qasm simulation we expect to retrieve std depended on the number of shots for every evaluation of an operator.
It should be default use the PauliExpectation(), from qiskit.aqua.operators and fast expectation should be defined per case.
Also discussed here: https://quantumcomputing.stackexchange.com/questions/11968/evaluated-standard-deviation-during-qaoa-vqe-optimization-is-always-zero-qiskit/11970#11970
@Brogis1 can also confirm this that tried VQE simulations.
or, if the SnapshotExpectationValue can be used to return the variance (tbd), then we should use which ever is faster by default
When using the Aer backend then with paulis the set of defaults are such that the fastest computation path was chosen - i.e. leverage Aer capability and group them. The expectation can be changed explicitly in VQE (and hence QAOA since its a subclass) and grouping turned off there too.
For sure, independent of this discussion, the docs in VQE/QAOA need improving to explain things around the operator and expectation params.
I would also like to understand how some rotated basis operator and presumably some expectation object customized to that, as proposed for chemistry needs, fits into this picture of operators and expectation selection.
Clearly the variance is not the only difference here. The above default behaves like the statevector in terms of outcome of expectation value i.e. does not have measurement value probability noise that one might also expect.
From user's perspective, I confirm that I had great trouble because of this and had to rerun a lot of simulations. Better that by default we have the setting that makes QasmSimulator behave as close to QC as possible (with shot noise at least)... as usually QasmSimulator serves to test algorithms in realistic settings.  I think this should be changed asap (default use the PauliExpectation() as suggested) as all people now upgrading their Qiskit will be getting unrealistically good outcomes and scratch their heads (simulations are substantially faster, great, but hidden cost - no shot noise).
Yes, this does make it behave, by default, as if it a statevector simulator were being used. With the prior version this special mode was enabled explicitly by setting shots=1, so by default it had shot noise.
If you pass a qasm backend in, by default it does behave differently in VQE/QAOA, by leveraging the Aer capability when its an Aer backend. Maybe consistency across other algos, in that the outcome is based on counts, would be preferable. Either way the docstrings (and a tutorial)  need to explain what this expectation logic is and how to set things etc.
