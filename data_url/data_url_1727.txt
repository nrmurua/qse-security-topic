Is your feature request related to a use case or problem? Please describe.
It is sometimes the case that the executed circuit is composed of a number of sub-circuits which have no interacting gate between them. For example, when doing pair-wise XEB experiment on 40 qubit chip, the simulation is really 20 independent 2-qubit experiments.
It would be nice if Cirq detects cases like this and does a number of independent simulations on a smaller sub-spaces. This way the simulation time can be reduced considerably.
Describe the solution you'd like
Implement the feature above.
[optional] Describe alternatives/workarounds you've considered
[optional] Additional context (e.g. screenshots)
What is the urgency from your perspective for this issue? Is it blocking important work?
P3
P0 - this should land no later than a week
P1 - I need this no later than the next release (end of quarter)
P2 - we should do it in the next couple of quarters
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
Related to  #3409 (or plausibly dupe) cc @mpharrigan
A few questions:
What is the order of importance in terms of which simulators get this optimization?
Would it be worthwhile to generalize this to, say if there's two subspaces that are disconnected until almost the end of the circuit, to optimize the prefix part? (Or, same for suffixes if there's a measurement/reset operation on all the qubits that disconnects the subspaces)? Or do most real-world simulations tend to entangle everything toward the beginning of the circuit and leave them that way until the end?
Should the solution be smart about knowing that, say SWAP does not join subspaces, or CNOT does not join the subspaces unless the control bit is in superposition? Or would this be little used in practice?
Edit: couple more questions
Which functions are most important: run, simulate, simulate_moment_steps?
Do you need this for just circuits with terminal measurements only, or interim measurements too?
Any example circuits or code you'd like to optimize?
Some answers to the above questions:
Smart behavior for SWAP / CNOT could be interesting; I recommend taking a look at the solution in #3409 and following up if it seems feasible to add this behavior to that solution.
Duplicate of #3409
This does seem like a dupe, closing! We'll track it on #3409 which seems to make really good progress! See #3873.
