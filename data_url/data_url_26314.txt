So discussion on #2840 prompted the general question of how the toolchain should be provided for a packaged cp2k.
In that issue, I motivated inserting (in fact later mangling of arch file, too) of LDFLAGS with possible conflict of a system-installed libint2.a with the specific variant of libint that the cp2k toolchain script builds.
It was suggested to me that cp2k doesn't have to carry its own toolchain around and integration into package sets is welcomed. My current context is pkgsrc, which we use as package manager in an HPC installation to provide prefixes with standard userland software, either down to the desired application (R, for example) or at least to provide the build dependencies for users bringing in their software. These prefixes are managed with environment modules and a user can pick the desired sets of sofware in each shell session, and due to builds with RPATH is able to combine serveral tools in one environment. In modern times, this sounds a bit like what one does with containers now, but it's different with advantages and disadvantages. Same comparing to other packaging systems like Spack.
Anyhow: The point is that I install lots of software into a common prefix just like the package selection of a Linux distro.
Now, for a general package selection, there needs to either be an obvious choice of build parameters — at least something site-specific that works for every user there — or there should be several variants installable without conflict.
Spack handles that with a unique prefix per package, solving a very general problem with a huge hammer.
I wonder if we could just package libint2-lmax4, libint2-lmax5, etc. and have those variants in the system (/prefix/lib/libint2-lmax7.a, for example) and a way to point cp2k to use one of those. Has libint upstream an opinion on this? Should libint usage always be an internal detail and be built with the using application instead? Or is it likely that one lmax choice will work for all users of a system?
Is libint for cp2k somehow different than libint for mpqc or ORCA (which has it internalized)? Is it reasonable to have it as external dependency at all? Should it be libint2-cp2k-lmax5.a instead, and the existing libint2.a in pkgsrc is just for mpqc?
Ideally, it would be a run-time option which lib to load, depending on user preference for lmax… providing one binary for a set of users is a nuisance otherwise. Second best is a build option for cp2k for the lmax to use. I can apply that in pkgsrc by generating differing dependencies, then. But really, I do wonder if providing a system-wide (or prefix-wide) build of libint2 is sensible at all. There's a handful of rather specific packages going to depend on it (them).
Are there other issues where cp2k behaviour depends on specific setup of a toolkit dep? Maybe it should be settled what truly is an external dependency on a standard build of something and what should be kept inside the cp2k build. It's already a hint that the normal result is a static library, not a dynamic one, in the case of libint2.
I do wonder if providing a system-wide (or prefix-wide) build of libint2 is sensible at all.
That's a reasonable question to ask, given that libint can be compiled in so many different ways. My guess would be "yes" because AFAIK libint's features are not mutually exclusive - they just increase the build time and binary size.
For our pre-generated tarballs we're using these settings, of which the following are of particular importance for CP2K:
This means e.g. that we can use the Debian package but not the Fedora package and the Fedora package.
There has also been the proposal to migrate to libcint, but it's a larger undertaking and nobody has picked it up yet.
CC @dev-zero who is really our expert on the topic.
I do wonder if providing a system-wide (or prefix-wide) build of libint2 is sensible at all.
That's a reasonable question to ask, given that libint can be compiled in so many different ways. My guess would be "yes" because AFAIK libint's features are not mutually exclusive - they just increase the build time and binary size.
For our pre-generated tarballs we're using these settings, of which the following are of particular importance for CP2K:
This means e.g. that we can use the Debian package, but not the Fedora package.
I hope you meant the libint2 package, though. That one has
I hope you meant the libint2 package, though.
Oh, you're absolutely right. I'm sorry! I've updated my comment above.
