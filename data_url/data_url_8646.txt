The steadystate function is becoming quite cumbersome by having the direct and iterative steady state solvers under one function.  Since these two techniques require many different input options and settings, I propose that we split them into two functions  perhaps:
steadystate_direct
steadystate_iterative
We could then depreciate steadystate (steady is already depreciated) and then link it to steadystate_direct as not many people use the iterative techniques since they are challenging to use.
I agree that is is getting a bit unwieldy with all the options to the steadystate function, many of which only have meaning for specific solvers. We should do something about that.
I wouldn't favor getting rid of the steadystate function though.. It might break a lot of old code and I think it is nice to have a high-level API that is decoupled from the specific implementation (direct, interative, or something else). Currently steadystate is only dispatching to other functions, and I think that is how it is supposed to be.
To solve the problem with diverging options requirements for different solvers I would suggest changing the function signature to
and defer all the specifics about kwargs to specific solvers (including docstrings). That would bring the default values of those options closer to where they are used and reduce duplication. It would also allow us more flexibility in maintaining a backwards compatible api, and future maintainability.
It's fine with me to make _steadystate_direct and _steadystate_iterative publicly accessible.
Sovled in 893417d
