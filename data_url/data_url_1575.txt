Description of the issue
with_qubits is meant to return a new operation with its (ordered) qubits substituted with a new list of qubits.  BooleanHamiltonian.with_qubits casts its argument to NamedQubit and otherwise fails (throws AttributeError).
BooleanHamiltonian.with_qubits also assumes the names of the named qubits correspond to the names of the boolean variables.  This won't be the case in general, especially if the user is constructing a larger circuit.
How to reproduce the issue
Cirq version
0.12.0.dev (after #4309)
Related to this, I would expect this identity to hold for any operation type but BooleanHamiltonian does not:
Thanks for opening this @cduck!
@tonybruguier can you have a look at this please?
Ack
Apologies for the mistake. I sent #4396 as a proposal for a fix.
@cduck I tried to look around what the exact definition should be, but I can of course change my code.
It looks like the documentation could be more descriptive about how with_qubits should work.  My understanding is that with_qubits returns a new operations with the exact same effect (i.e. unitary, decomposition, etc.) but on a different list of qubits (only if they have matching dimensions).
I think the fix is much better but it does implicitly rely on key order in dict.  I don't know how to avoid this with the current with_qubits API.  The only concern I have with the fix is this false equality:
Sorry for pushing - I haven't seen your comment here @cduck - technically the implementation is now correct based on the documentation as the order of qubits is determined by the map insertion order.
However, I see your point regarding insertion order being counterintuitive - but it doesn't just impact with_qubits but also qubits. I would recommend opening a different issue to discuss this - there are multiple avenues:
Yes and thanks for the fix.
I don't mean to be so pedantic about the API.  I don't think the ordering is causing problems right now.  If I find it does, I'll open an issue.
