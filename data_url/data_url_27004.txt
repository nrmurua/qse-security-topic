** Feature request **
Would it be possible to implement mechanism to terminate jobs where the SCF stage is not converging? E.g. a keyword for max number of allowed SCF convergence failures. Another possibility would be a time limit keyword.
Cheers
David
Hi @dkchalmers,
You can limit the number of SCF iterations by using SCF=number_of_iterations (see https://quick-docs.readthedocs.io/en/21.3.0/user-manual.html#scf-convergence). Have you already tried this? Thanks!
Madu
Hi Madu,
The problem is specifically with optimizations where the SCF convergence is failing. If the SCF is converging, there is no problem with the number of iterations. However, if the SCF is not converging, the optimization fails and I would like to stop the job after a few failures to avoid wasting CPU time.
David
@dkchalmers thanks for the clarification.
I agree, if the SCF does not converge, then the optimizer should stop and inform the user to investigate. An option to override may be useful. @Madu86 we should implement this.
We could implement a time limit to gracefully exit after a specified amount of time is exceeded. That said, you can specify max number of SCF iterations and max number of geometry steps. If you want a hard time limit on program execution, you can use the timeout command which should be available on any Linux system, e.g. to limit runs to 10 minutes use timeout 10m quick foo.in. Of course this will just kill Quick once the time limit is reached.
All the best,
Andy
Thanks Andy - yes getting the optimizer to stop if SCF is not converging would be great.
A time limit might also be useful in other circumstances. Graceful exits are always better :)
Cheers
David
We have addressed this issue in PR #231. By default, the geometry optimization will stop if the SCF doesnt converge. Users can add ALLOW_BAD_SCF keyword in input file if they want to force the optimization to run regardless of the SCF convergence.
