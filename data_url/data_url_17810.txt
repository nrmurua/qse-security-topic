The tools.qi.pauli is important and will stay around. It is slow with int vs bools and needs to be cleaned up. Richard and Antonio will work on a proposal for what should be methods of Pauli and what should function in there and make tests for it.
Some questions and related to the ordering issue I make soon.
The Pauli has internal two vectors which are ordered
v = [q0,q1,q2,q3, .... qn ], w =  [q0,q1,q2,q3, .... qn ]
it makes a matrix which is ordered
qn x .... q3 x q2 x q1 x q0 where x is tensor product.
it makes a string label (eg. 'XIZ...') which is ordered
q2q1q0
My question for all is qiskit matrix is defined as the largest qubit to the left, I don't care what the internal of the Pauli uses (v,w), but the label what is our convention.
@chunfuchen can you summaries out notes here on what we should do
@ajavadia @chriseclectic comments on the pauli order above would be good.
Notes:
Thanks, @chunfuchen but I don't think the delete_qubit needs a Pauli as it just removes that one from the Pauli class.
lets make sure the TestPauli are there own test, not part of testqi
We also need two additional sign bools as members, we can have them as an array of two bools _sgn. I would keep it separate from v, w.
why?
Sorry, we don't need them. sgn_prod will keep track of the signs, and whenever we want to store and carry signs and coefficients around we can use an Operator object.
edited to remove sign, and to add some examples, add some addition method suggestions, data member suggestion
My suggestions would be something like this:
Ordering:
Data members:
Methods:
The Pauli class should be able to be initialized from a string, or from the boolean vectors. Eg something like Pauli(label='XZY') or Pauli(x=[1, 0, 1], z=[1, 1, 0]) or Pauli(x=[True, False, True], z=[True, True, False])
There should be a len method that returns how many qubits the Pauli is defined on
There should be a __repr__ method that displays/prints in a manner that can be used by the constructor: for example it could display as Pauli(x=[1],z=[0]) so you could copy+paste and have it be  valid python expression for making a new Pauli object.
There should be a to_label to_string or similar method (as there already is)
There should be a from_label or from_string method that sets X and Z vectors based on a string label (this could be used by the label constructor)
There should be a to_matrix method (as there already is)
The should be a symplectic_product method to implement the symplectic product between Pauli operators (eg: pauli_c = pauli_a.symplectic_prod(pauli_b)). Maybe you would want to call this dot to have less typing (this is already there as __mul__ method).
Maybe you want to change __mul__ to __matmul__ for the magic method shortcut to symplectic_product. In the case of __matmul__ you would do p_a @ p_b instead of p_a * p_b.
There should be tensor product kron method that returns a new Pauli on the larger space. (eg. for two single-qubit paulis pauli_a and pauli_b, return a 2-qubit pauli pauli_ab = pauli_a.kron(pauli_b)). This would be implemented by concatenating the lists fo X and Z in the appropriate order.
There could be set and get methods for X and Z for setting individual bool values for a single qubit if you don't want to allow direct access to the under lying vectors.
As you already mention there could be an insert and delete method for adding/removing a single-qubit into the middle of the tensor product, but I don't think these are as important as dot and kron.
@chriseclectic can you give me more reason to add the sign
@chunfuchen is going to make different constructors for the ones you mentioned.
@chriseclectic what do want by this
 There should be tensor product kron method that returns a new Pauli combining the current with the new ones (think np.array.kron)
I agree on having the tensor product method. If I understand will be basically concatenating v and w of two(or better, more) Paulis.
We can have two constructors, one for v,w and one for the strings, but one thing is important: let's not have the string representations as members, otherwise the memory requirements to store massive Hamiltonians with lots of Paulis will go up dramatically compared to having just v,w as members.
@jaygambetta I removed the sign, what i was thinking of for that would make more sense in a seperate Operator class that can be expressed in terms of Pauli objects and complex coefficients.
I edited the description to include example of kron, Antonio is correct it is just concatenation of the lists in the correct order for the chosen qubit label convention.
@antoniomezzacapo the string constructor would convert the string to the boolean vectors. the X and Z vectors should be the only data members, and to_string/to_label method and from_string/from_label methods should do the conversion (if you have a from_string method the string constructor would just call that)
@chriseclectic I' m ok with string constructor done in that way. So @chunfuchen we would need also a from_label() / to_bool_array()method.
@chriseclectic  There is already a 1.7k-line Operator class in Aqua :), which is constructed as list [[coeff0, Pauli0], [coeff1, Pauli1], ... [coeffN, PauliN]].
https://github.com/Qiskit/aqua/blob/master/qiskit_aqua/operator.py
a WIP PR is #1166
please feel free to comment on it.
but it need to be updated upon we determine the order of qubits
