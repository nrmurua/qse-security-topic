Currently the preliminary draft of the pec module works only with single-circuit executors.
We should support batching since it is very important for efficiency, especially in PEC.
The way to implement this should be discussed. PECFactory? Functional approach?
Note: An aspect to keep in mind is that in PEC most of the samples correspond to the unmodified input circuit.
So instead of repeating many copies of the same input circuit it would be more efficient to just increase the number of shots. This trick however could make the signature of executors too complex, so we need to take into account the trade-off between efficiency and simplicity.
My proposal for this is to
Circuit execution is, of course, central to all error mitigation techniques, not just ZNE. Therefore, code for handling execution - e.g., methods in BatchedFactory - should not be ZNE specific but rather should be a general utility in Mitiq.
The interface to ZNE will not be changed - execute_with_zne and associated factory methods will still accept a user-defined executor function.
Under the hood, this executor function will be wrapped into a new class, call it a Collector for now, which minimally performs the following:
This design will make it easy to define new features useful for specific error mitigation techniques. For example, in PEC there are a lot of circuits to run but many of these circuits can be identical. A task of the Collector can therefore be creating a unique set of circuits to run before calling them with the executor. I'm sure other methods will come up as well.
A skeleton for this class with the above minimal features could look like:
This fits the general pattern of error mitigation techniques we have seen:
(specifically handling the second mapping), can be used in both ZNE and PEC, and can likely be used in other techniques.
