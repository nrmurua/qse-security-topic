A common access pattern, when optimizing or analyzing a quantum circuit, is to check whether there is an operation at a particular place at a particular time. For example, when inserting into a circuit, finding the first moment that has no operation on certain qubits is necessary. cirq.Circuit supports efficient access by time, but not by place. This is fundamentally due to cirq.Moment being a list of operations.
I suggest that we refactor cirq.Moment (preserving backwards compatibility) to always have, or lazily create on demand, an internal dictionary mapping qubits to operations. This dictionary can then be used in other operations on moment, to give them better asymptotic guarantees.
Are you referring to roughly making this method cache its results / maintain a dict instead of iterating through its operations all the time?

works nicely:
Also xref #3145.
Hi @balopat, I'd like to work on this.
You got it @wingers! Thanks for taking it on!
