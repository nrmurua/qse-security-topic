The marginal_counts function in result/utils.py modifies the input result without first creating a copy, so that the original counts data in the job object is destroyed. See image.

Marginal counts should act on an independent copy of the input result/counts object, returning the marginalized counts without modifying the input.
Add this at the top of utils.py:
import copy
Add this at the start of marginal_counts:
result = copy.deepcopy(result)
This breaks the connection to the original input result object so we don't accidentally modify it.
Need to verify this works for both dict and Result type inputs for the result argument.
For users concerned about memory, could add a kwarg "in_place=False", so the new code in marginal_counts reads:
if not in_place:
result = copy.deepcopy(result)
While we're at it, update the docstring description of the indices argument. Currently it says: "The bit positions of interest to marginalize over." This description further confuses an already confusing process, since standard terminology is that the bit positions of interest are the ones NOT marginalized over. (e.g. Wikipedia page on Marginal Distribution: The distribution of the marginal variables ... is obtained by marginalizing ... over the distribution of the variables being discarded ....). Update to read "The bit positions of interest to keep (all others will be marginalized out)", after confirming that is the correct interpretation.
Hey, How do I contribute to this?
Can I work on this?
Please let me know if you wish me to assign you this issue @abhik-99. If not I can assign to @coder-mtv. Thank you both for your interest!
Sure @taalexander ! I can do this.
Closing as resolved by #4929 .
