Recently, locals were added as a dependency to the toolchain: ff9eaa8, 625daf7,  6174054, d158da0.
This causes friction and warnings, e.g. with Perl. So, I think we should instead specify the encoding explicitly.
The problem (it's just a warning, mind you) with Perl seems to be that LANG is set to en_US.UTF-8 to get a UTF-8 encoding for reading files but the environment where the cited error message comes from seems to be missing the locale (the combination of language, region and encoding).
Note: Python 3.6+ is using UTF-8 for file content and more and more software seems to be requiring a multibyte encoding. Hence setting up proper unicode-enabled locales in the Docker images explicitly rather than patching our side for explicit UTF-8 support.
In my understanding locales are for adding multi-language support to user interfaces. Since our UI is not internationalized and we always want to read utf8, we should not have to depend on the locales framework at all.
Hence setting up proper unicode-enabled locales in the Docker images
The problem is that our users have their own setup. By not relying on locals we remove one installation pain point for them. So, after 0a94460 and 0700962 is there still a reason for setting up locals?
@oschuett unfortunately many runtime environments (like Python and Perl) base their behaviour when it comes to the default encoding to be used for text files on the locale settings (which include the encoding). So, the way to get a non-locale but UTF-8 enabled environment is by setting C.UTF-8, but that does not seem to be supported by all distros yet.
By not setting a locale we are not not depending on a locale, rather we are testing our scripts against the C locale (which we have seen is not a subset). Given that all desktop installations of Linux distros, macOS and Windows usually have a locale with a multibyte encoding set (and the default SSH setting is to pass along $LANG) I would argue that by using something like C.UTF-8 or en_US.UTF-8 is closer to the average users setup rather than using C (which implies a non-multibyte encoding for many runtimes).
many runtime environments (like Python and Perl) base their behaviour when it comes to the default encoding
True. My point is that we should not depend on this default behavior, because we know that we want UTF8.
By not setting a locale we are not not depending on a locale, rather we are testing our scripts against the C locale
We'll be testing against whatever the distribution base image contains. For Fedora that's e.g. C.UTF-8.
After #1132 our Python and Perl scripts should be good. I'd suggest we then remove the locales and fix whatever else pops up.
