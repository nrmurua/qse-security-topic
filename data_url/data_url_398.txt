I use two test cases to illustrate an issue.
Case 1 - cx gates
After staq with optimization:
The cx gates have been cancelled nicely.
Case 2 - ccx gates
After staq with optimization:
The ccx gates should also cancel each other out, shouldn't they?
I read an old article, which may not be directly related to what the staq wants to achieve. Nevertheless, the authors introduced an interesting idea of removing self-annihilating sequences. I am wondering if staq could borrow the idea and repurpose it to optimize similar sequences for staq applications.
In the classical world, a decent modern IDE can use static analysis to identify a lot of redundant code, dead code, suspicious code, no-op blocks, obvious stupidity, etc., before the complier is run.  Do you think if staq can introduce a pass to target those usual suspects as well, especially the self-annihilating sequences? In the long run, that may even help the IDE vendors.
@DevelopDaily Absolutely it would be nice to have this optimization (and others)! Curiously, I thought we already had something that would do this in staq. I just had a look at the code in /include/optimization/simplify.hpp and it looks like was no rule for ccx gates. I just added a rule and pushed an update, the output for the ccx version I'm getting now is (as expected)
Thanks for pointing this out!
In general we're always looking to get more optimizations into staq, and Vlad and I both do research in quantum compiler optimizations. I've got a few in the works that will hopefully be added into staq in the future, but new ideas are always helpful too!
Indeed, ccx works well now. Thanks!
I'm glad you guys are doing research constantly in this area. I hope staq will be able to trim the fat from all kinds of obese code eventually.
Since ccx  simplification is implemented with a rule-based approach, it won't be able to deal with cccx or gates with arbitrary number of control bits. So, I will post a test case for cccx here for the record. One day, I will come back to test it:-)
