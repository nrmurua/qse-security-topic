This may be to save cycles as it is expected the programmer will not pass in uneven lists to for_each_word, but I believe it should have a warning.
If other and so forth are shorter than num_simd_words you will read off the end of the other array and will perform the pairwise operation on random memory.
This is quite sneaky as it seems safe at a glance because it ensures  is the same for all the parameters, but this isn't actually the length of the simd bit range, just the size of each word.
I can submit a pull request, but I see 3 options and figured it was worth discussion:
It'd be fine to add assert(...) statements checking to these methods, since they'd be removed in the release builds. These methods are in fact called in the hot paths of the simulators, so I'd prefer to avoid paying for bounds checks.
I'm closing this as WONTFIX, or rather... TOOLOWPRIORITYTOGETDONE because the C++ API in general is not required to be safe. Not opposed to someone doing it, though.
