Each transaction(tx) contains a signed ots index. In a situation where valid tx are not confirmed into the chain and eventually dropped from the memory pool, then a potential security risk occurs, potentially encouraging ots index re-use.
Rarely, tx propagation may fail to reach mining nodes in the usual fashion, leading to what may be termed 'stale' tx.
I would suggest the following logic to be added to memory pool management:
define 'stale' tx as any verified tx in the memory pool which have been waiting for block confirmation for x blocks (since entering verified memory pool). This will necessitate adding metadata to track tx between memory pool and block confirmation - this could be useful to produce API output offering realtime confirmation time statistics. x can be variable based upon transaction load of the network or a fixed limit such as 15 blocks.
recirculate stale transactions once the limit x has been reached.
if y blocks occurs which do not contain any transactions (excluding coinbase) then this stale tx recirculation is triggered earlier.
Suitable values for x and y can be discussed but I would suggest x=15 and y=5 for testing.
This should be node configurable in the config file.
I propose instead the following:
After each txn generation, the local wallet file OTS index is automatically incremented, and this index trumps the index that the blockchain would use. Users do not enter the index themselves through our UI, and the protocol is to use index 0, then 1, then 2...
This would make it so that when the index of the blockchain and the index of the wallet do not match, the one that is greater can trump the one that is less. Why? Because if you have multiple places your wallet is stored, and lose your most used wallet, your old backups will not have a reliable index. Thus, the blockchain should be relied upon. However, other times, your txn is simply stale and so the blockchain will not update your OTS index. In these cases, the local wallet file could be relied upon.
The ultimate solution to this issue is having an optional type of transaction that is stateless in order to "reset" the state of your wallet (by sending all your funds to a new wallet with no state issues) with 0 chance of using an index you've already used. For example, SPHINCS. This would only be used for recovery purposes as it is too expensive to use for anything else.
Thanks for the suggestions, i think we have to take the opposite approach and only trust the blockchain data because most users will access the QRL via a simple webwallet approach. Thus the onus is actually upon making ots_key re-use impossible.
If a user has a Ledger or other hardware wallet and only accesses the QRL from that device then they can always override the situation of a dropped tx (although this should be impossible once propagated to the network) by simply continuing upwards and skipping the missed ots_index. This would of course be completely safe as no repeat signings have occurred in this instance.
So I vote we update transaction repropagation as suggested in the OP.
A transaction in the pool is now considered as stale txn on the basis of blocknumber, for now its configured as 15. Transaction pool is checked for stale txn, each time a block is added to the mainchain.
PR #1241
