Currently, if we try to pickle a qiskit function with cloudpickle we get the following error. The expected behavior is that it doesn't give this error:
Error:
I think making these functions cloudpickle-able is a nice to have feature for remote execution.
The issue you're hitting isn't actually an issue in Aer, it's in your reproduce code. The infinite recursion is because you're trying to serialize the lazy loader class directly by embedding qiskit.Aer inside a function. That class (which is part of qiskit-terra not qiskit-aer) isn't serializable by design. It's intended to be nothing but a compatibility shim that lazy loads aer to ensure an earlier API is respected without force aer to imported by terra on loading. To fix this you would need to change Aer.get_backend('statevector_simulator')) to qiskit.providers.aer.backends.StatevectorSimulator(). In other words running:
works locally for me.
That being said do note that backend objects are generally not serializeable as they often contain things like async execution handles or other objects which can't be serialized. Aer works because we have wrappers around the compiled extensions that can handle this for us.
I'm going to close this issue as I don't think there is anything else to do here. But please feel free to reopen it if I'm missing something or there is more to discuss on this.
