@christianpaquin, what's the relationship between kex_sidh_msr and kem_sike?  I'm looking at master-new-api branch and thinking about which algorithms can be deleted because of replacements being present.  We have kem_sike on master-new-api branch, so does that mean kex_sidh_msr could go?
Hmm, the kex_sidh_msr lib contains both SIKE and SIDH; both exposed through OQS-master's current KEX API. The SIKE code should be the same. Are we planning to get rid of the KEX API completely in the new master? If not, then we could keep KEX/SIDH and KEM/SIKE. Otherwise, perhaps expose SIDH as a KEM. As we discussed some time ago, perhaps it would be useful to expose a DH API for such schemes.
By DH API, you mean a four-method API -- keygen_A, keygen_B, secretagreement_A, secretagreement_B -- right?
My eventual plan was to completely get rid of the KEX API in master.  I think the new KEM API covers the same functionality (three-method API) in a simpler way (not needing to carry the OQS_KEX and OQS_RAND objects around).
So the choice would be between exposing SIDH as a KEM or adding a new 4-method API and exposing SIDH under that.
Just for my understanding, what is the different between SIDH and SIKE?
Yes, I mean a 4-method API. Transitioning from KEX to KEM is fine, and we can tunnel SIDH through the KEM API as it currently is in the KEX API (and if we ever decide to expose a 4-method DH API, we can surface it there too).
SIDH and SIKE are slightly different protocol, and both are useful to construct other more sophisticated authenticated key exchange protocols; so there is value in keeping SIDH.
Okay, let's plan to raise it via the 3-method KEM API for now. If we see some more examples of 4-method DH candidates, then we can consider an API for them; but given the amount of infrastructure we have associated with a family (example_kem, speed_kem, test_kem, Makefiles, ...), let's hold off until we have a clear need.
