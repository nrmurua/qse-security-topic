Hi all,
I'm new in quantum computing and I'm trying to implement a noise model to apply to my quantum circuit. I'm not very friendly with the documentation really.
I was trying to do something like this:
qubits = cirq.LineQubit.range(N)
circuit = cirq.Circuit()
The query is, how can I apply this non-unitary channel to my circuit? I suppose in that way a create just the channel without applying it.
Is possible to implement a noise model in another way?
Thanks to anyone will answer me!
Each of the statements like cirq.PhaseDampingChannel(0.2).on(qubits[q]) produces an Operation that you can append into your Circuit. One way to do this could be:
This adds each of the operations corresponding to the noise channels in the for loop into the circuit at the end. If we call (for N=3)  print(circuit), I get the below output. Is this what you are expecting?
0: ───PD(0.2)───PD(0.2)───D(0.2)───PF(0.3)───BF(0.3)───
1: ───PD(0.2)───PD(0.2)───D(0.2)───PF(0.3)───BF(0.3)───
2: ───PD(0.2)───PD(0.2)───D(0.2)───PF(0.3)───BF(0.3)───
I did this way, but now I have a new issue... what kind of simulator can I use to simulate that non unitary-matrices ?
You have a couple of options. This one will give you access to the density matrix of your qubit system.
This one will behave such that if it encounters one of these channels, it will generate a random number to decide which of the unitaries that make up the channel to apply. For example, with a Bit Flip channel of with probability 0.3, it will apply an X gate with 0.3 probability and do nothing with 0.7 probability.
I already used cirq.Simulator() but it doesn't work because of:
Can't simulate unknown operations that don't specify a unitary method, a decompose method, (has_unitary + apply_unitary) methods,(has_mixture + mixture) methods, or are measurements.: cirq.phase_damp(gamma=0.2).on(cirq.LineQubit(0))
So I thought exist another simulator to do this, or I have to add some option to the noise gate...
Ah I see. I had thought these channels all had mixtures specified and so I expected cirq.Simulator() to work. The DensityMatrixSimulator option should still work though.
Thanks @c-poole ! DensityMatrixSimulator work, but I have a N=18 qubit circuit to simulate so it need too much computational resources and kernel die. I'll try different way.
PhaseDampening channels have the same effect on a density matrix as a phase flip channel, probably with some need to translate between the input arguments based on the way they are defined in cirq. You could get away with just dropping the phase dampening channel and moving on to regular Simulator which will perform the Monte-Carlo simulation I described in a previous comment.
Hmmm, it is kinda confusing that cirq.Simulator doesn't work on noisy circuits. Maybe we should try to generalize it to be more of a "just works" simulator.
You can use cirq.sample on any circuit. It will pick an appropriately fast or general simulator as needed.
Prints e.g.
a=1111110111111101111111101111111011111111111110111111111111111111101111111111111111111111001111101110
As this is more of a question than a bug, something that would get better help from the quantum computing stack exchange than here, I am going to close this issue.
