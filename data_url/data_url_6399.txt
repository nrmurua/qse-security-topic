In Shor's paper on factoring with a quantum computer, he describes how multiplication modulo N, on a register of log(N)/log(2) qubits, can be accomplished. It involves unitary multiplication with a carry register, as Qrack already has, followed by CNOT-ing the primary (low) register into a third register, followed by "uncomputing" the original multiplication. This leaves the original register from before multiplication, entangled with a register holding multiplication modulo N.
My emphasis above is exactly the problem: the original register and the desired result must be entangled, in the general case. It is not possible for this operation to be "in place." The result would not be unitary, or able to be accomplished with a combination of unitary operations and measurements. (See the top of page 10 of https://arxiv.org/abs/quant-ph/9508027 and think about what I'm saying.)
It's not possible to do this operation "in place." However, we can save some rigamarole and overhead in a third register by providing an operation which takes a value in an input register and entangles it with an output register of the same length containing the result of multiplication modulo N, bypassing the need for a third register of same size.
This issue is a "to-do" item for me, tomorrow. This is just a reminder to do this when I wake up, and a record to catalog the reasoning behind the development.
I look forward to seeing the patch!
The last step would be to uncompute the setup of the input register (such as by subtracting the input value). Let's do it in pieces, with this first.
(See https://github.com/vm6502q/qrack/tree/mulmodnout.)
I've got an even better one, for you: out-of-place exp() modulo N. It'll be coming up after lunch.
...Rather, a^x mod N, but the point is we can bypass every step to get there and just do it directly, out-of-place.
(Resolved by #192.)
