This is a fairly low hanging fruit; without nnan and ninf, for example, LLVM will not optimize multiplications by zero into constant zero.
The drawbacks are described in http://llvm.org/releases/3.5.0/docs/LangRef.html#fast-math-flags. There is an additional (separate) reassociate pass that performs algebraically equivalent transformations that can nevertheless affect precision.
Should we enable them? This gives a speedup of 180us to 100us on PulseRateDDS when it cannot hoist floating point instructions out of the loop.
@sbourdeauducq, @jordens ?
Fine IMO if clearly documented.
This can't be enabled on a per function basis, right?
Otherwise LGTM. I have yet to encounter a case in my code where that would matter.
This can be enabled on a function basis but it needs yet another piece of syntax, and I don't really know what to use for it.
Well, as it happens I already invented the syntax for syscalls, so I made it enabled on per-function basis. I also made it disabled by default because it is a deviation from what Python normally does and e.g. getting different results in a portable function is no good.
No docs?
