Application
It is common for optimization practitioners to use labels to refer to cases of discrete variables in the same way as one does binary variables (e.g. "x11", "x12", "x13" for a discrete variable "x1" with three cases).
Another use case is where the cases of different variables have the same meaning, but the variables have a different number (or set) of cases.  For example, say variable "c1" has cases "red", "green", and "blue", and variable "c2" has cases "blue", and "yellow", and "brown".
DQM currently only supports the use of integers 0 .. N-1 to identify cases of variables with N cases.
Proposed Solution
Summary
Introduce an ability to refer to cases of discrete variables using labels, as an alternative to integers.  Case labels may be model-unique (unique within a model), or shared (unique within each variable, but shared among variables).
Model-unique case labels are useful as they are a type of notation that is familiar to optimization practitioners.  These are semantically equivalent to sets of binary variables subject to one-hot constraints.
Shared case labels are useful in that they allow cases to be labeled consistently by variables that have different numbers or sets of cases.
High-level Design
CaseLabelDQM Methods
add_variable(cases, label=None)
accept Iterable as value for cases parameter in addition to int.
when cases is an Iterable:
when cases is an int:
get_linear(v)
set_linear(v, biases)
get_linear_case(v, case)
set_linear_case(v, case, bias)
get_quadratic(u, v)
set_quadratic(u, v, biases)
get_quadratic_case(u, u_case, v, v_case)
set_quadratic_case(u, u_case, v, v_case, bias)
DQMCaseLabelComposite Behavior
Alternatives Considered
Additional Context
A prototype of CaseLabelDQM, implementing shared case labels, is used in the crop rotation example.
REQUIREMENT:
users submitting a CLDQM to LeapHybridDQMSampler must see either an error or a properly case-labeled Sampleset (what CLDQMComposite would return)
if CLDQM.to_file() does not raise NotImplementedError, we must implement faithful serialization, i.e. a new binary format.
DESIGN:
define CLDQM.to_file() and have it raise NotImplementedError.
IMPLEMENTATION DETAIL:
As an alternative, we could update LeapHybridDQMSampler to handle CLDQM directly, and not have to implement a composite at all.
Pro:
Con:
I am liking this alternative.
How about this: do implement support for CLDQM in LeapHybridDQMSampler but in a generic, loosely coupled way:
Looked into implementing CLDQM._filter_sampleset() and concluded that it's not the right approach here.  Putting arbitrary objects in a numpy.recarray is possible but will likely violate some assumptions and cause problems.  Decided that a utility method (CLDQM.map_sample()) is better.  That has been implemented in #844.
Cool, this is done from my perspective.
Thanks @seatim!
