Basically implements a proxy to a register of another module
This is what I had i mind with #109
I started this and realized we needed a clearer specification.
The object Proxy(BaseProperty) is a descriptor and therefore initialized at class creation. The simplest implementation would forward everything (i.e. by using getattribute and setattr) to the target module. The target module could be specified as a "path", e.g.
class Input():
frequency_proxy = Proxy(path="self.iq.frequency")
where we could of course drop the "self".
This implementation has the advantage that it is quite generic (independent of the type of attribute - even holds for any kind of object).
The first problem comes from signal emission. In principle, we want to re-emit all signals that the target emits also in the new module environment. In particular, this is 'update_attribute_by_name', but also 'change_options' for select registers. The signal connection can only be made when the objects are instantiated. This already requires a call to the that the module, for example trough its getter, which must be implemented by the init function of the hosting module but can surely be done, in a similar fashion as we currently initialize submodules.
The last problem is that it when we make RegisterProperties, i.e. proxy objects that refer to a register, we do not necessarily want to read from the register every time we ask for the property value (in the case of settings only, of course).
We could specify this with a flag, i.e. target_changes_silently=True/False.
-> I suggest we only stick to the 'True' option for now, leaving the False option as a future enhancement.
implemented, must be tested on InputIq for example
