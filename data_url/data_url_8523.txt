There seems to be something special about the value 1e-12 for Qobjs. Multiplying a Qobj with a float<1e-12 makes all entries 0.0. This can be worked-around as follows:
But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators' values are all >1e-12:
It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current behaviour.
That is done on purpose to zero out small elements that are close to zero. In the qutip docs it tells you how to turn off this auto tidy feature. That being said, what is theuse case   where 1e-12 elements are important?  Did you make the problem unitless?
-P
On Aug 24, 2016, at 05:23, emeyerscott notifications@github.com wrote:
There seems to be something special about the value 1e-12 for Qobjs. Multiplying a Qobj with a float<1e-12 makes all entries 0.0. This can be worked-around as follows:
import qutip as qt
print "Multiplying states by small numbers"
state3 = qt.ket([0])_1e-12
state2 = qt.ket([0])_9.999e-13
state1 = qt.ket([0])
state1 = qt.Qobj(state1.data*9.999e-13)
print 'Desired:', state3
print 'Undesired:', state2
print 'Desired, via workaround:', state1
Multiplying states by small numbers
Normal behaviour: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket
Qobj data =
[[  1.00000000e-12]
[  0.00000000e+00]]
Undesired: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket
Qobj data =
[[ 0.]
[ 0.]]
Desired, via workaround: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket
Qobj data =
[[  9.99900000e-13]
[  0.00000000e+00]]
But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators's values are all >1e-12:
print "Expectation values with small operators"
detector = qt.Qobj([[1e-12, 0], [0, 0]])
print 'Expectation value for one detector, 1e-12:', qt.expect(detector, qt.ket([0]))
detector = qt.Qobj([[1e-6, 0], [0, 0]])
print 'Expectation value for two detectors, 1e-6:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0])))
detector = qt.Qobj([[1e-14, 0], [0, 0]])
print 'Expectation value for one detector, 1e-14:', qt.expect(detector, qt.ket([0]))
detector = qt.Qobj([[1e-7, 0], [0, 0]])
print 'Expectation value for two detectors, 1e-7:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0])))
Expectation values with small operators
Expectation value for one detector, 1e-12: 1e-12
Expectation value for two detectors, 1e-6: 1e-12
Expectation value for one detector, 1e-14: 1e-14
Expectation value for two detectors, 1e-7: 0.0
It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current behaviour.
â€”
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub, or mute the thread.
Untracked with Trackbuster
Thank you. Turning off auto tidy of course fixes my issue.
I use QuTiP for quantum photonics, where our down-conversion probabilities are of order 1e-7, and sometimes we do two cascaded. This tiny photon component is nonetheless measurable in the lab, and QuTiP is really helpful to predict rates and noise. I guess the problem is unitless in the sense that these small elements are directly the photon probability amplitudes.
