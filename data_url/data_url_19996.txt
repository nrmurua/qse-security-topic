The implementation taken from PQClean is based on the 2020-10-01 specification, and the latest version is 2021/06/06. The latest specification uses KECCAK for domain separation and randomness.
Actually the latest version is the Round 4 version, which is available from the NIST website but not from the HQC website, strangely.
@jschanck I was looking at the patches you created for HQC as part of packaging for PQClean, and it seems like you did a pretty extensive rewrite in parts. Can you comment a little on that? In terms of updating patches for the new version, would you recommend starting by trying to modify the patches or by starting from the new code from scratch?
If I remember correctly the implementation had a number of memory safety issues. If the latest version passes tests with ASAN enabled, I'd say throw away my patches and start fresh.
HQC has a constant-time security problem: PQClean/PQClean#482
Ah, and #995 was already known as well.
Note that the Optimized_Implementation and the Additional_Implementation in the round 4 submission follow a different spec. The latter is made to be compatible with the hardware implementation, but e.g. still uses the timing side-channel vulnerable rejection sampling.
A clean implementation that is also constant-time therefore cannot (easily) be based on the Additional_Implementation.
Looking at what's the biggest obstacle to an 0.9.0 release it seems to be this issue. Would you agree, @SWilson4 ? Any suggestions how to tackle this?
Given the latest comment above, it appears to be moot to include the HQC code from 2021 as stated at the beginning of the issue but rather directly jump to the round4/2022 code, right?
Looking at those variants, I'd further wonder which of the different alternatives should be integrated ("Reference", "Optimized", "Additional", "Hardware")? From a safety perspective, only the "Additional" code appears to be a sensible addition, as it seems to address #995.
Next, as liboqs imports this from PQClean and reading PQClean/PQClean#482 (comment) it doesn't seem likely this is a topic of active work in PQClean/will be resolved soon, right?
So the underlying question is: Does anyone care about (using/test-driving) HQC? If not, what about the idea to only include the latest "Additional" code (for completeness of liboqs and resolution of #995), possibly "bypassing" PQClean (or working there to resolve PQClean/PQClean#482)? Or to drop this issue from the 0.9.0 release (if really no-one has an interest in (using the latest code of) HQC)?
@christianpaquin : Does the NCCoE project have any interest in (the latest code of) this algorithm? Is the constant-time property more valuable than an optimized variant?
@dstebila : Are you in contact with any authors of HQC to ask whether they would see value in seeing the latest code integrated here/used/tested in TLS etc (and have a recommendation as to which variant to integrate)?
I've taken a glance through the latest HQC submission over the past couple of days. Here are my thoughts:
Given the latest comment above, it appears to be moot to include the HQC code from 2021 as stated at the beginning of the issue but rather directly jump to the round4/2022 code, right?
Yes, we should jump straight to the latest (and, hopefully, most secure) iteration.
Looking at those variants, I'd further wonder which of the different alternatives should be integrated ("Reference", "Optimized", "Additional", "Hardware")? From a safety perspective, only the "Additional" code appears to be a sensible addition, as it seems to address #995.
Next, as liboqs imports this from PQClean and reading PQClean/PQClean#482 (comment) it doesn't seem likely this is a topic of active work in PQClean/will be resolved soon, right?
That seems like a fair assessment to me.
Looking at what's the biggest obstacle to an 0.9.0 release it seems to be this issue. Would you agree, @SWilson4 ? Any suggestions how to tackle this?
My suggestions would be to
Thoughts on this approach, @dstebila,  @thomwiggers, and @baentsch?
if we take this route, I'd be happy to take on the task of putting together the "clean" implementation. It seems fairly straightforward to me; I don't think major revisions will be required.
Finally, I think this issue is on a different trajectory from the other updates slated for 0.9.0, so I'm inclined to roll the HQC updates into a future release.
Follow-up question: will we want to update the AVX2 version at the same time as the "clean" version? If so, I could take that on as well, with the caveat that there will be a bit of a learning curve.
FWIW, LGTM, @SWilson4 . Thanks for taking this on!
Sounds good to me
