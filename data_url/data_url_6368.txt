[ 47%] Linking CXX executable examples/grovers
libqrack.a(opencl.cpp.o): In function int cl::CommandQueue::enqueueFillBuffer<std::complex<double> >(cl::Buffer const&, std::complex<double>, unsigned long, unsigned long, std::vector<cl::Event, std::allocator<cl::Event> > const*, cl::Event*) const': opencl.cpp:(.text._ZNK2cl12CommandQueue17enqueueFillBufferISt7complexIdEEEiRKNS_6BufferET_mmPKSt6vectorINS_5EventESaIS9_EEPS9_[_ZNK2cl12CommandQueue17enqueueFillBufferISt7complexIdEEEiRKNS_6BufferET_mmPKSt6vectorINS_5EventESaIS9_EEPS9_]+0x70): undefined reference to clEnqueueFillBuffer'
CMakeFiles/grovers.dir/examples/grovers.cpp.o: In function cl::Device::~Device()': **grovers.cpp:(.text._ZN2cl6DeviceD2Ev[_ZN2cl6DeviceD5Ev]+0x14): undefined reference to clReleaseDevice'**
libqrack.a(oclengine.cpp.o): In function Qrack::OCLEngine::MakeProgram(bool, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<Qrack::OCLDeviceContext>)': oclengine.cpp:(.text+0x2081): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x212c): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x218b): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x2404): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x2822): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function Qrack::OCLEngine::InitOCL(bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)': oclengine.cpp:(.text+0x3a6a): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x3cf2): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x437e): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x44dd): undefined reference to clCreateCommandQueueWithProperties' oclengine.cpp:(.text+0x45b3): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x48c1): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x4a07): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x4ace): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x4e96): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x4fd3): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x51a1): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x52b2): undefined reference to clRetainDevice' oclengine.cpp:(.text+0x54dc): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x5500): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x5559): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x585c): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x5938): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o):oclengine.cpp:(.text+0x5aa6): more undefined references to clReleaseDevice' follow libqrack.a(oclengine.cpp.o): In function cl::detail::Wrapper<_cl_device_id>::Wrapper(cl::detail::Wrapper<_cl_device_id> const&)':**
oclengine.cpp:(.text.ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4[ZN2cl6detail7WrapperIP13_cl_device_idEC5ERKS4]+0x29): undefined reference to clRetainDevice' libqrack.a(oclengine.cpp.o): In function cl::detail::Wrapper<_cl_device_id*>::operator=(cl::detail::Wrapper<_cl_device_id*> const&)':
oclengine.cpp:(.text.ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4[ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4]+0x41): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_[_ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_]+0x56): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function cl::CommandQueue::CommandQueue(cl::Context const&, cl::Device const&, unsigned long, int*)': oclengine.cpp:(.text._ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEmPi[_ZN2cl12CommandQueueC5ERKNS_7ContextERKNS_6DeviceEmPi]+0x162): undefined reference to clCreateCommandQueueWithProperties'
libqrack.a(oclengine.cpp.o): In function std::vector<cl::Device, std::allocator<cl::Device> >::~vector()': oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EED2Ev[_ZNSt6vectorIN2cl6DeviceESaIS1_EED5Ev]+0x34): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::pair<cl::Device, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~pair()': oclengine.cpp:(.text._ZNSt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev[_ZNSt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev]+0x32): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::vector<std::pair<cl::Device, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<cl::Device, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~vector()': oclengine.cpp:(.text._ZNSt6vectorISt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS9_EED2Ev[_ZNSt6vectorISt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS9_EED5Ev]+0x75): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::vector<std::vector<cl::Device, std::allocator<cl::Device> >, std::allocator<std::vector<cl::Device, std::allocator<cl::Device> > > >::~vector()': oclengine.cpp:(.text._ZNSt6vectorIS_IN2cl6DeviceESaIS1_EESaIS3_EED2Ev[_ZNSt6vectorIS_IN2cl6DeviceESaIS1_EESaIS3_EED5Ev]+0x5c): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::vector<cl::Device, std::allocator<cl::Device> >::_M_default_append(unsigned long)': oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE17_M_default_appendEm[_ZNSt6vectorIN2cl6DeviceESaIS1_EE17_M_default_appendEm]+0x191): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o):oclengine.cpp:(.text._ZNSt23_Sp_counted_ptr_inplaceIN5Qrack16OCLDeviceContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv[_ZNSt23_Sp_counted_ptr_inplaceIN5Qrack16OCLDeviceContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv]+0x10b): more undefined references to clReleaseDevice' follow libqrack.a(oclengine.cpp.o): In function void std::vector<cl::Device, std::allocatorcl::Device >::_M_range_insert<__gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > > >(__gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > >, __gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > >, __gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > >, std::forward_iterator_tag)':
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x22c): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x2e9): undefined reference to clReleaseDevice'
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x34f): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x387): undefined reference to clReleaseDevice'
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x3ea): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x4b3): undefined reference to clRetainDevice'
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x4e9): undefined reference to `clReleaseDevice'
collect2: error: ld returned 1 exit status
CMakeFiles/grovers.dir/build.make:96: recipe for target 'examples/grovers' failed
make[2]: *** [examples/grovers] Error 1
CMakeFiles/Makefile2:67: recipe for target 'CMakeFiles/grovers.dir/all' failed
make[1]: *** [CMakeFiles/grovers.dir/all] Error 2
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2
A make all gives off the linking error above. Can't remember I've seen that before.
Any idea what is going wrong here ?
Configuration is on Ubuntu 18
At first glance, it looks like it's just the (C language) OpenCL API. Maybe the library argument order needs to be changed, passed to the linker? I haven't seen that before, but it might be a problem with the OpenCL library itself. Maybe it's selecting v3, (should explicitly select v2 already, though,) or the vendor version of v2 is incomplete? (The coverage was demanding for v2, and spotty in places, hence the specification of v3 that makes everything past v1.2 optional.) In the CMake files, you could try changing the macro for OCL version to select 1.2; Qrack intends to support v1.2 with no major deficit, I think just without out-of-order queue execution, is all.
Ah, that's all the hint I needed for this: GFX card supports OpenCL 1.1 only ( it's ancient ) but I need some smaller cards beside the large Tesla to do some misc. work. WIll look to replace this with a newer model.
Number of devices                                 1
Device Name                                     GeForce GTX 260
Device Vendor                                   NVIDIA Corporation
Device Vendor ID                                0x10de
Device Version                                  OpenCL 1.0 CUDA
Driver Version                                  340.108
Device OpenCL C Version                         OpenCL C 1.1
@twobombs I have news: QPager work has motivated me to experiment with Qrack in a cluster environment, again, (I hacked together what's basically a minimal Beowulf cluster out of 2 Alienware 17s,) and it looks like SnuCL is likely my best, publicly-available choice of heterogeneous OpenCL for a cluster environment. Whether I use SnuCL or an alternative like VirtualCL, both of those fully support 1.1, and they might not offer 1.2. So, you might get OpenCL v1.1 support, optional, in the process. It's probably not ridiculously hard to do. (Reopening this issue, and hopefully I'll have something for you to test on that v1.1 device by the end of the weekend.)
Would be interesting to see this work on v.1.1 however I do hope that not too much speed nor optimisations that are native to v.1.2+ would be sacrificed in the process. In the mean time I'm plucking the fruits of my work on HELM, Rancher 2 and K8s so that one can start qrack workloads on nodes with the click of a mouse. Native GPU support in container images remain elusive except for some smaller Intel OCL devices. Drivers for both AMD & NV have dmks requirements that so far most of the time can't be met in a container enviroment. Work on that continues.
From that commit above, the branch should compile for OpenCL v1.1. We sacrifice virtually nothing in terms of optimization. The 2.0+ standard may allow out-of-order queue execution, which is optional, used if detected, and maybe not even significant in performance advantage, for us. I'm curious whether my solution to replace clEnqueueFillBuffer() might be more efficient, as we (basically) only ever rely on that API for filling buffers with 0 values, and we do not require its full generality. I hear reports that certain ad hoc alternatives to it are better, but the solution I have implemented should use no additional host (or device) RAM.
Note, I also improved some previously blocking host code on the engine for SetPermutation(), upon having reason to refactor it, and that method should now be totally asynchronous. I think we sacrifice nothing, if you'd like to try that branch, but it will contain code that compiles for SnuCL, before I open a PR.
The last commit fixes a concurrency problem with reuse of the permutationAmp property (or even 2 of them, like I previously thought to try). Problem is, SetAmplitude() can be called many times at once, asynchronously, but the C-based OpenCL API won't hold onto a shared_ptr, for example, so it needs a raw pointer that's retained, and not free for multiple asynchronous usage at once. Unfortunately, this means we need to clear the QEngine-instance-specific OpenCL queue before updating this memory before dispatching the tail of SetAmplitude(), but, (beautifully,) SetPermutation() always completely supersedes any queued SetPermutation() or SetAmplitude() kernels, and the permutationAmpproperty will not be written to asynchronously, only read from, so SetPermutation() can stay totally asynchronous, which is the more important case.
SetAmplitude() could be made asynchronous, in an obvious way, but it's significant investment and complication to do so, and this is a "pseudo-physical" API method that I would discourage user code from relying on directly, anyway. (If anyone has good reason to make many repeated calls to SetAmplitude(), let me know, and I'll likely be able to show you a better way to accomplish the same thing, but I'll "invest" in an async implementation if your reason is actually good.)
I see the same error. However, looking more carefully at the clinfo I found that the driver supports OCL 1.1 , the device seems to be OCL 1.0 capable...
Number of platforms                               1
Platform Name                                   NVIDIA CUDA
Platform Vendor                                 NVIDIA Corporation
Platform Version                                OpenCL 1.1 CUDA 6.5.51
Platform Profile                                FULL_PROFILE
Platform Extensions                             cl_khr_byte_addressable_store cl_khr_icd cl_khr_gl_sharing cl_nv_compiler_options cl_nv_device_attribute_query cl_nv_pragma_unroll cl_nv_copy_opts
Platform Extensions function suffix             NV
Platform Name                                   NVIDIA CUDA
Number of devices                                 1
Device Name                                     GeForce GTX 260
Device Vendor                                   NVIDIA Corporation
Device Vendor ID                                0x10de
Device Version                                  OpenCL 1.0 CUDA
Driver Version                                  340.108
Device OpenCL C Version                         OpenCL C 1.1
Device Type                                     GPU
Device Topology (NV)                            PCI-E, 05:00.0
Device Profile                                  FULL_PROFILE
Device Available                                Yes
Compiler Available                              Yes
Max compute units                               27
Max clock frequency                             1566MHz
Compute Capability (NV)                         1.3
Max work item dimensions                        3
Max work item sizes                             512x512x64
Max work group size                             512
Preferred work group size multiple              32
Warp size (NV)                                  32
Preferred / native vector sizes
char                                                 1 / 1
short                                                1 / 1
int                                                  1 / 1
long                                                 1 / 1
half                                                 0 / 0        (n/a)
float                                                1 / 1
double                                               1 / 1        (cl_khr_fp64)
Half-precision Floating-point support           (n/a)
Single-precision Floating-point support         (core)
Denormals                                     No
Infinity and NANs                             Yes
Round to nearest                              Yes
Round to zero                                 Yes
Round to infinity                             Yes
IEEE754-2008 fused multiply-add               Yes
Support is emulated in software               No
Correctly-rounded divide and sqrt operations  No
Double-precision Floating-point support         (cl_khr_fp64)
Denormals                                     Yes
Infinity and NANs                             Yes
Round to nearest                              Yes
Round to zero                                 Yes
Round to infinity                             Yes
IEEE754-2008 fused multiply-add               Yes
Support is emulated in software               No
Address bits                                    32, Little-Endian
Global memory size                              939196416 (895.7MiB)
Error Correction support                        No
Max memory allocation                           234799104 (223.9MiB)
Unified memory for Host and Device              No
Integrated memory (NV)                          No
Minimum alignment for any data type             128 bytes
Alignment of base address                       2048 bits (256 bytes)
Global Memory cache type                        None
Image support                                   Yes
Max number of samplers per kernel             16
Max 2D image size                             4096x16383 pixels
Max 3D image size                             2048x2048x2048 pixels
Max number of read image args                 128
Max number of write image args                8
Local memory type                               Local
Local memory size                               16384 (16KiB)
Registers per block (NV)                        16384
Max number of constant args                     9
Max constant buffer size                        65536 (64KiB)
Max size of kernel argument                     4352 (4.25KiB)
Queue properties
Out-of-order execution                        Yes
Profiling                                     Yes
Profiling timer resolution                      1000ns
Execution capabilities
Run OpenCL kernels                            Yes
Run native kernels                            No
Kernel execution timeout (NV)                 No
Concurrent copy and kernel execution (NV)       Yes
Number of async copy engines                  1
Device Extensions                               cl_khr_byte_addressable_store cl_khr_icd cl_khr_gl_sharing cl_nv_compiler_options cl_nv_device_attribute_query cl_nv_pragma_unroll cl_nv_copy_opts  cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64
Compile log:
[ 47%] Linking CXX executable examples/grovers
CMakeFiles/grovers.dir/examples/grovers.cpp.o: In function cl::Device::~Device()': grovers.cpp:(.text._ZN2cl6DeviceD2Ev[_ZN2cl6DeviceD5Ev]+0x14): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function Qrack::OCLEngine::MakeProgram(bool, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<Qrack::OCLDeviceContext>)': oclengine.cpp:(.text+0x2168): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x223c): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x229b): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x2534): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x28c8): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function Qrack::OCLEngine::InitOCL(bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)': oclengine.cpp:(.text+0x3a15): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x3bda): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x427f): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x43db): undefined reference to clCreateCommandQueueWithProperties' oclengine.cpp:(.text+0x44ab): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x47e1): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x4918): undefined reference to clRetainDevice'
oclengine.cpp:(.text+0x49df): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x4dde): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x4f36): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x50d1): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x5203): undefined reference to clRetainDevice' oclengine.cpp:(.text+0x53fc): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x5428): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x5481): undefined reference to clReleaseDevice'
oclengine.cpp:(.text+0x57a8): undefined reference to clReleaseDevice' oclengine.cpp:(.text+0x584d): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o):oclengine.cpp:(.text+0x59d0): more undefined references to clReleaseDevice' follow libqrack.a(oclengine.cpp.o): In function cl::detail::Wrapper<_cl_device_id*>::Wrapper(cl::detail::Wrapper<_cl_device_id*> const&)':
oclengine.cpp:(.text.ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4[ZN2cl6detail7WrapperIP13_cl_device_idEC5ERKS4]+0x29): undefined reference to clRetainDevice' libqrack.a(oclengine.cpp.o): In function cl::detail::Wrapper<_cl_device_id*>::operator=(cl::detail::Wrapper<_cl_device_id*> const&)':
oclengine.cpp:(.text.ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4[ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4]+0x41): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_[_ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_]+0x56): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function cl::CommandQueue::CommandQueue(cl::Context const&, cl::Device const&, unsigned long, int*)': oclengine.cpp:(.text._ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEmPi[_ZN2cl12CommandQueueC5ERKNS_7ContextERKNS_6DeviceEmPi]+0x162): undefined reference to clCreateCommandQueueWithProperties'
libqrack.a(oclengine.cpp.o): In function std::vector<cl::Device, std::allocator<cl::Device> >::~vector()': oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EED2Ev[_ZNSt6vectorIN2cl6DeviceESaIS1_EED5Ev]+0x34): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::pair<cl::Device, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~pair()': oclengine.cpp:(.text._ZNSt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev[_ZNSt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev]+0x32): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::vector<std::pair<cl::Device, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<cl::Device, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~vector()': oclengine.cpp:(.text._ZNSt6vectorISt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS9_EED2Ev[_ZNSt6vectorISt4pairIN2cl6DeviceENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS9_EED5Ev]+0x75): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::vector<std::vector<cl::Device, std::allocator<cl::Device> >, std::allocator<std::vector<cl::Device, std::allocator<cl::Device> > > >::~vector()': oclengine.cpp:(.text._ZNSt6vectorIS_IN2cl6DeviceESaIS1_EESaIS3_EED2Ev[_ZNSt6vectorIS_IN2cl6DeviceESaIS1_EESaIS3_EED5Ev]+0x5c): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o): In function std::vector<cl::Device, std::allocator<cl::Device> >::_M_default_append(unsigned long)': oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE17_M_default_appendEm[_ZNSt6vectorIN2cl6DeviceESaIS1_EE17_M_default_appendEm]+0x191): undefined reference to clReleaseDevice'
libqrack.a(oclengine.cpp.o):oclengine.cpp:(.text._ZNSt23_Sp_counted_ptr_inplaceIN5Qrack16OCLDeviceContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv[_ZNSt23_Sp_counted_ptr_inplaceIN5Qrack16OCLDeviceContextESaIS1_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv]+0x10b): more undefined references to clReleaseDevice' follow libqrack.a(oclengine.cpp.o): In function void std::vector<cl::Device, std::allocatorcl::Device >::_M_range_insert<__gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > > >(__gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > >, __gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > >, __gnu_cxx::__normal_iterator<cl::Device*, std::vector<cl::Device, std::allocatorcl::Device > >, std::forward_iterator_tag)':
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x22c): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x2e9): undefined reference to clReleaseDevice'
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x34f): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x387): undefined reference to clReleaseDevice'
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x3ea): undefined reference to clRetainDevice' oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x4b3): undefined reference to clRetainDevice'
oclengine.cpp:(.text._ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag[_ZNSt6vectorIN2cl6DeviceESaIS1_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS1_S3_EEEEvS8_T_S9_St20forward_iterator_tag]+0x4e9): undefined reference to `clReleaseDevice'
collect2: error: ld returned 1 exit status
CMakeFiles/grovers.dir/build.make:96: recipe for target 'examples/grovers' failed
make[2]: *** [examples/grovers] Error 1
CMakeFiles/Makefile2:67: recipe for target 'CMakeFiles/grovers.dir/all' failed
make[1]: *** [CMakeFiles/grovers.dir/all] Error 2
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2
I find it strange that an installed driver causes this behaviour; I installed the POCL ICD on top of the NV ICD and got the same behaviour. I will look into compiling this on different hardware configurations to see if I can replicate this behaviour on other older and newer devices with combinations against the POCL ICD that I've been using inside the docker images for more then a year and always work(tm)
I worked around this issue by compiling Qrack under POCL only and then after compilation added the NVidia driver for the GTX260. That worked; now I've got a GTX260 crunching numbers. It is very useful to get even older acceleration hardware going because the gain for performance/watt compared to CPU is enourmous.
The K80 is ~100x faster then a 24 core AMD dual motherboard with 100 watt less power consumption.
Those lesser OCL v1.1 cards will add to the pile for the lower qbit counts.
The GTX260 does 24 qbits with m=-1 , the AMD R9-290x 25 and the NV-K80 27 qubits.


That's super encouraging! I get a certain "kick" out of supporting hardware that old, (really, not that old,) though that's definitely a philosophical priority for Qrack. Sorry that we don't (yet) support back to 1.0, but that might be significantly more work and complication than 1.1 support, (including trade-offs,) whereas it was only one API method that made the difference between 1.2 support and 1.1, and replacing it for our particular use case has improved performance, I have now confirmed, and nothing I have personal experience with requires the 1.0 standard over 1.1. We take advantage of a single optional feature of 2.0, AFAIK, and it's nice to have, but it might not even make a significant performance difference, (specifically out-of-order queue execution, which we detect and fall back gracefully from, if not present).
Since you found a work-around for your card, and I think we are supporting full 1.1, a backport to 1.0 might be a larger undertaking that I'm going to say is out of scope for this issue. Awesome to see that working, and I hope folks get use out of the 1.1 support and the performance improvement that seems to be general, as an incidental result.
EDIT: I was going to add, while 1.0 C++ bindings headers are still available, I don't think they're even really distributed in standard packages, over newer 1.x versions. So, that'd be a very custom setup, and, again, it's more complicated and more trade-offs.
