Description of the issue
This happens because single qubit pauli's derive from cirq.PauliString, which

and cirq.PauliString has a __getitem__ defined; which makes it an iterable on qubits as well.
This behavior, that certain cirq operations are iterables on qubits can lead to potential inconsistencies; especially when writing protocols (like cirq.unitary()) which have multiple fallback strategies to compute the value of an object using, for example it's decomposition (if the object is iterable, then a fallback strategy is to consider the decomposition of the object as the items yielded by iterating on the object).
Another major consideration while thinking about a potential fix is to figure out if this is a bug or a backwards incompatible change with regards to Cirq versioning policy.
Cirq version
1.0
Is it possible to preserve the __getitem__ while getting rid of the fact that pauli string is an iterable on qubits -- answer here is probably no.
For example, Can we override the __iter__ and raise an exception?
The __iter__ seems to be defined at 
Perhaps __getitem__ by itself does not make its class iterable.
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
