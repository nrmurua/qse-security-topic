The docstring says
A constant plus the runtime value of a parameter with a given key.
Is using the constant offset implemented yet? Shouldn't that be an attribute?
Also, I will want to use multiplication instead of addition. Can we also support a constant times the runtime value? I'm happy to help with this.
Actually, we removed the offset and forgot to update the doc string. We were worried that it was a weird half-useful place to be (if you can add, why can't you multiply or square or sine or ...), and so backed up to something that was a local minima in design space.
It has to be serializable to it can be sent over the network to the service.
I think a very interesting thing to try would be to allow it to be a sympy expression, and fail at serialization time if it used unsupported features like integration.
So @Strilanc we have your blessing to go ahead with this and make Sympy a dependency?
Hmmmmmm... the only reason I would avoid this is because of the chance that we completely change the paradigm for doing sweeps once we get feedback from actual usage of the machine. So there's a reasonable chance of the work being wasted.
After discussing this with @lindmarkm , I think we should wait before doing this. We need to get feedback on how people actually want to use this functionality first.
Okay. I thought about my use case but it turns out I might not need this actually.
I think this is one way to allow custom gates parameterized by Symbol to run on the simulator. If we do this, then I can circumvent the problem of #418 by providing a decomposition.
I describe a use case here: quantumlib/OpenFermion-Cirq#282
We've decided to go ahead and do this. We're looking for a volunteer to get this done, e.g.a  20%-er, because it's a reasonably independent reasonably large project. It involves going over the whole code base and doing little refactorings, and merging sympy's featureset with our needs. So there's a bunch of coding work but also a little bit of design work.
I'm not familiar with Sympy. Could you please expand on what advantages and disadvantages "Allow Symbol to be a Sympy expression"  will have? Thanks!
The main advantage is that sympy supports algebra on symbols (i.e. you can make formulas), and it does a much better job of it than we ever would. Instead of being limited to just X^t as a parameterized gate, you could make a X^(t^2 + 3 arcos(theta) - 1) gate.
Now, in practice we won't be able to communicate those gates with arbitrary formulas to the service. Don't worry about that. It just has to work with the local simulator.
Found a pretty bad place where this bites us pretty badly.  The way we define the Rx gate (which most people will use) we only allow the radians to be passed in and then we rescale it.  So you cannot use symbols with the Rx gate.
There might have been a test or two that calls Rx, (I don't remember which), but my latest code: #990 (which is getting stale); only has problems with the optimizer, depolarizer  gate and PauliStringPhasor. We've decided not to replace the whole thing at once but instead keep cirq.Symbol while doing the change incrementally.
@dabacon We were already being bitten by that. Having the method just makes it more blatant. (This is why @babbush has been bringing it up; they prefer radians and so have been running into it.)
The change @vtomole is making will address this as a side effect, though it might be a few iterations before it starts to work.
@Strilanc Don't close yet as that pull request didn't address not the whole repo. (paulistring).
It auto-closed because somewhere in the PR it said "Fixes bla".
