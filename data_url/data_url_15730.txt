Creating a circuit of fixed depth and variable width scales superlinearly with increasing width. This seems to be due to the issubset method of python sets. Other circuit methods which use append are likely also affected such as inverse, reverse_ops, combine, and extend.

Looking at the call graph this seems to be due to the issubset call in _check_qargs. Probably a similar issue would exist for _check_cargs

qiskit version: 0.19.0.dev0+ccb9a6c
Do you have the benchmarked code for this one?  In particular, are you adding a fixed number of 1q/2q gates, or does the gate size scale as well?
The problem is likely that set.issubset takes a general iterable, and we're giving it a dict, which it doesn't recognise as a set.  I don't have your full benchmarking code, but I strongly suspect that swapping the test to qargs <= self._qubit_indices.keys() will solve the problem (dictview key objects implement the set ABC).  I'll PR it so there's something to check.
PR'd at #7134.
@jakelishman The benchmark mark code uses up to 3q gates;
where self._get_random_circuit is an interface to circuit.utils.random_circuit and num is in [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536]
