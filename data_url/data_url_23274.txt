Implement input filter for IIR (lowpass bandwidth = nyquist)
Compute error propagation in IIR module
Keep series implementation as an option (would make many things easier):
worked on filer. 24 biquads is maximum with current design. slightly decreased filter precision, added input filter for attenuating noise above nyquist. not so sure any more if series implementation can be more efficient since more internal precision will be probably be needed:
Lets say we work with 32 bit data, i.e. +-1/2e9, or 186 dB dynamic range. The input/output dyn. range is 14 bits, which accounts for 80 dB. i.e. we leave 100 dB for internal dynamics, or 1e-5. This should mean that we can affort that one biquad attenuates the other by 100 dB without introducing noise here. But really, the 100 dB must be shared among upper and lower end, which leaves 50 dB for peaks and 50 for holes. Since most of the time, numerator and denominator degree are similar, this is actually pretty unlikely to happen if poles and zeros are paired appropriately (however this pairing becomes rather important). So we should be able to make this work, decreasing coefficient bitwidth independently.
For the parallel implementations, this also means that we should be able to reduce the data width. Current problem is that the denominator is performed directly on the input data. Therefore its saturation does not depend on the numerator coefficients, which scale with the gain. That is, if saturation persists it is likely because a resonance was implemented too sharply. We should be able to get around this issue by keeping resonance quality factors reasonable, and possibly resetting the fixed point to another value.
Another issue is that the IIR timing is not optimized since we compute products like a_b + c_d in a single cycle. We need to reconsider the whole biquad pipeline, but it shouldnt be a big issue to get the timing right here.
filter is optimized. Only remaining issue is some frequency warping near nyquist frequency, which is however properly modeled in iir.transfer_function(kind='implemented'). Generally, by setting nyquist about 10x above highest pole/zero, this issue is negligible. Filters are routinely tested in unittest and pass to 25% accuracy, which is only necessary close to deep zeros. Numerical precision is not an issue for the currently tested filters. plot option allows immediate debugging of the problematic step. Series implementation seems unnecessary. Once Spectrum analyzer works, we should include noise analysis of the filter into unittests. Possibly, this will allow a reduction of iirsignalbits from 40 to below 32, paving the way towards even higher order filters (currently 20 biquads == 40'th order filters), or adding a second iir module once more input signals are implemented in dsp_block. see #55 and #56.
