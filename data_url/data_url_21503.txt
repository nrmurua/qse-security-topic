I would like to control the buffering of the sampler to sample on a timestamp but recover the results at a later time avoid losing all the slack. To do this I assume I would need to build the gateware again from source, as documented in this post #1693. I would make the appropriate change in sampler.py to add a delay between the write update and the read function, however I am not sure what to change in the target gateware file for the Kasli to enact this change?
Control of the buffering in the sampler, to avoid losing slack after calling sample_mu function.
Add any other context about the feature request here.
I don't think a gateware rebuild is required for that. Why do you think it is?
And it seems you basically have to split sample_mu() into 1) the part that does self.bus_adc.write and 2) the part that does self.bus_adc.read. Can you prepare and carefully test a PR?
I don't think a gateware rebuild is required for that. Why do you think it is?
I thought a rebuild was required because I changed values in the function for example self.cnv.pulse(30ns) to self.cnv.pulse(300ns) and when running sampler the underflow error still referenced the original line of  self.cnv.pulse(30*ns).
I will split the sample_mu function into two sections and prepare a PR.
self.cnv.pulse(30_ns) to self.cnv.pulse(300_ns)
The sampler coredevice driver is made of regular ARTIQ-Python kernels.
Ok I will make the changes in sampler.py and prepare a PR.
Do you believe this sampler coredevice driver change is necessary to add the sampler to my sequence of stages which I have posted in https://forum.m-labs.hk/d/227-help-request-with-scheduling-stages/39, as a recap I am making use of DMA to save the output signals but inclusion of the sampler is obviously causing RTIO underflow issues. Am I overcomplicating a simple issue?
self.cnv.pulse(30_ns) to self.cnv.pulse(300_ns)
The sampler coredevice driver is made of regular ARTIQ-Python kernels.
Seb .... I am now able to run several stages, 3 out of a total of 7 with this modification, all I need to do is increase the input FIFO of the ADC SPI RTIO channel to avoid the RTIO input overflow errors. Thanks for pointing me in the right direction.
If the tests are successful would you be willing to add these functions to the master ARTIQ repository. I would like to contribute in a small way to ARTIQ.
I am able to run until a stage which is 300us in its duration however beyond that I am getting the following error RTIOOverflow: RTIO input overflow on channel 20 . Channel 20 corresponds to the ADC SPI channel and I have tried to increase the input FIFO depth by entering self.rtio_channels[20].ififo_depth = 1024  in line 642 in gateware/targets/kasli.py. This is following the advice set out in #1693. This has not solved the issue. In the post pasted above, you said
Hmm, this may only work because of some implementation details in Migen and ARTIQ, and the new value may not be used consistently in the gateware, leading to bugs. I would not recommend doing this.
what would you recommend?
I have tested the functions and prepared a PR, please see #1742. I have tried increasing the ififo depth individually for channel 20 and uniformly for all channels and I am still getting the RTIO Overflow error. How can check the ififo depth after making the change?
@han94ros Is this issue still relevant and are you still working on your PR, or can we abandon them?
@han94ros Is this issue still relevant and are you still working on your PR, or can we abandon them?
I will finish the PR this week. Can you please see the DM I have sent you on the M-labs Chat forum about implementing a migen PID control loop into ARTIQ software.
Hi Seb
Is there any reason why this was closed?
No progress and you said you had resolved your initial issue.
