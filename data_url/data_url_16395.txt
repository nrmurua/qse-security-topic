It would be useful to be able to do something like:
At the moment this can be achieved through np.dot(np.conj(s.data), w.data), but incorporating this directly into the Statevector object would be cool.
Can I do it?
please see from qiskit.quantum_info import state_fidelity
state_fidelity is just the squared absolute value of the inner product, for pure states.
I have not understood if there is something wrong with my commit or if I can proceed with a PR
Maybe the function should not be part of the Statevector class and live in the same place as state_fidelity? (I was not previously aware of state_fidelity). @ajavadia can you please advise?
Is there a particular need you have which is not covered by state_fidelity? state_fidelity is also more general and not just for pure states.
It would be nice for teaching. The example I had in mind was calculating the angle between two vectors for Grover search / quantum counting. It's not essential as it can be acheived by np.dot(np.conj(s.data), w.data), but I was hoping for a neater way to do it.
As a student I can confirm I tried searching for this in the documentation in the end yielding and using
np.conj(vector.data[0])*vector2.data[0]+np.conj(vector.data[1])*vector2.data[0] (woops it seems i missed np.dot)
I'd also like to add I don't (yet) know what fidelity means ðŸ˜…
EDIT: I ironically just noticed that actually contained a typo...
Since the Statevector class now implements the __array__ method you can use numpy functions on it, including the dot-product:
@frankharkins does this work for you? ðŸ™‚
Would that not require a np.conj call @Cryoris ?
Yes, that's right it should be
Thanks for the correction.
