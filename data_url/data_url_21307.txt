ARTIQ compiler doesn't recognize @PREFIX.kernel decorator.
Instead of using from artiq.experiments import *, use import artiq.language.core. Then decorate function with @artiq.language.core.kernel.
I would like to use following, because per PEP20, Explicit is better than implicit. Also, because it avoids cluttering the namespace and speeds imports.
Sample based on LED tutorial:
ARTIQ compiler should compile the function for the core device as it would any other function with @kernel
ARTIQ throws CompileError (when run in separate pytest config), or standard error with above sample & artiq_run. Seems to be issue with 
Tested also with import artiq.language.core;  @artiq.language.core.kernel, and produced same result.
With artiq_run: error: decorators are not supported @artiq_lang_core.kernel.
I agree. The star imports are bad. In terms of recommendations I would go for import artiq.language as aq; ...; @aq.kernel. Along the lines of numpy and similar.
@jordens the point is that the compiler can't recognize any sort of prefix, so even with your suggestion, the ARTIQ compiler would throw an error. However, I haven't tested it with that specific combination.
Side note: when this is fixed, should change documentation to remove all examples of from artiq.experiment import * because it's bad practice.
Yes. None of this works right now because of the compiler. My point is not about the compiler but about the recommended style. I didn't want to sidetrack this issue.
the point is that the compiler can't recognize any sort of prefix, so even with your suggestion, the ARTIQ compiler would throw an error
That can be fixed quite easily, I just forgot about import as when implementing decorator support in the compiler.
The compiler should be fixed, but I don't see much of a problem with the star imports.
@sbourdeauducq https://stackoverflow.com/a/2386740
In short, my biggest 2 problems are:
Sum total of both of these is that when I'm trying to read other people's code, or write my own code based on others, it feels better to know exactly where other code is coming from instead of just "magic."
That can be fixed quite easily, I just forgot about import as when implementing decorator support in the compiler.
@whitequark  note that it fails with import artiq.language.core; @artiq.language.core.kernel, as well. So just accounting for import as won't fix it.
note that it fails with import artiq.language.core; @artiq.language.core.kernel, as well. So just accounting for import as won't fix it.
Same problem. Right now the @kernel annotation is a hack; the kernel environment has a fake decorator there that just does nothing. I think I should just skip decorators entirely when extracting source code from experiments.
ping. out of my expertise.
it feels better to know exactly where other code is coming from instead of just "magic."
I agree with @drewrisinger. Explicit dependencies make ARTIQ Python code easier to understand. It would be nice to support those who don't want to use import *.
ping @whitequark
For now, import kernel explicitly.
@whitequark What is holding this?
@sbourdeauducq I wasn't sure how to implement this best, but I just came up with a solution to that.
@whitequark Any update?
A hacky solution, not sure if it works for all circumstances:
At least works for the following cases:
and
Thanks @pca006132, I honestly got to the point where I forgot about this b/c I was just doing from artiq.language.core import kernel, which feels like a reasonable compromise.
@sbourdeauducq the following experiment run on the current master gives me an error
Supporting special decorators not simply called as kernel, portable, etc. is difficult to do correctly because of #416. We need to know which modules to cache...
