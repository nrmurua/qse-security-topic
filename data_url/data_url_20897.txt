I think it could be interesting to CI runs for ARM. Goals being - ensure software can be easly ported to ARM CPUs and test against another compiler.
I can take care of it if people think it makes sense.
Hi Henry,
Yes, we'd definitely like to do that.  I know that @thomwiggers and @joostrijneveld have some plans to move the main tests out of the top-level Makefile, and part of that depends on #13 and #17 as well.  Not sure when the right time to do this is...
In terms of setting up a Travis build for this, see also what I did recently for open-quantum-safe/liboqs#460.
We already simulate PowerPC (32-bit) on Travis CI using qemu and Docker. It should be easy to add (emulated) ARM to the build there. The main hurdle is to prepare a docker container, though it should be easier as ARM is still supported by Debian. We also expect that we can also not run Valgrind on emulated ARM, see #15.
As an aside, I should also do some thinking about how to manage the docker container(s) – I'm currently hosting it on my own account.
ok, I'll take a look at running ARM
We also expect that we can also not run Valgrind on emulated ARM, see #15.
I think this would be nice to have, but I don't think there is a need really, isn't? Assuming valgrind is run on native environment, I think running with leak,memory,address,ub sanitizers should be enough on emulated environment. I've already seen cases where sanitizers detect problems which were not detected by valgrind.
As an aside, I should also do some thinking about how to manage the docker container(s) – I'm currently hosting it on my own account.
Just push to docker hub?
As an aside, I should also do some thinking about how to manage the docker container(s) – I'm currently hosting it on my own account.
Just push to docker hub?
I meant the repository with the Dockerfile, not the container image itself (which is indeed hosted on Docker hub).
Valgrind on ARM should indeed not add much over Valgrind on Intel x86, since they're both little-endian systems. We kind of expect weirder stuff to happen on big-endian machines, which is why we would like to have Valgrind (at some point) there.
For now no valgrind is fine.
I meant the repository with the Dockerfile, not the container image itself (which is indeed hosted on Docker hub).
oh, I would simply create etc/ directory and add all the tools there. It's always good to keep tools together with the source.
We kind of expect weirder stuff to happen on big-endian machines
indeed
I'm setting up PQClean/ci-containers to deal with the containers, because that will allow me to have them automatically updated through Travis CI. Docker Hub's integration won't work, as the container build environment requires the multiarch container.
I've set up the ci-containers repo, and it should now be building the docker container pqclean/debian-buster-arm. That should be a good starting point.
Perfect. Thanks! I'll take it from there
