Right now we have VisaInstrument and IPInstrument, and we may want another for SerialInstrument. We also have MockInstrument which also serializes communication to its model.
Then there are other instruments that have their own DLL or something and don't funnel everything through a single communication channel - these inherit from Instrument and we'll leave them aside for now.
But for all the others, there is a different structure we could consider: give them all a common class to inherit from (SerializedInstrument?), and have that object load whatever backend it needs based on its constructor.
This would have a couple of advantages:
Just to note, this is similar to how we already handle the formatter and io manager for a DataSet
@giulioungaretti as discussed
Just for the record pyvisa has a pure python backend (pyvisa-py) which is not yet extremely mature but could replace the IPInstrument and also have a simulation backend (pyvisa-sim). It would seem constructive to me to improve those rather than develop yet again other tools.
I think that all text based instrument somehow rely on VISA (the standard) and hence the natural layer of abstraction is pyvisa.
Thanks @MatthieuDartiailh - that does seem like an attractive option, depending on its maturity. I will look into it!
As I said, it is not super mature but it would probably be easy to improve it and that would profit to everybody.
Alright, after looking at it a little:
Fast-forward to the present day: we do use pyvisa-sim and we are trying to get rid of the IPInstrument everywhere. I think there is no longer a need for a SerialInstrument (it's covered by VISA).
