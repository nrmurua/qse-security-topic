IBM Quantum Lab

This is what optimization_level=3 does to a 54-qubit GHZ on ibm_sherbrooke.
I tried multiple circuits and they all had similar results, so it should happen with any large GHZ state.
Many qubits are shown to not have multi-qubit operations, but all 54 participated in at least one multi-qubit operation.
This is from experimentation after the IBM Quantum Spring Challenge. The circuit produced sheer noise, so I wanted to see if optimization_level=3's mapping feature would improve qubit selection and improve the results.
Could you provide an example of a circuit before transpilation, and the exact settings that you used to produce this output circuit?
Fwiw, I ran this script:
and the output transpiled circuit has a 2q gate on each of the involved 54 qubits.
One of them was:
followed by:
Ok, thanks - this looks likely to be some problem being introduced by approximation_degree; I can reproduce your results with it set, but not without it.  Setting that to "0" is telling the unitary resynthesis algorithms to use maximal approximations (maybe backwards to what you'd expect), so there are likely various 2q collected blocks that are getting approximated at some intermediate stage to identities, and consequently removed.
As an extension of this issue, I carefully crafted a 54-qubit GHZ with 1 Hadamard and 53 ECRs. The transpiled circuit has 53 ECRs, but it adds a bunch of Hadamards everywhere, tripling the depth of the circuit from 12 to 34 using optimization_level=1, the shallowest of the 4 presets. The results are sheer noise. The results are the same from the QASM editor. The depth was slightly worse with CX, which I also tried. If I did all the hard work manually of selecting qubits and connecting them, why is the transpiler adding so much noise?
chmscrlnopt07g4g0pk0
chmri0hike34bjj1nql0


The ecr gate isn't symmetrical, and Sherbrooke implements ecr only in the native direction of each link.  The extra y rotations and hadamards are most likely the transpiler "flipping" your gates so they can run on the hardware.
The result with CX was worse. I think the least depth was 44 with CX vs 34 with ECR and optimization_level=1.
Yes, Sherbrooke doesn't support cx natively at all.  If you're trying to do hardware-specific optimisations by hand, you might want to examine the .target attribute of the particular backend; you can find all the information about the supported gates and their directions in there.
