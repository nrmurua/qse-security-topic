Description of the issue
We allow measurement keys to contain any character. We had to break this a while back to disallow colons, due to path serialization. We may break this again to disallow braces so we can parse sympy expressions out of them. We'll probably also need to disallow brackets whenever we do the "allow multiple measurements" feature. And other things will probably come up later.
Rather than continuing to do these one at a time, should we preemptively make a breaking change that limits measurement keys to a reasonable set of characters like alphanumeric+underscore?
I'd prefer to treat measurement keys as opaque tokens. What kind of sympy expressions do you imaging having in them?
The other way around -- we want to be able to parse expressions containing measurement key names (delimited by braces) into sympy expressions. i.e. in op.with_classical_control('{A} > {B}'), op would only be executed if measurement A is greater than measurement B. We can work around the fact that the names themselves could have braces by using an escape sequence, but still it seems like we'd want to standardize on a more common set of characters for these names.
How about using actual sympy expressions?
I'm not aware of any restrictions on characters that can be used in the names of sympy symbols, so this should work even if the strings for keyA and keyB have weird characters.
Yeah, we can work around it. The question really is should we have to? Is there a reason we want to allow any characters in the measurement key names, or might it be prudent to limit them?
I think of them as variable names, so it seems odd to support arbitrary characters. But maybe if users think of them as spreadsheet headings then it makes more sense. Anyway @95-martin-orion suggested I bring it up for discussion before 1.0. I'm less partial one way or the other since we've found some workarounds. Though one thing is I do think we should at least trim (or reject) surrounding spaces.
I mostly want to restrict measurement keys to [a-zA-Z0-9_-] because every time we want to do formatting or parsing of strings containing keys we're forced to put in all these extra safeguards to ensure arbitrary keys won't get broken. It's a strain on development that I doubt provides much benefit to users.
In what situations do we need to parse strings that contain keys? I will say that internally we use keys with characters outside the list you propose, such as brackets, commas, colons, etc. So restricting this would be a breaking change for us internally.
In what situations do we need to parse strings that contain keys? I will say that internally we use keys with characters outside the list you propose, such as brackets, commas, colons, etc. So restricting this would be a breaking change for us internally.
#4740 is the current PR of interest in this area. While it's not "parsing strings containing keys", the entire process of introducing MeasurementKey also fought against this issue; measurements in repeated circuits eventually received : as a special character, but other suggestions such as keyed CircuitOperations have also desired reserved characters.
To note, the current default key for measure(*cirq.LineQubit.range(3)) is '0,1,2'. So commas might be hard to remove. Also I'm no longer blocked by this since sympy allows arbitrary symbol names and we can use actual sympy expressions as suggested by Matt.
