The input parameters into the InstructionScheduleMap should be expected to be ParameterExpressions. Types and tests should be updated accordingly. This is a follow on to #3385.
Do you mind if I take this on?
@srijithprabhu If you’re not still looking at this, I’d be interested in taking a look
Given there's been little movement on this I'm good to reassign to you @menehune23. Thanks for taking this on.
The follow up if interested after is #3384 which would be a very valuable feature, essentially turning Schedules into functions and opening up the door to reusable code representations.
Sure @taalexander, I’d love to take them both on :)
If you have questions that need quicker answers you can always feel free to find me on our Slack.
@taalexander I've got a bit of a concern, as it looks like ParameterExpressions represent real numbers (based on how they return self when conjugating), while the existing param type for InstructionScheduleMap's get() and pop() seems to support complex numbers (Union[int, float, complex]). Are parameters here expected to be real always?
Also, is this change going to be a breaking change for any downstream consumers of this class? It seems so but I'll have to dig further.
For now if a ParameterExpression is passed to get/pop could we just pass it through to the underlying function? If passed to the very rough https://github.com/Qiskit/qiskit-terra/blob/f132cf7fc69920f393bc2055e98f20e8e7d6bce0/qiskit/pulse/schedule.py#L744
(was originally meant to be temporary and replaced by #3384).
This class could be modified to try and cast the ParameterExpression to a float, and raise if not possible.
@taalexander Were you referring to casting from within ParameterizedSchedule? I could go with that approach, but since this issue pertains to params for schedule generator functions as well as ParameterizedSchedules (for instance, this generator:  https://github.com/Qiskit/qiskit-terra/blob/master/test/python/pulse/test_instruction_schedule_map.py#L195), it might be less breaking to cast to a float before calling any generators/schedules (i.e. within InstructionScheduleMap itself). It's easy to update ParameterizedSchedule, but difficult to make users update their generator functions. Thoughts?
I suppose if schedules will eventually support parameters (per #3384), I could see the argument for NOT converting to floats within the InstructionScheduleMap. I put up a PR (#4940), so feel free to discuss further there if appropriate.
My apologies for the delay (I work a lot on the backend and often have to put my head down there). If you find me taking forever to respond, I'm typically pretty quick on Slack.
I suppose if schedules will eventually support parameters (per #3384), I could see the argument for NOT converting to floats within the InstructionScheduleMap. I put up a PR (#4940), so feel free to discuss further there if appropriate.
I think I agree with this. I view the ParameterizedSchedule as more of a constrained schedule generator function for calibration generation functions coming from the backend, eg., it expects a certain format and is constrained to a limited amount of parameter math so as to prevent arbitrary code execution dictated by a remote source. It was always meant to be a temporary solution being deprecated in favour of a proper representation for functions with a signature ("parameterized schedules") in the pulse IR.
@taalexander No problem at all. For myself, I don't get as much free time to work on Qiskit as I'd like due to my family and regular job, so I'm not in a big rush.
I've thought about this some more in the meantime. Given that ParameterizedSchedule is meant to be temporary, it might be good to cast to float before passing params to a schedule (again, to not break existing generator functions). In the future, if params need to be left unbound when passed to a newer schedule type (i.e. when #3384 is implemented), we can do a type check and choose to only cast to float for function schedules, leaving as ParameterExpressions otherwise.
If that makes sense, and if you agree with it, then my PR #4940 can remain as is.
Yes, this sounds good to me.
