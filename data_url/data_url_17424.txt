An inserted barrier allows system to reorder, or act the circuit on different qubits than those declared.
Even without cnots to avoid the possibility of mapping issues, place single qubit rotations on n qubits, then a barrier, then a final single qubit rotation on an (n+1)th qubit.
Barrier is expected to keep gates on either side of the barrier, not allowing a compiler to modify ordering across this point of the circuit.  Barrier is expected to play no role in determining which qubits the circuit is acted upon.
Clarify definition of barrier in optimization software for hardware implementation
Hi @klcon , thanks for reporting this issue. Do you have an example circuit where you're seeing unexpected behavior?
I just tried on v0.7 what I think was your circuit and saw the following:
Hi @kdk, Thanks for the quick response.
In more detail, I chose qubits [0,6,11,5] to receive angles [a0, a1, a2, a3] with a barrier between the application of rotation(a2) and rotation(a3) on qubits 11 and 5, respectively.  The resulting QASM is reflected below.  The barrier is pushed to the end of the angles and the qubits have been reassigned.
compiled_circuit_qasm='OPENQASM 2.0;
\ninclude "qelib1.inc";
\nqreg q[20];\ncreg cr[4];
\nu3(a0,0,0) q[16];
\nu3(a1,0,0) q[10];
\nu3(a3,0,3.14159265358979) q[7];
\nu3(a2,0,0) q[0];
\nbarrier q[16],q[7],q[0],q[10];
\nmeasure q[16] -> cr[2];
\nmeasure q[10] -> cr[1];
\nmeasure q[7] -> cr[3];
\nmeasure q[0] -> cr[0];
I can provide the job_id if you would like.  I would categorize this issue as recurrent but inconsistent in my experience.
Hi @klcon , thanks for the details. I was able to replicate this bug!
This is likely an issue with the BarrierBeforeFinalMeasurements transpiler pass, which is coincidentally being substantially refactored in #2045. I'll make sure a test for this case is added once that refactor is complete.
