While investigating the memory usage of some code that numerically calculates a ground state, e.g.
I was surprised to find that the part of the code that uses the most memory is not the eigenvalue computation itself but the call to the function get_sparse_operator. By adding some print statements, I found that the line
in utils/_jordan_wigner_sparse.py causes memory usage to more than double compared to the rest of the code. I broke this statement down into two parts:
and found that it's the conversion from COO to CSC in the last line which is causing memory usage to double. Therefore, I think it would be nice if this code was rewritten to construct the CSC matrix directly, rather than first constructing a COO and then converting. This should be done everywhere we do such a thing, such as in the function qubit_operator_sparse too.
You're suggesting that we should implement something like get_linear_operator which returns a Scipy LinearOperator object? I think that's a good idea and would certainly satisfy my use case.
If it's useful, I wrote some code a while back related to this issue that gets the LinearOperator (with matrix-vector multiplication defined for it). My code does something a bit different / more basic than what we should really do - it offloads memory from the usual storage to disk, but it might still be useful or at least a useful starting point.
Closing this in favor of #324 .
I still need the sparse matrix in order to calculate expectation values of states, for instance from the output of a simulator.
Actually, #324 can also be used to calculate expectations.
Okay, I still need to get the sparse matrix if I want to compute the ground state within a particular particle number manifold by using jw_get_ground_states_by_particle_number. Can anyone think of a way to do this with a LinearOperator (or any other way that doesn't require computing the matrix)? It's easy to restrict a sparse matrix to a particular particle number manifold, but I don't see how to do that for a QubitOperator!
Wow, thanks. So jw_get_ground_states_by_particle_number should really be doing that then, since it is much more efficient than explicitly getting the restricted matrix, right?
