Would a simulator for boolean reversible circuits be useful, or of interest?
Something like the one in https://docs.microsoft.com/en-us/quantum/machines/toffoli-simulator
I'd be happy to contribute my implementation of this to Cirq if it's wanted.  https://github.com/cduck/cirqtools/blob/master/cirqtools/classical_simulator.py
@cduck : thank you for pointing me to your simulator. I will try it.
For the Toffoli simulator I was thinking of an even more simpler one that accepts only CNOT and Toffoli, such that it can be possible to operate on lists of bits. It would be a trivial simulator but able to easily simulate 10k qubit reversible circuits.
Thanks for opening this @alexandrupaler! In my opinion this is something that could be interesting to keep in contrib but not as a core cirq functionality.
I have used @cduck simulator and think it works great. It would be nice to have it at least in contrib.
Discussed on Cirq Cynque: this would be valuable in contrib.
Hi! Is this issue still open for contribution? If so, then I would be happy to contribute. I 'm new to the project and codebase, and would appreciate any pointers regarding this.
Thanks.
@paniash I just submitted #4035 that should reduce a bunch of the boilerplate required in new simulators. I'd recommend holding off on coding until there's a decision on whether that PR is a go or not, as it will influence the design.
For now though I'd suggest looking at the other simulators (primarily MPS and Density Matrix) and trying to understand the patterns. You'll probably have to update cduck's simulator to use the ActOnArgs pattern -- the ActOnArgs you can think of as the quantum state container -- as that has been established recently and all the simulators have been updated to conform to it.
Also you look through the unit tests for the other simulators, and create an equivalent set of unit tests for the Toffoli, if that doesn't already exist. I'll be happy to answer any further questions.
FWIW https://github.com/quantumlib/Cirq/blob/master/cirq-core/cirq/contrib/custom_simulators/custom_state_simulator_test.py provides an example of how easiest to implement a custom simulator (20 loc for a classical basis state simulator). If you follow that example, you get subcircuits, classical control, decomposition, etc for free.
