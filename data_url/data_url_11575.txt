I have repurposed the QSVM example.
Following is my version info:
 {'qiskit-terra': '0.15.1', 'qiskit-aer': '0.6.1', 'qiskit-ignis': '0.4.0', 'qiskit-ibmq-provider': '0.8.0', 'qiskit-aqua': '0.7.5', 'qiskit': '0.20.0'}
Following is my CPU info:
The dimensions of the datasets I am using is as follows:
I have created ZZFeatureMap() to create the feature map.  I typically have three python3.8 processes by default. When I execute the code, about ten more python3.8 processes launch and all of them have 16 threads.
However, none of these processes have more than ~25% cpu usage no matter how long the codes run. I would like to resolve any issue which is stopping them to maximize their CPU usage.

QSVM code uses parallel map from Terra (which uses Python multiprocessing) in some instances where the computation can be done in parallel. For instance here where its computing matrix elements for the kernel matrix https://github.com/Qiskit/qiskit-aqua/blob/63b5029f739e30dfd08bb6321d3567b1f08c40a6/qiskit/aqua/algorithms/classifiers/qsvm/qsvm.py#L351-L354
I expect it was determined, when this was originally done, that there was an overall improvement in total execution time of the algorithm. I cannot speak to each process cpu utilization though. If you look at the above snippet you will see it uses a num_processes sourced from aqua_globals - by default this is based on num cpus but can be set explicitly to any number lower than that including 1 e.g. aqua_globals.num_processes = 1.
I will also note if you are using Aer that it has various parallel processing options too.
The Machine Learning functionality in Aqua is being completely rewritten, and the functionality of QSVM with the parallel mapping will be replaced. I do not know if the parallel options as listed above helped in anyway. Either way Aqua, along with this parallel code in QSVM is being deprecated, and hence this is being closed since it will not be relevant to the new code base and there will be no change in the behavior  made here since this code is now effectively frozen ahead of the deprecation.
