This would involve nontrivial changes in terms of both UX and the backend.
When users construct a workflow today, they pass to each electron either other electrons or fixed parameters. Each electron and each parameter is assigned a node in the computational graph. The graph completely describes the input-output relationships within a workflow.
The proposed behavior is to inject arguments to electrons at runtime from the return values of call deps. I have a few concerns:
The sample task in the snippet can be accomplished in a much more Covalent-like manner by creating a FileTransfer  electron and either passing the returned file handles/URIs to the read_file electron, or asking read_file to wait_for() the FileTransfer electron. With either method the flow of data would be clearly modeled by the computational graph.
This will need follow up UI work to display the injected parameters in the workflow view.
