I was testing my automatic code generation for Qiskit, and apparently the cphase controlled U1 gate with a classical condition will make the circuit misaligns in both of ASCII output and MPL output.
Screenshots:

Using the source code below:
They should align in a vertical manner.
No response
There is special handling in each of the drawers for certain names in ControlledGate, so it's likely that the bug comes in there somewhere.  Notably, u1 and p are handled specially, but u2 is not; this seems to match with the output images up top.
For ease, a more minimal reproducer:
Oddly enough, I think these two problems are unrelated. The 'mpl' problem seems to be related to a miscalculation in the code that deals with folding. Since the 'text' problem appears with only 1 gate, it can't relate to that. I think it might have to do with the U1/P code as suggested, since it looks like the gate is aligned differently than the condition.
@1ucian0, @javabster The mpl version of this was fixed with #7545. The text issue, which is a very different problem, seems to have existed as far back as I can tell. Apparently cp and rzz gates with conditions are rare. Anyway the fundamental problem is that the sidetext gates, including the label, are centered in the layer, which means the bullet is not aligned with the bullet on the condition, so you get
You could move the whole gate over so it's centered on the bullet, but looking around at this, I haven't seen an easy way to do that yet. But then you have the problem of the label pushing the x(1) gate layer over and that also seems non-trivial, but I assume doable.
This all brings up the question of whether these sidetext gates are really necessary. Is this really so bad?
It would eliminate a lot of messy code and solve #6877 as well. Just a thought.
i'd be hesitant to remove the side text gates completely just because a bug might be difficult to fix. The user's experience should come first, and the side text gates have been in use for a while so removing them would probably have a negative impact on all users as opposed to just the handful that experience this bug.
Ok. @jakelishman @javabster. So is this acceptable if there's a condition? Creates a lot of whitespace, but at least things are lined up and centered. The other two drawers line up the bullets in the layer and then print the text to the right, rather than centering bullets plus text like the text drawer currently does.
We then have a choice of leaving these gates as is for no condition,
or centering all the sidetext gates like the other drawers do.
Let me know which way you want to go, and I'll do a PR.
I think the first option is fine, if there is a way to fix it so there is less whitespace that would be the best option but if it is too complex I am happy to push this through to at least fix the bug and we can try fix the whitespacing at a later date. In other words: first priority is to fix the bug, and adjusting to have less whitespace would be a nice to have but not essential.
For the other options I would prefer to leave the gates as is with less whitespace. So in this case preserving existing user experience takes precedence over being consistent with the conditional gate style.
Hope my reasoning makes sense! Thanks for addressing this ðŸ˜„
That was my most likely conclusion as well, so that's what I did in #7673.
