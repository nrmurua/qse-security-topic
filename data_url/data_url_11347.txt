I'm working on the file ops/_quadratic_hamiltonian.py. In there, I add the line
from openfermion.utils._slater_determinants import swap_columns, swap_rows
This causes the tests in the hamiltonians folder to fail; i.e., when I run pytest hamiltonians/, I get
It seems that there is a circular dependency
MolecularData -> ops -> utils -> MolecularData
and any file in the ops folder which imports anything from utils will cause this error. What is the best way to deal with it?
These sorts of circular dependancies can be really annoying to deal with. You may need to change the order of imports in __init__ somewhere (breaking the alphabetical order) or you may need to do a much more specific import somewhere that does the import just inside a function instead of at the top of the file. In this sort of situation, I recommend just hacking to try to make things work. I do not think there is a nice general strategy to avoid this.
@Strilanc @maffoo @Spaceenter do you guys have any more enlightened software engineering tips for avoiding this sort of thing? @idk3 I know you dealt with this a lot in FermiLib. Any ideas?
My past experience is that circular dependencies indicate design issues, and could usually be solved by a bit re-design.
For this case, it seems like 'util' should be the lowest level. I agree things like "swap_column" and "swap_rows" should belong to 'util'. But I feel trotter_error.py should probably belong to higher level, maybe even higher than Hamiltonion.
I think the layer should be util -> ops -> hamiltonion -> high-level "util" such as the trotter_error thing.
@idk3 @babbush  - WDYT?
I agree with @Spaceenter
In that case one solution is to move swap_rows and swap_columns to ops/_quadratic_hamiltonian.py and import these functions in utils/_slater_determinants.py.
However, I realized that in my pull request, I import other things from utils in ops/_quadratic_hamiltonian.py.
Namely, I need to use givens_decomposition and fermionic_gaussian_decomposition from utils/_slater_determinants.py in ops/_quadratic_hamiltonian.py.
Perhaps utils/_slater_determinants.py needs a new home.
Okay, I think I have a satisfactory solution. I will restructure the code to resolve this in PR #95 .
Great. Write "Fixes #94" in that PR so that when we merge it will close this issue automatically.
@kevinsung I'm late to the party, but one solution when all else fails is to import within the function. It looks like you've found a better solution through restructuring :)
