See cloudflare/circl#213
Although not automated, confirming this incompatibility is simple. First I used Circl's golang kyber in a test to generate a Kyber1024 key pair and printed them as hex:
 
https://github.com/david415/cryptocomrade/blob/master/go/kyber/kyber_test.go#L34
Next I used the previously mentioned public key in a test which uses the oqs rust crate to "encapsulate" a shared secret. I print the hex of the shared secret as well as it's ciphertext:
https://github.com/david415/cryptocomrade/blob/master/rust/src/kyber.rs#L21
After that I modified the previously mentioned golang test to "decapsulate" the ciphertext:
https://github.com/david415/cryptocomrade/blob/master/go/kyber/kyber_test.go#L60
This shows that the two implementations generate different "shared secrets".
Please do let me know if there is anything else I can do to help. I sincerely wish this incompatibility to be fixed because I am using both the oqs rust crate and the circl go library in my software which will hopefully one day enable people to communicate more freely.
The version of oqs from crates.io that you're using ships Kyber round 2.
You should be testing with the oqs Rust crate main branch. The oqs rust crate is in a bit of a transitionary phase right now (evidenced by its version numbers not matching with liboqs) — the released version is currently inbetween liboqs version 0.4.0 (NIST round 2 schemes) and to-be-released liboqs 0.5.0 with Round 3 schemes. As soon as liboqs releases version 0.5.0 I will bump the crate version and this unfortunate confusion should be much less of a problem.
Both liboqs and circl test against NIST's KATs. I don't think this is an issue of liboqs but rather the Rust crate on crates.io not being clear about what versions of the cryptography it ships, and it being in a bit of a weird place. If anyone has any suggestions how to better document that, please open an issue in open-quantum-safe/liboqs-rust.
