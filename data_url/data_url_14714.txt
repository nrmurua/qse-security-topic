What works:
Transpiling a QuantumCircuit using a coupling_map returns a QuantumCircuit (call it qc) in which idle qubits have been added to fill all spots in the coupling map. Calling qc.draw() outputs a graphic in which each qubit line is labeled with [virtual_qubit_name -> physical_qubit_name].
What is confusing:
The virtual_qubit_name of each newly-added idle qubit is ancilla_i where i=1,2,etc. These names strongly suggest the qubits would be AncillaQubit objects that belong to qc.ancillas. However, they actually are just regular Qubit objects, and belong to qc.qubits, not qc.ancillas.

The above output is generated by
The expected behavior would be a consistent use of the word "ancilla" to avoid confusing users. (Or whatever language Qiskit decides to use #5152 ).
Are these qubits "ancillas" as defined by Qiskit? If so, should they be added as AncillaQubits to qc.ancillas?
If not, should the virtual-qubit names be changed to something other than "ancilla_i", such as "idle_i" or even just "q_i" (where for the latter the indexing starts 1 beyond the number of qubits in the pre-transpiled circuit, with the appropriate care taken to avoid collisions with the pre-transpilation qubit names)?
I am looking for a good first issue. On searching by label, almost all open issues are assigned to someone. Can/should I try this one out?
Okay I got this one. The qubits are just idle qubits.  Hence changing the prefix to idle_q will solve the issue.
However, they actually are just regular Qubit objects, and belong to qc.qubits, not qc.ancillas.
I understand this is unexpected. However, I failed to imagine a context when that distinction is relevant. What's your use-case?
Without fully understanding the problem, I'm not fully sure what's the expected solution...
Not much of a use case frankly, just seemed like maybe it was unintentional to have qubits called ancillas not live in qc.ancillas. I'm still learning norms as to when it's helpful to raise an issue to point out unexpected behavior vs just letting it lie, so apologies if this is frivolous.
For context, I came across this while trying to write a general-ish function to combine a list of circuits acting on non-overlapping sets of physical qubits, such that the output combined circuit has the appropriate total mapping onto physical qubits. I was initially hoping this function could require from the user no more info than is strictly necessary regarding any prior transpilation that may have occurred, namely whether or not coupling_map/layouts, if they exist (they might not for simulators), were already applied. I was getting confused trying to figure out what extra info besides the input circuits is necessary in general to determine the number of qubits in the combined circuit, the mappings of input-circuit qubits onto combined-circuit qubits, and the total mapping of the combined circuit onto physical qubits. At one point it seemed like the distinction between Qubits and AncillaQubits might be a useful indicator, though I'm now trying a different approach.
Okay. So what should be the ideal behavior?
Having free qubits in quantum register with non ancilla prefix or having separate ancilla register for free qubits.
Or want to keep it as is and close the issue
@1ucian0 , @aeddins-ibm  - Should I look at the other way round for the solution? i.e. making the qubits actual ancilla qubits or are we thinking to leave it as is and close the issue ?
Marking as 'on hold'. Agree this can be confusing. There are some details around how ancillas are going to be used in the circuit and transpiler that will be worked out over the coming months, and this will be discussed then.
Filtering ancillas out of the layout has use-cases, like #10118 . Removing on hold
