This shows that the second postselect fails all the time, but the third somehow fails half the time as well?
Something's wrong here.
(Technically, nothing's horribly wrong [the circuit still fails all the time, which it should], but something seems to be off.)
(This fails on even the newest dev build, too â€” I checked.)
Thanks for the report.
This is somewhat of a known issue. The problem is that, when you do a really strong postselection, all that's left in the state vector is floating point error. And so the later displays may be telling you about the error instead of about the state. In this case, 50% of the error vector makes it through that second post-selection.
One way to solve this would be to, at every step where there is a display, compute the total squared magnitude and see if it has gone below threshold. This has some performance implications, but not too bad. But it still wouldn't solve the harder problem, which is to get things right consistently when the displays are controlled.
I figured that was the issue. The weird part is, the final displays still say NaN.
Amplitude displays are far more sensitive to error than the other displays because the amplitude displays require tensor-factoring the state, whereas the others just require adding up density matrices or probabilities. They are much more prone to misclassify pure-vs-not-pure and nan-vs-not-nan as a result.
I've been thinking more about this, and I think the trick here is to move away from hard cutoffs and instead do a continuous cross-fade of sorts. Same for the decoherence check.
Fixed by 3ad0ce5 . Will be in next release.
