Bug report received via email:
Using nvq++ with its own cmake configuration provided by CUDA Quantum website, whenever I include additional directories to my project,
They are passed to the compiler without the -I flag, making them to be ignored during compilation.
The output from cmake during build has these messages
See above.
Include should be processed.
Not a regression
No response
The -I flag is required. Is this a request for some sort of extension?
I'm not sure if this is related: when integrating CUDAQ's nvq++ into a CMake project (via find_package(CUDAQ)), I've added set(CMAKE_INCLUDE_FLAG_CUDAQ "-I") to get it to work.
Note that the same applies for libraries that are linked by path.
For example, when calling nvq++  /usr/lib/x86_64-linux-gnu/libssl.a  main.cpp.o -o test_app the output is:
While the issue can be solved by using -lssl instead, this solution doesn't apply for other cases.
The main case is C++ package managers (such as vcpkg or conan) that link libraries by path to support using multiple builds of the same package on one machine.
Adding set(CMAKE_INCLUDE_FLAG_CUDAQ "-I") fixed the problem thanks a lot.
IMHO setting this variable should be taken care by CUDAQ cmake config files.
@mdepasca Thanks for the confirmation. We are planning some updates to facilitate integration with common tools, and any feedback regarding what integration scenarios are relevant for you is very welcome. We have added documentation for the CMAKE_INCLUDE_FLAG_CUDAQ flag. I'll keep the issue open so we keep this in mind for a future update.
I may have spotted additional problems with cmake integration. Do you prefer I open a separate issues?
I opened issue #545
I believe this is fixed. Please reopen (or better open a new issue) if there are other option handling issues with the tools.
