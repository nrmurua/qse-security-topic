Conditional gates right now rely on ordering of qubits to distinguish the control.
We could add a GateFeature which has
from(qubits)
to(qubits)
which chains and produces on(qubits suitably ordered)
It would be reasonable to just put this on the CNOT gate initially, since it's our only conditional gate that cares about order.
CNOT.from(a) produces a PartialCNOT instance.
PartialCNOT(...).to(b) produces an Operation containing a CNOT targeting the appropriate qubits.
Note that I did make sure that the qubit ordering matches the ordering of the names in the gate. It's a controlled not, therefore control first then target.
I would like to work on that issue.
This would be my very first contribution though.
Should someone assign that issue to me before i start working on it?
Any further hints i should consider, other than those in the contributer guide, are highly appreciated.
It's not possible to assign the issue to people who aren't marked as collaborators. I'll just assign it to CirqBot as a marker so no one else grabs it.
I think the simplest thing to do here is to modify CNOT's on method to check for the presence of control and target keywords (and otherwise fallback to positional). I forget if Gate.__call__ forwards kwargs to on; if it doesn't then fix that. But feel free to try your own thing if you have a better more pythonic idea.
This issue could also easily become more general, and involve trying to merge the concept of controllability into the library more gnerally. E.g. add a controlled_by method to RotXGate, RotZGate, and GateOperation. RotXGate.controlled_by would create a sort of partially-applied CNOT. GateOperation's controlled_by would check if controlled_by is present on its gate. If it is, use it. Otherwise use the generic ControlledGate class. Etc. But I would consider this to be very technically involved in terms of the design and so would recommend punting it for now.
Seems like the complexity of that issue outweighs the use for now.
However, I will have a closer look at it and decide whether I keep working on it within the next few days.
Are there other issues more appropriate? I think i would like to make one or two smaller commits to gain some experience and come back to this one later.
Thanks a lot for your suggestions so far!
I would say this is a good one. Just do the first part and ignore everything I said after that.
Modify CNOT's on method to take **kwargs. Check for the presence of control and target keywords (with fallback to positional arguments). If Gate.__call__ does not have **kwargs, add it and forward it into Gate.on.
Alright, I will keep on working on it :)
Guess the issue could be closed
