Here is a snippet. The bell_state is (|00> + |11>) / sqrt(2). We measure them like this:
std::tie(a, b, c) = measure(bell_state, kron(gt.H, gt.H), {0, 1});
If we print out (disp) the bell_state, a, b, and c , they look like:
It is easy to understand. The post-measurement state vector has 4 elements. Now, if we measure only one bit:
std::tie(a, b, c) = measure(bell_state, gt.H, {0});
We print them out, and they look like:
It is difficult for me to figure out the post-measurement vector, which has two elements. Each element has a pair of values. Are they real and imaginary parts of two complex numbers like this?
Could you please explain how the post-measurement vector is produced in the latter (1 bit measurement) case?
Thanks.
The post-measurement vector in your case is [0.707107, -0.707101]^T, since you obtained the result 1. This is written in standard linear algebra notation where the basis of the 2-dimensional space is given by the canonical vectors [1, 0]^T, [0, 1]^T (or, in Dirac notation, |0> and |1>), and ^T means "transpose". In your case, that means 0.707107*[1, 0]^T -0.707101*[0,1]^T, which, using Dirac notation, is 0.707107 |0> - 0.707101 |1>. Hope this helps.
PS: in general, a vector [a, b, c, ...]^T in some D-dimensional Hilbert space translates to
a |0> + b |1> + c|2> + .... 
Thanks.
Hi,
I have a follow-up question concerning the post-measurement vector.
Let's say I want to measure the first qubit of the state phi = a |00> + b |01> + c |10> + d |11>, I would do:
which would yield for instance post_state[0] == (a |00> + b |01>).normalized().
As a beginner in Quantum Computing, I would expect post_state[0] to be a 4D-vector with the two last components set to zero, rather than a 2D-vector which would lead to believe that post_state[0] == (a |0> + b |1>).normalized().
Of course, deducing one from the other is trivial, but why does it make more sense API-wise to return a 2D-vector instead of a 4D-vector ?
Please let me know if you prefer that I open a new issue for my question.
Thanks.
@antoine-bussy The measurement is destructive by default (this simplifies calculations further down the line, since each measurement reduces the Hilbert space dimension by a factor of 2). But you can choose to be non-destructive, see 
This does it:
Thank you!
I misinterpreted "destructive" as the destruction of the superposition. But I guess a measure that's non-destructive of the superposition  doesn't make sense ðŸ¤¦
@antoine-bussy Great, glad it worked. BTW, nice usage of qpp with Eigen, I've learned some neat things from your examples.
