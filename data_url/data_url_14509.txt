Currently, if you call qiskit.transpile(circuit, backend=backend), the returned circuit will have its qubits property set to all of the qubits of the backend. Instead, I think it should contain only the qubits actually being used. This is very useful information, but as far as I can tell (please correct me if I am mistaken) it is currently inaccessible. Even if there is a way to access it, I think the proposed change is an improvement.
Example:
Output:
There is no way to tell which of the qubits on the device actually got an X gate applied to it.
As the transpiler maps your logical circuit qubits to physical device qubit it contains all the qubits of the target device. If you want to know which qubits are not being used you can do the following:
which will print
In theory, the information is already in QuantumCircuit after transpilation, but it's in the internal _layout property.  You can see it if you use QuantumCircuit.draw() after transpilation - the extra qubits will be in a register called ancilla.  It's possible we could increase access to this information, without too much cost.
Changing the value of QuantumCircuit.qubits is a very large change, and I don't think the benefit here outweighs the cost of potentially breaking existing user code.  I think if we want to, we can make this information available in an additive manner, rather than a replacing one.
If you want to know which qubits are not being used you can do the following:
@Cryoris I want to know not only which qubits are used, but how they correspond to the original (logical) qubits. In my proposal, the ordering of the qubits on the transpiled circuit would match the ordering of the original qubits.
In theory, the information is already in QuantumCircuit after transpilation, but it's in the internal _layout property. You can see it if you use QuantumCircuit.draw() after transpilation - the extra qubits will be in a register called ancilla. It's possible we could increase access to this information, without too much cost.
@jakelishman Thanks, but sometimes the _layout property is set to None (e.g. sometimes when no backend is specified) and it's not clear exactly when that happens, and in any case, the information should be accessible in an officially supported way.
Changing the value of QuantumCircuit.qubits is a very large change, and I don't think the benefit here outweighs the cost of potentially breaking existing user code. I think if we want to, we can make this information available in an additive manner, rather than a replacing one.
I understand the desire not to break people's code. We can just store the list of qubits in a different attribute, perhaps called qubit_order.
_layout is set if you're transpiled the circuit to a backend with a layout, and it isn't set if not.  It should be invariably not None in any situation where logical qubits are mapped to physical ones (because it's what defines that a mapping is present).
If we do want to add it, I'd expect we'd add a public function to read the data from the internal _layout, rather than an attribute - it's better to have it computed on demand for those that want the information, rather than making everybody pay the cost.  We'd probably need to tweak the Layout class itself - at the moment, you have to find the register in Layout whose name starts with ancilla, and isn't in the original circuit.
