This bug report compares the functionality of v3.5.4 and v4.0.0-rc27.
#1600 attempted to fix #1596, which was an issue where DECLARE statements were omitted from the job submitted to the QVM in some circumstances. RC27 (in truth, RC23) includes this change, but causes a regression where now duplicate DECLARE statements can occur in normal user workflows.
Here is an archive containing a notebook that illustrates the issue, with its results as executed under the v3.5.4 and v4.0.0-rc27 environments: notebooks.zip
You will observe that under v3 the copied program's instructions member is empty, while under v4 it contains the two DECLARE statements. These are also stored in the declarations member. Given that the accepted interpretation of copy_everything_except_instructions() is referring to the instructions member of Program, it must be a post-condition of this method that the copied program's instructions member is empty. This is assumed in user workflows; for example to preserve the DEFGATE and Quil-T instructions (DEFCAL, DEFWAVEFORM, DEFFRAME) but then to iterate over the input instructions an create a transformed version into the new program. This workflow causes DECLARE statements to be visited in the original, and therefore appended a second time to the copied program, thus creating duplicates. Those duplicates are not accepted down-stream, including by the QVM; an example error is api.QVMError: QVM reported a problem running your program: At line 2: The name "theta" has been DECLAREd more than once.
The #1596 issue needs to be re-resolved in a way that does not cause this regression.
When we talk about "instruction" here, we refer to the content of the instructions member of Program; we can't possibly mean the class hierarchy, since everything (including frame, calibration, and gate definitions) are all AbstractInstructions.
In v3, the Program.inst() method takes in an AbstractInstruction and:
I would infer that this means one of these is a "view" on the other. We'll need to decide which one is ground truth and which one is the view. Given that copy_everything_except_instructions() in v3 does copy the declarations member, but does not copy the instructions member, and one is supposed to be a view on the other, to me there is a clear defect in v3. We'll need to fix that and resolve the implications. Both members are public, so there is going to be a breaking change somewhere; it's about resolving the implications.
In v4, the Program.copy_everything_except_instructions() method resolves this inconsistency by adding the DELCARE statements as instructions via a call to inst(); however, I strongly feel this is against the intuitive expectation that instructions be empty at the end. I think this change should be reverted and another approach taken.
Other considerations
In both versions, Program.out() chains instructions from sources that excludes the declarations member. To me this suggests instructions is the source of truth and declarations is a view. This would imply the original bug in v3 was that the self._declarations object should not have been copied in copy_everything_except_instructions().
I wonder if making this change instead would have resolved #1596 ? I looked, and there is only one place in v3 that accesses .declarations; in QVM.execute() it does this:
If the original issue was that a copied program was iterating over these because of the above defect, I think it is a viable fix.
I think the patch is pretty easy. I'm going to try it.
closed via #1611
