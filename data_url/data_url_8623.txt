I don't know if this bug is new, due to some software change, either in numpy or qutip, but it seems that the function qutrit_basis() doesn't work (anymore)...
Numpy arrays seem to be unable to hold arrays with qutip quantum operators
if fails with:
TypeError                                 Traceback (most recent call last)
 in ()
----> 1 qutrit_basis()
/usr/local/lib/python2.7/dist-packages/qutip/states.pyc in qutrit_basis()
111
112     """
--> 113     return np.array([basis(3, 0), basis(3, 1), basis(3, 2)])
114
115
TypeError: a float is required
QuTiP: Quantum Toolbox in Python
Copyright (c) 2011 and later.
Paul D. Nation & Robert J. Johansson
('QuTiP Version:      ', '3.0.1')
('Numpy Version:      ', '1.9.0')
('Scipy Version:      ', '0.14.0')
('Cython Version:     ', '0.20.2')
('Matplotlib Version: ', u'1.4.0')
('Fortran mcsolver:   ', 'True')
('scikits.umfpack:    ', 'False')
('Python Version:     ', '2.7.6')
('Platform Info:      ', 'Linux', '(x86_64)')
()
Same happens for qutrit_operators, or any other function that return a numpy array full of quantum objects. Why not using a list instead?
Thanks for reporting this problem! It seems to be related to the recent numpy 1.9 (works fine with older numpy releases). We should either add dtype=object in the call to np.array or use list, as you suggests.
I've created a PR (#229) for fixing these issues. This problem seems to affect many parts of the qutip code so through review and testing seems necessary.
I vote for setting the dtype.  This is probably safer since there are some
parts of the code that expect arrays.
On Sep 10, 2014 11:36 PM, "Robert Johansson" notifications@github.com
wrote:
Thanks for reporting this problem! It seems to be related to the recent
numpy 1.9 (works fine with older numpy releases). We should either add
dtype=object in the call to np.array or use list, as you suggests.
â€”
Reply to this email directly or view it on GitHub
#228 (comment).
I've changed the python lists to numpy arrays with dtype=object in 8c2a390. In the case of the qutrit_* functions I don't think it makes much difference, but since it has been ndarrays before I guess it makes sense to stick with that, in case someone relies on this fact.
BTW: Is this a bug in numpy or designed behaviour? Should we file a bug report against numpy?
I'm not sure why it happens or what have changed, and if it is intentional or not. But it does not seem to affect all lists of class instances, so it might be something qutip specific:
http://nbviewer.ipython.org/gist/jrjohansson/123db30ba5defa7a25ad
It seems we have to set dtype=object for numpy arrays of Qobj instances because we define a __getitem__ (possibly in an incorrect way) in Qobj.
Another one happens in the function def __mul__(self, other) in qobj.py
And in def __rmul__ in the same module
Thanks a lot for following up and reporting these issues. I have tried to fix the two latest problems in #232
This issue has now been fixed in NumPy.
Good job hunting this down in NumPy!
