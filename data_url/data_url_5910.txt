The goal of this is to refactor simulator output data handling, and in particular snapshot data, to be more user friendly and more flexible.
Changing snapshots to be a new type of Data snapshot instruction that can be added to a circuit to record data from the internal state of the simulator, or derived from the state of the simulator.
These instructions should be identified by:
Optionally they may take additional parameters such as qubits, clbits, or other parameters. As a qobj the base Data instruction would look like.
One important point is that these instructions should not attempt to insert handle simulation of noise in recording data. Noise can be added to circuits using its own instructions which modify the simulator state queried by these instructions.
The data type refers to the type of data being recorded for example:
Each data type may support 1 or more subtypes which determine how the information is recorded. Possibly data subtypes are:
Furthermore each data subtype (other than single) could be made conditional on the current classical register values of the simulator (This is the current behavior of average snapshots in the simulator). Rather than store conditional data as a list as is currently done this should simply add an additional layer of nesting to the data.  Eg key: value becomes key: {"0x0": cond_val0, "0x1": cond_val1, ... }.
This gives 7 total possible data subtypes: [single, list, accum, ave, c_list, c_accum, c_ave]. Assuming a single datum for a datatype is an object T, the format of the returned subtypes would be:
The default subtype of a data instruction should be clearly documented in the class API docs, as should the list of all supported subtypes (if it supports more than 1).
For example:
Data instructions can be added to a circuit like any other instruction where they will either act on the full width of the circuit qubits/clbits, or on specified qubits and/or clbits as specified by the instruction.
Part of this refactor would be making the dat instructions easier to discover.  Currently snapshot instructions must be explicitly imported by running from qiskit.providers.aer.extensions import *
The new design should allow:
Current snapshots are difficult to access from results as they are nested in the result data as data['snapshots']['snapshot_type]['key'].
The proposal is to flatten this to simply data['key'] so they are no different from other returned data such as counts(and in fact counts themselves are a type of data snapshot placed automatically at the end of a circuit from the qasm simulator)
The internal refactor of the data storage classes and results has been started in #1002
At the moment there are two families of save instructions for different data types:
Single data can be one of four formats:
Average data supports more formats:
The instructions that should eventually be added include:
In principle the instructions that could be supported by each simulation method are in the following table where X means it is implemented, O means it could be supported but is not implemented.
I think all save instructions have now been implemented, except those for the extended stabilizer method.
