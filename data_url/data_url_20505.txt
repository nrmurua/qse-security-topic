Keys of these two types generated by ssh-keygen cause ssh to complain "invalid format" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.
Setup for the experiment:
OQS-OpenSSH is installed in ~/build/openssh.
I first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at "Added NTRU-Prime. #68" (0e49ae9). I then attempted it with liboqs at its current tip "Sync with PQClean" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip "Add HQC round 3" (0f0b045). Both exhibited the same results given below.
Server command line:
~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key
Client command line (in directory where ssh-keygen outputs are present):
ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls
where ${KEY} is one of: ./id_rainbowiaclassic ./id_rainbowiiicclassic ./id_rainbowvcclassic ./id_p256_rainbowiaclassic ./id_p384_rainbowiiicclassic ./id_p521_rainbowvcclassic
Expected results: key is accepted each time, and ls command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):
Actual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):
Interestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints debug1: Trying private key: ./id_p521_rainbowvcclassic which is a line that does not appear in the successful trace.
Hi Kevin, this reminds me of the problems we encountered with Rainbow III and V in SSH that we reported in Table 2 and Section 4.2 of our 2019 paper on TLS and SSH integrations.  At the time we didn't figure out how to get it working, and haven't made any progress since then.  At least as far as I can remember.  @xvzcf any other thoughts?
This seems to happen while ssh is attempting to load the private key file, not send the public key over the network, though it's certainly possible it's running into some other size limit. I may poke at it a bit more, but thought I'd put the report out there in case something obvious occurred to you all. A file load problem seemed like it might (dare I dream) be more straightforward.
Most (but perhaps not all) issues in that paper should've been fixed in this commit. I did have to increase size limits in various places (like here for example), but I might've missed a spot.
With respect to the delay in loading the private key file, it might be that the file is being processed 1 byte at a time. That resulted in huge delays when writing generated Rainbow keys out to a file, and was improved here by writing out to the file in 70-byte bursts.
At any rate, I'll try looking into this in a week or two if there isn't a solution by then.
ssh-keygen is generating P-256 keys for these two schemes when ssh-keygen is given their "short names" as the -t parameter (which is by far the norm). When these keys later get loaded, the curve nid doesn't match anything in the keytypes table, and so the keys are dismissed as unknown.
#74 corrects this behavior by always coercing the required number of classical bits to the correct number when choosing one of these hybrids that refers to a specific elliptic curve.
Closed by #74
