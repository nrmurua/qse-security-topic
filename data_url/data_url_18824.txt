From the documentation (https://openqasm.com/language/types.html#physical-qubits):
While program qubits can be named, hardware qubits are referenced only by the syntax $[NUM]. For an n qubit system, we have physical qubit references given by $0, $1, â€¦, $n-1. These qubit types are used in lower parts of the compilation stack when emitting physical circuits. Physical qubits must not be declared and they are, as all the qubits, global variables.
At AWS, we accept OpenQASM programs in the service, and we allow users to submit programs with physical qubits. As a developer interpreting OpenQASM semantics for our customers, I have the following questions and proposals:
Follow up AI: I will open a PR implementing my proposal taking into account feedback from today's meeting.
Notes from TSC:
Here are a few thoughts
The spec should probably address the question in some way
a. The compiler is not allowed to remap physical qubits.
b. The compiler is allowed to remap physical qubits.
c. The compiler must provide an option to not remap physical qubits.
(a) seems a bit restrictive. But, following @laurencap 's comment, is there any semantic difference between on one hand doing a search and replace $n to qn and then letting the compiler choose a mapping to hardware qubits. And on the other hand allowing the compiler to remap already specified hardware qubits?
If (b) is chosen I can imagine a user being frustrated that a particular fully compliant OQ3 compiler will not respect their mapping choice.
My preference from most to least preferred is c, a, b. Languages that are defined by an implementation often have documented optional behavior like this. I'm not so sure about languages that are instead defined by a spec. In the latter case, we may want to define a pragma for this. But OQ3 designers have not yet waded into specific pragmas. It would be something like pragma no_remap.
Is it possible that a user is not satisfied with the mapping done by the compiler? The user then wants to fix a subset of the mapping and then allow the compiler to do the rest of the mapping.
We could
a. Forbid mixing virtual qubits. And consider relaxing this if users/implementers present a reasonable use case, such as the one above.
b. Specify that language implementers may optionally support mixing them.
c. Specify that the language allows mixing. Then some compilers (probably all of them at the moment) would be non-compliant.
I'm leaning towards (b). On the other hand, it's not much different from compilers advertising that they don't support mixing, and so they are technically non-compliant.  It seems like (a) and (b) are changeable decisions, moreso (a). Whereas restricting (c) latter would not be backwards compatible.
Resolved by #505
