Hello! I would like to make a suggestion for the Qconfig.py.default regarding the APIToken. If the APIToken is set as an environment variable it can be imported using os and avoid being stored directly in a code file that will likely be part of a developer's public repos:
The change would look like the following:
Reference Qconfig.py.default
There's been a discussion happening on the tutorials in an open PR and it seems like this is the more appropriate place for the enhancement suggestion.
I think it's safer, you are right. Dealing properly with API Tokens is usually a headache, seems like there's no 100% secure way. We have some proposals that want to implement soon to make API Token management easier and safer for everyone, in the meantime I'd say that moving things to an environment variable is acceptable. What do you think @diego-plan9 ?
Using environment variables (or at least giving the users the chance to) is a good addition indeed - and hopefully will ease some of the security concerns (plus make integration of qiskit with other systems easier, as a nice bonus - we use them for the tests on travis actually) while we revise the issue as a whole, as @atilag mentioned. However, we also need to take into account the simplicity of the instructions for newcomer users, plus the existing users that might have a Qconfig.py already set (and the tools/references/instructions that still refer to setting the token in the QConfig.py file directly).
Trying to balance all the forces - perhaps a reasonable compromise would be to add the os.getenv() and some comments inside the last if block of Qconfig.py.default, keeping the rest intact and making it only kick-in if the user has not explicitly defined the API_TOKEN? As long as we can keep from Qconfig import APItoken working for all cases, it would be a good way of catering to power users while we revise the issue as a whole.
In group meeting we discussed putting Qconfig.py in user's home directory. Also, there should be a function in the SDK which checks for the file in the home directory and the user's environment.
@diego-plan9 Re simplicity , what about wrapping this in  a pip package that gets and sets the API token in the users python environment ?
(I have something like this in a private repo that I am more then happy to share )
Perhaps part of the solution can be from the appdirs package which handles cross-platform directory structure issues.
I believe that this was settled in our last meeting, where we converged on the idea of using a runtime config file in the users local dir.
The discussion and implementation of this has been moved to #385.
Closing this issue in the hopes of continuing the discussion at #540 and finally get the feature in place ðŸŽ‰
