The backend.configuration().gates contains information about the gates supported on the device.  These gates form the basis_gates of the device.  As such, the information contained in the gate configs is redundant.  Single-qubit gates have a coupling_map field that, in addition to being not a coupling_map at all, contains nothing more than a list of all qubits in the device.  Since all of our 1q gates rely on doing frame changes or X90 gates, these gates must always work for all qubits, and therefore this information is meaningless.  The cx gates also include extra information because the coupling_map* for them is nothing more than the coupling map for the device, by definition of the coupling_map.  The only thing left is the qasm def of the gates, but these are not backend config items, but actually definitions of the gates themselves that are independent of the backend.  Therefore this entire section of the configuration can be removed without loss of any information.  Detailed information about the gates, as they apply for a specific backend are included in the properties method.
the coupling map in its current form is supposed to be removed and put into the gates dictionary.
I guess the way to think about this is we need a coupling_map for gates that generalizes to n-qubit gates (which the original coupling_map did not allow). I agree the single qubit example becomes a little silly (although you could imagine some singles not supported on certain qubits, as long as a minimal set exists for all qubits). The cx gate seems to replicate the higher level coupling map right now, but I would say that's for backwards compatibility. In the future you may want the higher level coupling map to have groups of n qubits if n qubits are coupled to one bus (for example).
