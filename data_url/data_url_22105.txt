Example below is a mockup of a spin-echo where the TTL is used to switch on/off an RF switch. There is an unexpected phase offset between sawg0 and sawg1.
swag0 is yellow on scope
swag1 is green on scope
TTL is pink on scope -- trigger on pulse duration > 2.8 us
Scope field of view zoomed to rising edge of first pi/2 pulse. Scope shows unexpected phase offset between sawg0 and sawg1.

Secondarily, this exemplifies annoying latency compensation that's needed to align sawg with TTL. To be fully general there's quite a zoo of methods that need to be trivially wrapped. Is there a better way of doing this??
You are clearing the accu on one channel but not on the other.
You can latency-compensate the TTL instead.
You are clearing the accu on one channel but not on the other.
I expect that the following is setting the phase register of both channels at the same time. What code should I be using?
You can latency-compensate the TTL instead.
I'm treating TTL as the timing reference plane.
Doesn't this ad hoc solution wrinkle your sensitive clean-design nose?
@jbqubit Regarding TTL/SAWG latency matching, you are welcome to offer a constructive comment and/or funding in #40. Sure, it is a feature we think is desirable, otherwise #40 would not be open.
Please read the current documentation of SAWG (again). Are you satisfied that you have understood the way the DDS/DUC and the phase accumulator clear work? Especially in the light of #744 and #745...
But there are several other schemes that would do these kind of pulses.
I suspect you have questions about functionality. Just ask.
OK. I see that in your sawg API sawgN.xxx.set() does not advance the timeline. Therefore with parallel is not needed to achieve phase alignment. Please add a comment in the documentation to state this clearly. This is different than with the DDSs which used with parallel.
I've tested again and find that that phase alignment does not work as expected for sawgN on the same device. Here are two examples.

You can still use with parallel. Nobody is stopping you. And we generally try avoid describing all the things the API does not. Please file an issue if you are think the DDS docs are incomplete.
Is that 1.7 ns repeatable? Are the electrical paths matched? The second one might involve a bug. I'll have a look.
Are the electrical paths matched?
I was using a pair of MiniCircuits power splitters which are nominally identical but which are responsible for the 1.7 ns differential delay. So, Example 1 now works as expected with power splitters removed.
With power splitters removed, Example 2 still has a delay (below).

I take it that you had mismatched electrical lengths then.
Please answer my other question as well.
That delay in your second case is an intrinsic property of the design (simple cordic + HBF has one (sub-)sample more latency than the parallelized cordic). I'll document it. After all you are comparing the DUC phase with the low-f oscillators. That's not comparing equivalent things and delay matching here is decidedly not required for the envisioned use cases.
I can see a way to actually make them the same latency but it will increase resource usage and increase the overall latency. And again, I don't see the use case.
I found an easy approach that does not add resources and only marginally increases latency. Should be coming right up.
Is that 1.7 ns repeatable?
I take it that you had mismatched electrical lengths then.
Yes.
Are the electrical paths matched?
They are now matched.
I found an easy approach that does not add resources and only marginally increases latency. Should be coming right up.
Please let me know when the conda artiq-kc705-phaser binary is available and I will test.
