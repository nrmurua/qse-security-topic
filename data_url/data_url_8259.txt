Hi, I am trying to take tensor product of time dependent collapse operators but following error crops up,
TypeError: One of inputs is not a quantum object
Following is the tensor product I wanted to take:
V_ft=np.sqrt(kappa_f)*tensor([[destroy(2),[Qobj(np.array([[0,complex(0,-1)*np.conj(H_a01)],[0,0]]),dims=[[2],[2]]), u_t]],[destroy(2),[Qobj(np.array([[0,complex(0,-1)*np.conj(H_b01)],[0,0]]),dims=[[2],[2]]), u_t]],[destroy(2),[Qobj(np.array([[0,complex(0,-1)*np.conj(H_c01)],[0,0]]),dims=[[2],[2]]), u_t]]]
Hi, tesnor takes a list of Qobj, not a nested list. For example: tensor([destroy(2), destroy(2)])
Hi, tesnor takes a list of Qobj, not a nested list. For example: tensor([destroy(2), destroy(2)])
The nested list you are referring to is the time dependent operator who's tensor product I am taking. The argument is,
[destroy(2),[Qobj(np.array([[0,complex(0,-1)*np.conj(H_a01)],[0,0]]),dims=[[2],[2]]), u_t]]
Which is a time dependent operator in the H = [H0, [H1, py_coeff1]] format. Here
H0 =destroy(2) , H1=Qobj(np.array([[0,complex(0,-1)*np.conj(H_a01)],[0,0]]) and py_coeff1=u_t
I see, tensor does not support this. You need to use tensor for each Qobj and then construct the time-dependent format.
Closed as outside the scope of the tensor function.  (Also I can't read the code examples given here...)
