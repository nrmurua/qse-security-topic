We have 2 passes that do 1q gate optimization Optimize1qGates which only works on u1, u2, u3 (and u and p which are identical to u3 and u) and Optimize1qGatesDecomposition which works with any basis. Right now all the default pass managers are using logic to pick between the two passes with:
This is less than ideal because for over complete basis that include u1, u2, or u3 the resulting output is not fully optimized. We should be using the Optimize1qGatesDecomposition by default; except for where the 1q component of a basis set consists solely of u, p, u1, u2, or u3. This is because while after #5468 is fixed Optimize1qGatesDecomposition will produce the same result as Optimize1qGates in all cases for that case Optimize1qGatesDecomposition it's significantly slower than Optimize1qGates so we should use the faster pass in that case.
When this is implemented it will also fix #5436
@mtreinish and @kdk, combining #5468 and this issue, here's what I believe has to be done.
@enavarro51 The above plan looks good. (Though for 3, I don't know that it's straightforward to distinguish the 1q from 2q gates in basis gates. It may be better to split out the pass manager changes into a separate PR.) Feel free to reach out with any questions.
This was covered by #5554 .
