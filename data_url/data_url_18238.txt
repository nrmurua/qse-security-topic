As @decodoku mentions in #157, mapper leaves two consecutive H gates as u1(2 * pi).
I think this is closely related to #158
Identify gates equivalent with id e.g. u1(2 * pi), and remove it from the circuit
Improve mapper.optimize_1q_gates?
See #157
Run
Output will be:
To my understanding, u1 is done by software (zero error), so this practically has no decoherence/noise effects?
Yes if you see only u1. But, for this example, if we can cancel out u1, then we can also cancel out two cx q[1],q[0], that will reduce noise.
Umm. In current mapper, swap_mapper, direction_mapper, cx_cancellation, optimize_1q_gates run in this order. To cancel cx in this case, we may need to run cx_cancellation before direction_mapper or after optimize_1q_gates anyway.
Is this paper relate to this issue? https://pdfs.semanticscholar.org/a491/a603af08bf7337d7ebe94c09cf702891c64b.pdf
this is a bug and we should fix @awcross1 can you look at this as we should not set identities into the circuit and not removed pre and post gates.
PR #171 should address this issue. Further CNOT simplifications would require modifying the set of passes, which will be more natural after we implement the new architecture.
