The hardware interface to allow sequencing(/waveform generation) of pulses seems proposed in #20 is not powerful enough. A better solution is required.
A current approach, which seems to be working, consists of the following:
API: HardwareSequencingInterface, Sequencer
Internal: Class representations of an abstract hardware instruction set for waveform generation with the instructions
Change in PulseTemplate:
Removed generate_waveform(..).
Add build_sequence(Sequencer, Parameters, TargetInstructionBlock).
HardwareSequencingInterface:
Abstract, will be implemented by hardware specific classes. Methods:
Sequencer:
Used to convert the tree structure of pulse templates to a instruction sequence/block. Holds a HardwareSequencingInterface instance. Maintains a stack of pulse templates which are processed one by one. Subtemplates are pushed to the stack by their parent when it is processed.
The translation process is roughly as follows for the different PulseTemplate subtypes:
Invoking Sequencer.build() "compiles" an instruction sequence covering all templates until either the stack is empty or the top-most stock element requires a stop. This sequence can then be easily interpreted by some interpreter to configure the specific hardware devices.
Somewhat related with #25 .
Concept generally approved during meeting 4.
