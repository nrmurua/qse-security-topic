quilc fails to compile with SBCL 1.5.6.
This is essentially the same issue as quil-lang/qvm#168
See also #397
Quick-fix / bandaid PR similar to quil-lang/qvm#172 coming soon
Looks like there might be additional issues for cl-quil / quilc with SBCL 1.5.6 beyond just zap-info.
Changing issue title to indicate broader scope.
Expanded backtrace of the above test failure with CL-QUIL:APPLY-TRANSLATION-COMPILERS compiled with max debug settings.
Weeeeeeeeird. But fun.
A head-scratcher to be sure.
Looks like something fishy going on with the combination of define-compiler + funcall
If I just call the compiler directly rather than funcalling the symbol, I get a compiler-does-not-apply condition, as expected.
Also works If I explicitly funcall the fdefinition
Replacing fdefinition with symbol-function in the above also works...
The hyperspec entry for funcall says:
funcall applies function to args. If function is a symbol, it is coerced to a function as if by finding its functional value in the global environment.
And also
An error of type undefined-function should be signaled if function is a symbol that does not have a global definition as a function or that has a global definition as a macro or a special operator.
You'd think that the fact the symbol-function and fdefinition return the expected function would be enough to satisfy SBCL... something fun to look into  :-)
Kudos to @notmgsk for spotting this SBCL commit which looks like a likely candidate:
sbcl/sbcl@1f892df
A couple more examples:
This fails:
This doesn't:
All the define-compiler + funcall issues mentioned above appear to have been fixed in the following SBCL commit (phew):
https://sourceforge.net/p/sbcl/sbcl/ci/550c4d23c77cc670fb95d7216e3c6d493bbd76eb/
Closing this since the bulk of the memory corruption issues were resolved by the above mentioned SBCL commit.
Opened #407 to track fixing ZAP-INFO on SBCL 1.5.6+
