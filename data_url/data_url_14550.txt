Creating a QuantumCircuit with many registers scales quadratically in the number of registers.
In this trial, n single qubit registers are used to initialize a QuantumCircuit.

This may be less important of an issue if registers are dropped from circuits in the future.
The nested for loop in the check for duplicate register names is obviously the culprit here.  We could fix this by keeping track of a set of register names within the circuit, but that involves intercepting all external attempts to modify qregs as well, and unfortunately a few subclasses do that sort of thing, and it feels a bit messy to just keep adding more and more things on that subclasses have to override - ideally we'd have had a very very limited interface for how you're allowed to mess with the data defined in the circuit, but unfortunately that also has performance implications.
This idea will stay a problem whether or not we drop registers, it's just that with the overhaul for classical computation in circuit, we'll have a good chance to completely swap out all the data structures and access patterns.  It's possible worth leaving this issue for then, rather than trying to bodge another linked-state object to the publicly mutable QuantumCircuit.qregs.
If qregs was converted to a property method it should be transparent to any subclasses although as you suggest I'm not sure about other performance implications.
Regardless I'd agree with leaving this as low priority at this time until after the overhaul.
