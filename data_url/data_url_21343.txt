Currently, the dashboard displays every TTL or DDS channel available in the device database, with no way to select or reorder them. This is not nice on a large system (e.g. with DRTIO) that can have hundreds of channels.
I would propose the following:
See also #603 and #675.
In the long run, I'm not sure that an overhaul of the dashboard is the right way to tackle scalable moninj. For simple experiments the dashboard works well. But, for more complex experiments it doesn't seem like an efficient way of exposing the information the user wants.
For example, it would be nice to be able to use moninj to monitor servo drive levels both for long-term logging (to expose drifts in fibre coupling etc) and to automatically alert users if a servo clips.
It would be good to collect use-cases for non-real time monitoring and injection in realistic experiments and design a system that works for them. My suspicion is that the solution will end up with a framework that efficiently broadcasts the monitored data to user-defined applets that can process and display it (and tools to help build those applets).
A somewhat related feature that we've wanted for a long time is something that lets us record ADC traces/servo levels into ram and read them back later for debugging. Combing that with the analyser could provide a great experimental debugging tool.
Additionally, while not explicit mentioned in @sbourdeauducq's above post, scalable moninj should also include a rethink of the low-level implementation e.g. to make it play nicer with things like the SU-servo.
scalable moninj should also include a rethink of the low-level implementation e.g. to make it play nicer with things like the SU-servo.
That's just feeding the currently monitored address into the PHY so that its internal state can be mapped to block-RAM, right?
There are several aspects for scaling up moninj. There is the data exfiltration aspect from the RTIO Phys:
There is no intrinsic problem with adding moninj taps to SU-servo.
It's just that doing so for all channels and all profiles is getting
towards monitoring and injecting more than a thousand values.
Monitoring/injecting the current values (current ADC value, active
profile number, rf switch/hold bits, clipping, current ASF, current
FTW) might already be very useful and is much more doable (there are
still some restrictions and interference by e.g. the global servo
enable bit) and would be significantly less complicated or expensive
resource-wise.
In general, if we can come up with a really scalable moninj (scaling
to ~10k values, update based, with the proper state management, and
with proper GUI design etc etc) that would be great for this and also
for other things like SAWG.
Then on the protocol/networking side:
There are probably protocols and architectures around that are
well suited and we don't need to invent something. Maybe MQTT, or one of the many other *MQ, or something like what @klickverbot did with the servos in Zurich. Such an approach
would definitely also be nice for Thermostat, Humpback and Booster. It tackles a lot of the issues that crop up with simple SCPI-like interfaces (streaming, broadcasting, multiplexing, notification/callbacks, wire format, relaying, interfaces to databases).
