At various points in the code base, we use lists and values objects to signal an intention about the contents of a function's reply: a list typically (but not always!) means that every piece of the reply must be present in order to understand the reply, and a values object typically (but not always!) means that the first piece of the reply makes full sense alone, and the caller might be optionally interested in some other extraneous information as well.
These aren't completely respected, which isn't great. The habit of forming lists to force the caller to use a destructuring-bind based on whatever the callee's docstring says also isn't great: it would be better if the return value were more self-documenting, e.g., by having named fields.
We used cl-algebraic-data-type to as a quasi-lightweight implementation of this named field protocol in src/compilers/state-prep.lisp:state-prep-within-local-equivalence-class ( https://github.com/rigetti/quilc/blob/master/src/compilers/state-prep.lisp#L196 ). It would be good to settle on some protocol and use it absolutely consistently.
