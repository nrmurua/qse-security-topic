The functions in batch_util.py use custom multithreading to speed up calculations done using cirq interfaces.  However, this system causes issues when the cirq objects are actually interfaces to remote simulators or devices.  Since high performance is handled by the default qsim backend, we should remove this multithreading to give more freedom to the cirq backends.
Does the default backend support multithreading? Will it automatically scale with the number of processors on my machine?
The default backend is qsim, which supports multithreading, automatically scaling with the number of processors on your machine.
This issue was just about custom Cirq backends that call out to real hardware.  Now we let custom backends choose for themselves how to parallelize, instead of dictating local multithreading (which can overwhelm some quantum computers).
