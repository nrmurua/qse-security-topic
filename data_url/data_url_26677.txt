I thought that was just a problem with exported git tarballs and not the release, or was this an oversight in the 8.1 release (and/or did I grab a tarball prematurely? or is it something particular to the Debian build process?)
Anyway, I get:
I think it's highly unfortunate that get_revision_number uses angle brackets for unknown revision and I suggest to use something else, or maybe just no brackets at all. That being said - I guess get_revision_number should maybe be able to figure out it is being called in a release tarball and does not need to output anything and/or this should be handled differently in this case?
I'm sorry, I created the tarball from the wrong branch.
I've uploaded a new tarball with sha256sum: 7f37aead120730234a60b2989d0547ae5e5498d93b1e9b5eb548c041ee8e7772.
Ah ok, thanks.
I still think it'd be prudent to remove the angle brackets on master going forward, e.g. for people who hit "Dowload zip" on Github to get the latest code.
I'm sorry, I created the tarball from the wrong branch.
I've uploaded a new tarball with sha256sum: 7f37aead120730234a60b2989d0547ae5e5498d93b1e9b5eb548c041ee8e7772.
Hrm, this one seems to have some other changes, are they all legit? (the diff is a bit weird - is the new tarball, + is the old one)
I guess the first one is, but the second one? Not very important, though.
Yes, those changes are legit. They are the diff between 0bfbd41 and  2285224 following our release protocol.
for people who hit "Dowload zip" on Github to get the latest code.
Unfortunately, that's not possible as long as we're using git submodules. I'm hoping that we can drop submodules after DBCSR has moved out (#351).
I'll close this issue now. Feel free to re-open when you find other release related issues.
I can still reproduce the issue when simply removing the .git directory in the repo and then trying to build.
So, it has nothing to do with git submodules since the GH-provided tarball/zipball reproduces this (if not the one from a release, then the one you can get for any branch or commit by using [Code]/Download ZIP) @oschuett
Besides, a lot of packages (all autotools-based, and any Python-package uploaded to pip for example) require a dist build step to build release tarballs, which could be fully automated as we have done in DBCSR. There is nothing special with having to roll a custom release tarball nor is it a special feat to not having to do it.  How we handle issue reports and that we write robust code can make a difference though.
I think Ole's point was that the zip-download that Github provides right now is useless as it is missing the (still) required dbcsr git submodule, so even if get_revision_number would not provoke the syntax error, the build would fail later on.
But that does not prevent changing get_revision_number now to make it more robust.
I think it's a general Github/Gitlab problem that a lot of projects (especially autotools-based ones) require special steps to prepare a release tarball. Probably a Github-Action (or Gitlab-CI) pipeline would allow to automate that.
For the record, I tried to test the master branch before the 9.1 release and hit this again.
As there are no prerelease tarballs, I downloaded the master zip, and added dbcsr via git clone and (inside dbcsr) fypp via git submodule.
Thanks for flagging @mbanck! I've opened #1846.
Heh, I just filed the same PR
Hehe, then the honors is yours :-)
by the way, the angle brackets are also a problem with cp2k_manual.xml:
So two birds with one stone. Neat!
