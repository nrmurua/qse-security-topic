There is no seamless way to integrate C3 with high level interfaces such as cirq or qiskit. We would like to change that.
Support for gate level simulation of circuits defined using Qiskit with the C3 tensorflow simulator as a backend
Take circuit transpiled (based on system architecture and gateset provided by C3) by Qiskit compiler into QASM, parse this and create, if required, an intermediary output to be read by the C3 model_parser which is then simulated as usual by our C3 simulator
Qiskit provides a decent high level interface to defining quantum circuits and it's useful to have support for using Qiskit to define circuits which can initially have a gate level simulation (OpenQasm) and then a full physics simulation (based on OpenPulse)
None. This is essential.
 Figure out API used by Qiskit to call a backend simulator such as the QasmSimulator
 Inherit the qiskit Provider, Backend and Job Classes to write our own simulator which is a wrapper around the C3 tensorflow simulator
 Implement basic backend framework with C3Provider, C3Backend, C3Job and C3QiskitError
 Implement framework in c3_openqasm_simulator to accept Qobj and return Result
 Create C3 physical qubits from OpenQasm Qobj
 Convert instructions between Qobj and C3, essentially map the gateset
 Map execute() in qiskit to internal C3 interfacing
 Map shots/memory to experiment/population (measurement and readout)
 Create dictionary of results
 Achieve the following consistent interface:
 Update tests
 Update examples
 Update docs
 Update workflows with requirements
Closed in #12
