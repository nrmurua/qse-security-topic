Consider the existing default config.

Today, the config is created as a single file in 
In a remote dispatch scenario, the dispatcher will not have access to a config file on a local machine. Dispatcher config should be created as a separate file.
Add a config_file path in get_default_dispatcher_config(). Add an argument to the ConfigManager constructor to create client config, server config, or both. Alternatively you could create a DispatcherConfigManager class that manages just the dispatcher config.
Server config should include dispatcher, dask, and user_interface.
Related to #1208
It's important to have these separated out; if we had a situation where Covalent was installed locally and remotely with overlapping configs, the chance of conflicts is very high
Acceptance criteria
 Decompose the single ConfigManager into a ClientConfigManager and ServerConfigManager where both of them are child classes of ConfigManager
 Split the DefaultConfig dataclass respectively into DefaultClientConfig and DefaultServerConfig
 Update the set_config/get_config and update_config methods to return the appropriate config values depending on which config value (client or server) is being queried or updated
 Introduce an Config Manager type enum class CMType(Enum) that enumerates the different configuration file types (CLIENT/SERVER)
 Fix all affected tests
PR that closes this: #1249
PR: #1249
