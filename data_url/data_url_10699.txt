Description
There seems to be regression in dwave-system 0.6.0 package that causes EmbeddingComposite to fail finding an embedding of previously embeddable QUBO.
To Reproduce
Run the following code (instance.txt attached to the issue).
On previous version of dwave-system (0.5.4) embedding is found, with version 0.6.0 and above no embedding can be found for the example problems.
instance.txt
Expected behavior
Embedding is successfuly found.
Environment:
Additional context
It doesn't work on OSX 10.14.2 and python 3.6.4 either.
Can you tell me the version of minorminer (pip freeze | grep minorminer) you have in the working and non-working cases?
Both cases use minorminer 0.1.7.
I have been able to reproduce the issue and I am working on addressing it.
Does
resolve your issue?
If so this has to do with our new feature based solver selection. In 0.6.0 the solver is selected from the list of available solvers and in this case a (smaller) software solver was selected rather than DW_2000Q_2_1. The syntax above will work for both dwave-system 0.5.4 and 0.6.0 but going forward the better syntax would be solver = {'qpu': True} or if you want to be sure that you're always accessing the same system solver={'qpu': True, 'chip_id': 'DW_2000Q_2_1'}. See DWaveSampler's solver kwarg.
Closing due to inactivity. Feel free to reopen if the above fix does not work!
@arcondello Just wanted to say that this fix works :)
@mstechly, also worth noting, while we're on the topic of solver selection, we departed from the hard-coded-chip-id approach (for general use case) -- and feature-based solver selection is now preferred.
@arcondello illustrated the gist of that above, but for clarity: you can now use any exposed solver parameter (feature) and a set of operators (like relational, set, regex, etc) to specify which solver(s) satisfy your needs (yes, we will have multiple generally available solvers). If multiple solvers comply, the one with the lowest load is selected (by default).
For example, to ask for a QPU-based solver with more than a 1000 active qubits and a support for custom anneal schedule, you can say:
Note that token and endpoint are omitted above -- they can be specified via (1) config file, or (2) environment variables. Since you prefer environment variables, just set the DWAVE_API_TOKEN. You don't have to set DWAVE_API_ENDPOINT if you're using the default endpoint (i.e. if you don't have an on-prem system).
