Kindly consider the following example:
What I wish to know are the indices of the different subsystems after the application of each tensor product:
What is the general rule to follow to find the indices?
Once those indices are found, what is the right way to use them? For instance, consider the following:
This doesn't seem to be documented in the reference manual or the wiki.
Help again greatly appreciated.
The indices are in lexicographical order (as in standard QC books/papers). Say that you have 3 kets, |a>, |b> and |c>. So if you take the Kronecker product of |a> and |b>, then again with |c>, i.e. kron(kron(a,b), c), you get |abc>. The index of |a> is 0, of |b> is 1, and of |c> is 2. Also, if you do kron(c, kron(a,b)), you get |cab>, and the index of |c> is 0, the index of |a> is 1, and the index of |b> is 2. So it really is lexicographical order.
In your first example:
In your second example, result_1 = |10>, and result_2 = |100>.  To apply CNOT with ket_1 as control and ket_3 as target, then you need to do qpp::applyCTRL(result_2, gt.X, {0}, {2});, as ket_3 will have index 2.
Hope that helps.
Yes, that helps a lot, thank you! I was able to figure it out but it is always best when the original author confirms hypotheses him/herself.
While QC books work in lexicographic order, many tools (Qiskit, QUIL,...) are adopting the computer science convention of counting backwards.
That said, Quantum++ has been of immense help. I've got myself a prototype quantum programming language working thanks to QPP. Please do check it out at https://github.com/avalon-lang/avaloniq. Hopefully, one day it will feature among projects using this library.
Cheers!
I find myself in unchartered territory again with subsystem indices.
I have a situation similar to the one below:
The tensor product gives an object of the type |abab>. Reaching code like the one above threw a wrench in the scheme: what index do I assign to a and which one to b? I could use 0 or 2 for a and 1 or 3 for b. But not both.
What would be the idiomatic way to solve this problem with Quantum++?
Thanks again for your time.
Not sure what you try to achieve? You want something like a Controlled-Controlled-X-X? In that case, just do applyCTRL(res, gt.X, {0,2}, {1,3}).
Yeah, something like that!
My case was something like cnot(a, b); cnot(b, a) which ended up generating the tensor product above. The first CNOT generates the tensor product kron(a, b) (that is before calling applyCTRL). The resulting state is recorded for both a and b with their indices recorded. The second CNOT takes the preceding state from kron(a, b) and tries to create kron(kron(a, b), kron(a, b)). I could just apply the second CNOT on the existing tensor product but I needed to detect when I could forgo doing the second tensor product and the method I found was not reliable.
I ended up using early measurements. Though I don't like the solution, it seems to work for now.
I expect it to eventually fail for some corner case I haven't encountered yet so I'm happy with the solution you just proposed. I will test it before things get bad.
Again, thank you very much.
