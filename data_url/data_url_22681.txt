The following produces error
It would appear this precludes doing a scan on the core device. And, there is a long delay overhead.
Not sure why my attempt at using ARTIQ to report timing always returned None.
How do you get that "ts" list?
I'm following the flopping_f_simulation.py example.
Well, there is no ts result in flopping_f_simulation, and it does not show any similar problem AFAICT.
Sorry. Please disregard the last bit following $ time.
@whitequark How much time will it take to implement scans on core?
@sbourdeauducq The bulk of work (support for generating calls to methods when all you have is syntax) was already done when I added support for context managers, so I'd say around two days to implement and test.
Oh, that's without generators, i.e. you will need to define __iter__/__next__ methods. Generators will take a lot more time, I wouldn't even take it onto myself to estimate it because I'll need to read up more closely on how they work.
Ack. Let's delay this.
Also support MultiScanManager: ec3e779
For now, a workaround is to compute a list on the host and pass it to the device. After #478 is fixed, this workaround is also applicable to situations with several MultiScanManagers.
Maybe an option is to implement only support for __iter__ and __next__ (without generators) on the core device, and rewrite the scan code accordingly. MultiScanManager may be a bit tricky though (not so much because of generators, but because it's a lot of dynamic typing).
Other areas that need work:
There's native support for generators now in Rust and Clang so I need to reevaluate this.
Just doing iterators and 1d scans would go a long way.
@jordens OK.
Transferred to NAC3.
