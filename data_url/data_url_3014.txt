Right now QubitLoc is  just a 2d point.  This is very reasonable for our hardware, but there are other qubit types that are very natural and which we should support (lines, staggered grids, general graph connectivities).
Proposal:
Abstract out the interface that describes adjacency, i.e. make an interface type HasAdjacency which requires the method is_adjacent.  (Right  constant two qubit gate assumes that the qubits implement this method).
New Qubit types
GridQubit
LineQubit
Also a way to go from an Adjacency graph to a set of GraphQubits which implement HasAdjacency and  which obey the adjacency relation of the graph.
This would mostly be relevant for defining a single / two qubit gates that respect adjacency, and also for device which use this adjacency in some of their constraints.
QubitId is the fundamental type that gates care about, so it is very easy for others to implement their own. We don't have to do it for them.
I do think that QubitLoc should be moved into the google folder, and possibly renamed to XmonQubit.
As a prerequisite to #470, some extension of interfaces discussed here is required. What is required for placement code is:
I started to think about creating GridQubit, as discussed with @Strilanc, but all the methods I could think  about fit GraphQubit much better:
What do you think about this?
@dabacon Do we need a graph qubit for the next milestone? My impression is that we don't; it's more abstract than what we need. At most we would need a GridQubit for 2d points, which is currently played by Xmon.
We're going to need to deal with more arbitrary adjacency for ion trap devices, so I think we will need something like this.  One thing to note however is that I don't think we want to have objects like quality on the qubits themselves.  In my mind the QubitId is the generic object, and these sub-classed Qubits are about laying out a structure for thinking about moving from one qubit to another, BUT that might not even correspond to the allowed interactions.  So it's more like the abstract layout of the qubit, and putting things like quailty (of which gate? what quality?) is something that will come from elsewhere (essentialy it should be at least close to the hardware spec)
It seems more natural for adjacency and gate information to be part of the device rather than the qubit. Why not just give GraphDevice a graph attribute whose vertices can be generic QubitIds?
@bryano Is this related to all of your not-yet-merged pull requests?
Yea, specifically #1181
Can this be closed?
