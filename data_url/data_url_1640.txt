Is your feature request related to a use case or problem? Please describe.
I have code that involves passing gates to functions that then construct circuits, and sometimes I want to add tags to those gates (like cirq_google.PhysicalZTag()). Maybe I'm missing something, but there doesn't seem to be any notion of a gate right now that, when applied to qubits, results in an operation with the tags that I want.
Describe the solution you'd like
Would be nice if gates could have tags added to them, or maybe even just a TaggedGate class that wraps the tags and the gate, and when applied to qubits creates the operation with those tags.
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
I see that having gates tagged was considered earlier: #1940 (comment). A cursory reading through the comments in #2407 (which had tagged gates) and #2670 (which was eventually accepted, and only has tagged operations) doesn't really give me a feel for why tagged gates were dropped, except maybe because the tags were originally only on gates, and many operations don't have gates.
To do some requirements gathering, what would you want for the behavior of something like gate.with_tag(PhysicalZTag()).on(q).without_tags().gate.tags?
I would think that Operation.without_tags would only modify the tags on the operation itself, not the gate, rather than traversing down inside the operation (note that an op could be a CircuitOperation with a circuit that itself contains tagged operations, and I definitely don't think we'd want without_tags to traverse down into that circuit and mess with tags there). So in the example given, I'd say we'd want the PhysicalZTag on the gate to be unchanged.
That said, it's not clear to me how generically useful this sort of gate tagging would be, and whether it would be worth it given the potential confusion of managing tags on different kinds of objects. @jarthurgross, could you modify your code to take a gate and optional tag(s) as separate arguments and then apply the tags after applying the gate to qubits? Another possibility would be to define a protocol to capture the notion of an "operation factory" that can be applied to qubits and then take that instead of just a Gate, something like:
I think I agree here. We have a roadmap item regarding tagging different things, and it could get confusing if we started inheriting tags from qubits to moments etc., or even more so if some things inherited and some didn't. There's also further rabbit holes like gate.with_tag(PhysicalZTag()).on(q).without_tags().with_gate(gate.with_tag('x')).
The "operation factory" solution definitely works for my use case. In my initial thoughts a tagged gate would simply pass it's tag along to an operation when applied to qubits (since I would want the PhysicalZTag() to work with existing code, which expects it to be on an operation), so gate.with_tag(PhysicalZTag()).on(q).without_tags().gate.tags would be empty. From this perspective it wouldn't make sense for an operation to have a tagged gate, so I was probably asking for a new class TaggedGate that would basically be the operation factory @maffoo suggested.
Cirq cync.  We have decided that this is antithetical to the tag functionality (that tags affect specific operations) and that there is a work-around specified in the comments (to create an operation factory) so we have tentatively triaged this to "won't fix"
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
