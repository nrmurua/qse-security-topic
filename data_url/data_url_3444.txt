test_measure_observables_inherit_noise_errors is broken and I'm not sure why, so I skipped it so we could proceed. It would be great if you could look into it.
some of traceback:
Not sure, it passes for me.
Then you probably have the wrong version of something.
I'm on the latest master branch of pyquil, version '2.7.0'
check qvm and quilc
quilc recently changed how it prints floats, which can indeed result in differences on the order of e-16. Tests with literal string comparisons ü§∑‚Äç‚ôÄ
I'm using the qvm version 1.7.2, and the quilc version 1.5.0, and I still don't see the error. A few questions:
(a) @karalekas, I see this and 52 other tests being skipped even on master. Is that expected? I tried creating the same test with a different name but that was getting skipped too, so I resorted to testing within a jupyter notebook.
(b) @ecpeterson Tbh, the whole "noise inheritance" thing has always been a bit of a hack, and relies on searching for literal strings in the Program, then appending them in the inheriting Program (see e.g. https://github.com/rigetti/pyquil/blob/master/pyquil/operator_estimation.py#L1041). Is there a more graceful way to handle this?
(c) @ecpeterson  My ./quilc --version and VERSION.txt (which is 1.7.2) disagree, and I get
when I try to run make quilc. I have the 4 basic requirements listed under "Building the Quil Compiler" at https://github.com/rigetti/quilc, so I'm assuming I have an issue with the MAGICL dependency? I'm guessing I'd be able to recover the test failure if I see the most-up-to-date version of quilc.
@msohaibalam sounds like you've somehow picked up quilc from quicklisp rather than locally installed. I would do the following in your quilc dir:
If that doesn't work, let me know and I'll drop by.
@notmgsk Thanks, that works! I am now up to date with version 1.7.2 for both quilc and the qvm. @karalekas I still don't see the error. But in any case, if numbers appearing at the N-th decimal place are the issue here, then a solution is to simply print out Program.out() and modify the string appropriately. Alternatively, one could play around with the numbers appearing in kraus_ops_* and p.define_noisy_readout(...) until we get nice numbers that round off to some small number of decimal places.
FYI, I still don't see this test to be failing, and Semaphore doesn't seem to either.
This has been resolved, thus closing.
