Support for backends with defective qubits and gates was added in PR #4110. However, it was reverted by PR #4723 because Qiskit/qiskit-ibmq-provider#712, which is fixed by Qiskit/qiskit-ibmq-provider#713.
Too complicated? Here is the bottom-line: The PR #4723 should be reverted once Qiskit/qiskit-ibmq-provider#713 is merged.
No, that's only half of the story. It's more than just Qiskit/qiskit-ibmq-provider#713, the way args are modified in #4110 does not work because we can not use backend objects as arguments in multiprocessing. While Qiskit/qiskit-ibmq-provider#713 will probably fix it for ibmq provider, aer will never work because it's not possible to pickle the C++ simulator python object (which relies on pycapsule, or at least that's as far as we've been able to debug because it's a hard failure) that is part of the backend class. The object being pickleable is a hard requirement for anything being passed via multiprocessing because python will pickle it to send the object to the child process. #4110 will need to be modified to work without passing Backend objects over parallel_map before we can consider merging it. I've moved this to 0.16 so we don't hold up the release on this.
PR's like this also raise other questions.  In this case we have software implementing workarounds for faulty qubits / edges by avoiding mapping to these faulty components.  However, at the same time, we also have rules about when a circuit is guaranteed to run once compiled:
https://quantum-computing.ibm.com/docs/cloud/backends/versioning
If I have an old circuit that was compiled for a backend and the backend version did not change, yet we remap the circuit because of temporary faulty components this violates these versioning rules.  These kind of things need to be addressed in parallel.
