There are many use cases where one wants to guarantee that multiple groups of circuits are run close to each other in time. This can be done by batching them into one job. One example of such use case is testing error mitigation schemes:
Here we want to compare the fidelity of the outcomes of the two error mitigation strategies (qc_error_mitigation_1,qc_error_mitigation_2), while leveraging SPAM error mitigation provided by qiskit. Currently, there is no easy (documented) way of disentangling the results in res corresponding to the four groups of circuits, since the state tomography circuits generator will assign the same labels to both qst_error_mitigation_1  and qst_error_mitigation_2. One hack that I've been using is keeping track of the indices (e.g. res.results[len(meas_calibs1)+len(qst_error_mitigation_1):len(meas_calibs1)+len(qst_error_mitigation_1)+len(meas_calibs2)]  corresponds to the results of meas_calibs2) and appending "ignore" to the names of other circuits so that StateTomographyFitter would ignore them. However, this approach is messy and obviously error-prone.
As I understand, the current solution is running the circuits on hardware using the dedicated mode. However, this is somewhat wasteful on IBM's side and expensive on user's side.
Proposed solution is execute_batch that would take as input list of lists of experiments and returning as result() a list of result objects.
Even though execute is expected to be deprecated in the future (#5897), the same considerations apply to backend.run().
Is this related to dynamic_reprate_enabled and rep_time?
I'm not familiar with these features, so I'm not sure. This enhancement request is about making it easier to stuff a bunch of circuits into one job. Currently, you can pass a list of circuits to execute (or backend.run), but it requires some hacking to retrieve the results of each specific part of the list, since all results get batched into one result object.
After opening the issue, I've found a better hack: creating a copy of the result object that only has the relevant experiments
It's still a bit unsatisfying, since it relies on undocumented (?) and subject to change behavior of the result object.
@rsln-s - please note that ignis will eventually be replaced by Qiskit Experiments, written in a way thatâ€™s more modular and reusable for experimentalists, see the following blog:
https://www.ibm.com/blogs/research/2021/04/qiskit-application-modules/
In https://github.com/Qiskit/qiskit-experiments (still WIP) you would be able to perform batch experiments.
In addition, the plan is to move the Mitigator class into Qiskit (Terra).
Please contact me if you have any questions or suggestions on ignis methods.
