This is a followup to PR #896, specifically the following discussion
What do you think of making BaseAsyncExecutor its own base class instead of a subclass of BaseExecutor? That way we can enforce that run() is a coroutine. Trying to handle the case where run() is not a coroutine here would block the event loop.
We can make a simple BaseAsyncExecutor base class with just execute and run. All the logic pertaining to a local conda env can be jettisoned as it is incompatible with async.
Since an async run() is not really "derived" from non-async run() (they aren't invoked in the same way), BaseAsyncExecutor is logically parallel to, not derived from, BaseExecutor.
...
I would've agreed with that, actually I was going to do it like that at first, but a lot of things in BaseAsyncExecutor are the same as in BaseExecutor which are unrelated to conda, and their respective function signature, attribute types are similar as well; things like: log_stdout, log_stderr, cache_dir, get_dispatch_context (although this will be removed soon), write_streams_to_file(), to_dict(), from_dict(), short_name().
Since all of these functions/attributes will need to be copy-pasted in the new BaseAsyncExecutor, I figured it was better to derive them from BaseExecutor. Perhaps if we put those things in a common file then both executors can import it from there? Might be out of the scope of this issue.
