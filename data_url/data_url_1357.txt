The functionality for simulating as a product state is currently contained in SimulationProductState, which contains a mapping from qubit to SimulationState. SimulationState contains both quantum and classical data. It's a bit hacky because when combining or factoring states, it has to ensure classical data is consistent between all the factors. Not a huge problem, but it would just make more sense to move the functionality to the quantum layer, where classical data does not even come into play. Thus there should be a QuantumProductStateRepresentation that does basically what SimulationProductState does now. Then we can migrate our product state code to use that instead, and deprecate SimulationProductState.
Should be fine for post-1.0.
This ends up being basically impossible because of the way everything goes through the act_on protocol. QSR doesn't have all the information required to be an act_on target.
For posterity, "impossible" is a bit strong. It would require having the various SimulationState._act_on_fallback_ call a new method act_on_fallback or something, on their corresponding QuantumStateRepresentation. Basically push all the _act_on_fallback_ logic down to the QSR level. This would require passing in the prng, the classical_data, etc. into this new function (or maybe pass in self and do a dependency inversion or something). So it's plausibly a bit weird in that now QSR has to know about classical_data. But maybe that's okay: at least QSR isn't maintaining those fields. Anyway once this is done, then finagling a product state into QSR would be possible. Still not trivial, but definitely doable.
