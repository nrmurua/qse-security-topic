When I tried to use the qutip.squeeze function for my simulations I noticed that something was off. Upon further investigation I found out that the output is not a truncated version of the single-mode squeezing unitary, but rather the matrix exponential of the truncated generator. These are very different things!
Am I right in assuming that the most useful matrix would be the truncated unitary? If that's the case, the current method to compute it is wrong. To compute the right matrix one can use the disentangling formula for SU(1,1) (formula (31) here):
As you can see, this definition does not depend on the truncation parameter. Specifically, the upper-left portion of the matrix that qutip.squeeze outputs converges to my squeeze function for large n.
I suspect that one can apply similar arguments to other functions in qutip.
No, it's not unitary: the actual unitary is the infinite-dimensional one, but you will never have that. This is a truncated version of that unitary.
Our version is the proper way for generating a valid unitary in the truncated space.
Indeed, it is a unitary, but it's meaningless: the matrix elements are not the matrix elements of the squeezing operator. How can I use qutip.squeeze in a meaningful way?
Just think about this: the squeezing operator populates all odd/even numbers, it cannot be a unitary operator in a finite dimensional subspace.
Not sure what you mean in a meaningful way?  Beginning in a truncated space, exponentiation of the raising and lower operators gives the QuTiP result.  The formula is identical to the standard squeezing operator definition, and it is unitary on the truncated space as it should be.  We do not have to have the same coefficients as the textbook infinite dimensional formula.  I am not sure what meaningful result could come from using a unitary operator that is not actually unitary over the space you are in?
Perhaps an example will help:
Say that I want to squeeze the vacuum with z=1. What I should do is compute the vector S(z)|0> for z=1.
What I would expect is that the amplitudes of the result shouldn't depend on whether I decide to truncate at dimension 10 or 20 or 30, but with the current implementation of qutip.squeeze it does:
tells me that (for instance) the 5-photon state has amplitude 0.453, while according to
the same state has amplitude 0.310. This is a physically relevant difference, so how do I answer the question: what's the probability of detecting n photons in the S(z)-squeezed vacuum? With the current implementation of qutip.squeeze I cannot.
Do you see the problem?
By the way, the actual amplitude is 0.286, which is what my operator gives.
I know exactly what you are saying.  You are not the first to ask this issue.  In a truncated Hilbert space, that is the squeezing operator.  Of course, you are free to use your own version.  Be careful  to normalize your probabilities if you do.
OK, if it's intended then there's nothing to change in the code. But I think it would be helpful to document this in a clearer way: there's a big risk of misinterpreting the operator.
I should mention that the results I previously mentioned are for squeezing the n=1 Fock state.
Yes, I understood. In fact, convergence is much slower for higher number states (that's what I meant by "n photons").
Indeed. But I still fear that users will be misled into thinking that they are handling a truncated version of the infinite S(z), which they are not.
Also, could you give me a realistic example of an instance in which qutip.squeeze can be used? I'm still puzzled when I think that its entries depend on the cutoff.
