twoQ_clifford_error returns wrong EPC.
After #360, gate_per_clifford function returns dictionary of gate counts with the key of gate names instead of list of float. This change is required to extend the usage the function to backend which has another native gate set.
The function twoQ_clifford_error also takes the result of gate_per_clifford as an input, but interface is not updated.
update  twoQ_clifford_error function to handle new gate count object format.
Looks like updating twoQ_clifford_error while keeping the interface is bit difficult because it represents index of qubit and type of native gate as a index of list.
for example:
because new gate_per_clifford returns gate counts as Dict[int<qubit index>, Dict[str<gate name>, int<count>]], converting this dictionary into order sensitive list requires index of qubit and gate names to find the correct position to insert count value.
Since this is critical to update relevant tutorial, I propose two approaches to update ignis tutorial.
[1] update tutorial side: create the list from the dict manually
[2] update ignis side: define new function that has comparable interface with calculate_2q_epg
personally I prefer 2 because order sensitive list is difficult to debug (because the context of qubit and gate name is lost).
I agree that option (2) is better, since creating the list is confusing.
I realized the function has been existing in the textbook. I'll keep original twoQ_clifford_error function to minimize the impact to the community until next refactoring begins.
https://qiskit.org/textbook/ch-quantum-hardware/randomized-benchmarking.html
I will take option [1] inside the function so that you can directly input gate_per_cliff without constructing the list.
Does this mean we have two functions doing basically the same thing? If so we should go with approach two and deprecate twoQ_clifford_error.
No. I add a patch for twoQ_clifford_error without changing original interface. It works iff a basis_gates consists of u1, u2, u3, cx, ie just insert a code of [1] into twoQ_clifford_error
My point is we shouldn't have two functions with basically the same functionality. We should either remove the new one, or deprecate the old one.
They are not the same function.
So, I suggest to leave both functions, since I think that both of them should be useful for the experiments.
Yep I missed the c before. What I meant was we should add the calculate_2q_epc (EPC not EPG) that Naoki proposed above with the new interface, and deprecate the old interface of twoQ_clifford_error.
