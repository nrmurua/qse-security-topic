I have gone over this before, but it is again brought up due to #1945.  It should be possible to set an initial_layout using a list of just integers, no (QuantumRegister, int) tuples.  For example, when mapping a Bell circuit to qubits 3 and 4 on qx4 the follow are equivalent:
layout = [None, None, None, (QuantumRegister(2, 'q'), 0), (QuantumRegister(2, 'q'), 1)]
layout = [3, 4]
Not only is this latter one cleaner and shorter, It gets QuantumRegister names that cause problems (#1945), and is the exact same method that is used in the NLayout for the Cython StochasticMapper.  The conversion to the internal method is essentially already encoded in the NLayout.to_layout() routine.
layout = [None, None, None, (QuantumRegister(2, 'q'), 0), (QuantumRegister(2, 'q'), 1)]
and
layout = [3, 4] dont have the same meaning...
I think NLayout should be internal and, externally, Layout should be used.
Yes this issue is created before I knew that. This has been implemented in #2058 and does not conflict with your other list format.
I can also argue that [3, 4] is not a valid layout :) CMV!
It is a one-to-one and onto mapping from virtual to physical where the virtual is the index variable and the physical is the value at that index.  It works because your qubits (qreg, int) label is really nothing more than an integer.
After talking with @nonhermitian it's more clear to me. This is much closer to our existent generate_trivial_layout. This method takes the list of qregs and assigned linearly on physical to each of them. Similarly, layout = [3, 4]  would assign 3to the first qubit register in the circuit and 4 to the second one.
