I’m trying to apply the noise simulator to a circuit, but I run into this:
The implementation of the noisy simulator is done in these lines in the code I’m running:
Notably, I do not seem to run into the error when I remove “probability=0.1”---however, I also don’t seem to be observing any error applied to the output state either.
Note: edited the issue to include backticks so the code is formatted.
I can reproduce the issue. Basically, the problem here is that the correct way to run a noisy circuit is incredibly confusing.
When you create a noisy circuit, you get back a "Job", which contains the noisified circuit and also some parameter sweeps. You have to wrap up those sweeps into a form understood by the simulator, and pass the circuit and the sweeps along to the simulator.
Something like this:
Which, for me, prints:
I assume this code effectively solves the problem for @olsonjonny , but it doesn't solve the underlying confusion. We need to smooth this out. So I've renamed the issue appropriately.
@dabacon @maffoo @dstrain115 How do you think we should clean this up?
Perhaps we should have some concept of a "circuit+sweep+etc modifier" that can be passed into the simulator's run argument? Noise would be one such modifier.
Or maybe we should have a NoisySimulator which wraps the usual simulator, and modifies circuits on the way in?
My original intent was to have the Job be everything that you want to pass into the simulator (or to Quantum Engine).  I don't think you would want to add a NoisySimulator, since you may want vary other parameters or other aspects of the Job.
I'm not too familiar with the simulator, but I guess it would allow either an interface to accept a Job, or to modify the Job object to more easily map to the arguments (circuit, param_resolver, repetitions).
Related to the earlier comments, I'm curious why the noisy simulator modifies a job object in the first place since you would never want to pass a noisy job to the actual hardware in the first place.  It seems like you could simply have it modify a circuit directly, and input the noisy circuit into the Job pipeline.
Thank you @Strilanc for solving my earlier issue; it works.  But I do have a more pressing question/comment to go along with it.  Suppose I run the above code with a slight modification, doing the following:
The measurement results I will get is 10 repetitions of the exact same noisy circuit.  That is, the "coin flips" which determine where to put the noisy gates are done only once, and then 10 repetitions are done on that circuit.  Maybe there is a reason to have this feature that I am not seeing, but this is not typical of what we imagine when we want to include noise in a circuit.  Rather, we would like the "coin flips" to be done independently on each repetition of the circuit, so that the noise is randomized for each run.  Unless, of course, I'm doing something wrong by defining N outside of the context of the Job?
Of course, I can work around this by setting repetitions=1, taking a measurement, and then looping N times over the noisy_job = noise.transform_job(job).  But this doesn't seem natural...
We are proposing #929 as the path forward for our first version of noisy simulators.
Obsoleted by all the other noisy simulator issues and work.
