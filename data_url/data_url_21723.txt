Unexpected compiler behavior with numpy bool. This can produce silent errors.
Implicit casting between Python and numpy bool hasn't been implemented in the compiler. E.g. np.bool_(True) == True gives a compiler error. In comparison, the corresponding situation for ints (np.int_(0) == 0) is handled fine.
1a. calling np.bool_(True) from the kernel produces AttributeError: 'TVar' object has no attribute 'instance'**
1b. if an attribute self.np_true = np.bool_(True) is defined outside the kernel, the kernel expression  self.np_true == True raises an AssertionError in the compiler.
Comparing two numpy bools produces the same error as 1b.
Example: self.np_true==self.np_false, where the attributes were defined outside the kernel  by:
Similar to Issue 736 bool casting to int in the kernel is not possible for numpy bools.
This behavior means that to do logic with arrays one needs to use  arrays with dtype=np.object_.
I would expect numpy bool and python bool to be treated the same by the compiler. Numpy False should not evaluate to True. Minimally, this behavior should be documented.
I wasn't aware that numpy.bool_ exists when implementing compiler support for numpy. (Actually, why does it exist?)
__builtins__.bool is an integer subclass. numpy.bool_ is a true (sic) boolean type. This changes the behavior of bitwise not. This is a nice summary I think: https://joergdietrich.github.io/python-numpy-bool-types.html
@airwoodix thanks for posting the nice summary.
@whitequark I believe the original reason this came up was trying to use numpy arrays of bools. As @pathfinder49 points out, currently one either has to to use dtype=_object in the array, or use a python list (which is not generally recommended practice), which isn't obvious from the docs.
