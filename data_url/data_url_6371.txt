Installed the latest AMD 2020 driver and found the following error when (precompiling) qrack
Question is: is this qrack or is this the driver ? This is the 2020 driver installed on ubuntu 18.04 with an AMD R9-290X videocard. installed --headless and opencl on legacy.
Anyone recognize these errors ?
tnx,
Aryan
root@clinfo:~/qrack/_build# ./qrack_cl_precompile
Precompiling OCL kernels...
Will save to: /root/.qrack/
Device #0, Built JIT.
Error building for device #0: -11, -2"/tmp/OCL29133T1.cl", line 13: warning: OpenCL extension is now part of core
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
^
"/tmp/OCL29133T1.cl", line 249: warning: variable "YT" was declared but never
referenced
cmplx YT;
^
"/tmp/OCL29133T1.cl", line 268: warning: variable "YT" was declared but never
referenced
cmplx YT;
^
"/tmp/OCL29133T1.cl", line 342: warning: variable "Y0" was declared but never
referenced
cmplx Y0;
^
"/tmp/OCL29133T1.cl", line 434: warning: variable "qubitCount" was declared
but never referenced
bitCapInt qubitCount = args.y;
^
"/tmp/OCL29133T1.cl", line 664: warning: variable "mask" was declared but
never referenced
bitCapInt mask = args.y;
^
"/tmp/OCL29133T1.cl", line 912: warning: variable "isOverflow" was declared
but never referenced
bool isOverflow;
^
"/tmp/OCL29133T1.cl", line 963: warning: variable "isOverflow" was declared
but never referenced
bool isOverflow;
^
"/tmp/OCL29133T1.cl", line 1150: warning: variable "carryMask" was declared
but never referenced
bitCapInt carryMask = bitCapIntPtr[3];
^
"/tmp/OCL29133T1.cl", line 1179: warning: variable "carryMask" was declared
but never referenced
bitCapInt carryMask = bitCapIntPtr[3];
^
"/tmp/OCL29133T1.cl", line 1231: warning: variable "outMask" was declared but
never referenced
MODNOUT(i, (inRes | outRes | otherRes));
^
"/tmp/OCL29133T1.cl", line 1231: warning: variable "lowMask" was declared but
never referenced
MODNOUT(i, (inRes | outRes | otherRes));
^
"/tmp/OCL29133T1.cl", line 1236: warning: variable "outMask" was declared but
never referenced
MODNOUT((inRes | outRes | otherRes), i);
^
"/tmp/OCL29133T1.cl", line 1236: warning: variable "lowMask" was declared but
never referenced
MODNOUT((inRes | outRes | otherRes), i);
^
"/tmp/OCL29133T1.cl", line 1247: warning: variable "outMask" was declared but
never referenced
bitCapInt outMask = bitCapIntPtr[3];
^
"/tmp/OCL29133T1.cl", line 1250: warning: variable "lowMask" was declared but
never referenced
bitCapInt lowMask = (ONE_BCI << len) - ONE_BCI;
^
"/tmp/OCL29133T1.cl", line 1472: warning: variable "carryMask" was declared
but never referenced
bitCapInt carryMask = bitCapIntPtr[5];
^
"/tmp/OCL29133T1.cl", line 1504: warning: variable "carryMask" was declared
but never referenced
bitCapInt carryMask = bitCapIntPtr[5];
^
"/tmp/OCL29133T1.cl", line 1564: warning: variable "lowMask" was declared but
never referenced
CMODNOUT((i | controlMask), (inRes | outRes | otherRes | controlMask));
^
"/tmp/OCL29133T1.cl", line 1569: warning: variable "lowMask" was declared but
never referenced
CMODNOUT((inRes | outRes | otherRes | controlMask), (i | controlMask));
^
"/tmp/OCL29133T1.cl", line 1585: warning: variable "lowMask" was declared but
never referenced
bitCapInt lowMask = (ONE_BCI << len) - ONE_BCI;
^
"/tmp/OCL29133T1.cl", line 1887: warning: variable "j" was declared but never
referenced
bitCapInt i, iLow, iHigh, j;
^
"/tmp/OCL29133T1.cl", line 1953: warning: variable "amp" was declared but
never referenced
cmplx amp;
^
"/tmp/OCL29133T1.cl", line 1973: warning: variable "amp" was declared but
never referenced
cmplx amp;
^
Segmentation fault (core dumped)
CLinfo of the machine:
root@clinfo:~/qrack/_build# clinfo
Number of platforms                               1
Platform Name                                   AMD Accelerated Parallel Processing
Platform Vendor                                 Advanced Micro Devices, Inc.
Platform Version                                OpenCL 2.1 AMD-APP (3110.6)
Platform Profile                                FULL_PROFILE
Platform Extensions                             cl_khr_icd cl_amd_event_callback cl_amd_offline_devices
Platform Host timer resolution                  1ns
Platform Extensions function suffix             AMD
Platform Name                                   AMD Accelerated Parallel Processing
Number of devices                                 1
Device Name                                     Pitcairn
Device Vendor                                   Advanced Micro Devices, Inc.
Device Vendor ID                                0x1002
Device Version                                  OpenCL 1.2 AMD-APP (3110.6)
Driver Version                                  3110.6
Device OpenCL C Version                         OpenCL C 1.2
Device Type                                     GPU
Device Board Name (AMD)                         AMD Radeon(TM) HD 8800 Series
Device Topology (AMD)                           PCI-E, 05:00.0
Device Profile                                  FULL_PROFILE
Device Available                                Yes
Compiler Available                              Yes
Linker Available                                Yes
Max compute units                               10
SIMD per compute unit (AMD)                     4
SIMD width (AMD)                                16
SIMD instruction width (AMD)                    1
Max clock frequency                             1150MHz
Graphics IP (AMD)                               6.0
Device Partition                                (core)
Max number of sub-devices                     10
Supported partition types                     None
Max work item dimensions                        3
Max work item sizes                             1024x1024x1024
Max work group size                             256
Preferred work group size (AMD)                 256
Max work group size (AMD)                       1024
Preferred work group size multiple              64
Wavefront width (AMD)                           64
Preferred / native vector sizes
char                                                 4 / 4
short                                                2 / 2
int                                                  1 / 1
long                                                 1 / 1
half                                                 1 / 1        (n/a)
float                                                1 / 1
double                                               1 / 1        (cl_khr_fp64)
Half-precision Floating-point support           (n/a)
Single-precision Floating-point support         (core)
Denormals                                     No
Infinity and NANs                             Yes
Round to nearest                              Yes
Round to zero                                 Yes
Round to infinity                             Yes
IEEE754-2008 fused multiply-add               Yes
Support is emulated in software               No
Correctly-rounded divide and sqrt operations  Yes
Double-precision Floating-point support         (cl_khr_fp64)
Denormals                                     Yes
Infinity and NANs                             Yes
Round to nearest                              Yes
Round to zero                                 Yes
Round to infinity                             Yes
IEEE754-2008 fused multiply-add               Yes
Support is emulated in software               No
Address bits                                    32, Little-Endian
Global memory size                              2144972800 (1.998GiB)
Global free memory (AMD)                        <printDeviceInfo:75: get number of CL_DEVICE_GLOBAL_FREE_MEMORY_AMD : error -33>
Global memory channels (AMD)                    8
Global memory banks per channel (AMD)           16
Global memory bank width (AMD)                  256 bytes
Error Correction support                        No
Max memory allocation                           1596849766 (1.487GiB)
Unified memory for Host and Device              No
Minimum alignment for any data type             128 bytes
Alignment of base address                       2048 bits (256 bytes)
Global Memory cache type                        Read/Write
Global Memory cache size                        16384 (16KiB)
Global Memory cache line size                   64 bytes
Image support                                   Yes
Max number of samplers per kernel             16
Max size for 1D images from buffer            134217728 pixels
Max 1D or 2D image array size                 2048 images
Base address alignment for 2D image buffers   256 bytes
Pitch alignment for 2D image buffers          256 pixels
Max 2D image size                             16384x16384 pixels
Max 3D image size                             2048x2048x2048 pixels
Max number of read image args                 128
Max number of write image args                8
Local memory type                               Local
Local memory size                               32768 (32KiB)
Local memory syze per CU (AMD)                  65536 (64KiB)
Local memory banks (AMD)                        32
Max number of constant args                     8
Max constant buffer size                        65536 (64KiB)
Preferred constant buffer size (AMD)            16384 (16KiB)
Max size of kernel argument                     1024
Queue properties
Out-of-order execution                        No
Profiling                                     Yes
Prefer user sync for interop                    Yes
Profiling timer resolution                      1ns
Profiling timer offset since Epoch (AMD)        1592851307338203231ns (Mon Jun 22 18:41:47 2020)
Execution capabilities
Run OpenCL kernels                            Yes
Run native kernels                            No
Thread trace supported (AMD)                  No
Number of async queues (AMD)                  2
Max real-time compute queues (AMD)            0
Max real-time compute units (AMD)             0
SPIR versions                                 1.2
printf() buffer size                            4194304 (4MiB)
Built-in kernels
Device Extensions                               cl_khr_fp64 cl_amd_fp64 cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_3d_image_writes cl_khr_byte_addressable_store cl_khr_gl_sharing cl_amd_device_attribute_query cl_amd_vec3 cl_amd_printf cl_amd_media_ops cl_amd_media_ops2 cl_amd_popcnt cl_khr_image2d_from_buffer cl_khr_spir cl_khr_gl_event
NULL platform behavior
clGetPlatformInfo(NULL, CL_PLATFORM_NAME, ...)  No platform
clGetDeviceIDs(NULL, CL_DEVICE_TYPE_ALL, ...)   No platform
clCreateContext(NULL, ...) [default]            No platform
clCreateContext(NULL, ...) [other]              Success [AMD]
clCreateContextFromType(NULL, CL_DEVICE_TYPE_DEFAULT)  Success (1)
Platform Name                                 AMD Accelerated Parallel Processing
Device Name                                   Pitcairn
clCreateContextFromType(NULL, CL_DEVICE_TYPE_CPU)  No devices found in platform
clCreateContextFromType(NULL, CL_DEVICE_TYPE_GPU)  Success (1)
Platform Name                                 AMD Accelerated Parallel Processing
Device Name                                   Pitcairn
clCreateContextFromType(NULL, CL_DEVICE_TYPE_ACCELERATOR)  No devices found in platform
clCreateContextFromType(NULL, CL_DEVICE_TYPE_CUSTOM)  No devices found in platform
clCreateContextFromType(NULL, CL_DEVICE_TYPE_ALL)  Success (1)
Platform Name                                 AMD Accelerated Parallel Processing
Device Name                                   Pitcairn
root@clinfo:~/qrack/_build#
While you've given me reason to check and address the warnings, (by the way,) if JIT compilation works, but precompilation fails, I'm tempted to say this is an OpenCL compiler issue. I've seen similar behavior before on one of my Macs, for a long time; my solution has to been simply to use JIT.
I'll have to check the standard for whether precompiled programs are required in 1.2, (and therefore in 3.x). The "intermediate representations" of (partially or fully) compiled OpenCL programs are diverse, often particular to the manufacturer, and inconsistent.
I know that on the Mac I mentioned, the attempt to save the compiled program produces a file, but it's clear from checking the file contents that the API just isn't supported: I remember it just wrote a single mangled symbol name, (probably the master hook of the compiled OpenCL "program" in memory). Unless the OpenCL compiler knows what to do with that, (and I doubt it can do anything with it, particularly unless that symbol currently resides in live RAM,) that's a problem with compiler support.
If the precompilation file is interfering with your JIT, you can just delete it. Yes, certain devices 100% don't support precompilation, but I can't definitively conclude that for your system. (Maybe check what's in the precompiled program file.)
Actually, the error code it gives is -11, (in addition to the warnings). -11 is CL_BUILD_PROGRAM _FAILURE. I suspect you can't even use JIT, can you? I don't see a definitive "error" that causes it among the program build warning outputs, though. Have you tried building for single float accuracy, or for pure-32 bit systems? (It looks like your device assumes double accuracy is part of the standard, but one of those might work, and it might help us diagnose the problem.)
Interestingly, I hacked the -Werror OpenCL compilation option into my local build, and I'm pretty sure that my NVIDIA GTX 1070m on Ubuntu 20.04 (with a generic Linux ICD and NVIDIA official drivers and toolkit) produces no warnings at all, when it compiles. It's possible that your unused variable warnings indicate that something is not parsing correctly with the text of the program, causing variables to be flagged as unused by the compiler when it's rather just that the delimiters or such are wrong.
I can't tell what that is from output, though, because the message basically just says "build/compile failed, lots of unused variables," but I don't see a specific compilation error in there. I'm inspecting the code for clues.
If it warns about the pragma, you could try temporarily removing the pragma, because that's a tiny bit conspicuous. I'm not sure what's going on, though.
Compiling Qrack link

Even though the pitcairn card lists fp64 as a feature it barfs on the double precision. So disabling it through
cmake -DENABLE_COMPLEX8=ON
Avoides the crash. And works in both precompiled and JIT that previously failed.
This creates a very, very fast cosmos benchmark on the AMD GPU,
compared to most of the CPU benchmarks I've ran before. Can wait for the NV Tesla card.
Thanks for pointing in the right direction.
