I re-tuned the QPager smart defaults for paging, today, after working in the past couple of days to enable a fully distributed universal gate set. The gates available to this set are at least as general as those in the test_ccz_ccx_h benchmark, which are already universal. On my RTX 2070, Core i9, Ubuntu 20.04 system, QPager appears to be roughly 18 times faster than the default suggested QUnit stack. (QPager can also simulate at least one additional qubit, over QUnit, on GPUs with segmented VRAM, as basically all commonly available NVIDIA cards I have ever used have. QPager cannot optimally support arbitrary gates, though, despite optimally supporting a particular universal set, so this performance does not yet port to the QFT.)
We need to be sure that the simulation is right, in this case. I have commented out the SWAP gate option in test_universal_circuit_digital_cross_entropy with qubit width turned up to 13, for 2304 GPU cores for 11 qubits, but I still run into some instability at 14 qubit width. This needs better testing, particularly given the seeming performance difference.
This is also compatible with QStabilizerHybrid over QPager, and QHybrid under it, but QUnit is not yet adequately stable or performant over this stack.
I should clarify, QUnit can Schmidt decompose to whatever opportune degree, but, when running at full representational entanglement, QPager can still use more than one segment of VRAM for one more qubit, where QUnit could ultimately work on top of this.
Cross entropy apparently passed for a case that compared QPager to QPager, given the options to choose from in the unit tests. I have verified that the width option does cross the threshold for full generality, but cross entropy is failing for QPager vs. QEngineOCL. I'm debugging.
See #634, for work toward my last comment, here. Cross entropy testing again, now. (The speed differential hasn't decreased, yet.)
Cross entropy tests pass to exhaustion for QPager over QEngineCPU, with sufficient width to pass the threshold for the preferred 2 "meta" or "global" qubits. This is a relatively extreme test, ported for comparison with QEngineOCL, causing the unit test to fail with SIGFPE, but this could be either a deep bug or simply a limitation that we have to accept regardless of design.
In any case, QPager is in production. My attention is here on it, for potential speed advantage, but a certain amount of confidence in the accuracy comes with practical usage. Compared to QUnit, there's far less to go wrong or numerically deviate in QPager, which is basically just a "Schr√∂dinger method" simulation broken into power-of-2 counts of equally sized "pages."
QPager, with and without QUnit over it, seems to be an across-the-board pass on unit tests, now, including for QUnit over QPager as the Qiskit simulator backend. Given the pass on cross entropy and Qiskit tests, it's likely that the common gate-based API is in generally correct working order, but there's a hypothetical bug that's still worrying me: it should be possible to drop the overrides of ZeroPhaseFlip() entirely, from QUnit and QPager. However, this breaks the test that performs a Grover's search of a lookup table.
Is this is a bug? Particularly given agreement with Qiskit unit tests, it might not be the particular bug I thought it was, in the basic controlled gates. Since QPager seems like a stable basis for downstream plugins, understanding this hypothetical bug is lower priority, at this point. I might temporarily move on from this, and call it stable, for now, but I'm leaving this issue open with the bug tag, for this very particular, hypothetical case. Otherwise, QPager seems generally correct, from several different angles of testing.
(There's also no clear reason why someone would want QUnit over QPager for a Grover's search of a lookup table, for performance reasons I am aware of, but I ultimately intend to support total interchangeability and stacking of general "layers," for whatever reason.)
I've tested more, and QUnit over QPager passes both Qiskit and Q# unit tests, as well as our own. It's possible that removing the ZeroPhaseFlip() overrides introduces a bug, rather than exposing one that exists without that change. Given the general unit test pass, understanding the root of this issue has low enough priority to close, for now.
