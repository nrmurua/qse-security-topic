Taking a closer look at how the Krylov evolution works, I noticed that it may be computationally inefficient. A small study of this is done in the script below [1], which executes nonequilibrium dynamics on a ring of 12 atoms.
The inefficiency falls on the fact that choosing a small step size may drastically slow down the total computation time of the algorithm. For example, for a fixed total time and 2 steps, the integration executes in ~0.5 seconds in the full space. However, if I choose 2000 steps, the integration executes in ~15 seconds, a factor of ~30 slower. Note that removing the computation of expectation value does not change this very much.
I suspect that this slowdown has to do with how the Krylov solver is operating. I would interpret that at each step, the solver computes Krylov vectors and spits out the wavefunction at the end of each step. Additionally, because the Hamiltonians are fed in as a list and have no knowledge of the choice of basis of the wavefunction, the matrix elements are recomputed at each step.
However, it is much more efficient to choose a small batch of large timesteps, then use the Krylov subspace to compute the wavefunction efficiently at a large number of intermediate points. This procedure may be much more efficient, and can be made extremely efficient if the observables are also computed in the Krylov subspace as well. This also removes the funny external dependence of the user choosing a particular timestep, which was also a problem for the ODESolve method.
[1] https://github.com/Happy-Diode/EaRyd.jl/blob/592a5a82c0de6bc3316650865ad5b97d68fa8de3/examples/blockade_topic/ring_evolution.jl
I think for non-QAOA type problems, we should just use https://en.wikipedia.org/wiki/Exponential_integrator for general case, which uses Krylov subspace for integration, and is probably more efficient in large system
These are available here: https://diffeq.sciml.ai/stable/solvers/ode_solve/#Exponential-Runge-Kutta-Methods
some of the solvers actually use Magnus expansion (similar to the paper @jon-wurtz showed in on slack for reference, https://arxiv.org/pdf/2106.15645.pdf) I'm not sure about the difference, needs some further reading on that.
The KrylovEvolution interface probably should just serve as a simple interface for more standard piecewise constant or just remove it.
