This issue is a continuation of the other one I created titled C++ QASM Simulator as a Debian Package. While the former was focused on Linux, this one focuses on macOS.
First, a brief introduction (just in case). Homebrew is:
The missing package manager for macOS
i.e. it is apt-get for macOS. And more importantly, it is a provider used by Swift Package Manager.
Now, as for Linux, it would be nice to have an easy way to install the QASM simulator in macOS, so we can more easily integrate it with QISKit Swift Framework.
If all this sounds good, I would be happy to prepare the Homebrew Formula. However, there is something to discuss first. Essentially, to prepare a formula, you have to fork homebrew-core repo, add the formula and create a Pull Request. Nothing special as you can see but maybe you would be more interested on a tap:
Taps are external sources of Homebrew formulae and/or external commands. They can be created by anyone to provide their own formulae and/or external commands to any Homebrew user.
A tap would require to create a repo under QISKit organization which let you keep a better control of the formula.
By the way, I noticed that due to this issue: Build the C++ components as shared libraries, soon there will be important changes in the simulator but I though it was a good idea to open this conversation already. Hope I was not wrong :)
What is the expected behavior?
I think for having just one formula it is not worth but if we are thinking of splitting QISKit into different components or perhaps we can foresee adding other things rather than (but related to) the SDK, then it makes perfect sense. I'm happy with having our own tap üç∫
Hi @delapuente,
I am already working with @1ucian0 & @diego-plan9 on a debian package that, for the moment, only includes the simulator but the idea is that, later on, we will add more components. I think the same thing applies in this case ... probably :)
Anyway, now that I think about it, I think I should have prepared the formula first and then open this issue. As soon as I can, I will start working on it in a personal repo. We can decide how to put the formula into use afterwards, right?
Regards.
Thanks @indisoluble ! In a similar spirit to the discussions for the Debian package, and as hinted by @delapuente (as I'm not familiar with the homebrew conventions and procedures): could you check how "a package that is split in other subpackages" is handled, and prepare the formula accordingly? Specifically,  if the plan is to distribute only the simulator, would it be possible to avoid using  qiskit as the name for the final users for the moment, and instead have:
brew install qiskit-core-cpp-simulator
or similar? The idea is that qiskit refers to the whole project, and we want to "reserve" that name if possible and decide once the rest of the components are in place. Could you point to documentation on that topic (ie. if a single formula can produce several installables, etc, or how to grow/rename brew packages)?
By the way, I noticed that due to this issue: Build the C++ components as shared libraries, soon there will be important changes in the simulator but I though it was a good idea to open this conversation already. Hope I was not wrong :)
Yes! The PR was closed for reissuing it short term with some changes, but we plan to include the C++ components as shared libraries and just distribute them along the SDK indeed. However, there will be cases where having just the simulator as a binary will still be desirable, so I think your efforts make much sense!
On renaming a formula, this is the information I could find: Renaming a Formula.
About splitting a package in multiple sub-packages, if what you mean by that is if it is possible to install multiple apps/libraries/components with one formula, the answer is yes. Let's take as an example xz. The formula for this util does as follows:
At the end of the installation process, you will have installed not only xz but also lzcat, xzcat, etc. Homebrew formulas are simple Ruby scripts and there are no restriction of what they install (apart from the fact that everything has to be installed under Homebrew directories like /usr/local/Cellar).
On the other hand, if what you want to know is if it is possible to handle multiple formulas in one tap/repo, the answer is also yes. For example, Ethereum provides this tap which stores 3 formulas: ethereum, cpp-ethereum & solidity.
Which option is the best, I guess that really depends on how you (the QISKit team) intend to evolve this repo and what you think is the best fit based on it.
Anyway, Homebrew provides mechanism to deprecate a formula, so I can create one only for the simulator and later on, we can merge it into a broader one ... or keep it. However (and I might be wrong about this), if this formula is in a tap under QISKit organization/control, a PR for the QISKit Swift Framework based on it is more likely to be accepted than if the formula is merged directly into homebrew-core repo.
Hi all,
I deployed a formula for the QASM simulator in the following tap: https://github.com/indisoluble/homebrew-qiskit
Things to know:
Talking a bit more about patches, if we audit the formula we get the following message:
So if we decide to push this formula to homebrew-core, there is a chance the maintainers might reject it because of this.  If you can think of a better approach, please let me know.
Disclaimer: If you install the simulator with OpenMP activated, you might get the following warning:
On a previous occasion, I installed R in my computer with Homebrew, R also depends on gmp which was compiled with llvm.  But to activate OpenMP, the simulator has to be compiled with gcc (also installed by Homebrew) which uses a different C++ library. As far as I can tell, this is the cause of this warning and I do not think I can do much about it. Of course, any suggestion is welcome.
I still have to double check this but the message:
Was probably due to the fact that I did not execute: xcode-select --install before installing gcc so instead of installing the pre-compiled bottle, I built it from source which ends up causing this warning.
After a few more runs, the warning mentioned above no longer appears when I install the compiler. I updated the README in the tap I have prepared with a comment about this issue, in case someone faces the same problem.
@delapuente & @diego-plan9, having reached this point, would you consider adding this tap to QISKit organisation?
@indisoluble what did you do to avoid the message?
I think Diego is out until next Monday. I don't have the expertise to recommend moving this to the QISKit organization so let's wait until he comes back.
Hi @delapuente,
Long story short, I finally realised I had not installed all required dependencies in my computer as specified in the README for the QASM simulator, which are also the requirements for Homebrew. This is to run xcode-select --install on advance in order to install the Command Line Tools (CLT) for Xcode.
With a bit more detail, to be honest, when I first read these instructions, I thought I already had it so I simply forgot about it. As a consequence of this, when I re-installed gcc in my computer with all its dependencies (including gmp), brew installed gmp from its pre-compiled bottle but it compiled gcc from its source code. I think this caused gcc to depend on a different C++ library than the one used by gmp and this ended up extending to qasm_simulator_cpp.
Once I installed CLT in my mac, the next time I re-installed gcc and all its dependencies, only the binaries in their bottles were used. So the next time I installed qasm_simulator_cpp with the formula no warning appeared on screen.
Hopefully all this is clear enough ... and more importantly, makes sense. If not and/or you have another idea, please let me know :)
So, @diego-plan9 what do you think??
@indisoluble is the package ready? We can close this issue if it is and let the conversation continue.
Hi @delapuente, the tap is ready and I just updated it to use Qiskit Terra v0.5.7. I was waiting for an answer from @diego-plan9 before doing anything else, if we close this issue, where should we continue the conversation?
We are transitioning to another simulator architecture that would probably render this proposal useless. I'm closing this issue while the transition finishes. We may want to come back to this idea afterwards, but a lot of things are going to change so I'm going to recommend opening a new issue by then and have the discussion there. Thanks a lot for the effort @indisoluble !
