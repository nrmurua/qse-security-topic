The transpiler CXCancellation pass only cancel CNOTs with 1 successor
The transpiler CXCancellation pass cancel CNOTs with multiple successors
hmm.. can you post an example of what you mean?
What I meant was CXCancellation pass is designed to cancels two consecutive CNOT gates. For this reason, in the code,  the pass only check CNOT that has only 1 successor for cancellation. While if we detect commutation relation in the DAGCircuit(as in the new pull request "new commutation pass"), a CNOT might have two or more successors and can cancel with one of the successors(a CNOT have the same control and target).
I am going to edit the issue report so it's less confusing.
Can you post some small code to show me a broken example? Something like,
Yea. Two minimal examples:
1.
The circuit is:

DAG before transpile:

DAG after transpile:

Expected behavior: Because the CNOTs and Z commute in this case, CNOTs should be able to travel through Z gate and cancel out each other, but current CXCancellation doesn't do it.
Circuit:

DAG before:

DAG after:

Expected behaviors: After the commutation detection, the two CNOTs are not predecessor and successor  anymore, but they still can be cancelled out.
Thanks!
Hi @godott thanks for these examples, I am having a look at this issue now. In your second example, what property of the 2nd DAG shows that the gates can be cancelled? I assume it is because they are in the same layer, and have the same input and output wires, is this correct?
The pass CommutationTransformation is not creating an equivalent DAG. Currently, our DAG is not a the same as a dependency graph. I understand the need of a dependency graph. This needs more discussion. @ajavadia @jaygambetta ?
@maddy-tod @1ucian0  Hi, this cancellation will rely on the property_set "commutation_set". Basically, if two gates are in the same commutation group they can be cancelled. I actually have an implementation, will pull request soon.
@maddy-tod @1ucian0 The DAG is less helpful than the property_set.
I do understand that a commutative DAG is useful and supporting this structure should be address somehow. However it is not our current approach on the DAG where we need to hold invariants that conflict with CommutationTransformation output. I'm closing this issue as wont fix and moving the discussion to #1914. Your input is more than welcome there. Just to be clear, I do agree with your ultimate goal. It just needs a deeper change.
