If a circuit contains an Instruction instance it cannot be converted to a Gate even if all instructions are unitary. This is important to also enable e.g. control() or power() on a circuit, which are currently only supported for Gate types.
A circuit should be castable to a gate if all operations are unitary, independent of whether they are wrapped in a Instruction.
When a circuit is converted to a gate the instructions should be unrolled to check whether they are unitary.
Hi, I would like to try solving this as my first contribution, would that be fine? And if I could pick this up, could you let me know what would be the best way to unroll the instructions and check whether they are unitary?
Hi @mantcep, great that you're interested!
I had a look at this issue during another project, my current solution tries to unroll the instructions in the circuit until only Gate types are left, or raises an error if an instruction cannot be further decomposed. It looks like this:
Is this something similar to what you had in mind?
My main concern here is performance though, I'm not sure if this could affect current code because we potentially do more unrolling. @mtreinish what do you think? Is it possible to run performance tests on PR branches (referring to the airspeed graphs).
Hi @Cryoris!
To be honest, I am quite new to Qiskit, so I did not really have a solution in mind. I wanted to start contributing to Qiskit by fixing issues and this issue just seemed really interesting to me. I was hoping I could get some guidance or figure it out when going into the details. Could I still contribute to it in some way even with limited knowledge? Also, since you already worked on this issue, is it already on the pipeline to be implemented by you? If not, I would be more than glad to try applying the solution you suggested and seeing how far I could get with that. Let me know if I could contribute in some way.
You certainly can contribute! All issues labeled as good first issue are potential candidates if you want to start contributing. Your time is probably better invested in a new issue, than this one so we're not doing duplicate work ðŸ™‚
How about this one for example: #4349 ? I don't think this is actively being worked on.
Thank you very much for guidance and for pointing me to the other issue! I will pick that one up instead then ðŸ™‚
Hello everyone, has this issue been solved? I just happened to stumble upon it while trying to build a modular adder gate
I have similar issue, is there any solution or suggestion about this issue ?
We haven't yet started working on this issue, however there are two workarounds. To understand these, note that to Qiskit everything that is of type Gate is unitary and thus allows for operations like power, control, inverse but anything that is of the Instruction type is not guaranteed to be unitary and doesn't allow these operations.
Outcome of the discussion on a possible (but now abandoned) PR: Instruction should have a to_gate method. #4520 (comment)
In the interests of closing issues, I'm going to close this as "not a bug".  Calling to_instruction on an object is explicitly saying that you want it treated as a non-unitary operation.  It's correct and type-safe for subsequent attempts to treat it as unitary to fail with an error.
If there's more discussion to be had around having a method for potentially raising an Instruction to gate (if allowable), please feel free to continue that in a new issue.
