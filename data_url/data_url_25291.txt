To support iterative workflow development, we want to introduce the ability to redispatch previously run workflows.
This issue tracks the necessary changes to the SDK. The main task is to implement the LocalDispatcher.redispatch static method.
ct.redispatch(dispatch_id)() â€” retries workflow with the same inputs
ct.redispatch(dispatch_id, replace_electrons={"task_1": task_1}, reuse_previous_results=False)(*new_args, **new_kwargs): reruns workflow with all instances of task_1 replaced by the new definition of task_1 and new lattice inputs
Parameters:
Returns:
A callable wrapper such that
The details of these web requests are described below.
Example UX:
Calling wrapper() or wrapper(*args, **kwargs) makes a POST request to the server endpoint /api/redispatch with JSON body
Mimic the implementation of ct.dispatch().
Schemas: Let e be an Electron object.
ElectronUpdate
MetadataUpdate(e) is the JSON-encoded metadata explicitly specified in the electron decorator. For example,
Produces the following MetadataUpdate JSON
The main work involved is to generate the ElectronUpdate dictionaries. This is not entirely straightforward because applying the electron decorator to a callable does not produce an Electron object, but rather a wrapper that instantiates an Electron when called, and then immediately either
One would like to just return the instantiated Electron without proceeding to the next step of manipulating the transport graph or invoking the underlying function
In other words, given an expression like
we want to somehow get a hold of the object Electron(function=foo) in order to access its attributes, such as metadata.
Suggestion: repurpose DispatchInfo and active_dispatch_info_manager.
To generate the ElectronUpdate for an electron:
See here for example.
