When attempting to transpile to a set of basis_gates that the transpiler can't reach, the BasisTranslator will eventually fail with an error like
but it is very slow to do so.
This is a best case example, but for e.g. a Toffoli where decompositions will contain single qubit gates (and so its possible to make some progress):
In general, determining whether or not a given basis transformation is possible will probably be as hard as finding it, but it may be possible to identify e.g. non-universal basis sets and raise a warning in these cases.
Besides checking for non-universal basis sets, we can actually rework the logic of BasisTranslator._basis_search and make it faster. The idea is to start with the target basis and check for new gates we can generate using our basis and one rule of the equivalence libary. We slowly expand this set and only if the final set contains all the gates in the original circuit, the given basis transformation is possible.
In more detail:
Right now, BasisTranslator performs an A* search on an implicitly defined directed graph G = (V, E) (of exponential size in the number of gates in the equivalence library) where V is the power set of gates in the library and two nodes Na, Nb are connected if we can use an equivalence rule of the library g -> C_g for g in Na such that Nb = (Na + C_g) - g. It also makes use of a heuristic cost function to guide the search and try to reach the target basis as quickly as possible.
We can instead perform a much faster modified BFS search in a smaller directed graph G = (V, E)  where V is the set of gates in the library (not the power set) and we add an edge (ga, gb) if there is an equivalence rule in the library R = gb -> C_gb and ga in C_gb (in the edge we also attach the rule R).Then, the starting points of the BFS will be the gates in the target basis and the single modification of the standard bfs is that we are allowed to use an edge (ga, gb, R) only if we have previously visited all the gates appearing in the right side of R. If this procedure reaches all gates  in the original circuit, the transformation is possible. Otherwise, we can't map the given circuit in this basis.
This is a great idea @georgios-ts ! The original "search over bases" approach stemmed I think from earlier designs where we were considering using template substitutions (and so may not necessarily have one-to-one transformation rules for every gate), so I agree a gate-wise BFS will be sufficient to cover the search over the equivalence library, and should be significantly faster (especially to fail when the target basis is unreachable).
