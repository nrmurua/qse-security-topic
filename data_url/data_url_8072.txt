I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with "mesolve" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient.
The fidelity of the final density matrices for these two methods is 0.9312276926316011. This question is also asked here and the final density matrices using these two approaches are shown. Basically the density matrices are not close enough. So the question is, which one is correct and why these two methods are giving different results?
Note: For time-independent problems and for time-dependent but coherent evolution the results agree pretty well. However for the case of time-dependent Hamiltonian and dissipation they don't.
Near the start for the QuTiP case you have:
Should that not be
?
Thanks for the comment and sorry for the typo. I corrected it. The issue still persists. I also updated the question on stack exchange.
Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses).
Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable.  This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for.  You can increase the maximum number of allowed subdivisions by increasing the nsteps parameter in a qutip.Options object, and with the options keyword argument.
Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses).
Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable. This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for. You can increase the maximum number of allowed subdivisions by increasing the nsteps parameter in a qutip.Options object, and with the options keyword argument.
I addressed Simon's question. Also, I tried different solver options in mesolve including solver type, nsteps, relative and absolute tolerence, etc ... Also for RK45 I tried to change the parameters in order to see if the solutions coincide. They didn't. I don't know if there exists an analytically solvable problem in which both Hamiltonian and dissipation operators are time dependent, but if there is such a problem, then I can use it as a benchmark in order to compare QuTiP and RK45.
I don't want to straight up say "QuTiP is correct", because as I mentioned, the field of numerical computing is incredibly tricky, but it probably is more accurate in this situation.  I just tried doing what I suggested in my previous post (increase the number of time-steps), and found QuTiP was stable, but your RK45 implementation started differing.  This is strongly suggestive that your RK45 isn't fully converging for this problem.
I don't want to straight up say "QuTiP is correct", because as I mentioned, the field of numerical computing is incredibly tricky, but it probably is more accurate in this situation. I just tried doing what I suggested in my previous post (increase the number of time-steps), and found QuTiP was stable, but your RK45 implementation started differing. This is strongly suggestive that your RK45 isn't fully converging for this problem.
I don't think you are right. As I mentioned I also did the same but the results are stable. I edited my question on quantum computing stack exchange if you are interested. There is no convergence issue. And I don't think it is "impossible" to figure out what is causing this difference or to understand which one is closer to the actual answer. If there exists a system with time-dependent Hamiltonian under a time-dependent dissipation which is analytically solvable, we can compare these two methods. I am not aware of such a problem.
The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size dt is actually good.  It ideally should converge to something as the step size goes to zero.  QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances.  For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here.  Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.
For clarity: I ran your code with 1,000 timesteps and 10,000 timesteps and found a linalg norm difference in the outputs of 4.4e-4 (compared to QuTiP's 6.5e-8), which is what I meant.  I considered that difference "not fully convergent" in part because QuTiP's default tolerance goals have an absolute tolerance of ~1e-8 (that's per-element, not the full norm).
Here's a couple more things to look at:
@alipedram01 It looks like we've understood the cause of the issue -- i.e. your RK45 solver just doesn't converge for this problem. That's probably not unexpected -- I see to remember reading on Wikipedia that the implicit Runga-Kutta methods have small regions of convergence relative to explicit or adaptive methods.
Closing this for now, but thank you for taking a look and please feel free to continue the discussion if needed.
