I am investigating this compilation technique that won the IBMQ developer challenge award and was playing around with the code  provided to try and implement it on Qiskit.
However, I note that the technique, even though it is open-source, was not taken up by the IBM team and implemented in Qiskit.
I am wondering why this may be? Maybe the Qiskit transpiler is better than the technique as it may be outdated since it was released in 2018?
I want to ensure that I am not wasting my time with this transpilation technique if the Qiskit transpiler now outperforms the said algorithm.
Please let me know.
I believe that technique was proposed in: #1310 but that PR had some code issues and ended up going stale and we closed it since it wasn't likely to ever be fixed. If you're interested in proposing it again please feel free to take that code as a starting point. I can provide some pointers for you on what issues there were with code if you decide to do it
I think the performance was ok but the technique has been superseded by newer approaches such as sabre: https://arxiv.org/abs/1809.02573 It still probably would be interesting to directly compare results between terra's different routing techniques (stochastic swap and sabre primarily) with it to see how things perform.
Would I call SABREs' functionality by choosing optimisation_level=3 for example? I am working through the quantum volume  demo and want to ensure that the code is optimised to its fullest degree. Would appreciate pointers on things I can play around with such as transpiler passes and pass manager.
You can specify the routing_method='sabre' and layout_method='sabre' as arguments to the transpile function to enable SABRE (independent of setting the optimization_level).
