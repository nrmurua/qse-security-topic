It seems like all the KATs for the supported signature schemes can be found here in zip archives under "Round 2 Submissions / Digital Signature Algorithms". I'm happy to add these if these are the ones you intended to use.
Also, looking at the Dilithium Reference implementation, there seems to be an algorithm dilithium1 that this repository leaves out. Is that intentional?
Hi Roy,
Thanks for the offer.  It is slightly trickier than just using the KATs from the NIST submission ZIPs because the format is different.  The NIST API has a "signed-message" format, where the sign algorithm outputs a byte array containing both the message and the signature, in whatever order/encoding the submitters wanted.  In liboqs, we use a "detached signature" format, where the sign algorithm outputs a byte array containing just the signature.  So we wouldn't exactly match the original KATs.  The solutions I can think of are either to make a wrapper around each of our signature schemes that reconstructs the signed-message format from the detached signature format (which may be different for each scheme, since as far as I know NIST did not specify a particular signed-message format); or deconstruct each scheme's KAT to detach the signature from the signed message format.
Also, looking at the Dilithium Reference implementation, there seems to be an algorithm dilithium1 that this repository leaves out. Is that intentional?
Dilithium-1 is a "toy" parameter set that is weaker than any of the NIST target security levels.  It offers only approx. 60 bits of security according to the submission.
Hi Douglas,
Thanks for the explanations.
I'll try to deconstruct the published KATs to generate detached signatures that the liboqs implementations can be tested against.
Hi Roy, any luck with deconstructing the signature KATs?
