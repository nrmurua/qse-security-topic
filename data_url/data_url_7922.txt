The documentation could be built with Intersphinx to cross-reference other projects' objects such as functions or classes.
This is something I can do or help someone with guidance. We simply need to do the following:
To elaborate a little on the syntax: There's two prefixes (which can also be combined), . and ~. (There's also !, but I don't know when you'd ever use that one.)
The ~ cuts down the name in the output to the last component. That is, if you write a reference using the fully qualified name :class:`~qiskit.QuantumCircuit` it will show up in the rendered HTML as "QuantumCircuit" (without the tilde, it would be the full "qiskit.QuantumCricuit".
The. is for cutting down the name in the input, e.g. you could write :func:`.mesolve` instead of :func:`qutip.mesolve.mesolve` anywhere, and Sphinx will search its internal index for any fully qualified name that ends in .mesolve and use that. This is great for keeping docstrings readable, but I'd avoid using it to refer to external functions (from intersphinx).
See the Sphinx documentation on  Cross-referencing syntax and the explanations at the end of Cross-referencing Python objects for details.
@nathanshammah Is there any file where all the external Functions used in Qutip have been stored, I have already covered the requirements of Qutip installation and matplotlib.
