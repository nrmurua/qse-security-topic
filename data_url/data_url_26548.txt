Hey guys, when I looked at the gcc assembly code of ortho_cx_to_grid_scalar, in src/grid/ref/grid_ref_collint.h , I found a very interesting phenomenon, it has many different versions of vectorized loops, which seems to be good for running performance?

And icc even has its own special assembly version code

This seems to be related to pragma unroll? Was cp2k designed with this scenario in mind? How does it work?
Hi @codyhu, I wrote that code and I'm happy to answer any questions you might have.
We currently have two implementation: A generic one in plain C and an optimized one for AVX2, ie. Intel/AMD CPUs. The Intel Intrinsics are a convenient way to issue inline assembly instructions. Despite its name they are supported by all major C compilers.
The unroll pragmas are mostly meant to increase instruction level parallelism. In some cases I also used them to generate different branches. In C++ one could use templates for that purpose instead.
Thx a lot @oschuett , it is really a good job. And I found it
. It's the first time I've seen this way of writing, but it does have some significant performance benefits.
