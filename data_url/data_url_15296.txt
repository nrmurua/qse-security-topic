This commit adds a new class BackendV2Converter which is a BackendV2 implementation that converts an input BackendV1 object into a BackendV2 implementation. This is useful for users that are supporting working with arbitrary providers so that they can standardize on using the newest access patterns even if a provider is still using BackendV1. Similarly, for qiskit's internal usage, this gives us a path to move all of the transpiler internals to use Target and avoid carrying around duplicate information in the PassManagerConfig for passes that haven't been updated. This will enable us to convert input BackendV1 instances to a target once on initial calling and have the transpiler only ever see a target.
Fixes #8611
Co-authored-by: Kevin Tian kevin.tian@ibm.com
Co-authored-by: Rathish Cholarajan rathishc24@gmail.com
Thank you for opening a new pull request.
Before your PR can be merged it will first need to pass continuous integration tests and be reviewed. Sometimes the review process can be slow, so please be patient.
While you're waiting, please feel free to review other open PRs. While only a subset of people are authorized to approve pull requests for merging, everyone is encouraged to review open pull requests. Doing reviews helps reduce the burden on the core team and helps make the project's code better for everyone.
One or more of the the following people are requested to review this:
Annotating intermediate values with type hints?  Who are you, and what have you done with Matthew?
Ok, at this point there's no way you're the only author of this.
Heh, yeah I copied this code from the qiskit-ibm-provider which is based on an initial draft I wrote https://github.com/Qiskit/qiskit-ibm-provider/blob/main/qiskit_ibm_provider/utils/backend_converter.py and massaged a lot to pass mypy (which is run in the provider CI). But thanks for calling that out, I should add @rathishcholarajan and @kt474 to the co-authors list on this PR too since they did a bunch of work on the converter too.
Overall I really like this idea. I added several comments. My main questions are
Alternatively, you can loop over target gates and check inst_map.has(...) and then add calibration.
Overall I really like this idea. I added several comments. My main questions are
To do it fully and most effectively yes it is provider specific thing. Ideally every provider would handle this on their own, but at this point not every provider has migrated to BackendV2 so having this generic converter provides some benefits even if the transform can't handle all the nuances of provider doing itself.
I thought we were talking about expanding the BackendV2 class to support that. I think when we have a defined place for the frequency parameters in BackendV2/Target this converter class should be updated to handle that.
Thanks Matthew, this PR almost looks good to me. If there is a good reason to include supported_instructions I'll approve the PR, otherwise I think it is okey to remove this to simplify the logic there.
Thanks Matthew this looks good to me.
