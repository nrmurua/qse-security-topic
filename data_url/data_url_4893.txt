Wondering if llvm / Clang can be supported Apple M1
Hi there,
I don't have an M1 handy to test, but certainly there's nothing special in the QuEST architecture to preclude it.
I would confidently assume that serial QuEST is supported by whatever the M1 compiling chain is.
For multithreading; QuEST supports OpenMP versions 2.0 (in develop - the master branch temporarily requires 3.1) through to OpenMP 5.0 (the latest). It is not yet tested with 5.1, but is expected compatible. Mature releases of Clang support OpenMP (e.g. OpenMP 4.5 in Clang 13). If the M1 compiling chain fully supports clang, then I expect QuEST to compile fine.
But one never knows until they test!
thank you !
Hi there,
I tried compiling QuEST on an M1 and it works. However, it needs some modification of the CMakeLists.txt file.
Original (same for C++ compiler):
Apple's default compiler reports itself as AppleClang so by accident no -mavx flag is set which does not work on M1. However, when you install a true GCC (e.g. using homebrew), the about detects a GNU compiler and sets -mavx which leads to a compiler error. The same problem happens on any non-x86_64 architecture (ARM/ARM64, PPC).
As a quick fix I'd suggest to wrap the entire if()...endif() block in if (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)") ... endif() which will disable it for any non-x86_64 architecture.
Hi Matthias,
That's really useful to know, thanks very much!
I've been meaning to test whether QuEST can meaningfully utilise auto-vectorisation for a while, so I'll add that to my backlog and update the build afterward (or remove the flag entirely). @rrmeister who has a better understanding of the CMake build may also be interested.
Thanks again!
I just got a new M1 Max laptop, and am trying out QuEST on it. Naively, it should be extremely fast-- this CPU has 10 cores and 200+ GB/s usable memory bandwidth, higher than most Xeons, and since that's the primary bottleneck it should be very quick. And I was able to get Apple clang to link to openMP correctly, so it is multithreaded. However when trying it out it ends up being much slower than on intel chips. I tried setting "march=apple-m1" as a compiler flag to make sure it's compiling native code but that didn't seem to change anything. I strongly suspect this is a compiler issue, though I'm not sure what to try next.
Has anyone gotten QuEST to perform well on Apple Silicon?
Hi ekapit,
Hmm that's quite puzzling. I've created a very simple MWE below which modifies a complex array much like QuEST's backend CPU code.
Let's first test if your laptop is performing as expected for a serial simulation.
Can you copy the code below into a file (e.g. github_issue.c), and compile it serially using -O3 optimisation, and whatever additional arguments you need to target M1?
On my 13-inch Macbook, I compiled via
using clang-10.  It ran (./test) in 12s.
In what time does your M1 laptop run?
Hi Tyson,
I tried you code on my Apple M1 (MacBook Pro) not the M1 Max or Pro as the OP.
Serial
OpenMP
GCC 11.2.0.3 (from home-brew)
Serial
OpenMP
For GCC the line private  (i,j,j0k,j1k,a1,a2) needs to be removed.
Thanks very much Matthias! (and oops regarding GCC; I forgot we have to pre-declare our OpenMP variables there like filthy animals).
Those are encouraging times, which to me confirm ekapit's performance issues are indeed related to build parameters, as we discussed above. Or maybe we're comparing to some very impressive Intel chips! :)
Hi, I have an M1 Max macbook pro and I just added #346 to this as I can not get QuEST to make for testing.
