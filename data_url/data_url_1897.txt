Problem: There are currently 40 different gates in Cirq.  Many of these gates are related to each other.  A common pattern here is that a gate exists which is a subset of a more generalized gate.  This is particularly confusing when one attempts to use isinstance on gates.  In addition many gates implement the decompose protocol, and so there is some hidden relationship between these gates when they are decomposed.  This feature would be to define what is allowed for the relationship between gates and how decompose should be defaulted and documented.  A further question to be resolved in this feature is whether some of this organization should be delegated to gate set concepts.
Rough requirements:
This sounds pretty nice to have. What are the expected benefits of establishing these relationships?
TODO(@balopat): scope this before we jump in figure out what exactly we want to do before Cirq 1.0
Colab to visualise current Cirq Gate Relationships.
Adding takeaways from conversation with @tanujkhattar for posterity:
I've been thinking about this roadmap item and so far, I think the existing problems are:
However, there are also many benefits of having decompose and flexible inheritance relationships among gates. I'm curious to find out what other problems arise in practice due to the complex gate relationships in Cirq.
RFC for organizing decompose relationships: https://tinyurl.com/cirq-organize-decompose-rfc
Decompose now decomposes to cirq's default gateset and all operations now have underlying gates (except only circuitops and cco's).
The only feature addition left for this roadmap item is to add a convenience method cirq.plot_decompose(op_tree) to visualize the various decompose relationships and it's being tracked in a separate issue and not blocking the Cirq 1.0 release.
We can thus close this roadmap item and mark it as completed.
