Here is a simple and seemingly innocent piece of code.
That will crash. If the troublemaker line std::cout<<(x * conjugate(transpose(x)) - gt.Id(4))<<std::endl; is commented out, everything will be fine.
Maybe my C++ knowledge is getting rusty somewhere. I cannot spot the root cause of the problem.
I understand the qpp is not supposed to change the states in any ways because you have summarized its design principle in your paper,  and I quote here:
The design is inspired from functional programming, where functions do not mutate their arguments and do not have side effects.
Could you please comment on the issue? Is it a problem of the eigen library?
Thanks.
The problem is here:
The expression on the right is a templated expression, which is lazy-evaluated. auto here doesn't do what you think... it will construct this long template expression type, and assign inside it a reference to the temporary on the right. After the end of the statement, the reference will be dangling.
So never ever use auto with temporary Eigen expressions.
Here is our Wiki ;)
https://github.com/softwareQinc/qpp/wiki/7.-Advanced-topics#type-deduction-via-auto
Change auto to cmat and things will be fine.
PS: the culprit is not the cout << (x * ...)  line, that's ok. The undefined behaviour happens at the auto diff = ... part, and crashes when you try to display it.
Indeed. Thanks! I have learnt my lesson.
I used this and it did not crash, but it made the code even more dangerous because it didn't crash. It produced a norm of 1.47264 instead of 0!
