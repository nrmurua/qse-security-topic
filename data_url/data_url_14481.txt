I'm not sure I understand what's happening, but I use LayoutTransformation and I recently hit a bug where LayoutTransformation isn't producing the desired output. It's actually non-deterministic, sometimes it works, other times the exact same input does not (if I set a seed, then it becomes deterministic).
I've found that if I replace this line:
https://github.com/Qiskit/qiskit-terra/blob/bee5e7f62db400a4c2f6924064413371be0048eb/qiskit/transpiler/passes/routing/layout_transformation.py#L112
with:
(i.e., remove the sorted) then passed all my tests.
I'm not entirely clear why, but one origin seems to be that the order that the qubits are added to the PermutationCircuit is non-deterministic:
https://github.com/Qiskit/qiskit-terra/blob/bee5e7f62db400a4c2f6924064413371be0048eb/qiskit/transpiler/passes/routing/algorithms/util.py#L85-L91
I'm not an expert in qiskit dag circuits, but it looks like the argument to compose needs to be sorted in the qubit ordering in the permutation circuit, not the dag passed to run. My hack works because the inputmap dict has, deterministically, the correct sort.
My issue could also be fixed by sorting the nodes object before this line:
https://github.com/Qiskit/qiskit-terra/blob/bee5e7f62db400a4c2f6924064413371be0048eb/qiskit/transpiler/passes/routing/algorithms/util.py#L89
The sorted was added in #5281 by @1ucian0
Please can you provide a reproducer of your bug?  The extra information here is super nice, but I don't actually understand what problem you're having.  The normal "bug report" template should have prompted for this, and for version information.
It prints this (incorrect) dag:
In order to find this one which fails, I did a combinatorial search. I didn't find a smaller from_grid which exhibits the problem.
This particular test was run on 0.18.3, but I believe I checked the latest main too.
Oh, and that test passes as written if I remove the sorted from LayoutTransformation as described above.
The normal "bug report" template should have prompted for this
This issue was created by selecting a line in the code on GH and then clicking "Reference in new issue" in the context menu. I just confirmed, no issue template is presented to the reporter!
Perfect, thanks.  That's enough for us to go on, though I'm not sure if we'll have many resources to put into it internally - I wasn't even aware of this pass's existence, and it looks like it was added in #3762 with the intent to use it in #2860, which simply never merged.  Nothing else in the library uses it, and there's only been one nontrivial change to it since it merged two years ago (the commit in #5281 you mentioned above).
If you come across for a fix for it, please let us know and we'd be happy to accept a PR (and with the new test case - we're a little lacking in tests for it at the moment!).
no issue template is presented to the reporter!
Ah, that's how they get us!  A shame, really, though I guess GitHub didn't want to deal with the headache of deciding which field in the report form it should fill that entry into.
