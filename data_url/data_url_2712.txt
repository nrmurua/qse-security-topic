Seems like a heavy dependency for what we are using it for.  Is there something non-trivial we are using for the dags?
Is there something non-trivial we are using for the dags?
I don't think so.
Getting rid of networkx would mean implementing a Dag class with is_isomorphic,  is_directed_acyclic_graph, ancestors, and descendants methods. Doesn't seem to be too bad as long as the in-house is just as efficient or more efficient than networkx
I don't know about you, but "implement is_isomorphic" sounds like a nightmare to me.
So I'd like to understand better why we are using circuit dag.  I mean the isomorphic is used for equality for it, so is the optimization algorithm using isomorphism testing as part of its optimization routine?  If not I'm not sure that having the circuit_dag equality be true of the graphs are isomorphic is necessary.
I think it's mainly used as part of testing / debugging.
Going to close this (upstream issue with version of network x is resolved).  But still wonder if we are getting much out of networkx.  (I am very wary of "heavy" equals methods in code since they tend to yield surprises of "why is this so slow" type)
