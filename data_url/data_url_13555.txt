The reduce method is identically re-defined in every instance of a batched factory. See
The only unique part is the extrapolate method, so this should be the abstractmethod in batched factory and reduce should a method of batched factory.
There are several ways to go about doing this. The simplest approach, but not necessarily the most elegant, is to introduce the following method in BatchedFactory:
We can avoid having to check for the order attribute if we refactor so that all instances have order attribute (None as default). Another way is to pass the object to extrapolate instead of the parameters. That would mean that extrapolate is no longer a static method.
I prefer the first approach's simplicity. I can open up a PR after receiving some feedback and closing #444.
Hi @rmlarose  and @elmandouh,
As @elmandouh noticed, the problem with this issue is that the way to use the extrapolate function is factory-dependent, since the arguments are usually different.
The argument order is not the only example: ExpFactory , PolyExpFactory and AdaptiveFactory have other options too ( e.g. asymptote, "avoid_log", eps).
Given this fact, we could decide to keep factory-specific reduce methods or we could still try to force all cases into a unique base reduce. I just wanted to point out that the issue is less trivial than it seems.
@andreamari order is indeed not the only attribute we need to check for. By forcing all cases into one reduce we would make it difficult to maintain and extend in the future. Thus, I believe keeping the factory specific reduce methods is the better option. There are other approaches I can pursue, but they would require major refactoring and the payoff doesn't seem worth it.
What about a new method which returns the extra arguments to extrapolate for each factory? i.e.
In this way reduce doesn't need to be redefined, only _extrapolate_args, unless I'm missing something.
Anyhow, I completely agree this is low priority, just something I noticed in inference.py which I thought could be cleaned up without too much hassle. If not let's ignore it.
