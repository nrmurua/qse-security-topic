Using 1.0 on Windows, I have the following experiment,
Which raises the error,
However, the error is in this line here,
If I get rid of it, it's fine.
RPCd functions that return something else than None must have an appropriate type annotation (and therefore you cannot call get_dataset directly in a kernel). So yes, self.dds_bd1.set(self.get_dataset("dds_f_bd1")) will not work.
https://m-labs.hk/artiq/manual-release-1/compiler.html#remote-procedure-calls
The compiler should have pointed out that line though.
Sorry, I should have been clearer. I get why I get the error message, but the error message points me to the wrong line.
@sbourdeauducq There is no way to fix this with unification-based inference. It is not directional. Inferring the type of the argument to TTLInOut.set as None from line self.dds_bd1.set(self.get_dataset("dds_f_bd1")) is just as valid as inferring it as float from line self.dds_bd1.set(frequency*MHz).
However, what we can do is add explicit type annotations on every function in our standard library, which will considerably enhance the quality of error messages.
Would it be difficult to display where the types were inferred in error messages?
It's not completely trivial (there are very many corner cases that need to be tested, so it is a lot of work to add this), and more importantly, it's not going to give very good results; most of the information I can collect during unification is irrelevant, so this wouldn't necessarily make your life easier. (It would on trivial examples such as this one, but not once the length of the path inference takes grows.)
This is basically the reason most MLs require explicit specification of types on module or even function boundaries.
I'll look up some papers on this problem later, hopefully someone thought up a decent way...
Triage: fixing this would be a research project that I don't think has a low enough cost/benefit ratio to undertake.
