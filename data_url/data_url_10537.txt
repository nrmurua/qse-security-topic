The docstring says "treewidth_upperbound : int ...using this parameter can result in no returned order."
But actually using it with a value smaller than the real upperbound causes it to assert:
In [265]: dnx.treewidth_branch_and_bound(K_7,[0,1,2,3,4,5,6],6)
Out[265]: (6, [0, 1, 2, 3, 4, 5, 6])
In [266]: dnx.treewidth_branch_and_bound(K_7,[0,1,2,3,4,5,6],5)
AssertionError                            Traceback (most recent call last)
 in ()
----> 1 dnx.treewidth_branch_and_bound(K_7,[0,1,2,3,4,5,6],5)
/usr/local/lib/python2.7/dist-packages/dwave_networkx/algorithms/elimination_ordering.pyc in treewidth_branch_and_bound(G, elimination_order, treewidth_upperbound)
429     # if our upper bound is the same as f, then we are done! Otherwise begin the
430     # algorithm
--> 431     assert f <= ub, "Logic error"
432     if f < ub:
433         # we need only deal with the adjacency structure of G. We will also
