A major problem with NoiseModel as it is currently defined is that there is no way to define a compose(noise1, noise2) operation that works in the way the user would expect.
In general there may not be a way to compose two arbitrary noise models in a user-expected way, but certainly why they e.g. apply to non-overlapping operations or talk about orthogonal concepts of noise, it would be useful to be able to just compose.
@mpharrigan @peterse @cduck could you post examples of code where you needed this?
I've previously worked with this toy model for simulating 1/(f^alpha) noise:
This implementation was originally meant for unitary ("semiclassical") noise, and demonstrates the difficulty of applying further noise models on top of this:
original circuit:
circuit after noise modification:
An issue I've come up against (illustrated in #2789) is that noise models implemented with noisy_operation cannot have moment-level behavior (e.g. not adding noise to virtual moments). The "fix" in that PR is to enforce moment-level behavior in the conversion from noisy_operation to noisy_moment[s], but that doesn't feel like the cleanest solution.
In a similar vein, the fact that all noisy_* operators output a cirq.OP_TREE makes it difficult to apply moment-level controls in a consistent way. Some noise models implement noisy_moment in a way that returns a moment (or moments), but there's no guarantee of this.
I don't think noise is generally composable like this and would recommend that we don't pursue this as it probably encourages bad patterns (my noise model is bit flip followed by probabilistic unitary followed by depolarizing...that's to really a reasonable noise model).
Discussed at Cirq Cync.  Composability of noise models is not an explicit goal.  However we are missing a feature of being able to build a set of reasonable noise models, so we need to increase the number of such models / make easy construction of noise models.
Opened #3067 to track better / more noise model construction.
