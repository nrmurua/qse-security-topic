Clarification of underlying procedure.
I am wondering how exactly Aqua PrimitiveOp converts matrix to Pauli strings. My assumptions are:
Could anyone confirm correctness of above assumptions?
Could the documentation be augmented to reflect exact specification of underlying procedure?
The to_pauli_op method
https://github.com/Qiskit/qiskit-aqua/blob/9378b8541d52e4dae8c7e178ffe98c3a394a99be/qiskit/aqua/operators/primitive_ops/primitive_op.py#L262
relies on the qiskit.quantum_info modules and the SparsePauliOp
The representation you're referring to is the PauliTable in Qiskit, the documentation  explains the qubit ordering.
Thank you for suggested link, but I still be confused with ordering. I created a random Numpy matrix A. The corresponding operator MatrixOp(A). opA.to_pauli_op() gives (one Pauli string is shown as an example):
In order to compare with direct classical computation I do (note the complex unit near Z @ X):
which yields: (-0.013585831203668838-0.11893548225856074j) as expected.
According to the link https://qiskit.org/documentation/stubs/qiskit.quantum_info.PauliTable.html
Y = (-1j * Z @ X) is a correct Pauli sub-string. The definition of Hilbertâ€“Schmidt is not mentioned therein, but I think the one I gave before should be ok. However, according to documentation, the matrix (-1j * Z @ X) must be the first one in Kronecker product. This is smth I do not understand.
Discussion I think concluded as there has been no activity for a couple of months so I am closing this,
