It is very important to support sample-based expectation in PauliSum for real & simulating QPU devices. Given num_shots (or we can name it as repetitions. which one do you prefer?), the result of cirq.Sampler().run() is a list of qubit measurements. Based on the result, a helper to calculate (estimated) expectation value of given PauliSum is really nice to have.
I suggest cirq.PauliSum.expectation_from_samples() and the usage is identical to that of cirq.PauliSum.expectation_from_wavefunction() and cirq.PauliSum.expectation_from_density_matrix() except input signature has measurements rather than final_state or final_density_matrix. It also output float expectation value.
It is assumed that the given measurements have the shape [num_shots, num_qubits] for example. so the function expectation_from_samples() doesn't need to have num_shots as an additional input.
I want to work on it.
@mpharrigan
This is more complicated than it looks. I'd say someone with some experimental quantum computing experience should do this.
I'm putting the finishing touches on a design doc for a full solution to executing circuits to estimate a bunch of observables. That may be more than what you're asking for here. Specifically
I suggest cirq.PauliSum.expectation_from_samples() and the usage is identical to that of cirq.PauliSum.expectation_from_wavefunction() and cirq.PauliSum.expectation_from_density_matrix() except input signature has measurements rather than final_state or final_density_matrix. It also output float expectation value.
This is a rather modest request. The difficulty is that the input measurements need to somehow be guaranteed to have come from modified circuits that include pre-measurement single-qubit change-of-basis rotations. This is generally the challenging part.
Gonna leave a few comments/notes that came up from a cirq meeting months ago:
Thank you for the comments @mpharrigan & @peterse. Do you think we have brute force algorithm first, and then optimize it later as Evan suggested?
Also, I am rethinking about cirq.PauliSum.expectation_from_samples() because it requires PauliSum, and measurements can't be obtained without knowing PauliSum. I guess cirq.PauliSum.expectation_from_circuit_and_sample() might be the right name, and give it the right to attach pre-measurement circuit for change of basis and perform sampling. What do you think?
This has been resolved by #3371 and subsequent PRs.
