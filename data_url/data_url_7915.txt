I have tried to modify the grape_unitary() function in grape.py also to accommodate open quantum systems. One can use it to generate time varying fields for synthesising unitaries for them.
I have tried to run it for the same system as in this notebook.
I have run into a problem as to some sets of collapse operators give spurious overlap values.
The code seems to work well for the closed system, though it is slower than the original notebook.
The code
I know that qutip has another implementation of GRAPE (along with CRAB) in this file and some others in control folder. But it seemed too dense with logic for me to modify it. Hence I modified grape.py.
fsa.py is the file analogous to grape.py.
tca.py is the example file (almost entirely based on this notebook ) where I run it for a closed quantum system (as in the aforementioned notebook).
otca.py, otca1.py and other otca*.py are files where I run them for various collapse operators.
tej_plotter.py is just a small python script file to save graphical representation of the final unitaries.
The explanation of the main idea is here. An updated version will be found here
Could this be fixed by redefining (generalising) _overlap(A, B) function in grape.py ?
Not sure if I can answer your specific question but I have used QUTIP GRAPE before. I would first suggest opening a pull request or linking to your fork, so it's easier to compare your modifications to the original code.
I have briefly looked at your code and I would suggest dropping numba as qutip doesn't currently have numba as a dependency. I am confused about why you choose the cnot notebook as your example? There is an example of quantum optimal control using open quantum systems, control-pulseoptim-Lindbladian.ipynb .
Nonetheless, I believe grape.py is definitely not the place to place your additional support for open quantum systems. Grape is an optimization method, you should be looking extending support for open quantum systems in the pulseoptim class.
If you are interested you can also take a look at the quantum optimal control tool I built, QUTIP's quantum optimal control didn't satisfy my needs.
https://github.com/lifeishard/PADQOC
I have commented out numba. I agree with you that grape.py is not suitable, but I couldn't really wrap my head around the pulseoptim class. Hence, the code. I will have a look at  https://github.com/lifeishard/PADQOC
