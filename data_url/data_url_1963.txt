@mpharrigan this is going to require serializing frozenset.  Do you have any objections to this?  I'm going to do it in a way that it preserves roundtrip (there is a crazy cool hack you could do which is to pass in the values of the set as keys in a dict with all values None, but figure that's not a good practice :) )
Do you mean adding generic support for frozensets in the cirq encoder? Or custom logic in PauliSum for turning the keys from frozenset to lists and then back to frozenset in PauliSum's deserializer?
If the latter, that's expected although the plumbing is a little intricate in this particular case.
If the former, how do you intend to tag the resulting JSON so it's known to be a frozenset during deserialization?
Oh I was thinking the former, but you are correct that could be a way to handle it.   Was just going to re-use the "cirq_type" with frozenset.  An alternative would be to create a different key "builtin-type".  I think there was some discussion of this problem over in the numpy array serialization discussion.
Now that I think about it maybe your first suggestion is the better approach.
Let me know how it goes. I'm not opposed to adding support for more basic containers in principle. I think since _UnitPauliString is an implementation detail it's not strictly necessary for this use case
I wanted to see what it looked like.  One issue you run into is tuples, which are default serialized to lists.  You can fix this https://stackoverflow.com/questions/15721363/preserve-python-tuples-with-json but not really a great hack.
