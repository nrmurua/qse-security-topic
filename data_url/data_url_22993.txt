about the first three points:
last points:
I agree with most of what you said, in particular, the double system of tags + directory was making things too complicated.
I believe we should start the discussion from our needs to make sure we don't converge to a solution that is too complicated again:
My opinion is that multiple channel acquisitions should be anyway stored inside a single curve, because internally, it is a 2xN table and it is really inefficient and impractical to store it as a tuple of 2 different structures.  So basically I think the first use of subdirectories is inappropriate.
On the second inconvenient, I think we could live with a non-nestable structure, especially if runs are identified with a unique id as well...
What do you think ?
I am strongly against non-nested hierarchy.
Sacrificing this clarity in order to store the code among the data seems a bad idea. Especially, because code history is naturally supervised with the git history, and maybe even the date in the name of the script, or a reference to the scipt name in the curve params.
to your other points:
Another thing we should think about in my opinion is to automatically interface git with the curve acquisition, that is automatically commit the code to git when a curve is saved, for example, and to save the commit number along with the curve. That way one could uniquely identify the code that was used for a specific acquisition, without redundancy.
OK, then let's go for an arbitrary level of nesting.
Then I see 3 solutions:
I honestly don't know what is the best system, also, things get more complicated if you think about what should happen when the user renames/moves/deletes directories manually on the computer.
The advantage of 1. is that importing a run from one system to the other could be as simple as copy-pasting the corresponding directory, and maybe asking for the database to load all these files.
The advantage of 2. is that somehow you are encouraged to store your scripts and analysis in some places that don't pollute the curves structure. We could also think of providing a function "fetch all curves in local directory" such that copy-pasting yesterday's notebook in today's directory would work without the need to change some parentcurveid..
The advantage of 3 is that we keep things simple and let the users decide how they want to use the system...
To come back to this:
