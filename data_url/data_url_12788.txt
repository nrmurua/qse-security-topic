The central solution relies on figuring out which state the fourth qubit will be after all the measurements, and manipulating it to return to the original state of the first qubit.
Now, after doing the math with tensors, and rewriting first two bits into bell states, I believe I understood the states right -
// 0 0 0 - done
// 0 0 1 - X
// 0 1 0 - X
// 0 1 1 - done
// 1 0 0 - Z
// 1 0 1 - X, Z
// 1 1 0 - X, Z
// 1 1 1 - Z
if(b3){
X(qCharlie);
}
if(b2){
X(qCharlie);
}
if(b1){
Z(qCharlie);
}
This snippet passed the task. However, in the official implementation, there is a Y gate (of course, this also passes).  I can attempt to verify the equivalence of the circuits in final states upto a constant phase factor , but what is the motivation behind the Y gate? As there is no detailed solution available that implementation initially confused me quite a bit, since none of the states have a factor of i in the phase difference. Also, I would love to write out all the math as a workbook if required and replace the official implementation with the one above.
I agree, applying X gate in lieu of YZ has the same effect, as long as you can disregard the global phase (which we can do in this case). I'm not sure what the thinking was here - I've seen Y gate used as a shorthand for XZ, but using YZ instead of X is new to me :-)
Sure, I'd love to have a workbook for this kata!
We'd
@pj747 @ashwinmayya's change fixed the reference solution for 4.2, so I'm closing this issue. If you want to write up the workbook for Teleportation, I'd welcome it - it is not on the list at #208 but please let me know if you'd like to add it.
