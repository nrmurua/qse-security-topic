Speed up the conversion from pauli to matrix
As stated in #717, scipy tends to use coo matrix to build matrix for either bmat or kronecker.
Furthermore, since we know all matrix form for all paulis rather than the random matrix, we can use the simple way to build the matrix rather than general Kronecker product.
E.g. use bmat method to build block matrix rather than Kronecker product.
if we change to bmat with coo format (even though it is not optimal), we still gain about 1.6 speedup (see benchmark below).
Here are the numbers I benchmarked with three configurations.
number of paulis: 10, each pauli has 22 qubits
os: macOS 10.13
env: python 3.6.5
terra version: the newest master branch
The average time for 10 runs:
Here is my benchmark script (just use default timer in python)
Method 2 represents a 40% of speedup over baseline which seems like a great local improvement. Can you profile real uses of this function and tell the fraction of the time it is used?
For a 12 qubit system, LiH molecule.
The conversion from paulis to matrix takes 85.6% of time with the master branch. (wall time: 13.1509 seconds)
After using method 2, the portion for conversion reduces to  80.4% (wall time: 7.94011 seconds)
the reduction in wall time is about 2x.
Well, 1.66x actually. It seems like a good improvement to me. It is a 34% faster which means a near 1:1 ratio according to the local speed-up. @nonhermitian do you want to add something more? @chunfuchen can you provide another example and summarize times in a table for posterity, please? I'm happy with implementing this. :)
Here is the prototype for the implementation
Here is the benchmark on different number of qubits
and this does not change the output data format of the method, all existing users won't encounter any issue.
#1142 is now going to track this. Closing it as it is one part of the redoing of the Pauli
