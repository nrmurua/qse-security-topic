Description of the issue
cirq.approx_eq(val1, val2) delegates to _approx_eq_iterables if the two values are iterable, which in turn compares the elements of each value in order. This is a problem if the values are sets, which are not guaranteed to be iterated in a fixed order
a downstream effect of this is that cirq.approx_eq is inconsistent for operations with interchangeable qubits, due to the comparison of the frozensets returned by GateOperation._group_interchangeable_qubits()
How to reproduce the issue
unfortunately this is difficult to reproduce consistently because the iteration order of sets is inconsistent. But some variation of the following will probably fail:
Cirq version
csynkque discussion - options
(a) sort when comparing two sets
(b) raise exception on comparison of two unordered sequences
Needs investigation what are impacts of these choices on the rest of cirq functionality;
would there be backwards incompatible change?
(b) raise exception on comparison of two unordered sequences
wouldn't this break approximate comparison of operations constructed from InterchangeableQubitGates (because their _value_equality_approximate_values_ contains a frozenset)?
the downstream effect of this issue (which is perhaps more important than the example i posted) is that cirq.approx_eq is also inconsistent for these operations, e.g. when i run the following:
i get
it does seem like sorting makes sense though, or even just falling back on exact (==) equality instead of _approx_eq_iterables when comparing unordered sequences?
I'm interested in looking into this issue. Will start getting more context on what's wrong.
