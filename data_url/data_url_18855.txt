Hi. I have a small question regarding understanding the control modifier
What control bits should be defined for the case above?
a[0], a[1], a[2] or a[0], a[1], a[2], a[3], a[4], b[1], b[2]
Thanks.
With the modifier, ctrl(3) @ x is a gate that takes 4 arguments; the first three are the controls, and the last one is the target.  As written, your statement ctrl(3) @ x a, b[1], b[2], f; applies 5 gates; it's the same as
That's because a is a register, and all the others are single qubits, so the broadcasting rules apply - see https://qiskit.github.io/openqasm/language/gates.html (just below the description of the CX matrix).
Now it's clear. Thank you.
But here a is a register, and single qubits used as controls instead of broadcasting rules apply,
if i just add arguments to this example
then broadcasting rules must be applied for registers a, b or these examples will remain equivalent? Are there well-defined rules for when a broadcasting should apply and when single qubits should be used?
At present, the spec isn't super clear about what happens in 3+ qubit gates when more than one of, but not all, the arguments are registers.  This seems like a good thing for us to improve - we've previously discussed it briefly in the types working group, and my recollection is that we had a consensus on mygate a, b, c; being
if a and b are registers, and c is a single qubit.  I'll bring it up again later this week, and look to make a PR with the outcome.
(Probably a typo, but in your second example you do f[0], but f is a qubit, not a register, so f[0] is an error, and it should just be f.)
I'm trying to understand common rule for converting a control modifier to circuit, and now I see something like this
For example
get the rules
This approach is also applicable here
I'm not sure that I correctly understood the original idea of the control modifier syntax, so I will wait your PR with many examples and detailed description.
Probably a typo
yes, thanks for noticing.
Oh right, I think I misunderstood some of your question sorry. negctrl(2) @ ctrl(3) @ x a, f; is never valid and never will be no matter what a and f are - negctrl(2) @ ctrl(3) @ x needs to take 6 quantum arguments, so it needs 6 things after it, whether they're registers or qubits.  The broadcast rules are a shorthand to apply the same gate multiple times only, never to let there be fewer arguments in the gate application.
The modifier syntax simply adds "argument slots" to the end.  So x takes one quantum argument, ctrl(1) @ x takes two quantum arguments, negctrl(3) @ ctrl(2) @ x takes six, and so on.  The "new" arguments get added onto the front of the list.
negctrl(2) @ ctrl(3) @ x a, f; is never valid
Hmm... But I see this exmaple in offical documentation right  now [arXiv:1707.03429]... and its look valid. I'm a little confused.

Here this eaxmple also present...
Oh, thanks for pointing those out!  I believe that's a mistake in the text - it contradicts the "implicit iteration" section of the paper (you've linked the OQ2 paper, but you meant the OQ3 one I think), and the live spec isn't super clear about the whole thing.
I'll check with the rest of the team, but I think that particular example is perhaps left over from a previous discussion.  At the very least, the spec needs updating to more clearly spell out what should happen.
Yes I think there is a typo in the text (I made that mistake writing this example). The following
should instead be:
In source/gates.rst we find:
Should that last line then be:
?
And should other examples in gates.rst be changed?
@vasilenkoalexey The OpenQASM 3 Technical Steering Committee would be interested in reviewing a PR for this issue if you would care to submit one. Thank you!
Sure! But I need some time for this.
Thank you, @vasilenkoalexey
So, i think now it can be closed.
