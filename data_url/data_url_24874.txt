Hi, it's me again.
If the bug manifests in unexpected behavior (as opposed to a crash), confirm that you have consulted the
API documentation
Upon configuring multiprocessing for scqubits and attempting to run for even simple systems (1 node) there appears to be an error that occurs regarding the attribute operator_func. Code prints a bunch of error messages then appears to hang until the kernel is stopped.
I attempted to run plot_evals_vs_paramvals and get_spectrum_vs_paramvals and saw the same behavior.
Error doesn't occur for the native Transmon class.
Expect scqubits to complete calculations without error or hangup.
Here's my code:
The error stacktrace seems like it has a lot of the same issue, so here's one example, rather than the whole stack trace:
Thanks, @QuantumWitness.
Thoughts:
(1) This shows that our pytests are currently not configured to include multiprocessing tests for the Circuit class. Let's change that, @saipavanc.
(2) After the fact, the problem is not surprising. Even dill has trouble pickling/unpickling a class that has to add methods and bind them dynamically.  I will look into a solution using __reduce__ and __setstate__. That may take a bit of fiddling and time.
@QuantumWitness Commit 81818ec might address this issue. As you may know, multiprocessing is notoriously finicky (especially on Windows); we do not yet have complete pytest coverage for multiprocessing with Circuit for all platforms yet, but you can try whether the current master solves the issue for you.
@jkochNU looks like the commit you referred to has worked! I cloned the repo in a separate environment and re-ran my script with the multiprocessing code and it claims to be computing in parallel. Many thanks, this has made my life much easier.
Edit: I don't know your particular requirements to close an issue, but I think this is resolved. Could wait until next release to officially close it, but consider me satisfied.
@QuantumWitness Our tradition is to close issues once changes have made it into an actual release, so no worries. If your statement that "it claims to be computing in parallel" indicates that there is none of the expected speedup, please follow up. (The naive calculation of time=serial_time/num_cpus is usually a bit too optimistic, and fiddling with thread settings may be needed.)
@jkochNU
I didn't mean to give the impression that it wasn't being sped up, so I did go and measure the bits of code I was interested in.
6 core multiprocessing gave me between 4.1x - 4.8x speedup, which is good enough for my purposes. Good to know that I might be able to eke out a little more by messing with the thread settings, though.
This has been addressed with the release of v3.0.2
