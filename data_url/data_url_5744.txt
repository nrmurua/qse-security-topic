from qiskit import QuantumCircuit, transpile, Aer, IBMQ
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from qiskit.providers.aer import QasmSimulator
import qiskit
from qiskit import QuantumCircuit, execute, ClassicalRegister, QuantumRegister, transpile
from qiskit.providers.aer import AerSimulator
import sys
import numpy as np
from qiskit import QuantumCircuit
from qiskit import Aer, transpile
from qiskit.tools.visualization import plot_histogram, plot_state_city
import qiskit.quantum_info as qi
from qiskit.opflow import I, X, Y, Z
from qiskit.quantum_info.operators import Operator, Pauli
from qiskit.opflow.primitive_ops import PauliSumOp
from qiskit.opflow.evolutions import TrotterizationBase
from qiskit.circuit.library import PauliEvolutionGate
from qiskit import QuantumCircuit,Aer,transpile
from qiskit.providers.aer import AerSimulator
from qiskit.circuit.library import RXGate
import qiskit
from qiskit import QuantumCircuit, execute, ClassicalRegister, QuantumRegister, transpile
from qiskit.providers.aer import AerSimulator
import sys
import numpy as np
from qiskit import QuantumCircuit
from qiskit import Aer, transpile
from qiskit.tools.visualization import plot_histogram, plot_state_city
import qiskit.quantum_info as qi
n=5
gamma = 0.2
beta = 0.2
operator = - 3/4 * (Z ^ I ^ I ^ Z ^ I) + 1/4 * (Z ^ I ^ I ^ I ^ I) - 2 * (I ^ Z ^ Z ^ I ^ I) - 7/4 * (I ^ Z ^ I ^ I ^ Z) + 5/4 * (I ^ Z ^ I ^ I ^ I) - 5/4 * (I ^ I ^ Z ^ I ^ Z) + 7/4 * (I ^ I ^ Z ^ I ^ I) - 1/4 * (I ^ I ^ I ^ Z ^ I) + 2 * (I ^ I ^ I ^ I ^ Z)
evo = PauliEvolutionGate(operator, time=-gamma)
qc=QuantumCircuit(n)
qc.h(range(n))
qc.barrier
for i in range(2):
qc.measure_all()
qc.draw()
backend= AerSimulator(method="statevector")
shots = 20000
job = execute(transpile(qc), backend, shots =shots, blocking_enable=True, blocking_qubits=2)
result = job.result()
count = result.get_counts(qc)
max_key = max(count, key = count.get)
s = ''
for i in range(n): s+='1'
print("\n-----------------------------------------------------------------------")
print('Result -> |'+ str(max_key) + '> : '+ str(count[max_key])+' counts')
print('Number of shots -> '+ str(shots))
print("\n-----------------------------------------------------------------------")
when I run the script with the following command:
!time mpirun -np 1 -host  172.31.40.57:1  python /home/ubuntu/qiskit_pruebas/scripts/Qiskit_QAOA_Castillos.py
I get the following result:
Result -> |01010> : 1885 counts
Number of shots -> 20000
However, when I launch the following command:
!time mpirun -np 2 -host  172.31.40.57:2  python /home/ubuntu/qiskit_pruebas/scripts/Qiskit_QAOA_Castillos.py
I get the following result:
Result -> |00000> : 5385 counts
Number of shots -> 20000
I want to get the same result regardless of whether I am running in one or two processes.
I think @doichanj  can solve the problem, thank you very much for everything.
I found this issue is based on the seed of random number. If seed is not specified, seed is generated for each process but these are different. Please set seed_simulator option to avoid this issue like this.
job = execute(transpile(qc), backend, shots =shots, blocking_enable=True, blocking_qubits=2, seed_simulator=1)
Anyway I will fix this problem to generate the same seed for each process when MPI is enabled.
you could run it with mpi without randomisation, in which case how would you do it?
I believe that PR1560 resolved this issue.
I can't find the case, could you please give me the link? @hhorii
