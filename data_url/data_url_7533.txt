FYI.
This should be straight forward, try your first PR? @yihong-zhang
In case you didn't find it: https://github.com/QuantumBFS/YaoBlocks.jl/blob/master/src/primitive/const_gate_gen.jl
BTW, I'm still wondering what is the use case for a constant gate CZ? it is just control(a, b=>Z) right?
In case you didn't find it: https://github.com/QuantumBFS/YaoBlocks.jl/blob/master/src/primitive/const_gate_gen.jl
BTW, I'm still wondering what is the use case for a constant gate CZ? it is just control(a, b=>Z) right?
Yes. CZ is an symmetric entangled gate and quite different from CNOT (asymmetric). CZ is very important in quantum information, for example, it is frequently used in cluster states generations, which are key sources in measurement-based quantum computing.
Just like cnot(nbit, i, j), besides CZ, we should probably also have cz(nbit, i, j). @yihong-zhang
@Roger-luo Constant CZ gates can be used in rot blocks, this is the using case of Yi-Hong, otherwise, we can just use cz(nbit, i, j) interface. BTW: Do you think it is good to  to have put(nbit, (i,j)=>CNOT) and put(nbit, (i,j)=>CZ) being dispatched to faster control blocks?
The whole reason we hide those constant gates is because they are confusing with existing composite blocks (#163), I think the point of avoiding such thing is because:
a) we don't want to have many alternative to implement the same task which can be confusing and hard to maintain and test
b) they are slower than those composite blocks since it is not specialized to low level instruct (due to more complicated maintenance, we can't guarantee each possible implementation is always dispatched to correct place)
Regarding to the constant CZ, I think the problem is because you don't want to re-allocate the matrix during calculation? or why you can't use control(a, b=>Z) in rot? e.g
It seems to just work for me. And yes, if it is just for convenience we should add cz instead of CZ as constant gate. At least CZ should not be exported from ConstantGate module.
Do you think it is good to to have put(nbit, (i,j)=>CNOT) and put(nbit, (i,j)=>CZ) being dispatched to faster control blocks?
I'd prefer to encourage to use control as much as possible, it seems the only difference of using a constant gate CZ instead of control(a, b=>Z) is a 96 byte extra allocation each time you call mat, if you cache this block. The rest can be the same (we can dispatch apply! of CZ to specific instruct)
PS. I think we can always specialize high level interface as much as possible, this won't make any difference on the interface at this level, the code is completely equivalent (using control Z instruct or control U instruct).
so the final decision is
Do you agree? @yihong-zhang
I think her issue is about printing instead of constant gate after msg her. We should overload the show function for control block as well. I think a one line compat printing mode is necessary now, (like the Array printing in Base) I thought about it before, but I didn't have any use case so I didn't implement it.
so the final decision is
Do you agree? @yihong-zhang
I will define a function cz(nbit, i, j) later.
solved by QuantumBFS/YaoBlocks.jl#82
