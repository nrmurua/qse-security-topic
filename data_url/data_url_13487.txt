Resolve todos in test_zne_mitiq_qiskit.py, with focus on executor efficiency of the qiskit_executor() below.
Uncomment this executor in test_zne_mitiq_qiskit.py and run make test-qiskit.
Test run takes >40 minutes (on test_run_factory_with_number_of_shots and test_mitigate_executor_with_shot_list primarily). As of 03/11, time increase occurs in execution after change of basis with many shots.
Table Note 1: These numbers don't really pass muster because the total test run time is ~40 minutes for a 10 iteration run. These are the timeit run times per loop without our test iterations (so for the >minute default: 1 loop per run, 7 runs). I might argue there's a poor timeit interaction somewhere. Reproduced with similar results on 03/14.
Table Note 2: %timeit 10**6 qiskit.execute failed to complete locally in ~12 hours.
For the %timeit circ.measure_all():
slowest run took 9.24 times longer than the fastest
Test notebook available upon request.
about():
Note: see #595 for Qiskit version mismatch (it is actually 'qiskit': '0.23.6')
Thanks @Aaron-Robertson!
This is an important issue but I just removed the label bug, since I think this is more a matter of efficiency.
Good point @andreamari, thanks! I clarified the issue accordingly.
Side note: I actually can't edit Mitiq labelsâ€”apparently GH only allows label edits with write access. They are attached to issue templates though. In this case I suppose I could have used the feature request template to mark it an enhancement, but that one didn't look quite right based on the text.
@Aaron-Robertson, there is also a (less visible) option of a blank template. But what you have chosen is totally fine for this issue.
It seems to work fine locally for me actually. I am testing the branch of #584. I uncommented the function qiskit_executor and  run the tests, and they work fast for me. A suggestion for #584 would have been to switch from a commented TODO to a pytest.skipdecoration.
@nathanshammah @rmlarose Aha! Nathan is correct above and on the community call this morning. Submitted a PR, not sure if it can be absorbed into milestone 0.7.0, but it's a minor change.
Testing again with a test notebook, I see the slowness is actually present in the old higher shot counts so that could be worth more investigation. PR should probably be unlinked.
So, this is fixed by having qiskit_version>=0.24? Or does anything else need to be done?
That wasn't it actually. "Fix" was the test changes with fewer shots. This issue of a slower execute with a change of basis, vs without, is still present and visible for high shot counts. It doesn't impact our tests anymore though, so could close the issue if that's the priority.
This will be closed by #623 with new observables.
This issue had no activity for 2 months, and will be closed in one week unless there is new activity. Cheers!
