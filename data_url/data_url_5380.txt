Search existing GitHub issues to make sure the issue does not already exist:
https://github.com/xanaduai/pennylane-lightning/issues
If posting a PennyLane-Lightning issue, delete everything above the dashed line, and fill
in the template. If the issue is a bug, start the title of the issue with [BUG].
If making a feature request, delete the following template and describe, in detail,
the feature and why it is needed.
For general technical details check out our documentation:
https://pennylane-lightning.readthedocs.io/
Description of the issue - include code snippets and screenshots here
if relevant. You may use the following template below
should work on Windows+Python(>=3.8)+using wheel built from cibuildwheel
Actual behavior: (What actually happens)
It fails in this particular set-ups. It seems like the cibuildwheel does not use cl.exe and adds some MinGW dependencies (libgcc_s_seh-1.dll and ligstdc++-6.dll). In Python<3.8, Python has no difficulty in finding the required dependencies. However, due to changed dll path policy in Python 3.8, it does not find the required dll files and raises error.
Reproduces how often: (What percentage of the time does it reproduce?)
System information: (post the output of import pennylane as qml; qml.about())
Please include any additional code snippets and error tracebacks related
to the issue here.
Any additional information, configuration or data that might be necessary
to reproduce the issue.
In Python<3.8, Python has no difficulty in finding the required dependencies. However, due to changed dll path policy in Python 3.8, it does not find the required dll files and raises error.
@chaeyeunpark just out of curiosity, does a newer version of cibuildwheel solve this issue?
Hi, @josh146. I don't think this is a problem due to the version of the cibuildwheel (although I updated cibuildweel version in #211). The main problem was, with CMake + setup.py, the default compiler was not cl.exe (MSVC) but g++ from MinGW (which is also installed in the GitHub action environment). Adding ilammy/msvc-dev-cmd solves the problem.
Hi, @josh146. I don't think this is a problem due to the version of the cibuildwheel (although I updated cibuildweel version in #211). The main problem was, with CMake + setup.py, the default compiler was not cl.exe (MSVC) but g++ from MinGW (which is also installed in the GitHub action environment). Adding ilammy/msvc-dev-cmd solves the problem.
So is it safe to say with the recent changes the wheels now build using cl.exe rather than g++ on Windows?
@mlxd Yes, the PR #211 changes the default compiler for cibuildwheel to cl.exe.
There are two additional points. First, I presume that the default compiler was cl.exe for native setup.py (as I cannot see libg++ dependency from the wheels from v0.19.0). It seems like setup.py + CMake introduced such a dependency (so MinGW is enabled as it is default compiler for CMake on Windows). Second, as a wheel for conda is anyway built using cl.exe, I think it is better to use a similar set-up internally.
As #202 solves this issue, I close this issue.
