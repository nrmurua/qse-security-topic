A power mechanism for circuit synthesis would be to accept cudaq::spin_op as input to a quantum kernel and use that with a synthesis operation like exp_pauli. Fully supporting spin_op via the AST Bridge and MLIR is a large task. An easier stepping stone that would enable a wide range of use cases (ones we are already seeing) is to introduce a cudaq::pauli_word type. This type would model a single term in a spin_op. For example, the spin_op op = x(0) * y(1) - 2.0 * z(0) z(1) would contain 2 pauli words, specifically X0 Y1 and Z0 Z1 (I propose we ignore the coefficient as part of our cudaq::pauli_word type, coefficients can be extracted from a spin_op and passed separately as a std::vector<double>). So the type would effectively provide an opaque type that map to a ptr<i8> in the AST Bridge and be compatible with our existing ExpPauliOp.
Note this is related to PR #1062. It seems smarter to force this type of input to be a separate type in the language rather than a catch-all const char *.
