Hi,
It seems that the version Falcon adopted to PQClean uses the emulated-floating point version developed for low-end microcontrollers. This choice makes the code simultaneously >10x slower and much more difficult to read. Double-precision floating-point arithmetic is a standard part of the C standard so there is really no portability issue either.
ps. IEEE 754 is assumed but is universally available. Even slight variations (such as changing the rounding rule) do not break things as long as the algorithm remains randomized. Deterministic derandomization, as is often done with DSA/ECDSA (per RFC 6979) might be problematic for Falcon.
Cheers,
This has been something that we do want to add, especially since we now have support for specifying platform requirements and are merging in AVX2 implementations.
@pornin indicated in #210 that while double-precision floating points are available in C, the libm implementation of rint() is platform-specific and often not constant-time. Even on x86_64, unless you specify certain flags.
In addition, we also don't allow linking to libm â€“ In this excellent comment Thomas explains how to get around it, but this is platform and even os-specific.
We have had the AVX2 code for a while now.
