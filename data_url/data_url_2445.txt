I noticed that if I export CCZ into qasm, I get the h, ccx, h operations with no leading comment saying that they correspond to a CCZ. I'm pretty sure this used to happen.
Confirmed this is still true.
returns
I can take this as a first issue.
The hacky way to do this would be to hard-code this comment string into CCZ._qasm_.
The better way would be to have ccz with exponent=1 decompose into [h, ccx, h]. The problem is that ccx decomposes into ccz, so it gives an infinite loop. Would we want to muck around with the decomposition orders just for this?
Another option would be to augment should_annotate with an extra condition that checks if the generated qasm is multi-line. This change would cause some additional gates that are not currently commented to be so. h_with_parameter would be // Gate: H**0.25, and multi-qubit identities would be annotated e.g. // Gate: I(3). (Note I think H**0.25 could also be fixed by removing the custom qasm for non-one exponents and replacing with None)
Opened a PR for the issue. That PR goes with the third option: augment the should_annotate to annotate any multiline output.
At first I was thinking the second option would be preferred, but I no longer think so. What an operation decomposes to, and how an operation is best represented in qasm are different things. (for instance, ccx decomposes, but can be represented directly in qasm).
I originally thought the third option was a hack, but now it seems to me to be the most natural: if the qasm expands beyond one line, whether because of decomposition or because of a custom qasm definition, then annotate it.
