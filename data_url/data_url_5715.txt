Hi, I have a problem with the compilation of qiskit_aer with CUDA support. I want to compile qiskit aer with CUDA and cuQuantum. My compilation sentence is:
python ./setup.py bdist_wheel -- -DAER_THRUST_BACKEND=CUDA -CUSTATEVEC_ROOT=/mnt/home/users/scbi_quantum_uma/davidcb/Program_Files/programs/qiskit_0.39.0_gpu
The output error is:
Consolidate compiler generated dependencies of target controller_wrappers
[ 10%] Building CUDA object qiskit_aer/backends/wrappers/CMakeFiles/controller_wrappers.dir///__/src/simulators/statevector/qv_avx2.cpp.o
/mnt/home/soft/gcc21/programs/x86_64/gcc-9.5.0/lib/gcc/x86_64-pc-linux-gnu/9.5.0/include/avx512fintrin.h(9182): error: identifier "__builtin_ia32_rndscaless_round" is undefined
/mnt/home/soft/gcc21/programs/x86_64/gcc-9.5.0/lib/gcc/x86_64-pc-linux-gnu/9.5.0/include/avx512fintrin.h(9191): error: identifier "__builtin_ia32_rndscalesd_round" is undefined
/mnt/home/soft/gcc21/programs/x86_64/gcc-9.5.0/lib/gcc/x86_64-pc-linux-gnu/9.5.0/include/avx512fintrin.h(14833): error: identifier "__builtin_ia32_rndscaless_round" is undefined
/mnt/home/soft/gcc21/programs/x86_64/gcc-9.5.0/lib/gcc/x86_64-pc-linux-gnu/9.5.0/include/avx512fintrin.h(14842): error: identifier "__builtin_ia32_rndscalesd_round" is undefined
/mnt/home/soft/gcc21/programs/x86_64/gcc-9.5.0/lib/gcc/x86_64-pc-linux-gnu/9.5.0/include/avx512dqintrin.h(1365): error: identifier "__builtin_ia32_fpclassss" is undefined
/mnt/home/soft/gcc21/programs/x86_64/gcc-9.5.0/lib/gcc/x86_64-pc-linux-gnu/9.5.0/include/avx512dqintrin.h(1372): error: identifier "__builtin_ia32_fpclasssd" is undefined
I also tried with only the first flag (python ./setup.py bdist_wheel -- -DAER_THRUST_BACKEND=CUDA) and I have the same error.
If compiled without CUDA it works fine.
As in the error appears the word "avx512" I think that is because I'm compiling in a supercomputer that has AMD processors (avx512 is an optimization for Intel processors). I work in a supercomputer center and there are a lot of nodes with Intel processors but without GPU, and a few nodes with GPU but with AMD processors, so I need that qiskit works in both, with AMD an Intel processors.
Thank you for your reporting. Could you tell whether this issue is occurred or not when -DAER_THRUST_BACKEND is not configured?
I just tried it. I deleted the qiskit-aer folder, I did a git clone and I compiled without -DAER_THRUST_BACKEND flag and it works. I just did the same with this flag (delete, git clone and compile) and got the same error.
I found similar issues with google:
https://stackoverflow.com/questions/60824242/suddenly-getting-builtin-ia32-sqrtsd-round-is-undefined-with-nvcc-gcc
https://gpusph.discourse.group/t/error-cannot-add-a-floating-body-without-chrono/104/13
nvcc and g++ may use different headers and then produce this issue. Can you try other gcc versions?
At the end the solution was not use the compiler and the CUDA version of my sistem, but rather install all from scratch using Conda. Installing all the packages, the new compiler and Cuda in the same sentences (marked in bold) Conda solve all compatibility issues. I leave here all the installation sentences in case someone needs it:
git clone https://github.com/Qiskit/qiskit-aer.git
cd qiskit-aer
git checkout 0.11.1
conda create -p /path-of-installation
conda install -p /path-of-installation -c default -c conda-forge -c anaconda -c nvidia python==3.9.1 pandas matplotlib cuquantum-python conan cmake openblas-devel cuda-toolkit cxx-compiler
source activate /path-of-installation
pip install -t /path-of-installation/lib/python3.9/site-packages/  qiskit
pip install -t /path-of-installation/lib/python3.9/site-packages/ -r requirements-dev.txt
python ./setup.py bdist_wheel -- -DAER_THRUST_BACKEND=CUDA -DAER_BLAS_LIB_PATH=/path-of-installation  -DCUSTATEVEC_ROOT=/path-of-installation/lib/python3.9/site-packages/cuquantum
pip install /dist/qiskit_aer*.whl -t /path-of-installation/lib/python3.9/site-packages/ --upgrade
Thanks for your support
@DavidCastanoUMA Thank you for your comment. Though you encountered another issue (#1645), compilation looks successful. I would like to close this issue and continue discussion in #1645.
