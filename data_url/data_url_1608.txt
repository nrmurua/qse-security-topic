PauliString represents a collection of pauli's applied on different qubits. Since pauli operators applied to different qubits commute with each other, the class sorts all the qubits by default. Eg:
Sorting qubits is not common in other operations (eg: ControlledOperations, GateOperations etc.), and has some confusing semantics as shown below:
gate_instance == gate_instance.on().gate()  should generally be true for all gates, but this is not the case with DensePauliString. Eg:
with_qubits function is supposed to return the same operations applied to different qubits but the underlying gate also changes with qubit ordering, similar to the same issue as above. Eg:
Since changing the ordering of the qubits (which happens implicitly) changes the underlying "gate" represented by the operation, the unitary matrix of the operation is not necessarily the same as what one would expect. To get the expected representation, one needs to use .matrix(), which makes a case for matrix protocol propsoed in #3099. Eg:
Maybe we should store an explicit QubitOrder as well to improve consistency between the operator and underlying gate's representations?
Update: Note that QubitOrder is not serializable and hence it might make more sense to use an OrderedDict for qubit_pauli_map or an explicit Iterable[raw_types.Qid] for storing the qubit_order.
Upd: This is part of organizing gate relationships #3242
Adding QubitOrder for Paulistring initialiser is possible.
This should be done, let's figure out how to do it.
