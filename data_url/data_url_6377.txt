QUnit::CommuteH() tries to pass H gate buffers around controlled phase gate buffers, if it can, to maintain maximum separability. For example, assuming other factors permit, a buffered CZ gate could be replaced with a buffered CNOT gate, commuting an H gate to the other side of the buffer queue by this process.
However, this exact buffer commutation case, (a very important one,) doesn't seem to be happening, at any recent point in the version history. The bugs responsible for this failure have morphed, but I'm currently working on fixing this in the ccz_ccx_h branch.
The bug isn't harming the general correctness, measured by cross entropy benchmarks. It's likely this intended functionality has never worked, but the opportunities for optimization are simply skipped. However, this is almost the entire point of the gate buffering system, to at least cover the CZ/CNOT commutation cases with H.
I'll be fixing this, this weekend. QUnit might appear to scale back on commutation cases, at least to direct inspection of the code, but many of the cases allowed to filter through were simply never activated. Performance should directly benefit, at which point we can reclaim ground on (actually used) commutation of H and controlled gate buffers.
As of #348, "isOpposite" is now used. However, an issue with "anti-controlled" buffers slipped past me. We've shunted the bug, but the shunt hurts commutivity of "inversion" gates. Before I close out this issue, I will fix the intended commutation relation cases.
The shunt was replaced was replaced with appropriate commutation rules.
