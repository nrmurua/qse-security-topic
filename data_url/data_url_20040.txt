See example here: https://github.com/tokio-rs/tokio/blob/052355f0649bf54ee1850060a636d045eb7e2bf1/.github/workflows/ci.yml#L127-L160
By adding valgrind to the PR merge process, it would ensure that no memory leaks or invalid memory accesses/instructions occur.
Note: when using the rust oqs rust crate that references this core library, I ran valgrind on a binary that attempted all the KEMs, and found that there were memory issues associated with these algorithms.
Can you list which algorithms cause issues? We already have an open "memory issue" with SPHINCS but probably don't look into it as we don't know whether this algorithm "survives" the NIST downselection... But it's nothing one can "feel good" about, so your proposal sounds reasonable.
