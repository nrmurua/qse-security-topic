Is it possible to add cygwin support ? I get asm compile errors e.g.
$ ninja
[18/1508] Building ASM object src/kem/...les/bike1_l1_fo.dir/additional/red.S.o
FAILED: src/kem/bike/CMakeFiles/bike1_l1_fo.dir/additional/red.S.o
/usr/bin/cc -DAVX2 -DFUNC_PREFIX=OQS_KEM_bike1_l1_fo -DLEVEL=1 -Iinclude -I/usr/include -fPIC -march=native -Werror -Wall -Wextra -Wpedantic -Wstrict-prototypes -Wshadow -Wformat=2 -Wfloat-equal -Wwrite-strings -O3 -fomit-frame-pointer -fdata-sections -ffunction-sections -Wl,--gc-sections -Wno-maybe-uninitialized -mavx2 -include /home/moelma/git/liboqs/src/kem/bike/functions_renaming.h -MD -MT src/kem/bike/CMakeFiles/bike1_l1_fo.dir/additional/red.S.o -MF src/kem/bike/CMakeFiles/bike1_l1_fo.dir/additional/red.S.o.d -o src/kem/bike/CMakeFiles/bike1_l1_fo.dir/additional/red.S.o -c ../src/kem/bike/additional/red.S
../src/kem/bike/additional/red.S: Assembler messages:
../src/kem/bike/additional/red.S:19: Error: unknown pseudo-op: .hidden' ../src/kem/bike/additional/red.S:21: Warning: .type pseudo-op used outside of .def/.endef: ignored. ../src/kem/bike/additional/red.S:21: Error: junk at end of line, first unrecognized character is O'
../src/kem/bike/additional/red.S:58: Warning: .size pseudo-op used outside of .def/.endef: ignored.
../src/kem/bike/additional/red.S:58: Error: junk at end of line, first unrecognized character is `O'
[19/1508] Building ASM object src/kem/.../bike1_l1_fo.dir/additional/gf_mul.S.o
I also saw the following:
FAILED: tests/kat_sig.exe
: && /usr/bin/cc -Wl,--enable-auto-import -Wl,--stack,16777216 tests/CMakeFiles/kat_sig.dir/kat_sig.c.o -o tests/kat_sig.exe -Wl,--out-implib,tests/libkat_sig.dll.a -Wl,--major-image-version,0,--minor-image-version,0 lib/liboqs.a -lm /usr/lib/libcrypto.dll.a && :
/usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3.c.o):xkcp_sha3.c:(.text$Keccak_Dispatch+0x47): undefined reference to KeccakP1600_Initialize' /usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3.c.o):xkcp_sha3.c:(.rdata$.refptr.KeccakP1600_ExtractBytes[.refptr.KeccakP1600_ExtractBytes]+0x0): undefined reference to KeccakP1600_ExtractBytes'
/usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3.c.o):xkcp_sha3.c:(.rdata$.refptr.KeccakP1600_Permute_24rounds[.refptr.KeccakP1600_Permute_24rounds]+0x0): undefined reference to KeccakP1600_Permute_24rounds' /usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3.c.o):xkcp_sha3.c:(.rdata$.refptr.KeccakP1600_AddBytes[.refptr.KeccakP1600_AddBytes]+0x0): undefined reference to KeccakP1600_AddBytes'
/usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3.c.o):xkcp_sha3.c:(.rdata$.refptr.KeccakP1600_AddByte[.refptr.KeccakP1600_AddByte]+0x0): undefined reference to KeccakP1600_AddByte' /usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3.c.o):xkcp_sha3.c:(.rdata$.refptr.KeccakP1600_Initialize[.refptr.KeccakP1600_Initialize]+0x0): undefined reference to KeccakP1600_Initialize'
/usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3x4.c.o):xkcp_sha3x4.c:(.text$Keccak_X4_Dispatch+0x47): undefined reference to KeccakP1600times4_InitializeAll' /usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3x4.c.o):xkcp_sha3x4.c:(.rdata$.refptr.KeccakP1600times4_ExtractBytes[.refptr.KeccakP1600times4_ExtractBytes]+0x0): undefined reference to KeccakP1600times4_ExtractBytes'
/usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3x4.c.o):xkcp_sha3x4.c:(.rdata$.refptr.KeccakP1600times4_PermuteAll_24rounds[.refptr.KeccakP1600times4_PermuteAll_24rounds]+0x0): undefined reference to KeccakP1600times4_PermuteAll_24rounds' /usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3x4.c.o):xkcp_sha3x4.c:(.rdata$.refptr.KeccakP1600times4_AddBytes[.refptr.KeccakP1600times4_AddBytes]+0x0): undefined reference to KeccakP1600times4_AddBytes'
/usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3x4.c.o):xkcp_sha3x4.c:(.rdata$.refptr.KeccakP1600times4_AddByte[.refptr.KeccakP1600times4_AddByte]+0x0): undefined reference to KeccakP1600times4_AddByte' /usr/lib/gcc/x86_64-pc-cygwin/10/../../../../x86_64-pc-cygwin/bin/ld: lib/liboqs.a(xkcp_sha3x4.c.o):xkcp_sha3x4.c:(.rdata$.refptr.KeccakP1600times4_InitializeAll[.refptr.KeccakP1600times4_InitializeAll]+0x0): undefined reference to KeccakP1600times4_InitializeAll'
collect2: error: ld returned 1 exit status
ninja: build stopped: subcommand failed.
Thank you
Markus
Thanks for this report. It seems, BIKE is not supported on Win32 platforms and the compile shouldn't be attempted to begin with. Tagging @jschanck @xvzcf for possible further information. Until then, you may want to try building turning BIKE explicitly off in the (cyg)win build, e.g., starting the build with cmake -GNinja -DOQS_ENABLE_KEM_BIKE=OFF ..
Oops - after setting up a Windows VM with cygwin, trying the above out also shows further issues: Picnic also seems to have problems building under cygwin:
@christianpaquin : Is this known (and/or simple to fix)?
@huaraz As you may see from the above, cygwin support for all algorithms may not be straightforward/require "digging" into various algorithm's code. Can I ask why you wouldn't want to/cannot use the "standard" Windows build procedure, i.e., using MSVC?
Update:  cmake -GNinja -DOQS_ENABLE_KEM_BIKE=OFF  -DOQS_ENABLE_SIG_PICNIC=OFF .. && ninja using a cygwin environment (gcc 10.2) "nearly" passes, except for a Keccak symbol error: Do you need Bike and/or Picnic or can you make do without them?
Here's the (expected) lib build result on Linux
and from the (pretty slow) Win VM wrt to one specific Keccak symbol:
I have the hunch (or hope :) @jschanck may have an idea why this (and all Keccak) symbols "fail to materialize" in liboqs.a under cygwin.
Edit: Here's part of the linker error output:
@christianpaquin : Is this known (and/or simple to fix)?
Not sure, it would need to be investigated.
@huaraz As you may see from the above, cygwin support for all algorithms may not be straightforward/require "digging" into various algorithm's code. Can I ask why you wouldn't want to/cannot use the "standard" Windows build procedure, i.e., using MSVC?
Or use the Windows Subsystem for Linux; that's what I've been running for my OQS dev for years.
@huaraz As you may see from the above, cygwin support for all algorithms may not be straightforward/require "digging" into various algorithm's code. Can I ask why you wouldn't want to/cannot use the "standard" Windows build procedure, i.e., using MSVC?
Or use the Windows Subsystem for Linux; that's what I've been running for my OQS dev for years.
Thanks for looking into it.  I work mostly on Unix, but in the office I have only Windows and use cygwin for my "Unix" tasks/scripts. I'll check if I can compile native and use from my cygwin environment.
Checking the status after #999 (thanks, @jschanck !), one further surprising complication: There's a decade-old issue regarding psutil not working under cygwin. --> Do we want to/can we replace psutil in testing? @xvzcf ?
Edit: pip ultimately succeeded installing successfully psutil v. 0.1.3 (current version 5.8.0!); pytest runs using that old version.
@huaraz All information above is now collected in a wiki entry to build liboqs using cygwin. Please close this issue if OK for you or add further comments/feedback.
That worked perfectly !
Thank you
Markus
@huaraz ..... Can I ask why you wouldn't want to/cannot use the "standard" Windows build procedure, i.e., using MSVC?
@baentsch I was now also successful with MSVC, but that does not really help with openssh which can't be compiled under MSVC or did I miss it ?
Thank you
Markus
@baentsch I was now also successful with MSVC, but that does not really help with openssh which can't be compiled under MSVC or did I miss it ?
Please pardon my grin: After suggesting to move this issue from oqs-openssh here I'd now need to suggest you open this question there. Reason: I just don't know enough about openssh to answer this, but I'd be really surprised if this were impossible (quick google search result). Also tagging @xvzcf and @christianpaquin who might know more.
In addition, if the cygwin build works for liboqs what about a cygwin build of openssh? That "feels" even more realistic given the API match between the packages. Edit/Add: Further proof-point. Final edit: Following the build instructions using cygwin just worked fine: Executable built. Tests failed, but I can't imagine that to be too much of a real issue, just caused by my lack of knowledge about openssh in general.
Yes I can now fully build oqs-openssh under cygwin.   I thought the 2 projects were closer linked i.e. when you mentioned MSVC I assumed it would work for both.
Thank you again
Markus
Well, I guess the main reason that these are different projects is that many have upstreams and "inherit" their quirks (like which build environments are working). liboqs does not have an upstream, so is different from all others (and we can improve things more easily. In that regard, thanks again for raising the cygwin issue here: With #1001 merging, now all PQ algorithms will work under windows -- only if using Cygwin).
