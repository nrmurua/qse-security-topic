Using BasicAer qasm_simulator, the behavior of a circuit changes depending on the order in which quantum registers are added to the circuit.
I posted as an issue in Qiskit/qiskit-aer#70 but was told that BasicAer is part of terra.  Could be the same problem as #1838
from qiskit import QuantumRegister,ClassicalRegister,QuantumCircuit
from qiskit import BasicAer,execute
from qiskit.tools.visualization import plot_histogram
q = QuantumRegister(2, 'cntl')
qout = QuantumRegister(1, 'tgt')
c = ClassicalRegister(1, 'c')
qc = QuantumCircuit(qout, q, c) # here's where we create the circuit
qc.h(q[0]) # Toffoli gate with two |+> inputs
qc.h(q[1])
qc.ccx(q[0],q[1],qout[0])
qc.measure(qout,c)
backend = BasicAer.get_backend('qasm_simulator')
job = execute(qc, backend, shots=512)
result = job.result()
print(result.get_counts()) # produces expected outcome -- 75% zero and 25% one
q2 = QuantumRegister(2, 'cntl') # now we do the same thing, but create the circuit differently
qout2 = QuantumRegister(1, 'tgt')
c2 = ClassicalRegister(1)
qc2 = QuantumRegister(q2, qout2, c2) # just changed the order of q and qout
qc2.h(q2[0]) # Toffoli gate with two |+> inputs
qc2.h(q2[1])
qc2.ccx(q2[0],q2[1],qout2[0])
qc2.measure(qout2,c2)
backend = BasicAer.get_backend('qasm_simulator')
job = execute(qc2, backend, shots=512)
result = job.result()
print(result.get_counts()) # result is 100% zero
Should get the same result in both cases.  The only thing different is the order of registers in the circuit.
Yes this works correctly on the master branch. The bug is the same as #1838.
If you are using the stable branch through pip, @mtreinish is preparing a fix for that which should be released soon, so you can update your installation.
