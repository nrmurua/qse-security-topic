Following the "Get LLVM / Clang / MLIR" section of CUDA Quantum Open Beta Installation page, when i run the following Cmake, i get a "project does not appear to contain CMakeLists.txt" error.
Can a CmakeLists.txt file be provided?
Command  and error below:
/workspace/cuda-quantum/llvm-project/build (master) $ cmake .. -G Ninja -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_INSTALL_PREFIX=/opt/llvm/ -DLLVM_ENABLE_PROJECTS="clang;mlir" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_INSTALL_UTILS=TRUE
CMake Warning:
Ignoring extra path from command line:
".."
CMake Error: The source directory "/workspace/cuda-quantum/llvm-project" does not appear to contain CMakeLists.txt.
Specify --help for usage, or press the help button on the CMake GUI.
(see below 'Steps ...' section for more info)
Any help is appreciated!
'''
/workspace/cuda-quantum/llvm-project/build (master) $ cmake .. -G Ninja -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_INSTALL_PREFIX=/opt/llvm/ -DLLVM_ENABLE_PROJECTS="clang;mlir" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_INSTALL_UTILS=TRUE
CMake Warning:
Ignoring extra path from command line:
".."
CMake Error: The source directory "/workspace/cuda-quantum/llvm-project" does not appear to contain CMakeLists.txt.
Specify --help for usage, or press the help button on the CMake GUI.
'''
other info:
ls /workspace/cuda-quantum/llvm-project
bolt   clang-tools-extra  CONTRIBUTING.md      libc    libcxxabi    lld   llvm-libgcc  polly      runtimes     third-party
build  cmake              cross-project-tests  libclc  libunwind    lldb  mlir         pstl       SECURITY.md  tpls
clang  compiler-rt        flang                libcxx  LICENSE.TXT  llvm  openmp       README.md  src          utils
prior to the above failed cmd, i ran these cmds and all succeeded:
git init
git remote add origin https://github.com/llvm/llvm-project
git remote add origin https://github.com/llvm/llvm-project
git fetch origin --depth=1 c0b45fef155fbe3f17f9a6f99074682c69545488
git reset --hard FETCH_HEAD
I expected the llvm_project to be successfully built, such that i could move on to the next step: "Build CUDA Quantum"
Not a regression
No response
@stevescia You've found a typo in the Docs. For the cmake call to configure LLVM, change
to
We'll get the typo fixed in the docs. Sorry about that!
O np! guess i should've tried that;  i did try to pick a CMakeLists.txt from different places, but couldn't find one that worked.
anyhow, thank you very much for the quick response and i look forward to working with this repo!
(found this repo whle discussing xacc/qcor repos).  thanks again.
o btw, i believe you'll need to add the Ninja generator name after the -G option, as below:
from the Build cuda-quantum section:
change:
cmake .. -G -DCMAKE_INSTALL_PREFIX=$HOME/.cudaq
-DLLVM_DIR=/path/to/llvm/lib/cmake/llvm
-DCUDAQ_ENABLE_PYTHON=TRUE
-DCUSTATEVEC=/opt/nvidia/cuquantum
i also had to do these additional things to get cuda-quantum to build:
apt-get install libblas-dev liblapack-dev
apt-get install python3.10
after the above, the cuda-quantum build succeeded, giveng me nvq++ target among others. thanks!
Additional note:
I assume -DCUSTATEVEC should correctly be -DCUSTATEVEC_ROOT?
Also, it might be worthwhile to instruct users to add ~/.cudaq/bin to their path.
@Gistbatch sorry for the delayed response - you are right, it should be -DCUSTATEVEC_ROOT.
We have updated the documentation to refer to the GitHub for building from source instructions, which make use of build scripts to reproduce the build for the released packages. I will hence close this issue. Please file a new issue if more clarification/additional updates are needed.
