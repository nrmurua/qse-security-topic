Hey,
In your blog post https://research.ibm.com/blog/qiskit-1-launch, you mention that user has to create a new virtual environment due to structure differences in new the major version of the qiskit package.
Qiskit 1.0 will use a new packaging structure, and you will not be able to upgrade an existing Qiskit 0.x installation to Qiskit 1.0 in-place. This is the only time we expect to break packaging; you will be able to upgrade from Qiskit 1.0 and beyond in-place.
I would like to hear your opinion about potential workaround for this issue.
The idea is to keep having the qiskit-terra package as a dependency for a new qiskit package, but the qiskit package has to depend on a new - empty qiskit-terra package.
Let's assume the environment with already installed qiskit==0.45.2. The quskit-terra==0.45.2 is also already installed because it is a dependency for the main qiskit package.  As far as I know, a "pre-1" version of the qiskit package (qiskit<1) is just an empty package without any content, and all content comes from the dependency qiskit-terra package, so, as a result, we have the <venv_path>/.../site-packages/qiskit folder, which is owned by the qiskit-terra==0.45.2 package.
When we upgrade to qiskit==1.0.0b1 (which is not an empty "dymmy" anymore and directly contains all source code), the qiskit-terra==0.45.2 package remains untouched because it is not a dependency anymore, and pip does not remove orphaned dependencies. As a result, the qiskit folder with source code from the new qiskit==1.0.0b1 package is copied directly to existing<venv_path>/.../site-packages/qiskit folder of the remaining qiskit-terra==0.45.2 package and source code of the different versions turns out to be mixed.
Create new version of the qiskit-terra package, for example 1.0.0b1, but this new version has to be empty, without any source code (similar to qiskit package pre-1 version).
Keep this empty new version of the qiskit-terra package as a dependency for the main qiskit>=1 packages.
When the  qiskit package is finally upgraded, the qiskit-terra package, as a dependency, will be also upgraded to its 1.0.0b1 empty version, which will clean up the <venv_path>/.../site-packages/qiskit folder before new code is copied from the new main qiskit package.
Please let me know, if there is something that I missed or misunderstood and there are other reasons behind that.
If that works, we may be able to keep a smooth update process of the qiskit package, as well as for all downstream packages. ðŸ™‚
Thanks for your interest!
Your idea is very interesting, and if a user has relatively straightforward dependencies that are all Qiskit-1.0 compatible at the time they then try to upgrade qiskit, it largely would make the upgrade go smoothly.  There's quite a lot of packages that can also be installed, though, that would still cause problems even in this setup.1
Unfortunately, the empty package qiskit used to install lots of things other than just qiskit-terra, so for several years, the right way to depend on just the core of Qiskit was to depend on qiskit-terra.  If we release a new version of qiskit-terra that's totally empty, any attempt to install one of those packages will now succeed with no warnings/errors in pip, but then fail very mysteriously on import qiskit.
We're trying to trade off the different concerns here (upgrading an existing environment, installing an old version of a package in a new environment, installing another package with a different qiskit dependency, etc), and nothing's a perfect solution.
Our judgment was that the easiest thing to communicate to users (including those who don't understand Python packaging, which I think is most!) is that they must create a new virtual environment to install Qiskit 1.0, and that getting rid of the qiskit-terra name will be better for the whole ecosystem long term, though we're very sympathetic to the split it causes in the ecosystem.
Qiskit 1.0 includes quite a lot of breaking changes from major new interfaces arriving, a lot of legacy code removal, code reorganisation, and a firmer commitment to what constitutes our "public interface" by shrinking it, so we can position the library to be more free to evolve and improve without causing such breaking changes in the future.  We think that the jump from Qiskit 0.x to Qiskit 1.0 would have likely (partially) fragmented the ecosystem even if we didn't change the packaging, so now was the right (or at least, least bad) time to fix the problems with our current packaging2.  A single qiskit package is the ideal situation for the future, once we're past the 1.0 break, and we didn't want to end up causing packaging problems again at Qiskit 2.0 by trying to paper over issues with upgrading in the short term; we thought that creating a new virtual environment is pretty easy, and something almost all Python programmers should be able to do without much trouble.
I do appreciate that this is an unfortunate situation - we don't love it either - we're just trying to make the painful change we believe has to be made at some point now, and make sure that it won't ever have to happen again in the future.
Qiskit used to use a method of allowing its own namespace to be extended, which meant that other packages could have installed files within that directory, and they wouldn't be removed.  For example, until version 0.12, Qiskit Aer used to install its files in qiskit/providers/aer, rather than the qiskit_aer root package that it now uses.  Any installation that still included some old packages could fail to update and cause issues.  This is particularly a problem for people using editable installs of the qiskit package, which we've known to take out a lot of researchers' environments, who often want to tweak Qiskit as they work with it. â†©
The current status of having an empty package qiskit whose version number must be pinned exactly to a code package qiskit-terra is also a big problem; pip will happily upgrade/downgrade transitive dependencies and break existing version resolutions (this happens to our users a lot, unfortunately).  So, we don't want a two-package split with the qiskit -> qiskit-terra dependency and my bit above was about why there's painful problems with qiskit-terra -> qiskit as well. â†©
