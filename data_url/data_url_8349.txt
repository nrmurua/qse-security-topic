@quantshah spotted that the function visualisation tree was out-of-date in qutip/qutip-doc#63. Thanks for that.
@nathanshammah and I spent some time updating it yesterday, but was quite a rigmarole, and the solution  is sub-optimal:
In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically.
Task 1: make qutip_org.html open in all browsers
Task 2: Auto-generate the qutip.json when the API docs are built.
The API function docs are built from apidoc/functions.rst. It would be much better if we only needed to add new functions in this doc, and it output the qutip.json when it gets built.
Task 3: embed qutip_org.html in the HTML docs and somehow in the PDF docs
Now it would be much better if when the guide-overview.rst were build that the HTML in qutip_org.html were embedded in the resulting guide-overview.html rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs.
Task 4: link to the API docs (this is probably quite tricky)
If Task 2 is possible, then I guess it should be possible to add links to the API docs.
Task 5: Have something similar to the function tree for classes.
All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github
https://github.com/sphinx-doc/sphinx/issues
If no-one has picked this up after a few months, then we will just add the instructions (steps 1 to 4) above to the readme and close this.
@nathanshammah could you add a link to where the tree builder code came from please
These d3 dendrograms have a similar in layout:
I would like to try to build the solution for this.
Task 1: For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.
Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.
To fix this, I created a local server (on port 8080) from the ../qutip-doc/QuTiP_tree_plot folder and then ran the URL http://localhost:8082/qutip_org.html on chrome.
Egde doesn't seemed to have any problem in running qutip-doc.html.
Task 2:
Clarification - We would right a new script to generate qutip.json from apidoc/functions.rst, just like QuTiP_tree_plot/qutip-structure.py. Am I right?
Task 4:
Can you please elaborate on task 4 as to link to which API docs.
Task 5:
The script written in Task 2 can be made to run for classes.rst and a json file would be created which would be used to generate a tree, right?
Where would we put it in the docs? guide-overview?
PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.
@Siddhant9868 Hi, thanks for looking into this. We want to essentially parse the whole project and generate the names of all the functions and classes. This could also be done directly by running a parser on the qutip folder using ideas similar to
https://stackoverflow.com/questions/15256509/parsing-class-and-function-dependencies-from-a-project
In this case, sphinx-apidoc -o <output dir> <code dir> does this for us and generates the RST which is used to build the docs. But maybe you can do it directly without having to parse the RST files.
Once you find a way to parse all the parts of QuTiP then try to implement one of the two visualizations that @nathanshammah shared. I think in both, there is a case where you don't even need a json file and can just do away with a .csv. After that, we can think of where to put this in the docs as I am currently in the process of redoing the whole documentation building.
As a first step, you don't even need to use the QuTiP functions and could just try to get the D3 js examples work.
Also, I like the second visualization which is linear and not circular. It helps to clearly see different submodules. So, if you are trying this then start with that.
We want to essentially parse the whole project and generate the names of all the functions and classes. This could also be done directly by running a parser on the qutip folder using ideas similar to
@quantshah do we really want a graphic to show all classes and functions? Do we not think that maybe a lot of functions get created that are not necessarily intended for users of the library. Not in all cases do we name then as using the leading underscore for internal convention. I am open to persuasion on this. Clearly there are also issues with us forgetting to update functions.rst.
This is a good task in case QuTiP is accepted in GSoD!
Ok some things that one learns by playing with it:
@Siddhant9868, can you open a PR on the fix on the visualization? Thanks!
Oh, I didn't see that this issue existed.  I was able to rebuild the image for 4.6 without the pain being too excruciating, but it was a very manual process.
In qutip/qutip-doc#137 I completely rewrote the qutip-structure.py file to map out arbitrary Python packages by importing it (not ideal if you're running it on untrusted code, but I assume we trust qutip!) and recursing through every known name and reference.  That fixes the concerns people had above about the structure; you can see in the latest version of the docs that the visualisation isn't just a single layer any more.
Right now, the main issue is getting d3.js to give us a proper image file without running it through an entire browser.  If we're commited to using d3.js, then the right solution is presumably to use Node in CI with a small JS wrapper to dump out the correct SVG file.  However, the new qutip-structure.py produces a pretty standard dict-tree representation of every name in the package and its parent, so it'd probably not be too difficult to use a Python visualisation package to do it for us.  This is the only really difficult bit of the procedure now - once we've got a reproducible step to retrieve a vector image, automating both vector conversions and rasterisation is trivial.
