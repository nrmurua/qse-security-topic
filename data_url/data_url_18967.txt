The output and input of quantities that have in their unit "2 pi" is broken or rather inconsistent and hence confusing to use.
In this example I am creating a variable and set the unit as pure "Hz":
Calling the inbuild functions of Quantity I get the following output:
and
Which both make sense.
Switching to a quantity with unit "Hz 2 pi":
we now get the following inconsistent output
and
One can clearly see a mixture of output here. The get_value method returns the value in "Hz" while the get_limits method returns the values in "Hz 2 pi".
On top of that, trying to use the set_value method of Quantity can even
crash the programm. As get_value returns the value in "Hz" I initially assumed that the set_value method also expects input in "Hz", but trying to execute the following
lines of code:
throws an exception:
It's obvious that this mixture of units for output and input needs to be fixed. It seems to me that the odd one here is the get_value function which is the only function that works in the "Hz" and not the "Hz 2 pi" space.
@fedroy  provided the following example which indicates that the functionality works as intended if there is no space between the "2" and the "pi".
I would nevertheless suggest making the "2 pi"/"2pi"  unit feature more relyable so that surprising behaviour as shown above isn't triggered by accident.

Working on this now, with more band-aid coming. To the second point, -39MHz 2 pi is indeed out of the bounds you specified [-60, -40] MHz 2pi so the error you're getting at
is completely correct.
I agree that we could go through and remove the conversion to explicitly put the 2pi everywhere.
Note that this is not solved by #187 . As mentioned, this is a kill-it-with-fire situation where we make an executive decision that all frequencies are technical frequencies and include the correct pi or 2 pi where needed. The upside is that testing should be pretty robust for this and point out any places we might miss.
