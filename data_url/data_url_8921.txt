Hi,
I am planning to build a circuit under lattice surgery protocol, which cannot be automatically generated by Stim apparently. I would want to pick up brains about what would be suggested to achieve the end with Stim? Furthermore, is it possible for me to get an error model out of the circuit so that I could pass it to decoders like PyMatching?
I know it's a very generic question, but would you be so kind as to input any idea. I really appreciate whatever advice/suggestion.
Thanks and regards,
I usually build circuits by first building the patches of stabilizer "tiles" that are going to be measured, and then using that tile data either to produce direct stabilizer measurements via MPP or a proper circuit decomposition. Lattice surgery has a sequence of patches: first two qubits, then one long rectangular qubit from the fusion, then split back to two qubits. If you write methods that take a before patch and an after patch, and do the transition by reset/measure-ing appropriate data qubits, you can basically just chain it all together into something that works.
A very simple noise model to make is to apply DEPOLARIZE1(p) on every qubit whenever there's a TICK, and to put TICK between layers of operations.
I usually build circuits by first building the patches of stabilizer "tiles" that are going to be measured, and then using that tile data either to produce direct stabilizer measurements via MPP or a proper circuit decomposition. Lattice surgery has a sequence of patches: first two qubits, then one long rectangular qubit from the fusion, then split back to two qubits. If you write methods that take a before patch and an after patch, and do the transition by reset/measure-ing appropriate data qubits, you can basically just chain it all together into something that works.
A very simple noise model to make is to apply DEPOLARIZE1(p) on every qubit whenever there's a TICK, and to put TICK between layers of operations.
Thanks! I was also wondering if we can generate a detector error model for circuit level noise using stim that is compatible with PyMatching as a decoder for this protocol?
In lattice surgery, (say rough merge), the Z boundary stabilizers at the merging boundaries become random after merging. For that reason, I think we would need to 'allow gauge detectors' when generating the detector error model. After splitting, I also realize we need to use the intermediate data qubit measurements along with the Z boundary stabilizer measurement outcomes after the split (for smooth split). Is there anything else that would need to be included in the detector annotation to generate an stim detector error model suitable for PyMatching? The thing that worries me specifically about the suitability of PyMatching are these gauge detectors. Since I am including measurement errors, I was thinking the input to PyMatching might not be just that.
As a strong rule of thumb, you never need gauge detectors. I kinda wish I'd never added them.
Yes, you will be able to define detectors during lattice surgery and yes they will produce a detector error model that pymatching can decode. It is okay for there to be fewer detectors during some of the transitions, in the same way that it's okay to have fewer detectors in the first round because half of the stabilizers haven't been projected yet. A good rule of thumb is that the number of detectors (plus the number of observables) should exactly equal the number of measurements that can be predicted, when you evaluate the measurements one by one.
Closing as not-a-bug.
