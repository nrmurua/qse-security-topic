The library should be documented enough so that external collaborators can figure out how to use it without developer communication.
First step: Agree on a documentation style, e.g. markdown, rst, etc. I think Will and Nathan have the most experience here, and we should open an initial discussion thread in this issue. I'm a bit partial to markdown for its simplicity but hear that other styles have more sophisticated functionality.
Pinging @willzeng @nathanshammah and @andreamari for thoughts.
Good call. This is definitely part of this milestone.
What I'd initially reach for is Sphinx theme readthedocs which is rst. This is the standard doc generator python that qiskit, pyquil, and Cirq all use. https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html
I would be very happy to help out with this. Also formatting the docstrings in the .py files themselves, for example adding Returns entry to functions and variable types in style that is autodoc friendly, also for interlinks in the .rst files as pointed out by Will.
Sphinx + readthedocs looks good to me. We also need a new README.md file.
@nathanshammah Do you think you could take the lead on this? You can get the structure set up and also it can be a good excuse for you to learn more about how the library works. I'm happy to be one of those resources to talk you through it. There are also lots of examples of usage in the test cases.
If so, please do assign this issue to yourself.
Yes, I will. I will begin by reviewing the .py files and formatting the docstrings.
I will open a specific issue for that.
Besides milestones, for the alpha, I found very useful the use of Projects in QuTiP. These are bundles of issues and PRs similarly to what Classes can be in Python.
Without opening too many GitHub projects, I suggest opening a few of them, such as one for Documentation, Release, or similar topics. This way one can more easily keep track of areas of code and keep an eye on them, especially for newcomers.
