In the Qiskit Pulse paper we introduced new way of programming pulse schedules within the context of QuantumCircuit. For example, when we program a power Rabi sequence, we can write:
Later the qc can be converted into Schedule with inst_map. In this way we are also able to replace a part of QuantumCircuit by custom pulse gate (in what follows we call it opaque gate) to improve the performance of algorithm.
However, current qiskit.execute doesn't recognize the qc as a pulse schedule, and try to execute it as it is, i.e. QASM job. This job is, of course, failed because the backend doesn't have the custom gate definition. So we always need to write transpiling and scheduling chain by ourselves even though they are written in qiskit.execute.
To allow execution of QuantumCircuit with opaque gates, we need to update qiskit.execute to compile the input program appropriately. I think we can take several approaches to address this.
If given basis_gates is not identical to backend.configuration().basis_gates, we compile the experiment into Schedule.
Pros:
Cons:
If inst_map is not None, we consider the experiment is schedule.
Pros:
Cons:
Explicitly specifying type of experiment, QASM or Pulse.
Pros:
Cons:
[*Note] Because basis_gates and inst_map are mutable objects, we can directly update backend configuration and defaults. Using this feature, we can just provide updated backend to execute without explicitly writing inst_map and basis_gates. Thus change to require those mapping objects at execute may deprecate such coding style.
I think option2 is the most reasonable for now, but maybe we can find alternative solution.
