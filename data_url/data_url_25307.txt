When the Covalent SDK encounters an argument to an electron that is a list, such as
it first creates a special type of "collection" node in the transport graph to first gather the sequence 1, 2, 3 into a list, and then passes the list as input to the electron. Thus, the above expression is actually decomposed into
where the first transformation (1, 2, 3) -> [1, 2, 3] is done by an auto-generated "collection" electron.
The same applies when a dictionary is passed to an electron:
is decomposed by Covalent into
where the first transformation is accomplished by a special collection node.
Unfortunately, because collection nodes try to use the same auto-generated electron to process lists and dictionaries, the dispatcher needs to treat collection nodes separately from other electrons and distinguish whether they are trying to generate a list or dictionary. The main problem with this approach is that it involves intermediate pickling by the dispatcher, which both incurs needless computation by the dispatcher and tightly couples the dispatcher's Python version to the executor backend's Python version.
It would be better to generate separate electrons for gathering lists and dictionaries. For example, define
and use the corresponding function for list and dict-type inputs. This would simplify the dispatcher's logic for processing tasks and, more importantly, remove a pickling operation from the dispatcher. With this change, the number of node types would reduce to two: parameter nodes and non-parameter nodes.
@kessler-frost
Hey @cjao, yeah, I agree with this proposal. Let's do it this way.
