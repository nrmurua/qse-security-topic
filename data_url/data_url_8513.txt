While simulating the dynamics of a driven non-linear oscillator I discovered that with small relaxation and weak driving the steady state returned by the propagator_steadystate() function is incorrect compared with a state obtained from many successive applications of the propagator (see plots below):


Populations of the ground and first excited states for two ways of finding the steady state.

The problem is with numpy.linalg.eig() which fails to find a correct eigenvector for U. I don't know if this problem is tractable; instead, I suggest adding a function to propagator.py which calculates the steady state from U and some initial state using the successive application approach. If you think this is useful, I would be happy to implement it.
It is likely because finding eigenvalues of non Hermitian systems depends
on the condition number.  I think redoing the current code to use the
shifted inverse power method or something similar might be the way to go.
On Nov 8, 2016 6:01 AM, "Gleb Fedorov" notifications@github.com wrote:
While simulating the dynamics of a driven non-linear oscillator I
discovered that with small relaxation and weak driving the steady state
returned by the propagator_steadystate() function is incorrect compared
with a state obtained from many successive applications of the propagator
(see plots below):
[image: alt text]
https://cloud.githubusercontent.com/assets/3819012/20099571/a213fb02-a5d2-11e6-92cd-481f0a60667d.png
Populations of the ground and first excited states for two ways of finding
the steady state.
The problem is with numpy.linalg.eig() which fails to find a correct
eigenvector for U. I don't know if this problem is tractable; instead, I
suggest adding a function to propagator.py which calculates the steady
state from U and some initial state using the successive application
approach. If you think this is useful, I would be happy to implement it.
â€”
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#556, or mute the thread
https://github.com/notifications/unsubscribe-auth/ABMPqeETpQvlQ6B0GUyajpgnHwt12EVPks5q8HKmgaJpZM4KsZfk
.
Thanks for the answer! I think I know now why it failed. I was thinking on your suggestion with regard to the possibility of several steady states because I found that in my problem I could get to different ones from different initial states.
It turned out that my lowering operator was constructed badly, so that it left higher states intact during the evolution, and when I fixed that, propagator_steadystate() began to work correctly.
Well, obviously, the method with eigenvalues won't work for the systems where the steady state is not unique, but I don't know if that's possible in the real-word problems. Maybe you know?
Good to hear that it is working. There are classical nonlinear systems where the state can reach different limit cycles depending on the initial state. I have not investigated any of these in the quantum regime, and I not think that limit cycles would satisfy the steady state formula. So, in short, I have not seen or heard of multiple steady states.
OK then, thank you for the discussion!
