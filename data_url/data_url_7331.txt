Is there a deeper reason why there is a Complex64 data type enforced with operators at many places in the codebase, e.g. with identityoperator()? In my opinion, there should be the possibility to work with real valued data in order to save memory and computing time.
Previously everything in QO.jl was ComplexF64. I changed this to be more generic, i.e. the data field of an Operator can have arbitrary eltype. The current philosophy would be that the type set by the user should be conserved, and if no type is specified fall back to ComplexF64. For identityoperator() specifically it might make sense to change the default to Float64. In any case, we need to change the underlying method such that one(op) conserves the eltype of op. This is also currently not the case - an oversight in the method here, for example,
https://github.com/qojulia/QuantumOpticsBase.jl/blob/b179a4219b060c5f5e9748fd5a8a5efa864160ce/src/operators_dense.jl#L176
where it should be Matrix{eltype(T)} instead of Matrix{ComplexF64}.
Still, you can work with real-valued data, e.g.
The method for identityoperator needs to be fixed though.
Since the latest release it's generally possible to specify a data type on construction, e.g. fockstate(Float64, FockBasis(5), 1) (similarly for operators). If the data type is not specified, it defaults to ComplexF64 as before.
Specifically for the identityoperator, it's also possible to specify a container, e.g. identityoperator(DenseOpType, Float64, FockBasis(5)), where the default is always identityoperator(SparseOpType, ComplexF64, basis).
