Hello all,
[you may jump this and look at the below example]
I recently started to work with Liquid and got some "issues" when trying to implement control operations on gates/ operations of arbitrary size  (e.g. QFT, AdditionGate, ...), since I can not give explicit matrix representations for those.
My current workaround is to have nested Cgate(Cgate ... CGate(R qs)... ))) (e.g. for QFT, QFT based addition. For example for a modular multiplication I need at least 3 nestes controls for the QFT in the QFT based addition...
As this get overly complicated I tried to use ancillary Qubits and Toffoli gates to circumvent the nesting. When trying to uncompute the ancillary Qubits however, they seem to stay entangled.
It seems that the application of two subsequent CNOT gates also does not uncompute the entanglement, at least when trusting the "Entangled" property of the Qubits. Below is a minimal working example and the output.
If I am doing something fundamentally wrong with Liquid and this is circumvented on proper usage, I would be grateful to get a hint! Or perhaps, any way to define controls on arbitrary gates/ operations?
Thanks in advance,
kind regards,
Marcel
PS: Also, the mailing list is not existent anymore?
EDIT: As the entanglement and un-computation does seem to work in general, perhaps the ".Entangled" property is just an internal state thats set after the first entanglement; but Liquid can not distinguish between un-computation and un-entanglement and further operations on qubits?
Minimal Working Example:
let ket  = Ket(2)
let qs = ket.Qubits
Output:
0:0000.0/=============== Logging to: Liquid.log opened ================
0:0000.0/
0:0000.0/ Secs/Op  S/Qubit  Mem(GB) Operation
0:0000.0/ -------  -------  ------- ---------
0:0000.0/Should not be entangled
0:0000.0/ ENT? false
0:0000.0/ ENT? false
0:0000.0/Should be entangled
0:0000.0/ ENT? true
0:0000.0/ ENT? true
0:0000.0/Should not be entangled
0:0000.0/ ENT? true
0:0000.0/ ENT? true
I'm currently traveling in Europe but will get to this by next week (sorry for the delay).
[sorry for the delay... up to my backside in aligators at the moment ;]
Your guess at what "Entangled" means is correct. Let me slightly add to your example:
Things I added:
When you run this, you'll get:
You are correct, all the .Entangled does is check that the qubit was ever in an operation that might have entangled it. The only way to really check for entanglement is to Split the Ket vector with the second argument asking to check if this was really legal. What happens is that Liquid creates the desired product state, then puts it back together and sees if it matches the original Ket vector (VERY expensive, so we don't do it unless you really want it).
If you look at the dumps, you'll see that the state vector is correct at all points... just that the system really has no way to know what might have become unentangled as the result of your circuit.
Please re-open if this wasn't clear/what you needed.
Great thanks!
