This is important for the demo.
@imranashraf @Nader-Khammassi
Readouts should be scheduled simultaneously, code below shows that this does not happen.
Below I show three parts.
Note that it would be even better to "merge" registers so that the last line would read bs 1    measz  s8 where s8 is set to 0,2 somewhere before.
@AdriaanRol In short, Readouts should be in their own separate bundles, not in the same bundle with some other gates, Right?
Secondly, you forgot to attach json !
cfg_CCL.json.txt
Hi @AdriaanRol. This is not incorrect scheduling. Probably what you wish to get is the following:
You can get this qisa  if you are using qubits 0 and 4 as there are no constraints due to resources (readout unit, edge, awg channel etc). Also note that the operations are also bundled as you expect them to be.
This is implementing an incorrect interpretation of the actual resource constraints.
In fact, since the qubits 0, 2 are read out using the same readout unit, it is only possible to do simultaneous measurement if the measurement trigger is issued by the CCLight in a single cycle (as the acquisition instrument becomes unresponsive for the duration of the measurement after it receives the first instruction).
Expected behavior is that it looks for the pair 0,2 as it does for he pair 0,4.
We have a suitable workaround.
A barrier that aligns timings of measurements can be implemented using the wait instruction with duration zero e.g., k.gate('wait', [q0, q1], 0) .
A proper solution would be to introduce a barrier instruction that can target certain qubits and implements the above.
Additionally, we should support a multiplexed RO instruction.
@AdriaanRol @brianzi Measurement reservation has been fixed in bfa87ad. So the following python kernel:
results in:
where s10 is {0, 2}. Earlier output was:
@imranashraf , Is it now also possible to specify k.measure(0, 2) to enforce simultaneous measurement? (Obviously raising a compiler error if this is not allowed due to some constraint).
I am having a look into this but you can already achieve the same without adding any extra instruction by using the wait barrier (also discussed in #104)
@AdriaanRol I dont think we should add this at the moment for this Demo. I will create a separate issue to implement it later. The same can be achieved by qwait barrier. Furthermore, I will add a proper barrier instruction later in the evening and close this issue.
Barrier instruction added in 4b590b3.
Examples:
