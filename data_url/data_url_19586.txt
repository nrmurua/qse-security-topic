Hello,
As written in the documentation (https://pymatching.readthedocs.io/en/latest/api.html#pymatching.matching.Matching.decode_batch), you can use the decode_batch function in pymatching by providing the number of shots and the syndrome as input. However, for each shot, you need to measure the syndrome multiple times, as many as the distance (for example, for distance-3, you measure the syndrome 3 times or 3*d times). Is it possible to give multiple rounds of measurement results of the syndromes as input to the decoder? If yes, how?
Here is an example:
These are the results from the 1st shot:
x_syndrome_1st_round = [0, 0, 0, 1, 1, 1]
x_syndrome_2nd_round = [1, 1, 0, 1, 1, 1]
x_syndrome_3rd_round = [1, 1, 1, 0, 1, 0]
For the 2nd shot:
x_syndrome_1st_round = [1, 0, 0, 1, 1, 1]
x_syndrome_2nd_round = [1, 0, 0, 1, 1, 1]
x_syndrome_3rd_round = [1, 0, 0, 0, 1, 0], and so on...
Then, the list can be:
Am I correct? If not, how can I decode multiple rounds of syndrome measurements in pymatching?
If you want to use a 2D array to store multiple rounds of syndrome data then I'd recommend iterating over the shots and using matching.decode for each shot, instead of matching.decode_batch for the batch of shots. matching.decode_batch assumes that each shot is a 1D array (i.e. a row of the shots array) and does not support each shot being a 2D array.
Alternatively, you can flatten each shot into a 1D array. E.g. if each shot is a 2D array syndrome of dimensions (num_stabilisers, num_rounds) then matching.decode(syndrome) is completely equivalent to matching.decode(syndrome.flatten(order="F")). So you can use matching.decode_batch(shots) where shots[i,:] is the syndrome syndrome.flatten(order="F") of shot i.
But the 2D syndrome functionality was added to an early version of pymatching as a helper method for handling simple phenomenological noise, and before stim was released. I'd recommend using stim to construct a circuit of multiple rounds for the code you're simulating (you can use it to simulate phenomenological noise but also much more complex noise models). When you sample from stim it will output a batch of shots as a 2D array, where each row is a syndrome of detector measurements across all rounds of the circuit. You can then use pymatching.Matching.decode_batch to decode this batch of syndrome data.
