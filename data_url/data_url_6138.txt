When implementing a quantum circuit corresponding to the unitary X \otimes I, the unitary_simulator seems to produce
[[0.+0.j 1.+0.j 0.+0.j 0.+0.j]
[1.+0.j 0.+0.j 0.+0.j 0.+0.j]
[0.+0.j 0.+0.j 0.+0.j 1.+0.j]
[0.+0.j 0.+0.j 1.+0.j 0.+0.j]]
rather than
[[0.+0.j 0.+0.j 1.+0.j 0.+0.j]
[0.+0.j 0.+0.j 0.+0.j 1.+0.j]
[1.+0.j 0.+0.j 0.+0.j 0.+0.j]
[0.+0.j 1.+0.j 0.+0.j 0.+0.j]]
as expected in conventional notation in quantum information.
qc = QuantumCircuit(2)
qc.x([0])
simulator = Aer.get_backend('unitary_simulator')
result = execute(qc, simulator).result()
unitary = result.get_unitary(qc)
print("Circuit unitary:\n", unitary)
The unitary corresponding to this circuit ought to be
X \otimes I =
[[0.+0.j 0.+0.j 1.+0.j 0.+0.j]
[0.+0.j 0.+0.j 0.+0.j 1.+0.j]
[1.+0.j 0.+0.j 0.+0.j 0.+0.j]
[0.+0.j 1.+0.j 0.+0.j 0.+0.j]]
I am not sure whether this is merely an alternative convention of Qiskit or there is actually a bug when dealing with tensor product of unitary gates that result in operation acting on the wrong subspaces.
Qiskit labels qubits from right to left (see: https://community.qiskit.org/textbook/ch-prerequisites/qiskit.html ).
So, |01> is (0,1,0,0)^T and applying X \otimes I (which is then effectively qc.x([1]) yields |11>.
Thank you brandhsn.
You are welcome! :-)
