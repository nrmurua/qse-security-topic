Right now when it's almost release time we have to go through the changelog file parse the intent of the small one line description that a patch author put there (which can often be difficult) and transform that into a human readable and friendly release note document. (see for example: #211 or #1456). This manual process puts the burden of writing all the documentation on a single person or small group of people and puts pressure to get this done before the release.
Instead it would be better to do this incrementally as we add features, or make changes that warrant a release note. To do this we can leverage the reno project: https://docs.openstack.org/reno/latest/ this enables us to include a small yaml file with all the release documentation needed in a PR split up by sections. Then at release time reno will automatically assemble all those independent files into a single release notes document for a release. Using this means the burden for writing release notes is shared among all contributors to terra. When a patch author pushes a user facing change we should require that they write a detailed release note explaining the changes.
For an example of the output you can take a look at: https://docs.openstack.org/releasenotes/nova/stein.html
I agree that this is an issue. Would we be able to achieve the same end by expecting "release note ready" updates in the change log on code review? The change log supports rich text and in our current usage, I don't think we'd make much of a distinction between what goes in the release notes and the change log (but maybe I'm wrong about this!)
There really isn't a difference between the 2 in spirit, it's more that the release notes are more curated and written to actually be used by people. This mostly means that for release notes there is a bit more exposition than in the changelog (at least how I typically have write them). Explaining both why the change was made and how you can update your code if manual intervention is required for something. We could add this to the changelog easily, it is just an rst file.
The advantage reno provides over doing it in the changelog is the auto git tracking so we don't have to manually update the version numbers, links or release time. It also means when we backport changes with a release note file in it, reno will handle that cleaner than today (we get a merge conflict in the changelog always and we have to manually resolve it). But as long as we write things in the necessary detail somewhere and keep it up to date that's all that matters, the rest is just mechanics.
Well it's a bit late in the cycle to actually implement this since the original idea was to share the load of writing real release notes as we made changes that warranted them. What I think I'll do here is use reno to write all our 0.9.0 release notes when we're at release week. That way we can use that PR to review both the content of the release notes and use them to evaluate how reno will be used for future release and see it in practice.
