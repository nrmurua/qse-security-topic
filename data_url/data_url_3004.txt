In sim.google.xmon_simulator_test, I added the following test:
This test passes, which confuses me, because the gate implemented is
\exp( i (\pi "phase" / 2)  \sigma_z  )
So ExpZGate(half_turns=1) actually implements a "quarter turn" instead of a "half_turn", and  ExpZGate(half_turns=2) is not the identity.
half_turns=2 is the identity up to global phase. The "thing being turned" is the relative phase between the |0> and |1> states, which has increased by 180 degrees when half_turns=1.
Dave also found this terminology confusing/objection-worthy. I will keep track of whether more people find it confusing, and if there's too many we'll change it.
From discussions I've had with others on the team, at least 3 other people using Cirq have found this confusing. Two have reported adding bugs to their code due to misunderstanding what half_turns means. I suggest using `periods', with periods=1.0 corresponding to exactly the identity (not up to global phase).
How about "degrees" instead? cirq.RZ(qubit, 90)
What do people think of exponent instead of half_turns? That's unambigous.
I strongly agree with exponent.
I think you should not need to know the specific convention of the gate in order to guess what the argument should be. For example, is cirq.RZ(theta) equal to
exp(i theta \sigma_z)
or
|0 >< 0 | +  exp(i theta) |1 > < 1 |
In the first case, the period is \theta = \pi, while in the second case the period is \theta = \2 pi.
But if I specify theta =  0.5 periods , I know that in both cases I will get a Z gate.
cirq.RZ(theta)= exp(-i * Z * theta/2) It's textbook definition.
This has now been fixed. cirq.ZPowGate takes an exponent, and cirq.Rz takes rads.
