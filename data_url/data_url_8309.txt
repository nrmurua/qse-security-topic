QuTiP 4.4 changed the type of values that are returned from indexing into a Qobj:
I'm using CNOT here as an example, but the same is true for any Qobj.
The problem with the zero-dimensional array(1.+0.j) is that you can't multiply it to another Qobj (the result of the product is a sparse matrix, not a Qobj, as it would be for a scalar factor):
In my specific case, it breaks this function I had:
I can work around the new behavior by changing gate[i, j] to complex(gate[i, j]), but I still wanted to raise the issue, to see whether this change was intentional, and what the reasoning behind it was.
My intuitive expectation would be for gate[i, j] to be a simple scalar. I could see the zero-dimensional array causing some subtle problems for users, e.g. if there were to index into a density matrix to get populations (apart from my mapped_basis use case above). Note that numpy itself returns scalars:
On the other hand, scipy's sparse matrices have the same behavior as the most recent QuTiP, so there is a precedent:
If the change in QuTiP is deliberate, feel free to close the issue.
Hi goerz,
Qobj are build on top of scipy's sparse matrix are were affected by this behaviour that appeared in scipy 1.3.0. We have some similar workarround in the code right now.
I raised an issue in scipy for it and is was taged as a defect. (#10206) So it should be solved in the next release.
I tested the CNOT snippet and the results were the same of 4.3.1. Feel free to re-open if this is not fixed.
