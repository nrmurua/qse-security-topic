Background
Hi, I'm in the process of adding cirq and all its sub-packages to conda-forge. For this, I need to specify the version for all packages separately and was wondering what to use for the source of truth.
Question
Currently, each module has its own version file but all versions are the same. Can I expect this to be the same in the future, or might they differ at some point?
but all versions are the same
How so? Some modules have differing requirements.
Are you sure, because they all seem the same:

I thought you were referring to requirements.txts. Yes, these should all be the same.
Ahh ok. Out of personal curiosity, any reason why it's not in one file?
Maybe best solution is to make it forwards compatible with this, use global cirq version unless a separate version is defined in the package.   There could be cases where a non-core package gets borked against an API and the team responsible for that needs to rush a release.
Since it's a monorepo - would that be possible? If a GitHub release is created all should be updated or it becomes confusing pretty quickly because then the GitHub release doesn't match the included components anymore.
But just my 2 cents, I don't have any stakes in this.
Since it's a monorepo
The code is in one repo but each package has it's own pypi artifact.
There could be cases where a non-core package gets borked against an API and the team responsible for that needs to rush a release.
@dabacon  Has this been codified somewhere? I know one reason for these sub-packages is to be able to do exactly this but this can make versioning very messy.
The code is in one repo but each package has it's own pypi artifact.
Yes but the releases also contain wheels and each package is included in the Source Code attached to the release: https://github.com/quantumlib/Cirq/releases/tag/v0.13.1
If I'm understanding correctly: you are saying that for example, cirq-0.13.1-py3-none-any.whl would be confusing if in that whl there was a  cirq_aqt-0.13.2-py3-none-any.whl. Basically the "real" version pertains to cirq-core. Users should pin the specific sub packages to avoid suprises. So instead of pip install cirq==0.13.1. They would
No sorry, should've been more clear. I'm only talking about GitHub releases.
Here, all wheels for all sub-packages are included and the overall source code with each package but not compiled.
What I mean is the following:
If version 1.1 is now released but sub-package y is at 1.3 you now have overall GitHub release 1.1 containing wheel 1.3. for sub-package y.
This would be confusing for me because I would expect release 1.1 to only contain packages at 1.1 but again, this is just something personal, nothing that is in the way of conda-forge or anything else so feel free to ignore it. :)
Thanks for clearing that up. We should add this to the docs because I'm sure others will run into the same confusion.
Happy to leave this issue open if you'd like it for the docs PR, otherwise I'd close it - let me know.
Let's close it.
