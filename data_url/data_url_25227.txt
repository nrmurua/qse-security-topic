In the list of executor plugins, several of them do not have a description of the available args and kwargs to the excecutor. The Dask executor is a good example that does have them here, although they do not have docstrings and are not documented. Note that for many of these executors, we will want to highlight not just the parameters but also the default values pulled from the default config.
In testing Covalent out with some colleagues, I realized they weren't used to inspecting functions/classes for the possible input parameters and were solely relying on what was in the RTD/repo READMEs, which meant they were missing out on any args/kwargs not directly described in the docs. The docs could better reflect this, particularly since it is under the API section.
In the documentation files for plugins inside the directory doc/source/api/executors, add the required changes needed to generate API documentation for the following plugins:
Note that the method used for one can be applied to the others.  Documentation can be built locally by following the instructions here and can be tested on ReadTheDocs using the GitHub actions provided in this repository.
@wjcunningham7  I would like to take a stab at this issue. Could you assign it to me?
@wjcunningham7 Hi there! I would like to try this issue, it would be great if you can assign me!
I have some questions, while the docs about available args and kwargs of Dask executor is generated using autoclass, I noticed SSH, Slurm, and other executors are implemented in different repos: covalent-ssh-plugin and covalent-slurm-plugin, do we need to manually write docs for these executors or use autoclass too?ðŸ¤”
@ErikQQY for this issue we want to use the autoclass for the other plugins as well so that the docs remain up to date with changes in the other repositories.
Hi @wjcunningham7 can I work on this issue ?
Hey unitaryHACK participants @WingCode @ErikQQY @aryanguptaaa! Thanks for your participation! As a reminder being assigned only indicates interest. You do not need to be assigned in order to work on the issue. Only once an issue is closed by a contribution will the bounty winner be finalized.
It doesn't look like there are any attached PRs for this yet, so it's still up for grabs!
This was wrongly closed, in fact it requires merging of #1680 in order to be closed and marked as completed.
