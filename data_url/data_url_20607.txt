Hi,
I was wondering about the uncertainties in key-pair generation time and certificate generation times using hybrid algorithms with OpenSSL. I generated a key-pair and a certificate using the following classical, post-quantum, and hybrid algorithms. I got the following times and I couldn’t understand the reason behind slower key-pair generation/certificate generation times using hybrid algorithms.
Key Generation
Classical:
RSA 3072 : 351.64 ms
P256 : 3.7 ms
Post-Quantum:
Dilithium 2 : 3.07 ms
Hybrids:
RSA 3072-Dilithium2 : 263 ms (shouldn’t this be more than 351.64 ms?)
P256-Dilihthium 2 : 3.21 ms (shouldn’t this be more than 3.7 ms?)
My understanding is that hybrid algorithms generate both keys/signatures and concatenate them in the certification process. If that is the case, key-pair/certificate generation time at a minimum should be the maximum key-pair/certificate generation times of individual algorithms. For example, algorithms A and B form a hybrid algorithm C. C should take a longer time than max(A,B) to generate key-pair/certificates. Is this correct?
Hi, thanks for this report. Yes, conceptually, your argumentation is right. The question however is, how (often/with which tooling) did you do these tests/measurements? In all cases, randomness determines runtime to quite some degree... Best would be if you'd share your test code.
Hi  Baentsch,
Thank you for your response. Please take a look at the following
RSA 3072
apps/openssl genpkey -algorithm rsa -out key_srv_rsa3072.key -pkeyopt rsa_keygen_bits:3072 > /dev/null 2>&1'
P256
apps/openssl ecparam -out key_srv_secp256k1.key -name secp256k1 -genkey > /dev/null 2>&1'
Dilithium2
apps/openssl genpkey -algorithm dilithium2 -out key_srv_dilithium2.key > /dev/null 2>&1'
Hybrid
RSA3072-Dilithium2
apps/openssl genpkey -algorithm rsa3072_dilithium2 -out key_srv_rsa3072_dilithium2.key > /dev/null 2>&1'
P256-Dilithium2
apps/openssl genpkey -algorithm p256_dilithium2 -out key_srv_p256_dilithium2.key > /dev/null 2>&1'
I ran each command 1000 times and averaged the results.
Hmm -- isn't this a very "coarse-grained" approach? With this you pay not just process-creation (incl. library loading), but also random-number generator initialization costs at each round; particularly on a machine running other processes, this might make the actual key generation cost not really properly dominate the measurement as you want it.
What is even more problematic in my eyes though is that you compare this way code that generates output (classic RSA keygen) with code that does not do that (hybrid keygen): That alone can ensure that hybrid (RSA+sth) appears faster than classic RSA keygen alone.
I think a better test allowing you to draw conclusions better would be one in which you call the OpenSSL APIs repeatedly yourself, avoiding all setup & output overhead.
Closing based on Michael's reply. Feel free to ask follow-up questions as needed but it doesn't seem to be an issue that requires fixing.
Thank you for the explanation. It helped in better understanding the behavior.
I'm still curious and unsure on calling the OpenSSL APIs repeatedly avoiding all setup. It would help a lot if you can provide an example or direct me to somewhere I can find the information.
Have a look here for general guidance and here for keygen APIs
