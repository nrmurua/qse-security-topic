Setting aside some potential UI challenges, if you want to make Covalent Electron objects compatible with Windows (e.g. to use as regular functions), I don't think it's all that difficult.
The first change is to modify open("README.md").read() to be open("README.md", encoding="utf8").read() below so the Windows user can pip install covalent.

Edit: This was merged in #1685.
The second change is to use an OS-agnostic locking mechanism in place of fcntl below so the config file can be properly written. Portalocker is one such option, which is basically a drop-in replacement of fcntl.lockf(f, fcntl.LOCK_EX) with portalocker.lock(f, portalocker.LOCK_EX).

Once those two changes are made, you can import/use Electron objects as normal functions on Windows.
No response
covalent start on Windows 11 for me results in:
where a possible fix would be:
A workaround is:
You can set the HOME environment variable to be the same as USERPROFILE in PowerShell with the following command:
This command sets the HOME environment variable for the current user. The change will take effect in new PowerShell sessions. If you want the change to be visible in the current session as well, you can also set it directly in the session:
Please note that these changes are temporary and will not persist across sessions. If you want to make a permanent change, you would need to set the environment variable at the system level, which typically requires administrative privileges.
I realize Windows isn't officially supported, but wanted to leave this here for provenance.
