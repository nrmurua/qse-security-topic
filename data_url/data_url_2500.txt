Currently, the outputs of some of the random_x testing methods are non-uniform over the space of relevant objects. Replaced the biased sampling with an unbiased sampling method.
Could I possibly work on this?
If I didn't misunderstand, do we want to sample a Haar random pure state?
If so, I think you can do this by applying a Haar-random unitary U to a product state (e.g. all-zero state so taking the first column of U), but I wasn't sure if this is the most efficient/direct way to do this.
I think the method you propose would work but the issue I see with it is that in order to produce a d-dimensional random quantum state you need to produce a d x d dimensional unitary. Since d is already 2^qubits, this becomes a memory hog very quickly.
That's a good point. I just didn't know of a more memory-efficient method.
Appendix A of https://arxiv.org/pdf/quant-ph/9804024.pdf gives a method for uniformly sampling the PDF of a N-dimensional quantum state. A PDF doesn't uniquely determine a quantum state, but I would expect that putting i.i.d. uniformly distributed phases on each term should produce a uniform quantum state.
@Strilanc I think for random_superposition you mean that it should sample from the uniform measure, which it already does.
Hmm I think you're right, @kevinsung. I just checked and convinced myself that the way it's currently implemented is sampled uniformly.
Maybe the only thing would be a minor documentation fix: changing dim to 2**dim in the code or changing the "2^dim" in the documentation to "dim."
Oh, it's using a gaussian already? My mistake.
There is at least one instead of a TODO saying that code needs to be updated to sample from the Haar measure.
To close this issue, just verify and document that all these methods sample from the Haar measure.
I verified and documented these methods and made a pull request.
Just to check, I removed * 2 - 1 from m = np.random.randn(dim, dim) * 2 - 1 in the function that generates a random orthogonal matrix. May I ask what the reason for these operations was? I could've been wrong to remove them!
