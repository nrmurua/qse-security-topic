1. Although the doc says, "with a list of arguments returns a dictionary of configuration settings", for one particular case, i.e.
when len(entries) == 1, it returns a single value.
This means, if len(entries) ==:
2. To check whether the list is empty, currently it actually calls len(entries) which is
3. This is something I'm a little confused about, not sure whether this is a point of concern, and would like the maintainers to clarify if possible. The return annotation hints, that the return type of a single item will be either str or int. I am not sure if it is guaranteed. A particular field may not be present in the config, in that case, dict.get will return None, config may also contain other data structures supported by toml. However, this is not explicitly handled anywhere. Many other modules define the default value of their function parameters using a get_config call. For example, _dispatcher_plugins/local.py:47:
The above can very easily fail with a type mismatch. It may be better to fail at startup rather than in the runtime. Another one, results_manager.py:158:
The above will not raise an error, even if the result_dir field is not present in the config, all it needs is a None directory in the users cwd, and unexpected results could follow. If this is a concern, I would suggest implementing an enforcing mechanism inside the get_config function or adding a decorator.
Additionally, it is impossible for a static type checker to determine the types, as it will all be revealed at runtime.
In covalent._shared_files.config.get_config:
It is not immediately clear to the type checker, what should happen for different types of inputs. Ideally the type checker should have clear idea that, when str is passed the return type should be Union[str, int], if a List[str] is passed, the return type should be Dict[str, Any]. Using typing.overload is ideal for this case.
