when building a quantum circuit from qasm: if the qasm code includes initialize it gets ignored (or throws an error).
A point to note about this is that the from_qasm_str() method does not accept a qasm string created by the qasm() method.
Is initialize supported by OpenQASM2?
I mean, they could as opaque instructions (one per each size of idlist)
However this wont make it loadable per se (an opaque instruction wont have a definition). Am I missing something?
I think the big problem with supporting initialize in OpenQASM 2 is that QuantumCircuit.initialize() can take a vector of complex amplitudes as in the example
in the Qiskit Terra API Documentation. This sort of thing cannot easily be represented within the limited parameter expression syntax of OpenQASM 2.0
Thank you @jwoehr and @1ucian0 .
I understand qasm is really simple and won't understand np or that it is possibly more work to allow it to understand a vector of complex numbers. But something is better than nothing at all...
In my work to rebuild the qsphere visualization using javascript and opengl inside Max, I just added a feature to my microqiskit object to pass the statevector as a simple list of numbers. Assuming that all states are complex numbers, and that all complex numbers are just a group of 2 values (for real and imaginary components), it is simply waiting to receive a list of ((2^nqubits)*2) values.
Thoughts?
Well, I've got a working OpenQASM 2 translator based on the ANTLR4 grammar for OpenQASM 3. It's pretty easy to extend, but I'm not sure how much I can get away with on the current PR..
Currently I'm working on the test suite.
The next thing I was thinking to add is parameterization of translation so .qasm files can be re-used.
Somewhere along the line I should be able to add initialize.
@jwoehr what would I do without you?
this sounds promising. And yes, I'm all in to become early adopter of OpenQASM 3; we should all move that direction sooner or later. Keep me posted please :)
We'll have to see if this PR flies. OpenQASM 3 is a profoundly more complex environment; I'm just using a grammar file authored by the Qiskit team on the basis of OpenQASM 3: A broader and deeper quantum assembly language. As the language evolves I may have to subset that grammar to keep this OpenQASM 2 development manageable. However, it's possible that instead we will move towards an "OpenQASM 2.1, 2.2 ..." which will migrate in stages towards OpenQASM 3.
