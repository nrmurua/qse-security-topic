We'll want to write general purpose experiment classes that can run on several different physical experimental setups.  Sometimes, the different setups will have optional hardware.  I'd like to do something like the following:
But the compiler spits an error because self.ttl13 does not exist.  Is there a way to do this, perhaps similar to the preprocessor directives in c++?
There is. You can do something like:
self.ttl13_pulse = lambda t: self.ttl13.pulse(t)
Doesn't this need a kernel decorator?
Oh, yeah. kernel(lambda t: ...) or even better use a proper def.
I would rather suggest:
@dleibrandt Does this solve your problem?
Yup, thanks.
