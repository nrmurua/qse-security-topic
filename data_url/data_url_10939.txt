In the reduce function in solver.c in the lines of the form: clamp += val[rc][j] * Q[j] * Q[rc]; the rc value used to index into val is defined in a loop from zero to subMatrix. In the initialization of val_s indexes used to read into val are passed through Icompress. Such as: val_s[i][j] = val[Icompress[i]][Icompress[j]];.
Should the lines around 308 and 317 be using rc_s as the index into val, rather than rc.
A second issue with these two lines, if reading them correctly, the Q value of the variable in the submatrix is being multiplied into the clamping value. Since the clamping value is part of the linear bias of the variable in the submatrix, it will be multiplied by the value of the variable when the energy is evaluated for the submatrix, it shouldn't be here. Only the Q value of the variable on the outside of the submatrix should be included here.
i ran a test  on bqp2500 and times increase dramatically when i change lines 308 and 317.  I then reviewed the code and the calculations should be on rc, as it is accumulating the values that are not present in the submatrix, to "clamp" into the submatrix prior to evaluating the submatrix.  Times on 2500 went from aprox 150 seconds for all 10 to 435 for all 10. (same random seed)  The small factoring problem increase slightly also.
My understanding on clamping from Aiden, I should clamp based upon the "state" of the larger matrix * Q at time of extraction,, therefore I should multiply Q ( 1,0 values) to include the clamping values.
