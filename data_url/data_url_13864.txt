Hi,
I was wondering if there any simple way to search for phase gadgets in PyZX quantum circuit/graph?
From my understanding the search and merge of phase gadgets acting on the same set of qubits is important part of circuit optimization with PyZX.
In particular the search and optimization of phase gadgets are very important for quantum chemistry circuits (e.g. Unitary Coupled Cluster ansatz as was discussed in Sec. 6 of https://arxiv.org/abs/1906.01734).
I found somewhat related functionality in pyx.rules in function match_phase_gadgets(...).
So I wrote a function to search for phase gadgets in PyZX graph g just following the code in match_phase_gadgets(...).
Next I consider a toy example of a 2 qubit circuit with a single gate Rzz gate: Rzz(theta) = e^{i theta/2 Z_1 Z_2}.
The Rzz gate is a two-qubit phase gadget by definition.
Then I construct an equivalent circuit expressed in terms of Cnot and Rz gates for Rzz(pi/4), convert the circuit to PyZX graph. When I search for phase gadgets none were found.

Interestingly, when applying this function to a circuit from demo example (AllFeatures.ipynb), it finds phase gadgets.

The phase gadget is identified only if there is a vertex that has only one neighboring vertex with the value of the phase stored.
Could you please help me with this issue?
Is there any way to convert PyZX graph, such that the structure pf phase gadgets would be obvious and it will be easy to identify them?
Thanks!
I don't understand what your issue is? Your code looks for vertices which have a unique neighbour, and your example circuit does not such vertices. If you want to bring your diagram to a form where phase gadgets are visible, try calling zx.full_reduce on your graph.
Thanks @jvdwetering!
I guess a part of my problem is the lack of full understanding of the PyZX workflow pipeline when dealing with phase gadgets.
My original intention was to identify phase gadgets before the actual optimization happened. And then to compare the count of phase gadgets before/after optimization.
Is there any way to convert zx graph to the form where gadgets are visible, but do not perform any optimizations?
It looks like, zx.full_reduce(g) doesn't help in the toy examples I considered.
However, I found that running zx.simplify.pivot_gadget_simp(g) helps in most cases.
It still didn't do anything for the trivial example of a single Rzz gate on 2 qubits, however when I consider 3 qubits and 2 Rzz gates it works and identifies 2 gadgets as expected.

When I consider 3 Rzz gates on 3 qubits Rzz[0,1] Rzz[0,2] Rzz[1,2] it finds 3 gadgets and in the circuit Rzz[0,1] Rzz[0,2] Rzz[0,1] it finds 4 gadgets after zx.simplify.pivot_gadget_simp(g).
This behavior seem to be reasonable, although not quite obvious why it is 3 gadgets in one case and 4 in the other.
The problem with "identifying all the phase gadgets in the circuit" is that there is no such thing as a definite phase gadget. In principle you can present each phase gate as a phase gadget. You might be interested in the work of Litinski: https://quantum-journal.org/papers/q-2019-03-05-128/
He shows how a circuit can be rewritten into a series of Pauli exponentials, that are variations on phase gadgets. But then again, the number of phase gadgets would just be equal to the number of non-Clifford phases.
