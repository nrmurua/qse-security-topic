Documentation of the current SAWG (v1.0) and how it uses the Misoc CORDIC is rather sparse. The development of an improved sin/cos generator (#1342) and its integration into SAWG presents an opportunity to increase the level of documentation and frame a discussion about how to document SAWG as a whole.
By the end of SAWG v2.1 development I'd like to see a couple types of documentation. Some are already well developed for v1.0.
A high-level narrative is helpful for an end user who wants a mental model of how SAWG works so they can make operational use of the system and understand its limitations. Block diagrams are helpful to this end. Examples of block diagrams for generators (and accompanying high-level narrative) include  [intelNCO] Fig 8, [xilinxDDS] Fig 2-1, Fig 3-1, [meher2009] Fig 6.
SAWG API documentation is already good but is not linked with a high-level narrative. What's done in PDQ3 better marries high-level and API-level documentation and is closer to what I have in mind for SAWG 2.x [pdq3doc].
I'd like to see more comments embedded in the source code implementation so that an interested physicist-programmer with knowledge of Python/Migen/Misoc/nMigen can figure out what's going on without without fully reverse engineering the logic. These comments would be human readable textual, mathematical or cross references to specific sections of a book or article. In the context of SAWG or the CORDIC, these comments communicate the signal processing techniques at play and frame the logical structure of the implementation.
For example, an annotation to guard (https://github.com/m-labs/misoc/blob/117039bae3408c5a521c88714a5a5ed31026bf0d/misoc/cores/cordic.py#L177) that would have helped me is
[meher2009] Ref Walther [3]; log2(n) extra bits in datapath to eliminate finite word-length error. 
SAWG v1.0 is largely finished and functions well but is sparsely documented. It will soon be replaced by SAWG v2.x. Given that developer time and funding is limited, a balance is needed between new-feature development and documentation. Obviously there's no sense in developing comprehensive documentation for a system in active development as that documentation will fall rapidly out of date. However, at present there's no systematic checkpoint in ARTIQ development for pausing and deciding if/when to do such documentation.
As a community we need to decide on the level of documentation that is appropriate for each ARTIQ subsystem and at what stage of development the documentation should be written. And, importantly, how to fund and staff this effort. While the scope of the present Issue could potentially touch on every ARTIQ subsystem/dependency (Migen, Misoc, nMigen, build system, etc.) I propose keeping the focus on SAWG. I see the potential for SAWG to serve as a test case for a future documentation effort that includes other parts of ARTIQ. Such a test case is needed if we are to raise funds for a more broad-based drive to increase the level of ARTIQ documentation.
Unittests, simulation, analysis, characterization utilities and iPython notebooks can all help users understand how to use an API and its expected behavior. Right now there's no Misoc CORDIC unit test but I gather that will change. @jordens proposed including these elements in the refactored CORDIC (#1342). Since the CORDIC is nicely abstracted from the reset of SAWG this is a relatively stand-alone case. I'm interested to see what @jordens supplies and see how it informs the SAWG documentation discussion.
This Issue is a continuation of the discussion started in Issue #1342 (comment).
