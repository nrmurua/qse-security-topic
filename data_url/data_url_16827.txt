Terra provides the Instruction type to maintain quantum instructions. These instructions don't have to be unitary, i.e. measurements can be included. For unitary instructions, the Gate class is derived from Instruction, which doesn't allow non-unitary operations. Since the Gate class is unitary per definition it seems redundant (and confusing) to have a UnitaryGate class.
Objects of the UnitaryGate type are defined by a unitary matrix, thus the UnitaryGate is really a UnitaryMatrixGate or MatrixGate or UnitaryMatrix.
I agree. Can we put an Operator in the circuit directly? It would do the same thing.
Currently the Operator uses UnitaryGate to append itself to a circuit. With the structure we have right now anything inside a circuit is an instruction so we still need to wrap the content of the Operator inside one. We could allow other objects as circuit constituents (e.g. Operators) and then the transpiler must synthesize/decompose them but that might be a larger objective on the road.
For this issue we could remove UnitaryGate and put this functionality into Gate, either as initializiation argument or static:
This option would not cause any conflicts with current structure where Gate is just used as parent class and not really functionally.
related to #4528?
related to #4237
The unitary gate essentially uses the isometry for >2 qubits, maybe we can extend the isometry to completely replace this. Though the isometry does need a makeover.
I'm going to close this as stale now.  The naming is a shade unfortunate, but at this point, it would cause more user pain to change it than not to.  The comments about allowing quantum_info.Operator to be placed directly on a circuit are related to the Operation class that now exists, though I would comment here for posterity that Gate represents slightly more information than the very abstract Operation alone, and may have methods that clash with quantum_info.Operator.  They can represent the same data at different points along the normalisation/compilation of the IR.
