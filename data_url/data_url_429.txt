Here is a test case input.zip
It (input.qasm) looks like this:
OPENQASM 2.0;
include "qelib1.inc";
qreg q[1];
qreg anc[2];
barrier anc, q[0];
If we run:
./staq   input.qasm
we will get this:
OPENQASM 2.0;
include "qelib1.inc";
qreg q[1];
qreg anc[2];
barrier anc[0],q[0];
barrier anc[1],q[0];
But, would it be better if we could get this instead:
OPENQASM 2.0;
include "qelib1.inc";
qreg q[1];
qreg anc[2];
barrier anc[0],anc[1],q[0];
I don't know if the latter is technically better, but it does look more concise. That would also make the life of the downstream applications easier because they don't have to try to figure out if they can or should combine the two barrier gates.
Interesting point. This does look much nicer and would be a simple change, but I would prefer to leave any transformations that rely on semantics of gates as optimizations.
A more robust solution would be to actually write this optimization for the generic case, which would allow us to catch instances of combinable barriers that are not the result of this desugaring as well. That being said, it would take significantly more work, and directly expanding barriers in this way doesn't seem to be a particularly egregious overstep.
I'll make the change for now but leave this open so we can come back to it and find a more permanent solution.
Great. That sounds like a well-thought-out assessment of the issue. Still, thank you very much for the quick fix. It works beautifully for us now.
I've separated it out into a separate transformation now. Closing this.
