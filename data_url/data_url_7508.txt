Hi! Thanks a lot for excellent package. I am using Yao for quantum simulation and bumped into problem with representing spin Hamiltonians. Same possibly happens for heisenberg(n) function. Here is an example.
Take a 3-qubit system and define a Pauli string operator A = kron(3, 1=>Z, 2=>X, 3=>Y)
We can check that it separately commutes with two operators defined as kron(3, 1=>Y, 2=>Y) and kron(3, 2=>Z, 3=>Z). However, taking a sum of operators as B = kron(3, 1=>Y, 2=>Y) + kron(3, 2=>Z, 3=>Z) and checking iscommute(A, B) I get false result. We can also check it explicitly my converting operators to sparse matrices as mat(A)*mat(B)-mat(B)*mat(A)  that gives us a non-zero matrix (contrary to expected commutativity). I have tested it with chained blocks A = put(3, 1=>Z)*put(3, 2=>X)*put(3, 3=>Y) and B = put(3, 1=>Y)*put(3, 2=>Y) + put(3, 2=>Z)*put(3, 3=>Z), getting the same result.
If we repeat the same calculation using dense matrices B = Matrix(kron(3, 1=>Y, 2=>Y)) + Matrix(kron(3, 2=>Z, 3=>Z)) and  A = Matrix(put(3, 1=>Z, 2=>X, 3=>Y)), we get A*B - B*A = 0 as expected.
I use Julia v1.3.1, Yao v0.6.2, YaoBase v0.13.3.
Thanks for the issue! Seems this method is wrong https://github.com/QuantumBFS/LuxurySparse.jl/blob/master/src/linalg.jl#L127
@GiggleLiu got time to fix this?
I see, the Julia SparseMatrixCSC only admits row values in increasing order: https://docs.julialang.org/en/v1/stdlib/SparseArrays/ .
Double adjoint is the best I can do. Although it will decrease the performance of PermMatrix * SparseMatrixCSC by ~4x.
For unordered rowval, the multiplication works fine, but the addition is not so.
Also, I made a mistake that I pushed to the master directly... @Roger-luo
@kyriienko Try: ]dev LuxurySparse, it should work properly now.
multiplication is more often used in quantum circuit combinations, this is why we didn't find this bug. This type of bug is hard to identify and will cause a lot potential issues. So, thanks very much for posting the issue to help us identify it!
Thanks for the fix @GiggleLiu ! It all works now. Shall we close the issue?
Sure.
