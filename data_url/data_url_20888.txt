Didn't we at some point agree that API functions shouldn't be namespaced
to avoid breaking namespacing done by the respective projects using them?
No, I think we agreed to namespace them because they may conflict with things included by any projects that adopt code from this repo.
@cryptojedi and I talked a bit:
We should also consider that currently the #define constants are also not namespaced and including the api.h from different schemes will thus not work. We need to fix this if we remain with a namespaced solution.
It seems that this is something we should talk about in the meeting.
If we go back to the original motivation, of providing good code that adopters can use in their applications/libraries, and assume that may be more than one KEM and more than one SIG selected by NIST, then it will be easiest for adopters if we provide namespaced code.  Even if it doesn't match their preferred namespacing, it is easier for them to renamespace or just accept our second namespace.  So I'm in favour of namespacing.
If we didn't namespace, I also don't know how we'd deal with symbols that are not intended to be exported (e.g., all the functions besides the top 3 crypto_kem_{keypair,encaps,decaps}) but which we haven't demanded be static.
The non-namespacing of api.h is problematic.  In liboqs, we took the perspective that api.h was a local header to the implementation, and defined our own header for sharing that information between files, but this meant copying and pasting lengths, etc., which reduces maintainability.
This evening I tried taking the kyber768_clean implementation from PQClean and integrating it into liboqs master branch.  See the results in open-quantum-safe/liboqs#466.
In summary, the code from PQClean was in a good state to do this.
I can't think of anything I'd change from PQClean.  We talked about namespacing the macros in api.h, but that wouldn't have actually been useful for me in liboqs: we have our own kem_kyber.h file containing macros for the ciphertext etc. sizes.  Right now it's got the actual numbers in there.  If I tried to define them in terms of the macros from kyber768's api.h, which happens to include kyber768's params.h, then I now have to export all those headers in the set of public headers from liboqs, which I wouldn't want to do.
Adopting #51 would eventually be an improvement once we get to multiple implementations of the same algorithm; I'd want to revisit the OQS integration once we have two such implementations available to make sure it works fine.
I am closing this issue since I don't think there's anything more to do here.
