qsim and qsimh should be able to run on OSX, Linux, and Windows, at a minimum. We need to check the behavior on each platform and document any extra steps required.
If providing full support for a platform is not feasible prior to release, we should verify that Docker works as expected for that platform and provide instructions in the docs.
I've been having difficulties getting Github Actions to handle the installation correctly. This may be related to installing from the test PyPI server rather than the "real" one.
For now, we will limit Windows and MacOS support to Docker - tests for the proper install process can be set up after the open-source release.
qsim and qsimh are able to run on OSX if the code is compiled with g++. I don't know how to make it work with Clang from XCode (the problem is OpenMP).
I was able to compile and install qsim on macOS (10.13), but it needed a few tweaks. I'd previously installed gcc with homebrew, but I had to remember to set CXX to homebrew's g++ compiler in /usr/local. And I had to add a couple of compiler flags.
> make CXX=/usr/local/bin/g++-9 CXXFLAGS=" -O3 -mavx2 -mfma -fopenmp -Wl,-undefined,dynamic_lookup -Wno-maybe-uninitialized"
The -Wl,-undefined,dynamic_lookup is suppressing ld: symbol(s) not found for architecture x86_64 errors.
The second flag is suppressing a warning that the compiler can't tell for sure that a particular variable is initialized.
It works on macOS (10.14) using MacPorts' g++ compiler without any additional flags (no warnings generated):
make CXX=g++-mp-9 CXXFLAGS="-O3 -mavx2 -mfma -fopenmp"
I'll look into adding continuous tests for this using the same infrastructure as TFQ relies on.
Kokoro builds for Windows, MacOS, and Linux are now required for all PRs. If the Kokoro build does not run, try adding the kokoro:run label to the PR.
