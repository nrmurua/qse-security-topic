Kasli satellite runtime hangs at I2C initialization with SDA is stuck low while master is fine.
Here's the satellite .json that fails and transcript of failure.
Here's the master .json that works and transcript of success.
No other changes to the setup between flashing satellite and master. This reproduces on two Kasli with no EEM peripherals connected. Kasli is v1.1. ARTIQ is tracking m-labs master. Build environment is
$ nix-shell -I artiqSrc=artiq nix-scripts/artiq-fast/shell-dev.nix
Try flashing one of the existing satellite variants from Hydra.
We've tracked down the origin of the above confusing results. My json file specifies "variant", "brittonlab-laserlab-right" and I switched between "base": "satellite"  and "base": "master" while debugging my crates. The artiq.gateware.kasli_generic.py builds based on the json base specifier and puts the results in a directory named after the json variant -- my build folder contained both master and satellite build outputs. artiq_flash.py flashes different files based on the name of the auto-generated build directory. artiq_flash.py branches as follows based on the variant argparse.

The broader issue is that there is not consistency across the build-flash stack for specifying {satellite, master, standalone}. It also looks like there's mangling of two concepts.
artiq_flash.py branches as follows based on the variant argparse.
No, it does not. And the only part relevant to this problem here is:
This could perhaps be changed to code that checks which of satman or runtime is present on the filesystem, and errors out if both are present.
The other code is for handling the Sayma special case with the RTM.
Thank you. I like the added guidance "more than one firmware file, please clean up your build directory. "
