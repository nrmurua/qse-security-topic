Needed for feature parity, with almost-only-Rust on comms CPU (there will still be -lcompiler-rt+-lalloc needed by Rust and -lbase needed by lwip):
Needed for feature parity, with almost-only-Rust on kernel CPU:
Needed for completeness:
Upstreaming:
Remove \0 from strings sent over the network
What is that for exactly?
Rust uses Pascal strings, not C strings, so that's just some junk that gets added on one end and removed on another.
Remove allocation when receiving kernel
This turned out not to be possible because the shared objects we generate aren't execute-in-place (they have holes and that needs an MMU if we really want to do it zero-copy).
Fully safe mailbox interface
I've evaluated this and, while possible, this conversion is unlikely to prevent more bugs than it would cause.
Extract core_error
Fix problems with core_io and make it use core_error
Make byteorder use core_io and core_error
I've looked into it and core_io/core_error are very annoying to write, mostly because you have to manually produce patches for dozens of libstd versions. I'm not going to die on this hill, especially seeing as the workaround is mild. Someone else in the community is going to have to be annoyed enough.
Runtime has been migrated to Rust.
