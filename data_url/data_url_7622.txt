In Interlin-q, one has to create potentially complicated circuits. It could be easier to have a graphical interface to create them. We can, as a first step, integrate pyQuirk with Interlin-q for circuit creation:
Hello, could you please provide some more detail and nudge me in the right direction?
@Ritvik-Sapra. Sorry for the delay. The goal of this task is to be able to generate circuits for Interlin-q using pyQuirk. Essentially what we want to do here is build a circuit using pyQuirk and take the circuit components of pyQuirk to map them to the circuit for Interlin-q. Interlin-q also uses circuits, one builds them at the moment purely from code. We want to simplify this process by having a user interface.
The task is essentially:
We can discuss more but as a first step of extracting the pyQuirk circuit would be the point of discussion for the next steps.
Please have a look at this repo: https://github.com/abhayhegde/pyquirk
Here we can simply use the URL or JSON file generated by the quirk, and generate an output file in .tex format.
Can this be helpful?
Yes, the goal would be to, all within the Python framework, extract the JSON object from PyQuirk and then use it to build the Interlin-q circuit. From the JSON object you can iterate through the objects and programmatically build a Interlin-q circuit.
Hey @Ritvik-Sapra, is this being worked on?
Hey @Ritvik-Sapra, is this being worked on?
Hey, I am stuck in some unavoidable work right now. Feel free to take it forward.
@Ritvik-Sapra cool, thanks.
@stephendiadamo to clarify, is this meant to be used only in python notebooks?
As a starting point that would be fine I'd say. Maybe one could have a command line script that pops up a circuit builder at some point, but I think in the notebook is enough for this step.
@stephendiadamo I have a few questions regarding the specifications of Operation. Are you available on the UF discord for DMs?
Sure, feel free to write me. I'm in the quantum networks channel
We didn't get to release this in time for UnitaryHack, but here are some notes from our discussion so far for the next person to tackle/answer:
When mapping from Quirk, it's not obvious how to determine which computing host to assign to each qubit. Thus, a way around this is to have the mapping function take in a list of ordered qubits with their respective computing hosts:
The way I envision it might work is as follows:
Other things to think about:
Is this issue available to be worked on ?
or is anyone else working on it ?
I read over the older conversations getting a rough idea but a task list would be really helpful as in whats needed can get on a call via discord for more discussions
No I don't believe so. Do you have some specific questions I can answer asynchronously? Might not be easy to find a time for a call in the next few days.
