This method should return an iterator that iterates through all pauli strings matching the filters specified by the arguments given to the method. The signature should be:
Example:
It's conceivable that some sort of out: Optional[stim.PauliString] = None argument could also be included, to give the underlying C++ code a place to put the results. This would avoid having to allocate a new object for every result, which I expect to be the most expensive part of the iteration. But maybe benchmarking allocate-results vs not-allocate-results would show it's swamped by other python overheads and therefore not worth doing.
length determines the output length of the pauli strings. There are 4^length potential unsigned outputs.
The min_weight and max_weight arguments control how many non-identity terms there can be. Ideally, the method would iterate terms in order of increasing weight. max weight defaults to length if not set.
The allowed_paulis argument determines what paulis (X, Y, and/or Z) are allowed to appear in the iterated strings. If it's set to a single pauli, this problem becomes equivalent to iterating bit strings matching the requested weights. If it's two paulis, it's iterating satisfying bit strings m and iterating partitions of those bit strings (x ^ z == m). If it's three then it's unions instead of partitions (x | z == m).
It's important that the time scaling should be proportional to the number of outputs, not to the number of pauli strings of a given length. Iterating weight 3 and weight 4 strings should take O(n^3 + n^4) time, not O(4^n) time.
Is the idea here it to produce all 4^N  possible Pauli strings (or a subset of them dependent on the weight) given N qubits (times 4 for +/-1 and +/- i)? Sounds like a small modification of this on the C++ side or some itertools gymnastics on the python side.
@fdmalone  Yeah that's exactly it. There are a few tricky things beyond the bit twiddle tricks to jump straight from one to the next:
I think it should be the case that generating all Pauli strings of weight w with length n takes time O(n w 3^w). Generating all paulis of weight 1 to weight 3 of length 256 should probably take less than a second. At least, less than second without python in the loop. If python literally can't allocate enough objects in that time, then oh well.
I think it would also be nice if by default it iterated from low weight to high weight, ascending from simple errors to complex errors. But that's not necessary.
Sounds good. Can I get assigned to this, sounds fun.
@fdmalone Any updates?
@Strilanc  Sorry, got pulled into other things. I should have a PR later today
Looks like this is up for grabs again.
