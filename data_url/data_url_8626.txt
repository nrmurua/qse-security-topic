Consider the following operators:
I would expect that
would be the same as
but for F=0 (where 2*F+1 == 1) this fails.
I agree that this might seem a bit inconsistent. However, a quantum system with only 1 quantum state is not that meaningful since it does not have any degrees of freedom, and in some places in QuTiP, such as in the multiplication of two Qobj instances (like in your total_eye*total_eye example) we treat subsystems with only one quantum state as a subsystem that has been "projected out", and therefore we remove that subsystem.
This is the reason for why you would get (total_eye*total_eye).dims as [[8], [8]] instead of [[1,8], [1,8]]. Perhaps tensor should also make this check (and drop subsystems with only 1 quantum state)... but on the other hand it is reasonable to avoid calling tensor on subsystems with only 1 quantum states, since it is not a very meaningful thing to do..
Is there any case when this causes a problem for you?
I noticed it because I have a code doing spinor lattice physics; the spinor piece is parameterized by the total angular momentum F. All of the operators are written as tensor(spin_part, lattice_part). As part of a Brillouin zone unfolding code, I have reason to accumulate increasing powers of an operator in a loop, like
This code works fine, except for F=0. Since the original_state is a 1xN tensor state with original_state.dims = [[1, N], [1, 1]], the op * original_state multiplication fails because op = base_op * op has deleted the 1 part of of op, leaving op.dims = [[N],[N]].
Sorry for being late with getting back to you on this, and thanks again for raising this issue. I agree this behavior is not ideal from this point of view, but unfortunately it seems to be difficult to fix this since there are competing interests with other features in qutip that require dropping dimensions with length 1 (projection operations).
Currently I don't see a way to fix this problem, I think the overall best solution is to leave it as it is, so I'll close this ticket here.
