Increment operator (++ and --) is allowed for integer variables according to the spec. But no description exists whether it is post-increment or pre-increment.
Integer types support addition +, subtraction -, multiplication *, and integer division 2 /; the corresponding assignments +=, -=, *=, and /=; as well as increment ++ and decrement --.
In the grammer, only post-increment is defined as an expression.
Because it is an expression, a=i++; is accepted.
This is a fair pt. I believe the grammar is wrong here--I'd imagine pre or post increment would work.
I think a=i++; (assign and then increment) would be valid, but not sure. It is valid C/Java
My preference would be to remove ++ and -- since += 1 and -= 1 are only one additional character but are unambiguous on pre- vs post-increment.
My preference would be to remove ++ and -- since += 1 and -= 1 are only one additional character but are unambiguous on pre- vs post-increment.
+1 to this.
My preference would be to remove ++ and -- since += 1 and -= 1 are only one additional character but are unambiguous on pre- vs post-increment.
Where, exactly, does this ambiguity originate from?
I don't think it is ambiguous insofar as parsing is concerned, unless concerned with the difference between two unary + operators versus a single ++ operator. I think what @stevenheidel may have been referencing was the confusion between pre-increment (++foo) and post-increment (foo++) and how it may be a common source of bugs, either by mistaking the semantics of pre/post increment, or assuming both post/pre-increment are valid when only one of the two is.
I don't think it is ambiguous insofar as parsing is concerned, unless concerned with the difference between two unary + operators versus a single ++ operator. I think what @stevenheidel may have been referencing was the confusion between pre-increment (++foo) and post-increment (foo++) and how it may be a common source of bugs, either by mistaking the semantics of pre/post increment, or assuming both post/pre-increment are valid when only one of the two is.
There is no confusion possible between ++i (pre-increment) and i++ (post-increment). Not in parsing, and not in AST generation either. Both operators have clearly defined semantics, and have had clearly defined semantics for the better part of the past 50 years.
Two consecutive unary operators -- i.e. a '+' operator followed by one or more spaces followed by another '+' -- are a syntax error. Such a token sequence fails at parsing time. That takes care of any possible ambiguity between '++' and '+  +'.
If a programming language (any language) allows for one of the operators, it must allow for the other. Otherwise the language is incorrectly and incompletely defined.
Both operators perform the same exact operations. The only difference is in their returned value. Since both operators must return a value, allowing for one of the operators but not the other does not make much sense at all.
In terms of the types the operators can operate on, that is a matter of language semantics definitions.
Despite the venerable nature of post-/pre-increment operators in C and other languages, they are still among the most mistake-prone language constructs. I have no real stake in this, but I would opine that in a low-level scientific R&D language like OpenQASM 3 there seems to be no pressing need to litter the landscape with convenience operators.
Despite the venerable nature of post-/pre-increment operators in C and other languages, they are still among the most mistake-prone language constructs. I have no real stake in this, but I would opine that in a low-level scientific R&D language like OpenQASM 3 there seems to be no pressing need to litter the landscape with convenience operators.
+1
Rust doesn't have them for this same reason: https://github.com/dtolnay/rust-faq#why-doesnt-rust-have-increment-and-decrement-operators
TSC consensus is to remove ++ and --. Updating the title to reflect that.
