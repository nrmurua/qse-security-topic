It will be useful to have a CPU in the Sayma DRTIO satellite to perform the following tasks:
Since none of this code is performance-critical, and it should use little RAM, it can be simpler to have a single-stage firmware like the MiSoC BIOS: executed-in-place for code and using block RAM for data. If using Rust, check its RAM footprint as block RAM is expensive and I'd rather keep it below 32KB. Such a single-stage firmware is compatible with any future devices that do not have SDRAM, e.g. potentially Kasli.
The MiSoC build system should be reworked to allow alternative "BIOSes" and sharing of the SDRAM initialization code.
If using Rust, check its RAM footprint as block RAM is expensive and I'd rather keep it below 32KB
Statically linked "base Rust" (i.e. using only libcore) has zero inherent RAM footprint, and you only pay for what you use, in terms of data structures (which you define).
Also:
IMHO we could also consider going the exact opposite way and try not to add too many special case distinctions between DRTIO master and slave. Is this strict distinction really needed?
Is this strict distinction really needed?
Yes. A number of things are already shared though.
The next question would then be: Why do you think strict distinction is really needed?
Many reasons; support devices without SDRAM, no need for two CPUs, different constraints, etc.
My prediction would be that the satellites including Kasli will all have SDRAM, that there will soon be a need to perform the typical comms cpu functionality (save to flash, start/stop remote kernels, manage datasets etc), that there will soon be a CPU for remote kernels, etc. And then this distinction would be shortsighted. "Different constraints" doesn't mean much to me.
If there are remote kernels then DRTIO is not the right protocol.
In a device where RTIO is driven by multiple different masters (upstream DRTIO master, multiple DMA engines, kernel API) I can see DRTIO coexisting happily with remote kernels. Especially since the arbitration between DMA and kernel API needs to be done anyway.
There are no plans for such things right now, and those remote kernels will most likely want to pass messages between them which is nontrivial (in addition to the usual woes of distributed computing, there's all the compiler/software support, plus e.g. they may have to cross switches which can cause packet collisions). Can we please just get a simple system to work right now?
If all the satellites have SDRAM, the current boot mechanism is fine though.
