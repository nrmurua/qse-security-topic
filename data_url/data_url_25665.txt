Currently, we dispatch electrons parallelly using the topologically sorted graph where each "set" of electrons is being run parallelly. Instead, we can run things faster if we recheck the dependencies each time based on completed electrons.
Consider the following graph.

Topological sorted values are
[[0, 1, 2], [3, 4], [5, 9]]
So right now we run things such that [0,1,2]  are sent parallelly. We wait for all of them to finish and then we go to [3,4] wait for all of them to finish.. etc.
Now consider the scenario where in the first run [0,2] nodes are done. We can in theory go on to 4 even though 1 is not completed. We are assuming in the current implementation that all electrons require an equal amount of time and hence all parallelly sent jobs to complete equally at the same time.

Solution : Algorithm should be changed to the following
This will now output [4] for a graph with G[0] and G[2] set to completed.
Of course, this is just a basic function and in the actual issue, a more robust check for running nodes, etc.. needs to happen.
No response
Acceptance criteria
 Review @cjao implementation
 Modify/update if necessary
 Ensure all tests run and pass
 Ensure all tutorials run
