
Currently, the info_keys parameter requires you to know which which keys in the return value from your future will correspond to which keys in the Response.info dict. This is quite inconvenient if you are writing code that is intended to be agnostic to an underlying sampler, as you may not know what "format" the sampler will return for information about the samples. Furthermore, this parameter is inconsistent with Response.from_dicts, which simply accepts a info parameter.
Proposed solution: change info_keys=None to info_key="info", such that when the future returns, dimod will simply take the value of future.result[info_key] (if it exists) and stick it into the info of the newly created Response.
I think this might duplicate #127 ?
Also, I am trying to fit a refactor of the response object construction - especially from_futures - in the next week or so, so this is timely.
Yes, but I like my solution slightly more :)
Can you write a short example of the syntax you have in mind?
@arcondello just brought to my attention that this syntax will incur significant pain for the wrappers of some samplers due to the nature of needing to modify the futures themselves if they do not return a dict with a neatly packaged "info" key.
New proposal: optional result_coercer argument which takes a function. This function should "coerce" whatever the future returns into a dict which has the keys "samples", "energy", and "info". By default, result_coercer=lambda r: {k: r.get(k, None) for k in ("samples", "energy", "info")} or similar.
As @arcondello also realized, this allows you to do fun things like change the vartype or anything else of the result returned by the future.
As much as I like result_coercer probably is should be called result_hook or the like
