If p is a list then the definition is fine. However, if p is a float, the channel is defined as
$$
\mathcal{E}(\rho) = (1 - 3p)\rho + p(X\rho X + Y\rho Y + Z\rho Z)
$$
which is counter-intuitive and not compatible with (all?) existing packages and papers.
Change the definition to
$$
\mathcal{E}(\rho) = (1 - p)\rho + p/3(X\rho X + Y\rho Y + Z\rho Z)
$$
This is going to be a backward-incompatible change that may silently change the semantics of existing code.
Circ https://quantumai.google/reference/python/cirq/DepolarizingChannel
Qiskit https://qiskit.org/documentation/stubs/qiskit_aer.noise.depolarizing_error.html
Pennylane https://docs.pennylane.ai/en/stable/code/api/pennylane.DepolarizingChannel.html
For papers see 8.103 of Nielsen&Chuang, Eq. 24 of https://arxiv.org/pdf/2112.15540.pdf, Eq.2.6 of https://arxiv.org/pdf/2004.02388.pdf, Eq.3 of https://arxiv.org/pdf/2003.04941.pdf and many more
The semantic in TC is: if a float a is in the place that should be a list, then [a, a, a, a ...] input is implicitly assumed. According to this, the current convention is consistent with TC design.
A mitigation is to add a warning tag in the docstring for the method, explicitly telling the users that the convention for this noise channel is different from others. I have no strong preference compared the two approaches: "keep and warning in doc" or "change to consistent with other conventions". Just slightly prefer keeping the definition unless there is another strong reason against that. eg. when translating noise model (currently we have no such translation anyway), a consistent interface would help (but the real situation would be that many noise channel definitions are not consistent across different packages, I guess?)
Another solution: apart from the generaldepolarizingchannel, implement a new function named simpledepolarizingchannel which only accepts one argument $p$ and has a similar interface with other packages. Then the float-type argument in generaldepolarizingchannel can be kept or removed.
Another solution: apart from the generaldepolarizingchannel, implement a new function named simpledepolarizingchannel which only accepts one argument p and has a similar interface with other packages. Then the float-type argument in generaldepolarizingchannel can be kept or removed.
yes, but I am afraid whether this adding will further complicate the depolarizing like channel method in TC already
Another solution: apart from the generaldepolarizingchannel, implement a new function named simpledepolarizingchannel which only accepts one argument p and has a similar interface with other packages. Then the float-type argument in generaldepolarizingchannel can be kept or removed.
yes, but I am afraid whether this adding will further complicate the depolarizing like channel method in TC already
Indeed. Ideally, the interfaces should be
If such refactoring is done, deprecation warnings can be added appropriately for a relatively smooth conversion.
With that being said, IMO it is more friendly to users to have a bunch of similar functions than have one function that adopts a different convention. At least in the former case users will have to spend time reading the document before deciding which function to use. In the latter case, users may directly use the only function with assuming arguments which leads to highly obscure bugs (this is actually my story).
An analog is to imagine a package that provides a sin function, which accepts 0-180 degree rather than 0-pi. If such convention has to be kept, it is better to have sin1 for this type of argument and sin2 for the normal convention. Few people will check that the document of sin says it accepts 0-180 degree before running into bugs.
