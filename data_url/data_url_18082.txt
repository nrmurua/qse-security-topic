The cpp and py statevector simulators are almost identical. They both set a snapshot at the end of the circuit, run the corresponding qasm simulator, then extract information from the last snapshot. This code duplication repeats now that we add a projectq statevector simulator. Therefore it's time to refactor the code, as follows.
There is an abstract class named BaseBackend (for qasm simulators, statevector simulators, and real devices). It has the following methods:
Every qasm simulator is represented by a class which inherits from BaseBackend:
QasmSimulatorCpp, QasmSimulatorPy, QasmSimulatorProjectQ.
Every statevector simulator inherits from the corresponding qasm simulator:
Except for StatevectorSimulatorSympy, which does not have a qasm simulator, and inherits directly from BaseBackend.
Statevector simulators will stop inheriting from qasm simulators.
There will be new classes: DeviceBackend, SimulatorBackend, QasmSimulator, StatevectorSimulator.
SimulatorBackend will inherit from BaseBackend, QasmSimulator and StatevectorSimulator will inherit from SimulatorBackend.
The qasm simulators will inherit from QasmSimulator.
Two classes will inherit from StatevectorSimulator:
The StatevectorSimulatorCpp, StatevectorSimulatorPy, and StatevectorSimulatorProjectQ classes will inherit from SnapshotBasedStatevectorSimulator.
In SnapshotBasedStatevectorSimulator there will be a data member which is the corresponding qasm simulator.
@ajavadia comments: There are some details that must be considererd. For example, it is hard to distinguish a "DeviceBackend" from an online "SimulatorBackend", as they are all behind an API.
@yaelbh is this an effort you already started? What is your estimation for completing this task?
@delapuente I didn't start it.
This we should close as it is part of qiskit aer and the discussion can happen in slack until we release
