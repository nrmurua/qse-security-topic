This page: https://qiskit.github.io/openqasm/language/delays.html#delays-and-other-lengthened-instructions contains a special syntax for lengths that doesn't seem to be fully spec-ed out anywhere (search for "rotary" on that page).
Should all lengths use square brackets? In particular the pulse shapes in the pulse proposal could look like:
instead of now:
While at first glance what you propose looks somewhat odd, one nicety is that the first component gaussian(...) defines the pulse function, and the [100dt] a sampling on that function. Since this is an entirely new grammar within OpenQASM3 this is our choice at the end of the day, but I would like to hear the opinions of @ajavadia and @levbishop.
This does make sense to add consistency w/ how the timing types currently specify length. The other question is can timing literals be used as arguments to any other OpenQASM functions, in particular I'm thinking of subroutines?
The other question is can timing literals be used as arguments to any other OpenQASM functions, in particular I'm thinking of subroutines?
And if so, what is the syntax for defining length parameters?
The other question is can timing literals be used as arguments to any other OpenQASM functions, in particular I'm thinking of subroutines?
And if so, what is the syntax for defining length parameters?
On this, I would imagine anything w/ a time unit, such as
I'd say this is a bit in flux, but in the original design length should be passed with this special syntax only when it dictates some duration as perceived by the rest of the code. Otherwise it can be passed as a regular parameter. The reason we used this square-bracket syntax was so that the compiler knows to treat that as the duration for that piece of code, and use it in scheduling.
The particular example that @levbishop brought up was the case of Walsh DD where you have an internal length that is only relevant within the DD box, and an externally visible length which dictates the total duration of that sequence. This second length is important for the compiler to be able to properly schedule that sequence within a larger circuit. So we would use () to pass the internal length (this will just set relative distance of pulses in that box). And use [] to mark the external length as the total duration of that box/gate.
So maybe we should write some examples here. Say a gaussian square pulse that has rise time, constant time, fall time. It is important for the compiler to know the total duration of the gaussian square, and it doesn't need to care about the internal timings. So I think it could look something like:
or if we define the gaussian square as a composite of 3 pulses, the compiler can just sum the length of those parts:
Any thoughts?
For the qasm compiler, lengths in [] are a way to introduce constraints. I think we should allow the brackets to contain a list of linear functions of stretch variables, and the semantics is that after solving for the value of those stretch variables, all those expressions should resolve to the same physical time, which must also be equal to the duration of the object (box, delay, variable-length gate) that has the [] attached to it.
The qasm compiler has the job to resolve all of those constraints into a form that can be passed to the backend where pulse-level instructions get interpreted into actual lengths and the linear program gets solved to provide concrete duration to the stretches. This is the reason why we have both length and stretch types. The length types can be resolved by the qasm compiler into concrete durations, and thus passed as regular parameters. The stretch types as far as the qasm compiler is concerned are only used to specify constraints that get resolved into concrete durations at the backend, so they can't be passed as regular parameters, only square bracketed.
Length variables can be manipulated in arbitrary expressions and assigned to other length variables, passed as parameters, etc. Stretch variables can only be 1) declared, and 2) appear in linear combination within a bracketed list to create constraints.
I now realize that the decoupling example is not consistent with this, and I can write a PR to fix it.
Pulse shapes in the pulse spec can also use [] in order to add constraints to the glue setting procedure. As @ajavadia  says this does not mean that every duration is a constraint. If you are passing durations to a defcal, these will be lengths, not  stretches. For example, this is fully specified by the parameters, no need for square brackets to the arguments:
Conversely, a stretchable rotary, defined using a stretch variable for the hold time, you don't pass in a hold time, rather that gets resolved by the context where the rotary gets used
If a defcalgrammar allows user-defined pulse shapes (in addition to a fixed library such as gaussian and constant) then the grammar will need some syntax for binding a stretch to a duration. For example, if the shape library had no constant() then some syntax such as:
}
