Making the use of QuTiP more transparent to the user, by providing a way to compute observables from a simulation result.
One possibility would be to always calculate as output the evolution of the state (without arguments in sesolve()) and then return the list of states. Then the user can evaluate observables with something like
Where my_simul.expect()would be calling [qutip.expect(state, obs) for state in my_simul.output for obs in observables]
On this matter, I have to say I don't like that the observables have to be defined as QObj. I'm ok with that being an option, but I think a regular matrix should also be an option. The same goes for initial_state.
This is a good point, one can actually define states and operators only using numpy.array() and numpy.kron(). Then only when we run the simulation they can change to qutip.Qobj (or qutip.Qobjevo) as needed.  We can then extract the data and return the output again as an ndarray instance.
This goes along the philosophy of avoiding having to learn too much about Qutip for the basic use of Pulser.
This issue is solved by the SimulationResults class.
