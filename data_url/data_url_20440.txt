I was talking with Dan Bernstein at Real World Crypto, and he had some suggestions about our KEX API, some of which carry forward into the design of a signature API.
Some of his comments (my wording) were:
My opinions:
See also #90
Largely agree with all of this, but mostly for different reasons. I've started wrapping oqs in a c++ api and most of these things made it more difficult than it could have been. The existing API as it stands is not the easiest (at least from c++) to integrate with other crypto (e.g. HMAC). Making everything byte strings would be a good start.
The two major problems I see are:
Oh and i think the named parameters string should go at the minimum - so far as i can tell it's only used for frodo and we only support one set of parameters for it anyway.
Hi @dstebila , how is progress coming with this?
I'm happy to do some of the work to speed things up if you've made a list of what you want out of the changes.
A candidate new simplified KEM (previously KEX) API is present in a branch: https://github.com/open-quantum-safe/liboqs/blob/ds-nist-branch/src/kem/kem.h
It incorporates many of these ideas.  Feedback welcome.
Further to this new candidate simplified KEM API, I've created an example of how to use the API with statically allocated memory using individual algorithms' functions directly, and dynamically allocated memory using the generic OQS_KEM object: https://github.com/open-quantum-safe/liboqs/blob/ds-nist-branch/src/kem/example_kem.c.
New KEM API is stable on nist-branch and underway on master-new-api branch, so closing this.
