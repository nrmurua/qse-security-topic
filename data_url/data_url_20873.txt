This came up while discussing #92; we allow people to vary secret key lengths across implementations, but our test vectors are even stricter, requiring them to be byte-wise identical. We should probably just remove the secret key from the test vector output.
This is related to the discussion we had about test vectors (and to including secret-key size in the YAML file). Essentially it boils down to the question of when two schemes are different. We could decide that as soon as schemes produce different testvectors, including secret keys, they are different schemes. Then also the secret-key size can go back into the YAML file. Maybe that's the most consistent approach.
If we have a clean and an optimized implementation of the same scheme, are they obligated to produce the same test vectors? Use the same secret key format?
People consuming or META.yml files in scripts might not like it if we change them in the future.  So I'd be inclined to try to get it right now, and the right thing seems to be that test vectors and secret key length are characteristics of the implementation, not the scheme.
Focusing on KEMs, I think there are three levels of interoperability we could use to define "being the same scheme", in increasingly levels of stringency:
RSA in SSH or TLS libraries has "public message interoperability", but may store secret keys in different formats.
AES has secret-key-interoperability, albeit not entirely, as different implementations may represent an expanded key schedule in different ways.
I'd prefer to demand only public-message-interoperability, because I think implementers should be allowed to choose between trade-offs in secret key representation.
I think we've come to the conclusion that secret keys will remain part of the test vectors especially since they're part of the NIST KATs.  Any objections to closing this issue?
Nope, let's revisit this if the issue comes up.
