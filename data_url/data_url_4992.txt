Currently, an invalid user input (e.g. a negative qubit index) invokes exitWithError, which logs the nature of the invalid input and the culprit function call before exiting. This can be a nuisance for users, especially if using QuEST in C++, where an exception is more natural. This has also been a headache for unit testing of QuEST's input validation.
A solution is to make exitWithError (after renaming to something more illustrative, like invalidQuESTInputError()) a weak symbol, which can then be redefined by a user.
e.g.
Since the syntax for specifiying a weak symbol can be platform specific, then to avoid headache for unsuspecting users not intending to override the error, overriding the symbol can require an additional QuEST compile flag.
E.g.
Finally, users redefining the error behaviour should also have access to the error message (to understand the error) and the error code (to systematically check for specific errors), and the culprit function name. This requires exposing the error codes in QuEST_validation, by simply moving them to the header QuEST_validation.h, which then the user must include, e.g.
CAUTION
Allowing the users to disable the exiting upon an error and receive control flow to their own functions, means that we must be careful the internal state is fine before an error.
Since validation should happen at the very start of an invoked API function, this is usually fine.
Note that collapseToOutcome safely violates this pattern.
Note that pr #187, as a first measure, implements a simpler solution than discussed here.
The user-redefinable function invalidQuESTInputError() accepts two strings, and not an error code. Passing an error code requires exposing QuEST's internal ErrorCode enum type.
the internal invalidQuESTInputError() is always made a weak symbol using #pragma weak invalidQuESTInputError, in lieu of only being so when an additional compiler flag (e.g. QuEST_OVERRIDE_ERROR) is passed.
Commited in 8402ecd
