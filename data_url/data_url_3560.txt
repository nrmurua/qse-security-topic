JSONDecodeError                           Traceback (most recent call last)
~/anaconda3/lib/python3.6/site-packages/pyquil/api/_base_connection.py in parse_error(res)
99     try:
--> 100         body = res.json()
101     except JSONDecodeError:
~/anaconda3/lib/python3.6/site-packages/requests/models.py in json(self, **kwargs)
891                     pass
--> 892         return complexjson.loads(self.text, **kwargs)
893
~/anaconda3/lib/python3.6/json/init.py in loads(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)
353             parse_constant is None and object_pairs_hook is None and not kw):
--> 354         return _default_decoder.decode(s)
355     if cls is None:
~/anaconda3/lib/python3.6/json/decoder.py in decode(self, s, _w)
338         """
--> 339         obj, end = self.raw_decode(s, idx=_w(s, 0).end())
340         end = _w(s, end).end()
~/anaconda3/lib/python3.6/json/decoder.py in raw_decode(self, s, idx)
356         except StopIteration as err:
--> 357             raise JSONDecodeError("Expecting value", s, err.value) from None
358         return obj, end
JSONDecodeError: Expecting value: line 1 column 1 (char 0)
During handling of the above exception, another exception occurred:
UnknownApiError                           Traceback (most recent call last)
 in ()
1 qvm = QVMConnection()
----> 2 wf = qvm.wavefunction(p)
3 print(wf)
~/anaconda3/lib/python3.6/site-packages/pyquil/api/qvm.py in wavefunction(self, quil_program, classical_addresses, needs_compilation, isa)
282         else:
283             payload = self._wavefunction_payload(quil_program, classical_addresses, needs_compilation, isa)
--> 284             response = post_json(self.session, self.sync_endpoint + "/qvm", payload)
285             return Wavefunction.from_bit_packed_string(response.content, classical_addresses)
286
~/anaconda3/lib/python3.6/site-packages/pyquil/api/_base_connection.py in post_json(session, url, json)
86     res = session.post(url, json=json)
87     if res.status_code >= 400:
---> 88         raise parse_error(res)
89     return res
90
~/anaconda3/lib/python3.6/site-packages/pyquil/api/_base_connection.py in parse_error(res)
100         body = res.json()
101     except JSONDecodeError:
--> 102         raise UnknownApiError(res.text)
103
104     if 'error_type' not in body:
UnknownApiError: 
The server has failed to return a proper response. Please describe the problem
and copy the above message into a GitHub issue at:
https://github.com/rigetticomputing/pyquil/issues
Based on the 413 Request Entity Too Large error, I'm assuming that your program is too big. There is a limit on the size of programs that the server will accept. @ntezak What do you think?
@vtomole is correct, to ensure availability of our cloud resources to all users we must limit the size and runtime of individual user programs. @cwbartlett, as such, this is not a bug but accepted behavior. I am closing this issue.
@cwbartlett The reference-qvm is not a mature as remote, but it doesn't hurt to try.  Let us know how it goes.
The reference QVM should only be limited by the resources of the computer that you use it on. Unfortunately, we cannot currently provide extensive support to reference QVM users.
For your specific use case, my suggestion would be to decompose the multiple-controlled NOT gate into a circuit that is comprised of lower-order gates, such as just CNOTs.
