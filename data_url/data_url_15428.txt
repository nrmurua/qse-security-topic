Suppose I am given the following Python list/array as an example:
arr = [2, 1, 2, 0, 0, 1, 3, 2]
To encode this data into a quantum state I can use the "bit-string basis encoding" technique, writing both the integer elements and the integer indices of arr as binary strings $s \in \{ 0,1 \}^*$ and then transforming them into a quantum state on the computational basis. In this case, I would need $n=3$ qubits to encode the indices $i=0,\dots,N-1$ with $N=2^n=8$ and $n_*=2$ more qubits to encode the digits $\mathrm{arr}_i\in \{ 0,1,2,3 \}$, ending up with the following state:
$$|\psi \rangle = \frac{1}{\sqrt{N}} \sum_{i=0}^{N-1} |\mathrm{arr}_i \rangle |i\rangle$$
The Qiskit code implementing the quantum circuit to prepare the state $|\psi \rangle$ would look like this:

Questions:
I would appreciate a way to encode lists of numbers, if nothing else it would be helpful for debugging.
I think that we do not have such an encoding in the circuit library yet.
However, you can encode your data (after normalizing it) as a quantum state using the StatePreparation class.
See this code for example:
Ok thank you @ShellyGarion!
So there we are actually implementing "amplitude encoding", right? I run that circuit by using the qasm_simulator backend and the final measurements on the 3-qubits-system are the following:

Makes sense! The probabilities seems indeed to correspond to the square of each entry in the original (normalized) array:
(arr / norm)**2 = [0.174, 0.043, 0.174, 0.0, 0.0, 0.043, 0.391, 0.174]
This issue seems to have been resolved, as far as I can see?  I'll close it now, but please feel free to re-open, or make a new issue if there's more to discuss.
A general procedure to encode a list/array of non-negative numbers (e.g. arr = [2, 1, 2, 0, 0, 1, 3, 2] in the quantum state $|\psi\rangle$ (basis encoding) could be implemented as follows:

PS: this works properly only if $\mathrm{len}(\mathrm{arr})$ is a power of 2 (could be generalized with a bit of work) and it requires a number of qubits $$N\sim\log_2(\mathrm{len}(\mathrm{arr})) + \log_2(\mathrm{max}(\mathrm{arr}))$$
