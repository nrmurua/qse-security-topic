I was trying to call run from a function which I am using multiprocessing.Pool.map to run a couple in parallel. Multiprocessing requires the function you're mapping over to be pickle-able to send it to the spawned processes. Lambda functions aren't pickleable, and there's something in cirq.google gumming up the works:
Yeah, the serialization code uses lambdas all over the place for extracting and validating gate parameters. We can convert those to be instances of proper classes instead to support pickling with multiprocess. I think generally there's a lot of possibilities for cleaning up this code.
For people reading this, I switched to ThreadPoolExecutor which works, but I think people might expect our library to work under multiprocessing, especially given Python's threading drawbacks
Latest on this issue:
We do have async methods on Samplers now. Does this make this obsolete ?
Do any of the other cirq-google workflow tools make this obsolete ?
Should we still pursue this ?
Questions for @mpharrigan
The async methods on EngineSampler currently use the default versions, which fall back to the sync versions and so don't actually do anything asynchronous. Actual support for async calls to the quantum engine API is in the works here: #5219.
Separately, I do think we should refactor the lambdas in the circuit serializer code.
