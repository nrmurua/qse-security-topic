Is your feature request related to a use case or problem? Please describe.
IonQ device supports arbitrary 1 and 2 qubit gates and provides decompositions to hardware native gates. However, for gates with > 2 qubits, it simply raises an error:

Elsewhere (for eg, in Google's Sycamore device), we tend to fallback on the default decomposition strategy, if available, for such operations.

I wonder whether it's a conscious choice to not rely on the default decompositions or it just got missed ?
Note that, so far, the default strategy to define composite operations in Cirq is to create a new gate with specified decompositions to simpler gates. Some examples of such gates are QuantumFourierTransformGate etc. Ignoring the default decompositions leads to not supporting such composite gates, which is bad? For eg:
The above code works fine for num_qubits = 2 but fails for num_qubits > 2 with the following error:
The error message should also be fixed as it's not an f'string :)

What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
cc @dabacon
Discussed in Cirq sync: This could be added because other APIs have it.
Adding @tanujkhattar as assignee since he is looking at updating transformers now anyway.
+1 to this ticket, I think like you mentioned, not including default decompositions was a bug, not a feature.
Passing over to @Cynocracy please yell if you want help on any of these ionq issues.
This is fixed by #5479
