An error is raised:
Since numpy is used extensively in scientific programming, the type checking should not be as strict.
Change line 89 of register.py from:
to
@bjader I agree, please feel free to push a PR with your suggested change (probably with a unit test covering passing a numpy int in), it'll be an easy approval :)
Great, I'll get round to it over the next few days! Looking forward to my first PR
Why not use the Python numbers library here?
@nonhermitian In what way? Does the numbers library have a common type between python ints and numpy ints? I'm not familiar with the library.
Edit: Aha, as such?
Everything should be a numbers.Number
But floats and complex are also numbers.
I think the approach should be trying casting to int before the type check. My 2 cents.
isinstance(foo, numbers.Integral) and 0 <= foo < len(self) should cover those cases.
Agree, in general, try/catch is more pythonic (and would simplify implementation), but would leave gaps for users who are new to python. e.g. int(3.5) == 3.
Actually, numbers.Integral evaluates to False if passed a complex. So using Integral should be fine I think.
If another user wants to make the change / pull request please feel free. Unfortunately, I've become swamped since the pandemic.
Hi, I am keen to contribute to solving this as my first issue. Can I work on this?
Yes that would be great! Do you know where to start or do you need a hand? 🙂
Thank you!
I changed line 120/121 of register.py from:
to
as suggested above and it works:

Can I make a pull request?
Can you use numbers.Integral instead, as it also covers other integer types? I.e.
Yes numbers.Integral works too
Then you can open a PR 👍
Thank you, just opened a PR!
