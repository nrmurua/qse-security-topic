Hi, I'm working on gathering benchmark data for different quantum circuit optimizers. I'm running PyZX's optimizations using the script here, which calls both full_reduce and full_optimize.
I noticed that full_optimize produces different outputs on different runs. For example, on this input circuit I got the following gate counts over a series of 5 runs:
I just wanted to confirm that this is the expected behavior.
In the documentation you have a note that says that phase_block_optimize (used by full_optimize) "will give wrong output when fed smaller rotation gates, or Toffoli-like gates" -- what does this mean? I want to make sure that I'm not passing full_optimize invalid inputs.
Also, please let me know if you see any other problems with my script for running PyZX.
Thanks!
full_optimize uses the TODD routine, which is indeed not deterministic. This is deliberate as it makes is possible to find better results by running the algorithm several times. If you are willing to do some manual digging to make it deterministic, in the todd_iter function in pyzx/todd.py there is call to random.shuffle. If you remove this it should become deterministic.
I see in your script that you call to_basic_gates, so that converts all the Toffoli-like gates into basic CNOTs, Hadamards and phase gates, so that works fine as an input to the optimization functions. The TODD optimisation step used by full_optimize only supports phases that are multiples of pi/4. If you give it, say, sqrt(T) gates, like pi/8, then it will produce garbage.
Thanks!
