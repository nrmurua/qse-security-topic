Unlike every other gate, with cirq.X, cirq.Y, and cirq.Z, it's very easy to end up with an instance of a class that is not importable from top-level-cirq
consider renaming to PauliX and exposing as cirq.PauliX
Actually, this happens with a lot of singletons and is probably by design. Running into this when trying to automate testing for #1880
Do we know this is the right pattern?  We don't use singletons anywhere else and this is a pattern that may confuse a lot of people.
There's a couple other places:
I would omit the _Union types from consideration, since they are just shorthands for type annotations.
I am not opposed to making the singleton value types public. They pollute the autocomplete namespace with strings that are not useful to users, but on the otherhand it makes sense that if an instance is public then its type should also be public.
For the purposes of #1880 automated testing, it no longer matters to me.
The _Union types are not ours, but shows that even the python-powers-that-be sometimes gives you an instantiation of a private class
Here's all the singletons, for reference
I don't mind many of these Singletons in this long list, though I do think that they should follow style guidelines and be CAPS (ignore union types as Craig said).  UnconstrainedDevice, reset seem to violate this.
The thing about Pauli is that I don't see why we shouldn't just have the XPowGate, and, in the case where the exponent is such that we have and I or and X the methods that Pauli supports are used?  In looking over pauli_string I don't see a great reason for this.  We could also make this a proper interface, and this would allow code to still spot that the object is potentially a Pauli by class and then by calling a is_pauli method.
I do think that they should follow style guidelines and be CAPS
xref #2011
I'd generally push back against any further consolidation into them being gate-like. I'm still not fully convinced that there shouldn't be two separate things: X-the-gate and X-the-operator. It's pretty rare to have a case where you want to take one thing and use it both as an operator (Hermitian) and a gate (unitary). In fact, most of the time when you have an X-the-operator, you convert to an associated gate by exp[i t X-the-operator].
The only commonality is the matrix representation, so you'd want to call cirq.unitary(X-the-gate)  or cirq.unitary(X-the-operator) and get the same answer; but this also gets confusing in the latter case because you're not requesting a unitary matrix. You really need a Hermitian matrix.
I think it's fine that they're private
