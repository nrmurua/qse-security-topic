results in
Subsequent runs then fail even without the metadata because 2 rows with the same run_id are created
fails with:
I would like to add that this issue persists, and also extends to attempting to add any metadata which is a sequence/set/iterable. For example, running the same code as in the original issue statement, but with the inner set replaced by a tuple or set or list produces the same error.
(This is of interest to me because I would like to be able to add multiple tags to measurements -- eg. 'calibration', 'published', 'good', 'erroneous', 'DC', 'RF', and so on)
@cprosko Thanks for your comment, For your usecase I would probably suggest serializing the data that you want to store inside the given metadata field using json similar to how we are doing the snapshot. We could probably think of a more elegant way to do that but this bug is mainly about ensuring that we fail in a meaningful way if you try to add nested fields as metadata
Hi Jens, thanks for the quick response. Sorry for my ignorance, but are you suggesting that I use some external functionality to QCoDes to save the information I want in json? Or is there some functionality within qcodes to accomplish something similar?
The reason why this functionality is important to me is because I aim to expand upon the measurements inspection widget developed by Bas Nijholt to enable filtering by different tags. In the best case scenario, a database would store these tags on each dataset, such that the proposed widget can load a database file and immediately sort/filter in this way. As such, it seemed logical to store the corresponding filtering tags, etc., in the metadata of each dataset.
As a final question then, is it important that DataSets cannot have lists of strings as metadata entries, or could I propose this as a feature request?
Thanks for your time, cheers.
Hi, This is as far as I can see a limitation of sqlite in the form that we use it. A field in the table can only be a primitive type (number string etc) not a sequence. We could extend add / read metadata to try to use json to automatically pack / unpack lists
Thanks for getting back to me. I understand the issue better now. I need to make this work for my purposes, so in the meantime, for these 'tags' I could do a hack solution of simply adding keys to the metadata such as 'tag_' with an empty value, such that tags can be added and searched with functionality as is.
Would you suggest though, making this json packing/unpacking idea a feature request? Thanks!
