Identity is a unitary. We probably want an explicit representation for it in cirq.
Rationale:
Some things to consider in implementation:
should display as
or
@Strilanc and I talked about this and I think we generally agreed that we need an identity.  This is one of the reasons for #1291 : for the channel case you really want an identity gate that can operate on multiple qubits.
I'm happy to work on this if you all agree on that it should be implemented.
Hi @viathor, I got started on implementing the identity gate. A question regarding the equivalence to other gates. At the moment, two gates of different classes will not be equal in Cirq even if they have the same effect. E.g. cirq.X**0 == cirq.Y**0 returns False (via the @value.value_equality decorator). I guess one could compare the unitaries of two gates, and if they are equal, call the gates equal as well. Do you have any input on how to evaluate the equivalence?
Yes, gate class is currently part of the comparison key which makes this a little tricky. Have a look at what we're doing for PhasedXPowGate (see __new__()). I imagine this should work for identity gate, too?
Thanks, that worked. I'm making good progress on this in general, but I have a one more question before I make a PR:
How do you want to handle multi-qubit identity gates such as cirq.CZ**0? At the moment, the identity gate that I implemented is a SingleQubitGate with the unitary [[1, 0, [0, 1]]. It would of course by easy to create a two-qubit version as well, or should I try to create a general N-qubit identity gate that adjustes  according the number of qubits?
Yeah when I did the identity gate PR I ran into this multi qubit problem which is what caused me to open #1291   I think we need to decide on this to unblock this.
I think displaying it as empty isn't quite correct?  Putting identity gates into a Moment is sort of saying "do nothing here and block anything else from happening here).  If you don't show it then you will end up having odd things where you don't see that the identity gate is in a particular location.
I am completely happy for identity to not equal CZ**0. If you wanted to compare functionality, you'd say cirq.unitary(...) before doing the comparison.
#1333
Things we should probably prioritize:
Refactor Pauli to include identity.  It's strange to have a Pauli representation that is only X, Y, and Z
Is there additional functionality we want from the Identity gate as it stands?
Already done
