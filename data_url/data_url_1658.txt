One of the things I've seen people asking for on the quantum computing stackexchange (w.r.t. qiskit) is how to measure a pauli product. This is something we can add relatively easily to cirq.
All we need to do is define a PauliStringMeasurement class that extends cirq.Operation and stores a Pauli string and a measurement key. Give it a _decompose_ method that applies Clifford operations which reduce that Pauli string to a single qubit's Z observable, measures that qubit, then inverts the Cliffords. It's now a working Pauli product measurement operation.
Once we have that operation, we can add a case to cirq.measure so that calling cirq.measure(cirq.X(a) * cirq.X(b)) produces that operation. At which point we have a very clean answer to "how do you measure a Pauli product": "you append  cirq.measure(pauli_product) into your circuit".
@mpharrigan Is there a light weight way of achieving this with the Observable Measurement framework? Or do you think a PauliMeasurementGate / PauliMeasurementOperation would be still be useful ?
Related: #942
The observable measurement framework presumes a state-prep-and-measure approach. In particular, it doesn't invert the cliffords post-measurement. This could be useful. The observable measurement framework could learn about it and use that as a different way of inputting what you want measured.
Following up from the discussion on #942, a parameterizable PauliMeasurementGate seems like the right way to go -- it can be used for measuring different observables in sweeps and also avoids adding another new operation to the already convoluted gate/operation relationships.
However, there's a problem that ParamResolver currently only supports resolving TParamKeys to TParamVals , which is Union[float, sympy.Basic]. Hence,  cirq.resolve_parameters(pauli_measurement_gate, {'var' : cirq.X}) wouldn't  work as of now.
We'd also have to extend the param resolver and add support for resolving parameters to cirq gate types.
Cirq Sync:
