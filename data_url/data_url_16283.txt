Currently, OpenPulse (and Qiskit Pulse's implementation https://arxiv.org/pdf/2004.06755.pdf) only supports playback of AM (amplitude modulation) waveforms on a given Channel. It does allow for e.g. SetFrequency/ShiftPhase/etc. instructions, but that only allows for discrete frequency and phase modulation, not continuous.
There has been significant theoretical & experimental work on using FM (Frequency Modulation)/PM (Phase Modulation) gates for quantum computing, and each type of modulation has its own use case. Small sampling of papers from a quick arXiv search (encompassing pretty much all quantum platforms):
Ideally, as a platform-independent waveform specification language, OpenPulse/Qiskit Pulse should support continuous Frequency/Phase Modulation just as it does Amplitude Modulation.
I assume that there are compatibility issues with the IQX/IBMQ waveform hardware in supporting continuous FM/PM gates (hence why the frequency & phase modulation is currently discrete).
I think this is a great idea for an extension platform-independent capabilities of OpenPulse. As you note if added to Qiskit our hardware would only support the instruction if we added support for it, however, that should not limit what Qiskit is capable of support.
Channel abstractions. They might need independent sub-channels for Frequency/Amplitude/Phase.
Schedule Drawing. Some way of showing how frequency & phase vary over time (not just amplitude) would be needed.
This is the blocker I currently see as well. Currently, we only support executing a single instruction per-channel at a time (instructions are not allowed to overlap). This is tricky as while we can think of AM/FM/PM as three different ways of emiting a pulse, at the end of the day they all consume the same physical resource. We should brainstorm how this could be represented and implemented in a way that doesn't break backward compatibility.
Some ideas:
Any thoughts would be much appreciated.
@taalexander thanks for the response. I wasn't sure if this belonged here or in https://github.com/qiskit/rfcs and wanted to gauge interest first.
For context, my interest in this is because I have a hardware waveform generator that has individual & continuous control of the AM, FM, and PM channels, so describing waveforms in OpenPulse as essentially AM-only reduces its capabilities.
Personally, I would envision that only one instruction per MODULATION channel would be permitted. For example, consider an AWG channel. Each of AM, FM, PM can be modulated simultaneously and continuously, though they output to the same channel. This capability currently can't be expressed in OpenPulse.
Regarding ideas above:
I would lean away from this. I will expand more in 2.
I envision something more like this. So a continuous FM gate could look something like:
a. Play() might then run the checks for scaling on different channels (that is, while AM channels can obviously scale abs(amp) in [0, 1], the frequency can scale e.g. [-100 GHz, +100 GHz]). This could be implemented by each waveform/ParametricPulse having a check_[am, fm, pm]() method.
b. As for interpreting these channels, I wouldn't see the user (submitter)-end compiler doing much with these pulses, other than validating that they match the capabilities of the backend. That is, they would be submitted to the backend as separate channels, and it would be up to the backend to combine them into the single output channel as appropriate (trivial for the above AWG example). Obviously, some PulseBackendConfiguration values to specify capabilities would be required.
While this would be a clean representation, it doesn't encompass all existing gate schemes. For example, see Fig. 3a of https://arxiv.org/pdf/1905.10421.pdf which simultaneously modulates AM & FM. So while this would be a step in the right direction, I don't know if the major refactoring that would require is worth the cost.
The discussion above is interesting and did not reach a conclusion, but I'm going to close this feature request for now due to lack of continued interest.  I believe qiskit.pulse has changed quite significantly since this discussion, so not everything said may still apply (I'm not an expert on the pulse module), and further work on OpenPulse as part of the OpenQASM 3 effort may also have affected things.
I'll close this now as I don't believe it's something that any maintainer could commit to implementing or shepherding a full project through, but that's not to say discussion on it needs to stop.  If there's more to say, or someone willing to put in the time to design this addition properly in collaboration with other interested parties, please open a new issue for discussion.
