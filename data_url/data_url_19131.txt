We need a complete set of example notebooks that covers all use cases of the package.
See https://krotov.readthedocs.io/en/latest/contributing.html#contribute-examples for how to add notebooks.
Based on today's discussion, we want at least the following examples:
We will skip the example for a state-dependent constraint, as this functionality will not be added for version 1.0.
This is a meta-issue tracking the open issues for each of the example notebooks. See also the associated project: https://github.com/qucontrol/krotov/projects/1
I should add that you can run a notebook server for working on the notebooks by running  make jupter-notebook, see https://krotov.readthedocs.io/en/latest/contributing.html#developers-how-tos
One thing that is currently implemented, but that we don't yet have a test or an example for is time-dependent Lindblad operators. @Basilewitsch, I have a vague recollection of you working on a project hat was doing optimal control with time-dependent Lindblad operators. If so, it might be worth adding an example notebook for that, too. I wouldn't consider it a high priority, though, for a version 1.0.
In commits f9f8d89 and 09f47e1, I've added some new methods that should make it easier to propagate either the guess controls or the optimized controls. This is illustrated in the example notebook at https://krotov.readthedocs.io/en/latest/notebooks/01_example_transmon_xgate.html
You can use nice qm-specific tex macros like \ket{\Psi} instead of \vert \Psi \rangle in the example notebooks: https://krotov.readthedocs.io/en/latest/contributing.html#math-in-example-notebooks
If your notebook throws an except because some feature that you need is not implemented yet, you should mark the cell where this happens with # NBVAL_RAISES_EXCEPTION, and still commit the notebook. See https://krotov.readthedocs.io/en/latest/contributing.html#how-to-commit-failing-tests-or-example-notebooks
Should we maybe add the packages necessary for the notebooks to the 'requirements' variable in setup.py?
I just had some "problems" with the notebooks and a freshly installed version of Krotov. Or at least add a note about the notebooks to make it easier for Python beginners to get started?
Packages required only for the notebooks should go into dev_requirements, but not into requirements. What package were you missing?
Note that if package requirements change, you may have to run make clean locally.
Only matplotlib and watermark. Of course, it is easy to install them in addition. From the end user's point of view, however, it might be frustrating for python beginners if they cannot run the notebooks even though they followed the instructions in the 'Installation' section.
I've added a half-sentence to the the README to clarify this.
By definition, "requirements" (install_requirements in setup.py) are only those packages required to install (and import) krotov, see also the setuptools documentation. This does not include any packages that are necessary or useful for testing/documentation/examples. The convention is for those packages to be listed in setup.py as "development requirements" (in extras_require).
When you're working on the notebooks, I recommend that you start the notebook server from the Makefile. This uses the same virtual environment that is set up for the automated testing, and will fulfill all requirements. See How to run a jupyter notebook server for working on the example notebooks and my earlier comment.
Two quick notes on writing math in the notebooks (@karl-horn, @FernandoGago):
I already fixed in the most recent commits, so this is just for future reference (and for @MatthiKrauss  in #11)
The last point I did it on purpose because I was having some troubles when compiling the notebooks. These equations in the documentation where not properly showing on my computer when using \begin{equation} (not really sure why, I even added the blank lines), and this minor tweak fixed the problem. I didn't know there was any difference between the spacing.
Not a problem! It actually might be that the proper spacing is really due to putting a blank line before and after the equation. When you open the current notebooks (with \begin{equation}...) locally, they do work for you , right?
Sorry that this mixing of Markdown and LaTeX in notebooks can be a bit finicky sometimes.
I have thoroughly edited all example notebooks over the past week to the point where I'm happy with them for publication, so I think this issue is ready to be closed. The edits include some rather substantive changes to the structure and details of the optimization in some cases. It would be great if everyone could review the notebooks that they originally contributed and let me know if they have any further comments or suggestions. Also, if you find any typos, please go ahead and fix them.
