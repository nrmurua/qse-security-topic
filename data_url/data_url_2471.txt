I was talking with @ncrubin and @mpharrigan about displays, and they made some good points against them. Mainly it comes down to: this feature has a ton of engineering complexity, but cover a lot of use cases outside of what researchers actually need to do. We would likely be better served by, instead of a "compute_displays" method where there can be a series of displays strewn throughout the circuit, having an "estimate_observable" method that specifies a single observable we would like to apply to the output of the circuit.
So the proposal is:
@dabacon @kevinsung
to take an observable instead of searching in the circuit for displays
I think this is a really nice consequence of constraining displays into observables
@babbush @john6060 @jarrodmcc
I think this is a nice idea. But when you say "don't allow observables to be added into circuits", what do you mean exactly? Do you mean that all observables will be understood to be taken at the end of a circuit? While this is appropriate for most of the early NISQ experiments, eventually we'll want to be able to schedule measurements during a circuit. I realize that fast feedforward is still years away - that's not what I'm talking about. I'm talking about some scheme like (https://arxiv.org/abs/1711.07500) where measurements during the circuit are used to create dissipative maps that extract entropy. Its something I expect we'll want in the next couple years.
Also, I do think that while doing classical simulations it will often be a useful debugging tool to be able to request expectation values at intermediate parts of the circuit, even though that is clearly not practical to do on the chip.
eventually we'll want to be able to schedule measurements during a circuit. I realize that fast feedforward is still years away
Displays cannot be used in that way. Later parts of the circuit do not have access to the statistical result that was computed by the display during its associated sampling runs.
it will often be a useful debugging tool to be able to request expectation values at intermediate parts of the circuit
Yes. But that functionality can be emulated relatively easily by a user submitting the first half of a circuit.
Here is some rough prototyping code:
it will often be a useful debugging tool to be able to request expectation values at intermediate parts of the circuit
Yes. But that functionality can be emulated relatively easily by a user submitting the first half of a circuit.
I don't know if this is the right place to discuss this, but do you have an interface in mind for simulating part of a circuit, resolving expectation values, then picking up simulation where it left off to continue?
This functionality would improve efficiency for measurement of noncommuting observables. e.g. to measure <X0 + Z0> the simulator should run the circuit to do sampling on  (and return an output wf), and then just apply a Hadamard to the output wf to do sampling for 
A version of this exists in pauli_sum_collector for samplers.  I'm going to close this, because I think we are moving to that pattern, though there is still work to be done there.
