One should not be forced to define EigenGate to have basic gate functionality in Cirq. 99.9% of users will never raise a gate to a fractional power and will find EigenGate terribly confusing. However, taking the inverse of a gate should be simple and should not require EigenGate. In the case of KnownMatrixGate, the gate inverse should be inferred directly from the matrix.
Note that we do have SingleQubitMatrixGate and TwoQubitMatrixGate for exactly this purpose. The problem is that the concept does not generalize in a nice way to larger gates (3 and 4 could probably be done, but we'd need better auto-decomposition code).
Here's an example scenario. You, the user, start with a QFTGate where the author forgot to specify an inverse. When you ask for the inverse, you get an SuperGiganticExplicitValuesMatrixGate without realizing it. You pass that into some code, which happens to also compute the inverse. The inverse of the inverse should be the original gate, but instead of being a QFTGate with a nice efficient decomposition it's another SuperGiganticExplicitValuesMatrixGate. And when that gate is decomposed into the available gate set, you find that the circuit has a crazy number of gates. The code doing the matrix-to-circuit decomposition didn't realize it was a QFT matrix, so it used a generic strategy that was exponential in the number of qubits instead of quadratic in the number of qubits.
These kind of issues make preserving type information about the gate very important. Having KnownMatrixGate automatically produce an inverse does not preserve enough type information. An example of something that does an okay job of preserving the important stuff is ReversibleCompositeGate. But it's still not ideal. The inverse won't have a matrix, for example.
This issue is stale as these gate classes no longer exist (pre protocols).  We have a __pow__ protocol and MatrixGate implements it by default.
However +1 to users not using powering of gates, we should really audit some code to see how useful powering is, a lot of the research code I have looked at does not use this.
