@benoitseron Any idea to solve this? Perhaps another command than @test_nowarn or remove the warning in case it is no more useful
The point is, @nowarn is quiet relevant here as some test in the examples usage are meant to fail.
I'm not sure why you would need @nowarn? Where do you use that exactly? I think warnings are quite important in our code so removing them would be losing some info for users.
A simple @test would not be useful as it would break (most of the time) because of @test pb/ppd > 1. for instance (line 34 in example usage)
But in these cases it doesn't need to break, just warn
If we use @test for the examples usage file, the fact that @test pb/ppd > 1. fails leads to an additional error in @test example_usage.jl. Using @test_nowarn would take care of this but still gives an error due to some warnings.
Whether we use @test or @test_nowar, running example_usage.jl leads to failures in the test report that are not relevant.
Well this @test pb/ppd > 1. shouldn't fail no? Except for the special counter example
Oh right I thought it was not fixed yet. Well, I don't see where the error comes from then. By running example_usage by hand, everything works fine indeed but still returns an error in the @test.
Ok I got it!
