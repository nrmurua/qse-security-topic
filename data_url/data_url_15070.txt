When unitary_synthesis is called with a particularly restrictive basis_gates, it seems to generate a None output as best_synth_circuit, which makes optimize_1q_decomposition raise.
work or nicer error
No response
Notice that transpile(circuit, basis_gates=['rx', 'ry', 'rz']) works, and returns:
The immediate cause for why it doesn't work is because ['h', 'rx'] isn't a combination that we have a synthesis routine for.  There are no syntheses found, and the pass should return an error.  Of course, we should catch that case and return a good error rather than this one, though.
To be clear, I mean UnitarySynthesis or the totality of the synthesis steps should return the error - it's part of the contract of that internal method of Optimize1qDecomposition to return None if it couldn't find a synthesis.
Fixed by #9843.
The immediate cause for why it doesn't work is because ['h', 'rx'] isn't a combination that we have a synthesis routine for
even when the synthesis result is a single RxGate?
How would you know that the synthesis is a single rx gate without a synthesis routine that can target the general basis?
I see.. so UnitarySynthesis needs to validate that you provide a "universal" basis? It is possible to do that?
Whether you need a "universal" basis depends on the synthesis plugin you're using.  The default one has a variety of possible universal 1q decomposers, but your basis set has to be a superset of at least one of them to work.  These are the available decomposers:
