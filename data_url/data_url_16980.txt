The definition of an Isometry instruction does not always have the same number of qubits as the original instruction. e.g.
This also occurs for a handful of the examples from https://github.com/Qiskit/qiskit-terra/blob/576b984/test/python/circuit/test_isometry.py#L36 . This confuses e.g. DAGCircuit.substitute_node which expects node replacements to keep the same shape.
Do we just need to expand IdGate to be multi-qubit? Or should we just stop treating the identity as a special case when decomposing?
Do we just need to expand IdGate to be multi-qubit? Or should we just stop treating the identity as a special case when decomposing?
One solution would be to have Isometry include an IdGate per unused qubit, which would bring it into line with the definitions of other gates (as would including a custom multi-qubit identity instruction.) I wouldn't necessarily want to make IdGate directly multi-qubit (to solve this problem), as there are already ways to generate multi-qubit Paulis.
I'm not quite convinced this is really a bug, is it? I would imagine that if you have a gate defined on a set of qubit but it doesn't actually do anything then shouldn't it decompose to no operation at all? ðŸ™‚
I tend to agree with @Cryoris , maybe it is something that substitute_node can be better at?
I don't think this is an issue anymore (though I'm not exactly sure what's changed to resolve it). If I try to reproduce the original issue:
it looks like Isometry no longer generates Ids on some of the qubits (which was weird, but not necessarily a bug). If I try to reproduce the original substitute_node_with_dag issue:
things behave as expected, so I think this can be closed.
