See the thread open-quantum-safe/boringssl#64 for the description of the issue and a suggestion for a fix.
Tagging @dkostic : I can't reproduce myself unfortunately as I either don't have AVX2 and AVX512 or have both in my test hosts but from reading the code the report looks correct: There are AVX512 runtime checks in place, but no(t enough) such guards seem to be in place in the CMake files: For example, gf2x_mul_base_vpclmul.c in code activates/defines AVX512_INTERNAL but (that file) is not on the list of AVX512 sources as per these CMake instructions.
@baentsch, I made two simple changes in the CMakeLists.txt file and got it working.
Maybe different CMake versions have different syntaxes? I'm using CMake 3.10.2
The semicolons indeed look fishy: I'd think those options are passed as-is to the compiler and semicolons indeed may cause issues. Even more importantly, this observation is clearly true:
Maybe different CMake versions have different syntaxes?
Well, it seems COMPILE_OPTIONS doesn't even exist in 3.10: See https://cmake.org/cmake/help/v3.20/prop_sf/COMPILE_FLAGS.html . From this documentation perspective, it seems using COMPILE_FLAGS is more safe, indeed (and we use COMPILE_FLAGS in other parts of liboqs, too). @dkostic , @jschanck : Any objections to switch to COMPILE_FLAGS in BIKE (to also support older cmake's?):
@geovandro: Thanks a lot for the investigation: Would you want to submit a PR?
Thanks for the CMake observations @baentsch, so I think we nailed it. I would be happy to submit a PR. I will wait for the others confirmation first.
Thanks for fixing this @geovandro!
@baentsch No objections to switch to COMPILE_FLAGS. I think this is what we had to do in s2n as well because of the CMake version they are using. Sorry for the confusion!
