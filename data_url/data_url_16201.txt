Since 7972d6c9 merged a few regressions have been tagged by the benchmark suite. These are both runtime such as:
https://qiskit.github.io/qiskit/#transpiler_qualitative.TranspilerQualitativeBench.time_transpile_time_qft_16?machine=dedicated-benchmarking-softlayer-baremetal&os=Linux%204.15.0-46-generic&ram=16GB&p-optimization%20level=3&p-routing%20method='sabre'&p-layout%20method='noise_adaptive'&commits=7972d6c9
as well as depth of the output:
https://qiskit.github.io/qiskit/#transpiler_qualitative.TranspilerQualitativeBench.track_depth_transpile_4gt10_v1_81?machine=qiskit-benchmarking&os=Ubuntu%2018.04&ram=16%20GB&p-optimization%20level=2&p-routing%20method='stochastic'&p-layout%20method='noise_adaptive'&commits=7972d6c9
This is unexpected both because retworkx.PyDiGraph.neighbors() should be faster than retworkx.PyDiGraph.adj so a runtime regression is the opposite of what's expected. But, what's more concerning is the depth regression because the output should be identical between the two methods since they're using the same internal methods in retworkx, it's just a difference in return format.
Before we release 0.17.0 we should get to the bottom of these or revert 7972d6c9
Is this solved? The times seem to come back to normal after 070f9e2
However, depths are still above those before the introduction of 7972d6c. I've noticed that in the removed TODO it says:
Replace with neighbors_directed() after...
I'm unsure if this could be the cause of the problem but, in the commit, it is replaced with neighbors().
Ok. The problem comes from the fact that neighbors() returns an iterator with duplicated entries (expected for multigraphs) while the keys in adj() are unique. Here you can see a comparison between the data returned while using adj() and neighbors():
From the change in the data structure, you can expect longer searches too so it could also explain the regression in time. In the case of line 124, where the result is used to check membership, the semantics are preserved and it does not matter using one or another although the search time is expected to be longer.
Considering the case for the loop in line 198, it is driven by the data in the iterator and so, the input data differ depending on the method used.
I'm preparing a PR to address the change in semantics in Terra since I believe this repetition is desired in retworkx. If not, I'm happy to provide a patch for the graph library too. Let me know.
@delapuente nice catch! Yeah the fix in #5847 is how I would go about this on the terra side. I do think this is actually a bug in retworkx's neighbors() method though. The method is supposed to return the node indices of all neighbors for a given node, returning a list with repeats for each edge in a multigraph seems less than desirable because it differs from user expectations. If you don't mind pushing a retworkx fix to ensure a unique list of nodes for the output of neighbors that would be great.
As an aside for 070f9e2 that was likely corresponding with the release of retworkx 0.7.0 which introduced the custom NodeIndices return type in retworkx. Since we don't have pinned versions of retworkx (or other dependencies) we often get random commits that start pulling in a new version with a performance fix. For example: https://qiskit.github.io/qiskit/#passes.PassBenchmarks.time_optimize_swap_before_measure?commits=c7bcffb5 was the release of retworkx 0.4.0, it just happened to start getting pulled in with a commit that fixed matplotlib compatibility.
