Currently, measurement in OpenPulse is often done by getting the default measurement schedule from the CmdDef:
This isn't ideal because it will stimulate measurement on all qubits.
More convenient would be to be able to do
where measure_qubits is a utility function exposed within pulse and qubits_to_measure is a subset of all qubits. Only the qubits in qubits_to_measure will have a measurement pulse. All qubits will still have to be acquired according to the meas_map.
The implementation may be similar to changes in the scheduler which have been started here:
#3415
This won't work currently. The measurements need to be done all together which is why the backend cmd_def reports the measure command like that.
@ajavadia -- the Acquire command does need to have all qubits acquired at once, as you say, but not all qubits need a stimulus pulse. this would allow you to measure only a subset of the qubits (although acquisitions will be done according to the meas map, which usually means all qubits)
oh ok if this works then we should do it as it reduces job size substantially.
This is a feature that should exist, but it's use should be configurable during scheduling. In some cases this might cause calibrated discriminators to behave poorly if they were calibrated with measurements on all qubits. In the long run we may have to build the capability to support target dependent scheduling passes.
What behavior do we want for this? My suggestion is to have the following
We could also think of a mechanism that simplifies the measurement schedule. For instance, measure only the qubits that are involved in the schedule (aside from Acquire commands) as long as it does not, for instance, mess up the discriminator that will be used.
This sounds good to me.
As noted by @SooluThomas this is related to #3572.
Any update on this @SooluThomas?
from #3572 :
@taalexander
What is the expected enhancement?
During scheduling, there is a method get_measure_schedule which is defined within the function. This is generally a useful method and should be redefined as a standalone function that is called during scheduling.
From #3700 (me):
It would be nice not to have to build a measurement schedule up every time. It's usually the same thing every time: measure some qubits, or measure all qubits. This requires a backend with pulse enabled.
Measuring only a couple qubits, building the pulses
or measuring all of them, with info from backend defaults
Whatever API, the method should do something like what the scheduler does: take the default measure command, and remove the extra measurement pulses. Unlike the scheduler, this method can just do a trivial mapping from qubit index to MemorySlot (at least for this issue).
Edit: Rather than duplicating what the scheduler does, this should do what @taalexander suggested in #3572, pull out the functionality from the scheduler, and call it from the scheduler. Allow users to call this same function to satisfy this issue (which #3700 only duplicates)
Any update on this @SooluThomas?
I am starting to work on this.
