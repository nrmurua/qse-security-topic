I saw this in their docs and found it helpful:
The QVMConnection and QPUConnection objects have their compiler interactions set up in the same way: the .run and .run_and_measure methods take the optional arguments needs_compilation and isa that respectively toggle the compilation preprocessing step and provide the compiler with a target instruction set architecture, specified as a pyQuil ISA object. The compiler can be bypassed by passing the method parameter needs_compilation=False.
Here is a small example/code snippet using a 2-qubit circuit:
where for this example I used Acorn's ISA.
Do you always need an ISA from a real qpu? Is it possible to simply compile the optimum number of gates on a virtual qvm where every possible basic 2-qubit gate is enabled?
@wanqizhu you can use the pyquil.device.NxDevice feature to create an ideal all-to-all connected QPU. Here's a small example on how to do this:
Sweet thanks!
