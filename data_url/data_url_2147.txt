I was discussing this idea with @Dstrain and @maffoo and @MichaelBroughton and got a surprisingly positive response. So I want to bring it up as a thing we should consider doing.
Originally, we added Schedule as a way to have a finer degree of control over the hardware. But over time the following has happened:
Even when calling actual hardware, users have stuck with Circuit. We haven't had anyone complain about lack of flexibility with Circuit as far as I know or can remember. It seems like Circuit is sufficient.
Schedule has received very little work over time, and so it is in janky bit-rotted state. For example, it didn't even have a _unitary_ method until very recently. We would have to invest significant effort to make Schedule good.
Using Schedule is very easy to get wrong in the context of real hardware. There are often soft constraints like "after X you can immediately do Y, but you should wait T nanoseconds before doing Z". Coming up with a format to represent all of that and achieve optimal performance is a hard ever-deepening task.
Overall, it seems like we are being pulled towards just Circuit as the right level of abstraction.
I'm particularly interested in opinions from @dabacon and @mpharrigan .
For the record, I vote yes in dropping this functionality.  The schedule is too detailed of a level of abstraction and is nearly impossible to schedule correctly or efficiently.  I do not think we should support this level of control.
Having the WaitGate should mitigate many use cases that would have previously needed a schedule.
So one thing people haven't done, which I sort of expected, is to pack things a bit tighter than the Circuit allows (if you have gates with differing times).  WaitGate doesn't cover this case.
But this reminds me of an idea that could mitigate a bunch of these ideas: what if we added to operations instructions about when to schedule them, i.e. if you have "open time" before your gate, you can slide into this window.  Some sort of fine gained control like this might satisfy everything we can do with schedules and would cover, with WaitGate, a lot of cases.  If we were able to cover these cases with something like this, I'd say getting rid of scheduled operations sounds good.
I think it will be simpler to modify Circuit to have any currently missing functionality than to attempt to repair the neglect we've had for Schedule up until now. I vote in favor of dropping it.
what if we added to operations instructions about when to schedule them, i.e. if you have "open time" before your gate
Are you referring to relative placement within a moment, or are you referring to tight overlapped packing between different moments?
@dstrain115 this kind of timing information might be the sort of thing tags would be good at. You should consider it as a possible use case.
I'm in favor of dropping Schedule in its current form because it's not really supported. We have some schedule abstractions that we use internally that are really useful, so I could imagine bringing this back in the future if we decide to give people more control over timings, but it needs some careful design.
I suggested this in our meeting last thursday when you were talking about waitgate but I don't think anyone heard. Yes, I think we should drop schedule. If we bring something like it back, we should use (variants of) what the hardware team actually uses like @maffoo suggests
what if we added to operations instructions about when to schedule them, i.e. if you have "open time" before your gate
Are you referring to relative placement within a moment, or are you referring to tight overlapped packing between different moments?
Was thinking of both.
But I agree let's kill Schedule until we really find cases that we can't find a suitable abstraction for moments and circuits.
Verdict: kill it
(as in deprecate it)
