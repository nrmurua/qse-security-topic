Currently has_mixture falls back to has_unitary and has_channel falls back to has_mixture and has_unitary.
This ends up causing on to ask about gates or operations in a specific order for efficiency.  First ask for has unitary.  Then ask for has mixture.  Then has channel.
I think we should either remove the fallback for the has methods (not the fallback to the attribute, i.e. has_mixture should check for _mixture_), or at least add a bool about whether to fallback.
@Strilanc thoughts?
I'm not sure. Would anyone ever actually use that option, other than the internal implementation? I also think that someone seeing this option may think that setting the "don't do unitary fallback" argument means "is this a mixture that can't be expressed as a unitary?" when actually it means "does the class specify its behavior in terms of a unitary instead of in terms of a mixture?".
I think what we should be striving for is that users of these methods always call just one, which represents the most general concept they can use, and the result allows the correct thing to happen. For example, a mixture backed by a unitary should somehow have the same efficiency as if you had directly used the unitary.
I was thinking something like
has_mixture
and
supports_mixture
where the later does a fallback to has_unitary?
No, that's too tricksy with the wording. We need to be explicit, like has_mixture vs specifies_mixture_method_that_returns_not_not_implemented.
It's okay for the name to be ridiculously long because IMO it's an internal method users are never going to use.
This this discussion is obsolete given current code which uses mixture versus channel_mixture.
