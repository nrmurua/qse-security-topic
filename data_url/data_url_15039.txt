EDIT #10008 is a reasonable solution to the following problems for the present.
Trying to get all existing tests to pass, as well as incoming edge cases, and not-so edge cases is turning into quite a game of whack-a-mole. Instead of trying to satisfy existing tests for behavior, I'd like to determine what behavior we are looking for. I poked around issues here, open and closed, looking for a discussion that articulates an high level design. I found nothing.
The following refers to code  in unitary_synthesis.py and in the decomposers. In particular in DefaultUnitaryPlugin. The decomposers are chosen and initialized. Then a loop over unitaries to synthesize is performed, calling one or more of them on each unitary.
A loop over unitaries to synthesize is performed. For each iteration a list of decomposers is generated and each of the decomposers is called on the unitary.
Currently, we require the following in tests. (Some behavior is only enforced in doc tests, but I lost track of that for the moment) But I think something here has to change. I wonder which of these tests ensure desired behavior, and which document existing behavior.
Some ideas
