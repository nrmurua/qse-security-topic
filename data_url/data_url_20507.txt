https://tools.ietf.org/html/draft-kampanakis-curdle-pq-ssh-00
Out of curiosity: Did the IETF draft mentioned above get a revision that's still valid or shall we drop this issue as the spec seems to be expired (?not of interest?)
More current spec https://github.com/csosto-pk/pq-ssh/blob/master/draft-kampanakis-ssh-pq-ke.txt
How much does oqs-openssh deviate from this spec?
How does this compare to OpenSSH 9.0 (sntrup761x25519-sha512@openssh.com)?
Should it be a goal to have oqs-openssh interoperate with OpenSSH (totally for the algorithm above and "in kind" for all others) -- at latest when upgrading to follow OpenSSH 9?
Regarding OpenSSH 9.0 (sntrup761x25519-sha512@openssh.com)
The secrets are concatenated as K = K_X25519 || K_NTRU. More in https://github.com/openssh/openssh-portable/blob/0a8ca39fac6ad19096b6c263436f8b2dd51606f2/kexsntrup761x25519.c#L184
It uses message numbers
as per https://github.com/openssh/openssh-portable/blob/0a8ca39fac6ad19096b6c263436f8b2dd51606f2/ssh2.h#L96
And the string-encoded hash of the concatenation is the shared secret. The key derivation from that is the standard way, that is used for all existing key exchanges. So it is option (1) in https://github.com/csosto-pk/pq-ssh/blob/master/draft-kampanakis-ssh-pq-ke.txt
@csosto-pk Thanks very much for your pointers and explanations above!
Do you (and/or everyone else following this project) think that oqs-openssh would benefit from upgrading to v9 and making available all QSC algs (still in the NIST competition :) in the same way? Any indication there could be wider uptake interest for this (either use as-is or PR into upstream openssh-portable)? Or alternatively, do a "clean-slate" liboqs (KEM-only) PR based on OpenSSH-v9?
Finally, out of curiosity: In which way (if any) does the sntrup implementation in 9.0 deviate from what is in liboqs?
Do you (and/or everyone else following this project) think that oqs-openssh would benefit from upgrading to v9 and making available all QSC algs (still in the NIST competition :) in the same way? Any indication there could be wider uptake interest for this (either use as-is or PR into upstream openssh-portable)? Or alternatively, do a "clean-slate" liboqs (KEM-only) PR based on OpenSSH-v9?
Personally, I think it could wait. Based on what NIST picks OpenSSH or OQS OpenSSH may need to change. Also, still carrying all KEMs now seems like an overkill since we are close to getting the algorithms that we should focus fist. And experimentation is already taking place with the current OQS projects.
Personally, I would wait for NIST and to see what will happen in IETF with draft-kampanakis-curdle-pq-ssh-00. Better for everyone to have a spec to chase after instead of trying to comply with each other. We saw that with the PQ Hybrid TLS draft as well.
Just my thoughts.
Hi @dstebila , @baentsch ,
Now that NIST pick its KEM, are you planning to bring parity between OQS OpenSSH and the PQ key exchange SSH draft?
I would like to test our internal implementation with OQS OpenSSH. I would also try to interop with other PQ SSH implementations as well and indirectly see how well-written the draft is.
Obsoleted by #136.
There is still a missing method from the draft which is not supported in OQS OpenSSH. That is the x25519+Kyber512 one.
I could submit that in a separate ticket, that is not a problem.
