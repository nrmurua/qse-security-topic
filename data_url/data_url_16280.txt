Two independent but related VQE feature requests important for experiments on quantum hardware:
More shots on final cost-function evaluation
There should be an option to increase the number of shots for the final evaluation of the cost function in VQE. For example, in this modern IBM experiment: https://arxiv.org/pdf/1805.04492.pdf, they set the number of shots to 10^4 while VQE was converging, and then increased the shots to 10^5 for the final evaluation at the converged parameters.
Manually tell VQE it has converged.
Some of the optimizers, including SPSA which is the optimizer of choice in modern IBM experiments, do not have a convergence criterion, but instead run for a fixed number of iterations. This can lead to situations where the user separately plots the energy vs iteration so far and sees that convergence has been obtained, but still has to wait a long time (~hours) for SPSA to finish all max_iter number of iterations before a final energy value is returned. It would be nice if the user could tell VQE that it has already run enough iterations and should go ahead and return a final value. This could be implemented for example by catching a single KeyboardInterrupt from the user, which VQE could interpret as an indication that convergence has been reached. In the case of SPSA, the desired effect would be that the current iteration would be abandoned, and the final evaluation (without any +/- perturbation of the parameters) would be run immediately to obtain a final result, without having to wait the extra hours.
For 1. The shots are currently set in the execution environment of the algorithm. In this case the QuantumInstance. Certainly it seems doable to have it re-run with the optimal parameters at a different shot count - the algorithm has visibility to and can set the number of shots as well. This is actually something that can be done today outside of the algorithm by using the optimal parameters as the initial point and say using COBYLA with maxiter=1 and just re-running it with the higher shots (when used as a algorithm input to a application module I get that this is not so doable though so can see the rationale of VQE doing it itself).
Now I think there were other aspects that were changed in that paper e.g. noise mitigation, for the final result - something else to account for perhaps if we are pulling out all the stops to get the best final result when the time comes and Aqua has more than just the measurement noise mitigation that is has today.
For 2.  qiskit-community/qiskit-aqua#862 was raised a while back but the focus has been on other work for the release. Certainly it would be nice if there were someway to terminate early which was what that issue brought up. It looks like Paul was going to give it a shot.
regarding point 1, we need the implementation of a resampling protocol in the evaluation of operators that can also be used for the VQE case. This is important also for chemistry (among many applications). We put it in the backlog and we need to start this implementation sooner than later. @aeddins-ibm if you are interested to contribute you are very welcome.
about point 2, I am not sure if this is feasible and if practical at all since it will also require real time ploting and other features that I am not sure if we want to support within the optimizers. We may be able to implement some criteria for convergence but in stochastic optimization methods (like SPSA) the choice of criteria is not an easy task. I am happy to discuss this further.
Hi @aeddins-ibm, what you're describing above should both be possible now:
As noted above you can do the functions should be doable today. Indeed with the Estimator and an optimizer its easy enough to roll your own VQE that can have that custom behavior built into it - though its doable after the fact with a single execution of the Estimator with increased shots using the converged result params. As such I am going to close this.
