I have a question that is not really a bug or feature request (although it is, perhaps, a request for more documentation). I also don't know if this is the place to ask, please refer me elsewhere if it is not.
I am trying to solve a problem with a time-dependent hamiltonian, time-dependent collapse operators, including calculating two-time-two-operator correllation functions.
My questions are the following:
The documentation only shows the use of square brackets for time-dependent terms. However, tuples also work, but give different behaviour. Is this desired? If its desired, can a description of the behaviour be added to the documentation?
In other words, what, in mesolve and correlation_2op_2t, is the difference between:
H = [H0, [H1, f1(t)], [H2, f2(t)]] and  H = [H0, (H1, f1(t)), (H2, f2(t))]
The same question as above goes for the collapse operators.
And, for me the most important question is the following
3) For the system I try to simulate, I need to implement a collapse operator that is not simply of the shape shown in the documentation, but of the shape C_2 = f(t)\hat{a} + c\hat{b}.
I've tried various ways to implement this, and some seem to work, but I cannot determine with certainty which is correct. Is it:
[C_0, C_1, [[\hat{a}, f(t)], [\hat{b}, c(t)]]]
(where c(t) is a dummy function that always outputs the (time-independent) value c?)
Or is it:
[C_0, C_1, [(\hat{a}, f(t)), (\hat{b}, c(t))]]
Or is it something different entirely?
Thanks for your help!
1, 2: Solvers expect list, not tuple. In a few places, we do not explicitly test for list but only extract the elements, so tuple should behave the same, but it's untested. In my tries with mesolve they seems to behave the same or raise error.
3: c_ops=[C_0, C_1, [(\hat{a}, f(t)), (\hat{b}, c(t))]] should work in mesolve with [(\hat{a}, f(t)), (\hat{b}, c(t))] as the third collapse operator.
Thanks for the fast response! It helps a lot!
As an additional question, with the list of tuples in #3, what happens if it is a list of lists instead?
Regarding 1/2:
In my code, using tuples does result in different behaviour. I cannot (so far) think of a good simple example to reproduce this though, and am hesitant to upload the full code in which I see the difference as it is work in progress.
What I can say is that when looking at expectation values after running mesolve, the list-vs-tuple question seems to not matter, at least for the things I tend to look at. However, when using qt.correlations_2op_2t, the results are very drastically different, and it seems to me that using tuples actually gets results closer to what I would expect to see. But I'm very suspicious of trusting numerical results that arise from using definitions in ways contrary to the documentation.
For 3 I meant to point that c_ops can be complex time-dependent systems by using 3 layers of list in its definition. We only test for list in this situation, but having the last layer as a tuple should work in mesolve.
Tuple are not tested for nested time dependent system anywhere. If they give a different result, it's probably the wrong one.
