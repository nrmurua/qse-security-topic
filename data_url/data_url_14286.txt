The FakeBackends defined in qiskit.provider.fake_provider differ in how closely they mirror the Backends returned by the qiskit-ibm{,q}-provider depending on if they are instances of BackendV1 or BackendV2. For example,
From discussion at the last terra meeting, this was an intentional change as processor_type and related fields were part of the Qiskit's BackendV1 definition but are not included as part of BackendV2 (the qiskit_ibm_provider adds them back as custom fields). This however causes issues for users who use the fake backends as stand-ins for IBM backends for running noisy simulations, testing compilation, etc. and assume that the fake backends represent static replicas of their IBM provider counterparts.
From the discussion, there arose two use cases for the fake backends:
These differ mainly in that the first use case doesn't want to couple strongly to provider-specific behavior like the use of custom properties (to avoid mixing vendor- or provider-specific behavior with base terra testing and implementations) while the second explicitly does want a strong coupling between fake and real backends (to avoid having to write special case handling for the fake backends, or complicate using them to test and validate code before sending to real devices).
The proposed solution involves the following steps:
Opening this issue to consolidate discussion on the above, and track the progress of implementation.
To add a little bit more on point 2 of the plan: if end users want "mock" versions of IBM devices that use simulators behind the scenes, but otherwise are identical in interface to the "real" devices, then those are going to need to live in qiskit-ibm-provider along with the real versions.  It's not feasible from a maintenance perspective, nor from separation-of-concerns nor Terra's backend-agnosticism, if Terra contains ibm-provider specific code.  The term "migrate" probably masks a little bit of complexity, in that if they do move, then ibm-provider will probably want to rewrite the fake backends themselves using roughly the same code as the real ones, rather than actually copying Terra's snapshot-version code and trying to modify it to match.
Another user story we've heard is that they like that the fake backends are accessible even for devices that they don't have access do - not everyone can run stuff on Kolkata, for example, but people like testing all the pipelines and then simulating it.
If getting the fake backends to match the actual device requires moving them to the IBM provider, then I am all for that.  The current inconsistencies, e.g. no backend.configuration() for fake V2 backends, is a bit annoying to work with.  Their inclusion with Terra is probably more legacy than any practical limitation at this point.
they like that the fake backends are accessible even for devices that they don't have access do
This is absolutely something that is important.
I migrated the fake backends last year so I think can help here. The plan laid out by @kdk is very reasonable. So the first step is to introduce generic backends to replace IBM-specific backends for terra testing. Should I add these testing backends to qiskit.test like it used to be before the migration to make it clear that they are for testing purposes?
I migrated the fake backends last year so I think can help here. The plan laid out by @kdk is very reasonable. So the first step is to introduce generic backends to replace IBM-specific backends for terra testing. Should I add these testing backends to qiskit.test like it used to be before the migration to make it clear that they are for testing purposes?
That sounds good to me.
I think whatever fake backends Terra has should still live in fake_provider for the same reasons that we originally moved the testing ones there - people want access to simple backend representations to test their code against.
