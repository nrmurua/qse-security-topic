Our current DAG should not support remove_edge because the API operated through node operations. Being able to remove edges allows to create "invalid" DAGs. I think #1768 should be reverted.
Tagged as wont fix. Fell free to reopen it if think that I'm misunderstanding the issue.
@godott Luciano is right that the "DAG" should be a dataflow graph, showing the wires on which information flows from gate to gate. We need to create a separate "dependency graph" for commutations, but not modify the DAG in this way. A CNOT with one edge will be invalid in the DAG, but ok in the dependency graph.
@1ucian0 But I don't think we should remove the edge detector. That will not create invalid DAGs, and is needed for the commutation analysis to create that dependency graph.
No, that gives an iterator over successor nodes.
Here we want to ask "given CNOT2 is a successor of CNOT1, which wires (qubits) connect the two nodes?"..
Actually maybe just node['qargs'] can be used here. @godott would that work?
@ajavadia I think node['qargs'] cannot be used. One example is that two CNOTs both apply on q1 and q2 but separated by a 1-qubit gate on q1. If you ask gate successor, it will tell you  CNOT2 is the successor of CNOT1. Then If you ask node['qargs'], it will tell you that these two CNOTs both apply on q1 and q2. Then we might get the false conclusion that CNOT2 is a successor of CNOT1 both on q1 and q2, while it's only a successor on q2.
Based on what @1ucian0 said, I agree that remover is not needed. I also agree with @ajavadia that detector is needed.
If I understand correctly, self.dag.has_edge(1, 2) can be rewritten as 2 in self.dag.successors(1). Am I missing something?
ok i see.
So yeah maybe our API is lacking for this example you mention:
Seems like you want to get successors per wire (say for example for CNOT1, the successor on q[0] is Z and the successor on q[1] is CNOT2). Not just that Z and CNOT2 are successors.
Right. But if we don't need a DAG for commutativity anymore, then this functionality is not required either.
The method introduced in #1975 (to fix #1502) provides an iterator over the gates on a given wire, so this would perform the functionality you described @ajavadia .
@1ucian0 you are correct, however by using has_edge() you can also specify if there is an edge on a given wire, which was what the original need was for (I don't know if this is still needed)
