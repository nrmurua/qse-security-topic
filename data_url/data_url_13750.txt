This issue is about two things:
[1] Currently the type signatures end up looking hard to parse in our docs. E.g.

[2] Using QuantumCircuit types introduces a dependency on the library wherever it is used.
Both of these things will likely get worse when more types are added.
It would be better if the docs for this function read:
mitiq.zne.mitigate_executor(executor: Callable[[QPROGRAM], float], fac: mitiq.factories.Factory = None, scale_noise: Callable[[QPROGRAM], float], QPROGRAM] = None) → Callable[[QPROGRAM], float]
To achieve this we could just define a dummy class:
That serves as a labelled placeholder.
While this wouldn't check types of code, it would solve the above issue.
Any suggestions on how to solve the above issues while retaining type checking? That would be the best outcome.
@rmlarose @nathanshammah @andreamari
One of the reasons why I first proposed to use Numpy-style docstrings was exactly this.
That way the type of a variable could be in the docstring part, whereas in the docs the annotations looked a bit ugly, like this printout.
Also, the same occurs if one calls help(module) or on a function or class (which I tend to do a lot to remember args in notebooks and interactive scripts, but then I thought maybe that is just me, as PyCharm and other editors such as VS Code maybe give suggestion on this...).
Now I got convinced of being less verbose, and I am now rooting for the idea of keeping it minimal in the docstrings, google-style, and provide more information in the Annotations. With the annotations we implement flake8 checks, and, in the future, we could also implement static type checks with mypy (the flake8-mypy plugin seems not updated since 2017, while mypy is in active development).
I am not fully aware of what your workaround means, but it looks nice to me. I find it hard in general to understand the meaning of Callable functions with "nested" args, but that is probably just my code ignorance...
Also: maybe in the way we import other dependencies' classes of function, there is a way to cut this out. Maybe by setting something in the Sphinx documentation. We should look for documentations that use google-style docstrings + annotations and have a nice documentation, checking what conf.py options they set. If there is a way to limit the "depth" of the type check.
Or a way to have a glossary such that we can enforce the documentation to print what we want, something like
or something like that.
The specific issue above seems modified by #86.

Also, with autoclass and automethod:
It’s possible to override the signature for explicitly documented callable objects (functions, methods, classes) with the regular syntax that will override the signature gained from introspection:
I thought sphinx-autodoc-typehints could help, but it only converts type hints from Numpy docstring comments to Google-style signatures, for which we are already fine.
Sphinx, paradoxically, seems not so well documented. I keep investigating.
+1 on fixing in the docs (if possible). Since this is a problem with the docs, not code, I think the best solution is a modification to the docs, not code.
Of course if we can't we should consider how to best modify the code.
