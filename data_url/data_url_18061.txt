When compiling a circuit measurements are by default moved as close to the front of the circuit as possible. This is good for running on physical hardware but not optimal for simulations which can sample measurement outcomes for multiple shots if all the measurements are at the end of a circuit.
Since the current simulators can sample measurement outcomes from the final state if all measurements are at the end of the circuit this default behaviour prevents this unless barriers are explicitly inserted into the circuit before measurement.
Consider the following 15 qubit Bernstein-Vazirani circuit:
If we execute without the barrier before measurements and time for the default number of shots we have:
This is quite slow, and by looking at the compiled qobj you can see the measurements have been pushed forward to follow immediately after each H gate on the same qubit. If we add the barrier before the final measurement we get:
If a circuit is designed where all measurements are at the end of the circuit, they should remain there and the measurement sampling optimization should be enabled on simulations.
When the compiled backend is local_qasm_simulator or the online simulator move all measurements as far backwards in the circuit as possible, rather than forwards. This will allow the optimization to be used by default in many use cases.
Should this be the responsibility of the simulator or the compiler to figure out that measurements can be pushed to the end?
Since we are talking about an optimization implemented by the simulator, it seems to me that the simulator should try to discover whether the optimization is applicable or not.
Another reason is that, conceptually, the compile() should not know what "kind" of backend it is targeting; but rather what coupling map, native gate set, etc. it is targeting. Because those are the things that correspond to the compilation passes, not a monolithic thing such as device vs. simulator. But this could be debated.
@ajavadia the compiler is already deciding to move them forwards, which is an optimisation specific for hardware, it could also presumably move them backwards using the same transpiler pass (or not move them at all).  To me seems better to do this in the one location then leave it up to every simulator to include its own mini-compiler.
I would say that hardware-specific passes in the compiler make sense (@atilag what do you think?). That said, for this specific case, what about doing nothing by default and optimize for (our) physical devices instead of optimizing for simulators?
We have a solution to this issue (see the last comment in #691), but it is most likely best to wait for aer to implement as it involves modifying the way terra talks to thelocal_qasm_simulator, and it is not really a bug per say.
As a side note, the transpiler must have hardware specific passes otherwise we can not map circuits to hardware with limited connectivity.
Thank you, @nonhermitian! @ajavadia if you agree we should move this to Aer, we can mark the bug as "wont fix" and close it.
I agree this should be closed.
Closing.
