I might want to have a Hamiltonian that is two consecutive different pulses. To do this in mesolve I just call it like this:
However in mcsolve I can not give a thousand initial states each to be considered as a single trajectory, so I have to use slower time dependent Hamiltonians.
Would such an enhancement be welcomed? I will probably have to implemented it for myself anyway.
Hi. I don't quite understand what you are proposing to implement, but enhancements and extensions are of course very welcome!
Edit.
OK, thinking about it a bit more I think I understand what you want to accomplish. Instead of giving a single wavefunction as initial state, you want to pass a list of wavefunctions that will ack at different initial states for each trajectory? That would be a very welcome improvement.
Sorry for the bad description. What I need to do (and which is already possible with mesolve) is to start with a hamiltonian H1, evolve for time T1, stop, change the hamiltonian to H2 and evolve for additional time T2.
With mesolve I just use the final result of mesolve(H1, initial_state,...) as the initial result in mesolve(H2,...).
In mcsolve I can not do this, because I can not start mcsolve with a set of initial states over which to run single trajectories.
In other words, I want to be able to run mcsolve up to time T1 and then be able to use the result in another call to mcsolve in order to run the trajectories for additional time T2.
Yes I see, this feature would be very useful to have. I think this can be implemented quite easily, by passing a list of wavefunctions instead of a single wavefunction as the psi0 argument, and then psi0[nt] instead of psi0 _MC_Class.run and _mc_alg_evolve (if psi0 is a list). When implementing this psi0 should probably be moved from odeconfig to args in _mc_alg_evolve.
Since he is looking for individual trajectories, instead of parallel looping over ntraj we could just loop over psi0[n].  The list can remain in odeconfig since we pass only a single psi0 to each mc_alg_evolve.
If I understand correctly the parallel loop of ntraj will still be done as before, just that for each call to mc_alg_evolve the initial state should be odeconfig.psi0[nt] instead of odeconfig.psi0. Then it would make sense to include odeconfig.psi0[nt] in the args argument to mc_alg_evolve so that mc_alg_evolve does not need to know if odeconfig.psi0 is a list or a single state.
If we are not doing individual trajectories, like he talked about, then wouldn’t we have
len(psi0)*ntraj
output states?  These couldn’t be fed back into mcsolve because the number of output states would be huge.  However, if one is interested in just the expectation values, then I can see what your talking about.
On May 2, 2014, at 12:47 PM, Robert Johansson notifications@github.com wrote:
If I understand correctly the parallel loop of ntraj will still be done as before, just that for each call to mc_alg_evolve the initial state should be odeconfig.psi0[nt] instead of odeconfig.psi0. Then it would make sense to include odeconfig.psi0[nt] in the args argument to mc_alg_evolve so that mc_alg_evolve does not need to know if odeconfig.psi0 is a list or a single state.
—
Reply to this email directly or view it on GitHub.
I might be missing some details, but wouldn't it be reasonable to just neglect the content of the ntraj argument to mcsolve and set it to 1 if the psi0 argument is a list?
I think the issue we are discussing is the possibility of having a list of inputs and a bunch of corresponding output expectation values, or a list with a set of single trajectory states.  We could support both, but then we would need a flag of some kind to tell the mcsolver what to do
I think len(psi0) should be equal to ntraj, and result.states[-1] would be a list of length ntraj that could be used as initial state for next call to to mcsolve which has to have the same ntraj argument.
I think in this application of mcsolve we would have to have output states not expectation values being calulated.
In this application yes, but would it not also be good to accept a list of psi0 and get expectation values?
In both cases we are just removing the need for looping over calls to mcsolve by the user.
On May 2, 2014, at 1:02 PM, Robert Johansson notifications@github.com wrote:
I think in this application of mcsolve we would have to have output states not expectation values being calulated.
—
Reply to this email directly or view it on GitHub.
Yes, why not. I guess that would be useful too.
