The new optimisation settings from #97 unfortunately introduce unwanted compiler behaviour. My build server with its stone-aged  Xeon E5420 CPUs fails to build basically everything, that has a test phase of some kind with illegal instruction error. I set optArch=null. It might work with `optArch="x86_64" but I assume this is unintended behaviour?
The new performance optimizations are strictly speaking cross-compiling (but we quietly ignore that fact) ;)
Yes, unfortunately the build machine needs to understand all the instructions (unless we handle it as proper cross compilation, which may then also skip the tests).
The new optimizations should be turned off when you set optAVX=false (which leads to optArch=null).  From there on, everything should be built the vanilla upstream way (if not, then it is a bug).
Your Xeon E5420 should be a "core2" in gcc speak (see https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html). Looking at the flags, there seems to be no advantage rebuilding everything with "core2"  optimizations.
OK, at the moment I've just set optArch=null. I will test if additionally setting optAVX=false and optArch="x86-64" will solve this and give pure x86-64 builds.
This may be a bit ambiguous, but if optArch=null is in the input, the (default) value of optAVX will be used (see here).
Thus you need to set optAVX=false explicitly to turn off optimizations.
OK, this actually works. Uncomfortably optArch="x86-64" is only a valid march but not a valid mtune flag. So I basically have to keep at null. A little bit unfortunate but I guess just of cosmetic nature.
The best cause of action would be to remove optAVX but that breaks backwards compatibility. A compromise could be to keep the vanilla stdenv as a default and only turn on the optimizations if either optAVX or optArch is actively set. However, that means no optimizations per default.
