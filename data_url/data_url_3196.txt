I don't yet have an exhaustive list of the API differences, but one that immediately jumped out at me is the absence of a run_and_measure method on the PyQVM. Furthermore, calling run returns a PyQVM rather than a list of bitstrings.
PyQVM follows the QAM interface and should be compared with the QPU and QVM objects, which users ought rarely use directly. Instead, it's used as an ingredient in building a QuantumComputer object
or
Ok, that confusion between QVM and QAM objects could be cleared up with some simple docs changes. However, the QVM and PyQVM are still not interchangeable objects for basic use cases. For example:
Works fine. Whereas:
produces the error:
sure. That particular error is because the compiler now emits HALT instructions, which isn't handled. As a workaround, if you run with quilc -P it should work. -P stands for "protoquil"
p.s. here's some docs on the various object types and their relation: http://docs.rigetti.com/en/stable/migration2-qc.html#%22What-is-a-QuantumComputer?%22-Advanced-Edition
we can update the graphic to include PyQVM
I am running into a similar confusion; I have a Program() with parametric gates, and now I tried to use MOVE instructions to populate the entries before running PyQVM (this is the same solution as in #809 by @ecp-rigetti ), but it looks like PyQVM does not support this MOVE instruction in a Program, it has to be run_and_measure style and otherwise throws the error
ValueError: PyQVM can only run run-and-measure style programs: Unsupported r_a_m instruction MOVE theta[0]  2.3  if I include MOVE for filling the parametric gate.
What is a good workaround? Or can I perhaps in another way replace parametric gates with real-valued gates afterwards? This would be convenient when a user has created a huge Program() with many parametric gates and then later wants to test it using several different backends including PyQVM.
Or should I open a new Issue about this?
