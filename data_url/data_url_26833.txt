I looked at keyword_create (perhaps there is better place?) and wanted to allow the environment to supply the value of a keyword (environment variable). To confirm, the value of a keyword should be overridden (rather than the default value). The parser infrastructure of CP2K may already allow an implementation, however it is not completely clear how to implement this when looking at the various candidate functions.
This enhancement can be used e.g., for benchmarks/competitions where modifying the workload/input is not allowed. More general, such a feature allows to quickly tryout a modification and to experiment with different settings. This feature might also enable automated interaction e.g., auto-tuning the performance of a workload.
The following code may illustrate the idea:
The prefix CP2K_ for the keyword's name can sufficiently ensure an intentional interaction.
Currently, the input file defines the entire calculation. I think, this is a very valuable property that helps a lot with reproducibility.
I also don't quite see the use case, because one can always generate the input from a template:
One case is for benchmarks/competitions where modifying the input file is not allowed, another case is to tune behaviour of CP2K. Though, there are many properties in the GLOBAL section that control/tune general operation. This feature is only about GLOBAL and not about mirroring the ability to describe a workload using environment variables (which would be indeed obscure). I believe it is easily possible to detect during keyword_create whether a keyword can have a corresponding environment variable or not.
For parameters which depend on the runtime environment I think it would be very valuable to be able to override them either by explicit CLI arguments and/or environment variables, such that one can use the same input files with different parameters (separation of concerns: the input defines everything algorithmic, the physical system, etc. while the CLI and/or environments can be adjusted to fit the current runtime environment).
I think more issues to make CP2K easier to use (or to make it more similar to what other package allow) can be reported.
For example:
One case is for benchmarks/competitions where modifying the input file is not allowed, another case is to tune behaviour of CP2K.
Again, I don't see why you couldn't solve both problem with a small shell script?
And if these competition really don't want you to change the workload, then they'll probably soon also lock down the environment variables.
I believe it is easily possible to detect during keyword_create whether a keyword can have a corresponding environment variable or not.
AFAIK the input parsing happens on all MPI ranks simultaneously. So, you'd have to check that all ranks have the same environment variables.
separation of concerns: the input defines everything algorithmic, the physical system, etc. while the CLI and/or environments can be adjusted to fit the current runtime environment.
We already have this separation. The configuration for the environment happens in the arch file. Hence, e.g. #322 is the right way to go.
IF this issue is taken or being worked on, #322 (comment) should be considered.
I'm closing this as we have decided that the input file should remain the source of truth.
No, we did not.
But thanks for the reminder: In #735 I'm going to add two things to the preprocessor:
this should allow overriding any settings given a properly written CP2K input file.
( We can consider a similar question for DBCSR. It might be even more appropriate to implement some settings there and to keep the physics/CP2K untouched vs tuning performance per environment variables. )
@hfp true. Since DBCSR is a library I am somewhat reluctant since the application using the library might know better how to tune the library than the user. On the other hand should it be possible to override any facts about the environment the library might find, at least for testing purposes.
