There's a bad deprecation warning in the JSON serialization:
This cannot be changed into an error. The main guarantee provided by json serialization is that it will continue to work forever. If using this key was going to be an error, it had to start as an error when json serialization was first written. You can't change it now, because that might break things which would mean they wouldn't continue to work forever.
I am aware of specific files out there that use these values, because stimcirq uses these keys for its custom operations. I've serialized circuits that had those operations in it. I expect them to continue to parse.
You are about to make a change that would break the main guarantee provided by json serialization. DO NOT DO THIS. Remove this deprecation warning instead of moving forward with it.
cirq_type will still appear in the serialized file, the warning is saying that your code shouldn't put it there, but rather let the serialization framework do it for you. I don't think there's any compatibility issue with previously-serialized data.
That would be more reasonable. That said, what you are saying is not at all clear to me from the message. It just says there will be an error. I assumed it was both on serialization and deserialization. The message also doesn't describe what action I should take to deal with the deprecation. It just says what I'm doing isn't allowed, not what to do about it.
For context, the specific case I'm worried about is stimcirq, which defines these resolvers:
and has values that look like this:
We ran into this internally as well. I think "what to do" is remove the explicit cirq_type entry in the dict you are returning, and define a _json_namespace_ method that returns a string (you are encouraged not to use the empty string for this). The serialization framework will add a cirq_type field that is {json_namespace}.{obj.__class__.__name__}. If you do change to a non-empty json namespace, say stim, then you'll have to update the resolvers dict to be backwards compatibile with older data, something like:
This is at least how we handled the serialization changes internally. Perhaps @95-martin-orion can weigh in on whether this looks right, and also whether we can improve the deprecation message to make it more clear to people how to address it.
@maffoo has everything correct here - cirq_type is staying in the serialization format, it's just transitioning from user-specified to auto-generated from _json_namespace_ + class name.
This isn't the first time someone has raised this issue though, so I'm on board with updating the deprecation message to be very explicit about what's happening. I'll send a PR later today.
