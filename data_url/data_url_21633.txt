Compiler TInt64 type inferrence breaks silently. This results in silent conversions and incorrect type-casting/corruption.  Type hints help in some, but not all cases.
There are serveral related behaviours that are quite syntax sensitive. The listed experiments demonstrate the bugs. #1466 seems to narrowly avoid hitting this (see example 3).
The bug seems to be todo with type inferrence of in64 vs int32 under a range of conditions. It seems like a combination of factors is required to produce the bug, but I have been unable to nail thios down.
All of the listed experiments are broken and erroneously print:
Implementation details significantly change the behaviour around this bug and what actions resolve the bug.
This bug was encountered in #1463
We've just upgraded one of our experiments from an approximatly 10 month old version of artiq. (I'll follow with more details when known.) During this time the Int32/64 type inference must have changed. Code that ran before the upgrade now throws cannot unify numpy.int32 with numpy.int64: 32 is incompatible with 64 errors. Looking over the release notes I can't see anything suggesting a change in this area. It seems like type inference may have been unwittingly changed. This may be realted to the above. I have tracked the upgrade problems down to changes from  #1447. I'll submit a PR fixing this unrelated behaviour.
Digging through issues, I just came across #1242. This looks like were hitting the same issue. The difference here is that the behaviour is very code structure dependant.
NAC3 does not have this problem.
I wonder whether it's worth keeping these issues open as long as they occur on master to avoid duplicate reports/time wasted tracking them down again. (A label could be used to mark them for closure once NAC3 has replaced the old compiler.)
Well the comments do say that it's fixed in NAC3, not on master. And there are too many open issues currently which IMHO causes more difficulty.
Fair enough â€“ by default, closed issues are not shown, but I guess users would typically need to include those anyway, as they wouldn't be using the absolutely most recent master version.
I imagine if people are searching they will find closed issues as well.  However, just for information, @sbourdeauducq do you have an estimate for when NAC3 will be merged into the master branch?  Is this 6 months away, more, less?  A rough estimate is fine.  Certainly we will have to study all of the consequences of the upgrade in terms of backwards incompatibility -- a lot of code rewriting will have to occur, so good to be able to plan.
Maybe 6 months for merge into the master branch, and 1 year to stable release. There are still many missing bits in NAC3.
