Current behavior: if this test fails the applet silently ignores all data

Desired behavior: a clear exception (ValueError?) so users have a clue as to why their plot isn't showing anything.
Desired behavior: a clear exception
Are you sure?
Unhandled exception will terminate the applet and the corresponding dock will go blank until the applet is restarted.
With asyncio it's even worse, the corresponding task will freeze and the error message will be displayed as a "task exception not retrieved" only when the applet is terminated from other causes.
I propose printing a textual warning on the plot instead. I will not suggest that you send a patch since you ought to focus on WRPLL.
Doesn't this happen transiently when new points are appended? Seems like adding a message to the plot (replacing the plot widget with a message) after a certain timeout is the way to go.
Are you sure?
Unhandled exception will terminate the applet and the corresponding dock will go blank until the applet is restarted.
You're right, an exception probably isn't an appropriate solution here. Silently ignoring all data that doesn't have the right shape is annoying (particularly when there is no easily available documentation for the applet to set expectations straight). The issue I had was that our x-axis was bin centres rather than edges (so one fewer point) and it took me a little time to RTFS to figure out what was actually needed.
Doesn't this happen transiently when new points are appended?
I don't think so for this kind of histogram plot. At least for the workflow I had, we start with an x axis and (empty) histogram data. As points come in, we just increase the histogram counts, rather than changing the shape of any vector.
A text-based warning works well for me. Adding a message to the plot is potentially fine as well (although more work than adding 1 line for a logged warning).
Agreed that an exception is not the way to go here.  Usually if one is plotting a histogram the arrays are bin edges and contents (see e.g. return values of numpy.histogram or matplotlib.pyplot.histogram), so the behavior of the applet as it currently stands seems to be fine to me.  Perhaps a little bit of documentation for the applets?  I don't see documentation there for any of these "basic" applets.
Doesn't this happen transiently when new points are appended?
I don't think so for this kind of histogram plot
@hartytp That's naive. X and Y are coming from two independent datasets and nothing guarantees that they are updated at the same time. In fact, they are never updated at the same time since the sync_struct messages are processed by a single thread in the receiver.
So, yes, it happens transiently, and the warning should only be printed after the length mismatch has persisted for some amount of time.
How is WRPLL?
@hartytp That's naive. X and Y are coming from two independent datasets and nothing guarantees that they are updated at the same time. In fact, they are never updated at the same time since the sync_struct messages are processed by a single thread in the receiver.
Yes, I realized that after my previous post but hadn't had a chance to update.
So, yes, it happens transiently, and the warning should only be printed after the length mismatch has persisted for some amount of time.
That's a possibility, but given that the length mismatch is not necessarily an indication of anything wrong I'm less inclined to report a warning here.
Agreed that an exception is not the way to go here. Usually if one is plotting a histogram the arrays are bin edges and contents (see e.g. return values of numpy.histogram or matplotlib.pyplot.histogram), so the behavior of the applet as it currently stands seems to be fine to me. Perhaps a little bit of documentation for the applets? I don't see documentation there for any of these "basic" applets.
This is the view I've come to. A docstring here (ideally accessible from the manual) which makes it clear what x and y are (and hence the length requirements) would resolve this well for me.
How is WRPLL?
Unrelated to this issue. Happy to discuss, but this isn't the place.
Similar things should be done for plot_xy and plot_xy_hist.
Thanks! Other than the git stuff, the other small missing feature from the dashboard is scan-devices
