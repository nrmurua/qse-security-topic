The original qaoa algorithm introduced in the paper by E Farhi uses the same beta parameter for all the qubits in mixer Hamiltonian propagator , same gamma for all the terms in cost Hamiltonian propagator.
ham = xacc.getObservable('pauli', '-5.0 - 0.5 Z0 - 1.0 Z2 + 0.5 Z3 + 1.0 Z0 Z1 + 2.0 Z0 Z2 + 0.5 Z1 Z2 + 2.5 Z2 Z3')
nbParamsPerStep = 7 + 4
from this code block from the qaoa_example.py I think we are using different betas for each qubit in the mixer and different gammas for each term in cost Hamiltonian. Am i right?
if yes , does this provide any advantage over the original approach?
Hi @aswanthkrishna,
Yes, you're right.
The QAOA implementation in XACC used an extended parameterization scheme whereby each operator in both the cost and mixer Hamiltonians has its own angle.
Since the goal of the ansatz circuit is to produce a quantum state that optimizes the cost function, we have some degree of flexibility in choosing how to parametrize a QAOA problem.
If we choose a smaller set of parameters, where the optimization landscape has a lower dimension at the expense of higher circuit depth. If we choose a larger set, we can explore a wider set of quantum states with lower circuit depth, of course, at the expense of higher optimization dimension.
In the implementation, we opted for the extended scheme which is a superset of the standard scheme (bundle a group of betas and gammas per step into one parameter) for maximum flexibility and extensibility.
Thank you for the quick reply @tnguyen-ornl
typically wont this make the optimisation landscape complex and introduce more local minimas? in my experiment the value to which qaoa converges is highly sensitive to the starting point. Can you suggest some ways that i can solve this?
I don't have a concrete answer to the local minima problem.
I totally agree with you about the sensitivity to initial parameters. In fact, this has been studied quite extensively. There are some heuristic initialization strategies that were shown to be much better than random initialization.
For example, see arXiv:1812.01041
Thanks for the reference. Also how will i go about bundling the parameters as u suggested with the current implementation? I want to compare the performance of both approaches. thank you for your patience.
This is a Python example that shows how we can bundle params and also apply a simple initialization strategy:
Thank you!
