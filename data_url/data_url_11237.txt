I just noticed that in hamiltonians/_general_hubbard_test.py there is a test
as you can see in the two calls, the order of y_dimension and x_dimension is swapped. If you make them match then the test fails. @bryano do you know what's up with that?
I used the opposite convention for linearizing the indices. The swapping in the test was intentional.
Oh ... I would have given you a hard time about that if I had noticed it before. Is there a particular reason you changed the convention? I think we should be consistent.
I thought I had a reason, but I don't what it is at this point. What do you think about having _hubbard.py just use _general_hubbard.py? The former is just a special case of the latter, but I imagine people have code depending on its interface, so we could just turn it into a wrapper around the general case.
In any case, changing the index linearization convention is just a matter of changing two lines in lattice.py.
I'd rather keep them separate for now. I've been brewing on some more general design changes that might affect all of this.
We should change the indexing convention to match with the original function.
I realize the reason now: my convention is consistent with itertools.product, in the sense that
iterates over range(x_dimension * y_dimension).
Are you okay with my changing _hubbard.py to my convention instead of vice versa?
No, please change the newer code to use the old convention. This isn't a good enough reason to break people's code over.
#493
Fixed in #493
