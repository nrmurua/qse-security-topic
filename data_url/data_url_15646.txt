I'm trying to implement a Parametric Hadamard Test.
I have already my parametric evolution gate exp(−iθH) where θ is the parameter.
When I defined the controlled-gate with Gate.control(1) and add it to the main circuit. I'm unable to correctly bind the parameters after and I can not get the state vector after the binded circuit.
When running the circuit I get:
I have tried without the control, i.e, only the evolution in the qubit 1 and 2 and it works. I think it's because the control, but so far, I have not been able to solve it.
I tried .with the to_matrix() method of CircuitStateFn of Opflow, and I get the same error.
The circuit should bind the parameres correctly and it should give me the statevector at the end.
No response
Please can you provide a complete reproducible example, including all imports and custom functions, which we can run to reproduce the error?  Ideally this should be as little code as you're able to get it to.  I can't run your example because of the missing tr_g function - I tried to make something like your description, but this doesn't have any errors:
Thanks for the reply. Here there is a reproducible example with all the functions.
My original custom gate tr_g has crx gates. When I change them to cp gates, the problem does not appear.
( it's possible to see this if one uncomments the line  #qc_c.cp(dt, 1, 0) and comment  qc_c.crx(dt, 1, 0)  )
The circuits qc and transpiled are printed in order to notice that when crx gates are used the parameter t does not bind.
Thanks, that's great.  The problem here is that the parameter binding isn't getting passed into the defined gate's definition through the control:
Terra typically over-relies on us storing the same instruction object in many different places, and only updating a parameter in one place to change them all.  Here, I would expect that somewhere the instruction is being copied when the inner circuit definition is made, and that prevents things from working correctly.  This shouldn't be too hard to fix, hopefully.
