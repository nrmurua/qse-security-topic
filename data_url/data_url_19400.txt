I tried setting the h1(final Hamiltonian) as H = - \sum _{i＜j}  \{ Z_i Z_j} , in this case, the ground state should have two degenerations(all ↑ state or all ↓ state). While linear.py only plots one situation. How do I apply check_degenerate in this case? Thank you.
Thank you for looking into our examples.
I think it depends on what exactly you would like to plot. Using the h1.eigenvalues() and h1.eigenvectors() methods you get the whole spectrum of the Hamiltonian, so h1.eigenvalues()[0] will give you the ground state energy and h1.eigenvalues()[1] will give you the second eigenvalue which in case of degeneracy will be the same as the first. Similarly:
will give you the first eigenvector (in this case the |00...0> state) and
the second eigenvector |111...1>. Ofcourse all superpositions a|00...0> + b|11...1> are ground states too, but scipy doesn't know that so it just returns separate eigenvectors with the same energy.
You can use the above to adjust the plots accordingly. For example you can calculate two seperate overlaps with |00...0> and |11...1> by modifying the code as follows:
and then plot both overlaps as seperate lines in the same plot as:
Keep in mind though that this may not be very useful as adiabatic evolution searches for the ground state of h1 which in the degenerate case can be any superposition, so I guess it is not necessary that these overlaps will go to 1 but energy may still approach the correct value. I'm not very familiar with the theory behind adiabatic evolution to talk more about this from a physics perspective though.
Thank you so much for your help and answer, I think now I'm able to plot the other degenerate state. And just to check(since I'm a beginner for Python),what does the meaning of number in [] of h1.eigenvector()[:, 1]? What if I want to know the overlap of state,say,11100 when nqubits＝5 ? Are I able to use h1.eigenvetor()[] or other ways?
Thank you.
Thank you so much for your help and answer, I think now I'm able to plot the other degenerate state. And just to check(since I'm a beginner for Python),what does the meaning of number in [] of h1.eigenvector()[:, 1]?
[] is how you access the elements of a numpy array and other data structures (such as lists or tuples) in Python. See indexing in the numpy documentation for more details. The [:, 1] used here returns the whole second column of an array with two dimensions (matrix).
What if I want to know the overlap of state,say,11100 when nqubits＝5 ? Are I able to use h1.eigenvetor()[] or other ways?
No, h.eigenvectors() returns the eigenvectors of the Hamiltonian h using the np.linalg.eigvalsh (or the equivalent Tensorflow operation) and is not related to any overlap. If you want to calculate overlaps with other states you have to define them manually as arrays in the computational basis.
If you want to calculate overlaps with other states you have to define them manually as arrays in the computational basis.
Thank you for your help. But I'm still a little confused about how to define a state that I want, can you show me a simple example please?
@stavros11
Thank you for your help. But I'm still a little confused about how to define a state that I want, can you show me a simple example please?
You can define any state by writing the corresponding vector in the computational basis as an array. For example for 3 qubits the state vector should have 2^3=8 components so the |000> state would be:
the (|000> + |111>) / sqrt(2) state would be:
etc..
You can use any other way provided by numpy to define these arrays so that you don't have to write all elements explicitly. For example:
is the same as
If you have two state vectors state1, state2 you can calculate the overlap |<state1 | state2>|^2 as:
If you have two state vectors state1, state2 you can calculate the overlap |<state1 | state2>|^2 as:
Thank you,I appreciate your time but sorry to trouble you again.Because when using the code you show me,I found out that I can't define the evolution, which lead the overlap outcome always equals to 1.
Can you show me how to define AdiabaticEvolution in this case please ?
Again,Thank you for your time.@stavros11
