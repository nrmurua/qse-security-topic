I have compiled OQS-OpenSSL on CentOS 7.7 using gcc 7.3.1 by following the instructions (First get OQS-OpenSSL, then build and install liboqs at the root of OQS-OpenSSL and finally build OQS-OpenSSL).
Everything seems to work during the build process of OQS-OpenSSL, I've installed OQS-OpenSSL into "/usr/local/1.1.1d-OQS-OpenSSL_1_1_1-stable_snapshot_2019-10-0.2.0"
Issue:
The issue I get is when I try to compile code using standard OpenSSL is it complains that "oqs/oqs.h" couldn't be found. Indeed "oqs/oqs.h" is not installed when I issue a "make install" inside the OQS-OpenSSL directory.  Also the instructions doesn't tell to separately install liboqs outside of OQS-OpenSSL.
Here's my build process:
Now, when I try to build code that uses standard OpenSSL with OQS-OpenSSL I get this error (evp.h)
Error:
==> How should I use the OpenSSL fork when building software that uses OpenSSL?
I have added
to the Makefile so that "oqs/oqs.h" could resolve but I get other strange errors following this.
Thanks for your work here!  I appreciate it :)
Sylvain
Thank you zrlmib for your response.
I think there might be two steps necessary:  First is to install liboqs resources (oqs/include and oqs/lib) into the right locations along with the rest of OQS-OpenSSL.  The second step would be to create a pkg-config file (.pc) that would add "-I<INSTALL_PREFIX>/include/oqs" and "-L<INSTALL_PREFIX>/lib{64}" so that compiling with "pkg-config --cflags" "pkg-config --libs" would have all that is necessary to compile with OQS-OpenSSL.
I've checked and the code I have compiles with OQS-OpenSSL version 1.0.2 if I add the right -I and -L to point to "oqs" inside the build directory of OQS-OpenSSL.
I've deleted the link that @zrlmib gave. If (as @zrlmib stated) you intend to build OpenSSL-dependant software against the OQS-OpenSSL fork, then the Dockerfiles that do so for apache and nginx might be of some help.
This does still appear to be a problem. I'm running into it trying to build OpenVPN against the fork with the intention of using PQ ciphersuites, and the dependency of <evp.h> on oqs/oqs.h is tripping me up. I can copy the dependencies in and still get the build to work, but it seems like if the OQS code gets linked into the libraries so that applications don't need to also link with -loqs, the header files should be similarly self-contained.
To make sure I understand -- @kevinmkane your point is that OQS-OpenSSL should copy the OQS include headers into the same place that OpenSSL installs its header files?
To make sure I understand -- @kevinmkane your point is that OQS-OpenSSL should copy the OQS include headers into the same place that OpenSSL installs its header files?
My point is better phrased in terms of the goal: Applications building against OQS-OpenSSL should be able to successfully build, link, and run based on only the products that get installed as part of make install.
If need be I think it's fair to require these be applications built specifically to work with OQS-OpenSSL (as opposed to regular, unmodified OpenSSL-using applications -- though building them out of the box would be nice if possible), but make install should provide everything they need.
Whether this is best accomplished by copying OQS's header files, or just specific ones as needed by applications, or by removing that dependency in evp.h, or something else to accomplish this goal, I leave that to the experts on the code to decide on the best way of accomplishing this goal.
Does that make sense, @dstebila ?
@kevinmkane Thanks for the good (target state) summary. What about phrasing it even shorter: All (plain) openssl-enabled apps should build out-of-the-box if passed OQS-openssl in the typical '--with-openssl' config parameter pointing to OQSSL. Would that what you'd be looking for?
FWIW, I'm still digging into pkgconfig and autoconf to find out how to make this come to pass and suggested to @dstebila an API change that's also required for this. As a kind of stop-gap until that's achieved, I put some completely built oqssl development docker images on Dockerhub (search for openqsafe-***-dev) that facilitate pretty rapid building/'OQS-enabling' of normal openssl-based applications.
@zrlmib Yes. That's what I'd be looking for as the ideal goal.
If you discover targeting plain OpenSSL-enabled apps is problematic for some reason, an acceptable fallback goal would be to make that true for OQS-aware apps.  In other words, the app author has to make some changes to use of OQSSL, but once done, that code should build anywhere OQSSL has been make install'd without requiring the presence of liboqs or OQSSL's source tree.
@syrtap and @kevinmkane, can you try if #132 resolves your concerns?
