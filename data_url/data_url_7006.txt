Currently, arithmetic gates are a pain to use unless you happen to have your data in the correct contiguous order top-to-bottom. One way this could be avoided would be to separate the concept of 'use these bits as input' from the actual application of the gate.
I'm thinking something like this:
One of the challenges with this is that it feels like inputs should be able to overlap. +=AB should be able to substitute for +=A^2 by overlapping let A and let B. Also it's fine if Z-axis controls overlap with the inputs, and that should probably also be allowed.
So it's not clear if these boxes should behave differently from the other boxes when being dragged around, or if the declarations should be long-lived until some operation breaks them, or if the variables should be actual independent values in some sense. ... Independent values is probably a terrible idea. There would be potential for decoherence anytime you did a re-assignment.
Extending lifetimes until changed:
Overlapping:
I think the extended lifetime idea is a lot better. It resolves a lot of the space issues, and keeps the existing interaction mechanism (not to mention an unchanged serialized form).
So I guess it comes down to making it visually obvious where an input is coming from and when a declaration is broken by an intervening operation.
91cc73b
