Hi there,  I am able to compile ref directory with make.
but avx2 I getting fallowing error.
In file included from /opt/rh/devtoolset-8/root/usr/lib/gcc/x86_64-redhat-linux/8/include/immintrin.h:43, from fips202x4.c:1: fips202x4.c: In function ‘shake128x4’: /opt/rh/devtoolset-8/root/usr/lib/gcc/x86_64-redhat-linux/8/include/avx2intrin.h:913:1: error: inlining failed in call to always_inline ‘_mm256_xor_si256’: target specific option mismatch _mm256_xor_si256 (__m256i __A, __m256i __B) ^~~~~~~~~~~~~~~~ fips202x4.c:155:12: note: called from here s[i] = _mm256_xor_si256(s[i], s[i]); ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ make: *** [PQCgenKAT_cpakem512] Error 1 
I would thank for any help.
a year and a half later - yes, these exact flags, and with this exact result.
What CPU are you building on?
One machine (4 CPUs), CentOS 8:
Anther machine (2 CPUs), Ubuntu-20.04.1:
It looks like GCC (and Clang) on those machines do not do what we'd expect from -march=native. Adding -mavx2 to CFLAGS and NISTFLAGS alleviates my compilation problem, and the resulting binaries run.
On the E5-2650 I would expect march=native to not work. If I'm not mistaken that's a Sandy Bridge, which doesn't support AVX2, but only AVX.
Allow me to disagree. I have the same problem on MacOS with this CPU:
Just checking, on OSX you're compiling with clang, right? What flags do you use there? The -msse2avx flag doesn't exist for clang as far as I know.
On MacOS I'm adding -mavx2 -mavx -msse2.
I'll try to take a look, soon, but at the moment I don't have access to a machine with OSX.
The problem seems to touch all of my machines. It is - regardless of the actual architecture, clang (and sometimes GCC) doesn't enable extended instructions unless the corresponding explicit flag (like -mavx2) is given.
I think there's no problem in adding that flag  explicitly in Makefile in avx2 subdir.
I fully agree. It was already included in CFLAGS, I now also added it to NISTFLAGS (to build PQCgetKAT). Does this solve this issue?
