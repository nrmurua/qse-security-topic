If we want to do a quantum fourier transform on a circuit we have to construct a QFT object and append it to the circuit. It would be much more natural and easier if we could just call a .qft method on the circuit with the appropriate arguments.
E.g. instead of
have
This is not an immediate feature request, since the QFTs are also subject to change under the movement to circuits, but I think it would be a facilitating feature for algorithm construction and great to have.
What's other people's opinion about this?
I would like to understand more how the circuit will work/look for Ansatz before commenting further. I would have expected QFT to extend QuantumCircuit from what I understood was under discussion for Ansatz  - then the above would be circuit = QFT(mode='standard').
Otherwise if not, would qft be a standard method on QuantumCircuit - if its monkey patched on then I would want to avoid that at all costs.
We have a QFT circuit already in circuits. So sorting out what is a component and what is a circuit if they are the same thing is essence needs doing too.
See also this #688
I'm suggesting that we allow using the QFT as gate additionally to offering the QFT object.
I'm thinking of this the same way as the Y-rotation exists as RYGate and QuantumCircuit.ry. It seems more user-friendly to support both. And eventually the QFT is just a more elaborate gate üôÇ
The reason I'm opening this issue is to see how everybody feels about offering this syntax, I know it will take a while until we could think about implementing it.
For me it depends how .qft comes about. Monkey patched gates are a pain as you have to know they exist since they do not show up in IDEs for discovery. Directly added as methods for circuits that comprise some library of .qft, .phase_estimation etc then they are discoverable along with docstring help etc. I guess this ends up more of a question to Terra team framed like this though.
I am not sure its more user friendly to support both unless there are significant advantages/differences that are clear. Otherwise it may end up being more confusing as to why you would use one over the other etc.
I agree that monkey patched gates are annoying since they don't show up for IDE discovery.
But that's a bit a different topic since this is the case for all gates at the moment.
I am not sure its more user friendly to support both unless there are significant advantages/differences that are clear. Otherwise it may end up being more confusing as to why you would use one over the other etc.
One could raise the same points when talking about the standard gates. How is the QFT case different to the RY case in your opinion? Are you worrying that the missed IDE discovery is worse here because a .qft method would take more arguments than e.g. .ry?
Standard gates are be one thing (not keen on these either) but a circuit library that grows, where more function is added, seems less than desirable keep monkey patching things in.
Under what we had envisioned being done in #626 your above example was expected to be simpler more like
where the components could be directly appended.
Which maintains discoverability etc. (assuming all library objects we add are easily discoverable too)
The example you've posted is going to be possible soon, it's an upcoming feature of Terra that the registers can be overwritten. Along with QFT as QuantumCircuit we're there üëç
But say we find a possibility to not do monkey-patching would that resolve your concerns? I'm also not saying everything in the circuit library should be appendable in this manner, but for the particular case of the QFT it seems handy üôÇ
To not blow up the circuit methods (which are not monkey patched anymore) this should probably not be done after all. Also, with the circuit library and the compose method adding the QFT is straightforward
so no need for this anymore!
