When trying to write a virtual gates instrument I encountered the following issue. First I create two drivers:
Then I create a virtual instrument mapping gates to the combination of the two:
The virtual_gates object (a subclass of qcodes.Instrument) automatically creates parameters with the names from gate_map and creates get and set functions mapping to the IVVI drivers. This works for server_name=None, but fails otherwise.
The problem is that when virtual_gates is created on a server the argument instruments=[ivvi1, ivvi2 is being pickled, which is now allowed.
How to solve this issue?
@peendebak , I had the same issue when using my meta-instruments. The solution is to have the virtual gates instrument live on a separate instrument server. This way the instruments it get's handed (upon instantiating the different name instrument server) are already pickled representations of the actual instruments in which case it should work fine.
I think it could be helpful as well to have a possibility to have all these instruments (ivvi1, ivvi2 and virtual_gates) living on the same server. It should be possible to circumvent the pickeling if the object live on the same server. This would then in turn enable unpickeled access to the driver which could be useful in some circumstances (I am thinking here about theoretical simulations, but I think experimental counterparts should exist as well).
So although your solution should work @AdriaanRol , I personally think this feature should be added as well @peendebak
I will use the suggestion by @AdriaanRol for now. I will leave the issue open until we have a proper solution.
I would very much like the implementation @damazter suggests.
Interesting... the most generic solution I see to this would be to write our own pickler, that when it encounters a RemoteInstrument or RemoteComponent, looks to see if it's on the same server we're putting the new instrument on, and reconstructs it as a local reference on the other end. Sounds like a bit of a project, but should be doable.
@AdriaanRol @alexcjohnson @giulioungaretti
So far I have worked around this issue by make a virtual instrument with server_name=None. I want to use multiprocessing, so this does not work for me any more. The suggestion by @AdriaanRol to place the virtual instrument on another server doesn't work for me. An example script is included below
EDIT: more complete version of this in the following comment.
@peendebak here's what I think should work right now:
Does that work for you? I know it's awkward and hard to explain... I guess that will be part of the coming multiprocessing cleanup.
A self-contained version of the above, that I actually tested :)
@peendebak if you get this to work, and it explains things enough to adapt to your real case, then one of us should flesh it out into a real tutorial on this.
Made into cookbook/tutorial. @peendebak  if it works for your thing, write it here as well.
This should be closed, instrument can find each other with or without multiprocessing!
@eendebakpt @peendebak  and @damazter  do you confirm the above statement ? (re: #323 )
Yes, the workaround is good enough for now.
