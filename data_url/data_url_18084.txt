Provide a consistent API, enough granularity and proper code structure to the visualization tools.
Several things need to be revised:
1- In _circuit_visualization.py, we check explicitly if %matplotlib inline has been set in a Jupyter notebook. This is bad practice, as there are other ways that figures can be inlined in Jupyter. For example using %matplotlib notebook. It also does not separate QISKit's API from Jupyter use case. In short, we need a cleaner way to do this.
2- Other files _state_visualization.py and _counts_visualization.py are not consistent with the above. They also use matplotlib for drawing, but they simply call plt.show(). We should make these consistent with _circuit_visualization.py
Right. My idea is to separate the plotting procedure into two stages:
This in-memory representation, namely CircuitPlot, allows the user to save() or show() the actual image.
Now, using the matplotlib drawer, requires a JSON QASM representation. My plan is to offer an abstract class as the interface accepting circuits but also a specialized one with a JSON QASM parser included and make our current MatplotLibDrawer to extend that.
An API suggestion would look like:
Plot a circuit
Want to save/show?
Please, feel free to propose more use cases. @ajavadia @t-imamichi your feedback is welcome.
Ali discussed more instructions to draw: barrier (for latex), noise, save, load, snapshot (for both latex and matplotlib)
#731
closing in favor for #1104
