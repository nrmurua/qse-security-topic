A simple hybrid algorithm to minimize a cost function looks something like this in CUDAQ:
The minimization procedure runs the observe call in tandem with classical processing.
I would like to execute multiple minimization procedures in parallel. The observe call could be replaced with observe_async however the classical processing done by COBYLA will require one to set up a multiprocessing loop spawning multiple threads to achieve this.
We would like users to not have to manually set up the multiprocessing loop but rather have a minimize_async functionality. This would be similar in scope to the vqe functionality we have but one where we can minimize different kernels and hamiltonians in parallel.
cc @mmvandieren
