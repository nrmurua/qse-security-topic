Attempting to convert an EvolvedOp to an instruction raises ExtensionError: 'Input matrix is not unitary.'
It should work.
Apparently to_instruction is trying to convert op.primitive instead of op and failing because op.primitive is not unitary. For EvolvedOp, op and op.primitive represent different things (op.primitive is the logarithm of op) so this logic is incorrect.
The EvolvedOp is only representing an object which still needs to be evolved. So you'll have to convert it using an EvolutionBase before you can ask for the circuit/convert it to an instruction. For example
So this behavior is actually expected, but we definitely should improve documentation if it differs from the behavior you expected ðŸ™‚
The following code works, and returns a matrix representation of the exponentiated operator:
According to the documentation, to_matrix_op and to_instruction are both supposed to return an object "equivalent to this Operator":

This documentation is inherited from the PrimitiveOp base class. So the behavior of to_matrix_op and to_instruction should be consistent with each other (or else the documentation is incorrect and should be fixed).
