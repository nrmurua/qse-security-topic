Probably most uses of initialize() will be to initialize all the qubits of a circuit with a single register. In these cases, the qubits argument is rather redundant. It would make things easier in this case if the qubits argument were optional.
Hi, I'd love to work on this. Did you mean to put default arguments to initialize function? Can you please elaborate on the issue?
I think @quantumjim is looking for behavior like exists for Barrier, where calling qc.barrier() without any qubit arguments implies adding a barrier across all qubits in the circuit (see https://github.com/Qiskit/qiskit-terra/blob/ed7a5e5/qiskit/circuit/quantumcircuit.py#L1915 ).
Hey! Can I work on this issue?
I didn't see @kdk 's comment at the time, but it is exactly correct.
Okay, I understood. Can I work on this?
@Arijit02 I can't confirm that the terra team will merge this new feature, but it would certainly be great if you could make a working version.
It's okay. I would love to try it.
So what is desired is that:
qc = QuantumCircuit(6) qc.initialize([1/np.sqrt(2), 1/np.sqrt(2)]) qc.draw('mpl')
will initialize all qubits with the state [1/np.sqrt(2), 1/np.sqrt(2)]. Right?
I am a beginner. Please correct me if I am wrong.
My intention was that for qc = QuantumCircuit(6), the argument to qc.initialize() should be a statevector of 2^6 elements. So more like
So qc.initialize(state) should do exactly the same as qc.initialize(state,qc.qregs[0]) for any qc that has just one quantum register.
@quantumjim  I guess that will be state = [ 1/np.sqrt(2**n) for _ in range(2**n) ]. Am I right?
I see initialize fundamentally different from barrier, because the size of the statevector really defines the amount of qubits in which it can be applied. It's more similar to h, and we do not allow qc.h() neither. Being explicit is better. barrier is more the exception than the rule.
You really do not save much work and it just makes the situation with parameters even more complicated. qc.initialize(state, range(n)) is explicit and clear, in the same way that qc.h(range(n)) is...
Closing based on @1ucian0 's comment. Feel free to re-open or continue discussion if people feel strongly otherwise.
