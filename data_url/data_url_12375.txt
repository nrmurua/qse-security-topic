I am attempting to use TFQ to do measurement noise mitigation by passing the measured bitstrings into a tensorflow model. Ultimately, this is something I'd like to run on either physical or simulated hardware, but I don't see support for this currently in TFQ.
I have been reading in the source for Expectation, Sample, and SampledExpectation, and from what I can tell there doesn't seem to be support for physical or cirq.Simulator.run() type backends through those channels. Currently it seems like the only options are "noiseless" and "noisy", without the ability to pass a customized noise model or on-chip device. Is there a way to pass a physical device execution or a simulated device to generate the data to compute expectation values with respect to as TFQ layer?
Thanks.
Hi @kharazity. Thanks for raising the issue.
Ultimately, this is something I'd like to run on either physical or simulated hardware, but I don't see support for this currently in TFQ.
Supporting "simulated hardware" is something you can do in TensorFlow Quantum. Typically when trying to simulate real hardware, your goal is to come up with some noise model that you believe will accurately capture the noisy behavior of the device you care about. In Cirq and TFQ you can do this using the various types of built in Cirq Channels (cirq.depolarize, cirq.amplitude_damp, cirq.bit_flip etc.). See this:
Here I could swap out to tfq.layers.Expectation in order to do expectation in both the noisy + noiseless settings and use these layers inside arbitrary compute graphs. A worked example where this is done can be found here: https://www.tensorflow.org/quantum/tutorials/noise
It is worth noting that neither Cirq nor TFQ will give you a "representative device noise model" that is something you need to come up with on your own or via on of the cirq vendor packages like cirq-google(https://quantumai.google/reference/python/cirq_google/experimental/noise_models) or from doing your own investigation.
You can pass a custom backend=cirq.ArbitrarySamplerType() to most of the TFQ Keras layers (in order to make use of custom simulators or actual chips), but it is a discouraged code path that is often times covered by just using backend=noisy/noiseless.
Does this help clear things up ?
Any updates on this issue or can it be closed?
