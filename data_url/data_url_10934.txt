Hi Dwave team,
Thank you for this exciting initiative to produce qbsolv.  I am getting to work trying it out.  My aim is to contribute some examples with clear explanations from the field of economics.
I've cloned from GitHub and compiled the code successfully:
$ gcc -v
Thread model: posix
gcc version 4.9.2 20150212 (Red Hat 4.9.2-6) (GCC)
[sityin@helios4 src]$ make clean && make
rm -f debugs.o dwsolv.o main.o readqubo.o solver.o util.o qbsolv
gcc -Ofast     -c -o debugs.o debugs.c
gcc -Ofast     -c -o dwsolv.o dwsolv.c
gcc -Ofast     -c -o main.o main.c
gcc -Ofast     -c -o readqubo.o readqubo.c
gcc -Ofast     -c -o solver.o solver.c
gcc -Ofast     -c -o util.o util.c
gcc -Ofast  -o qbsolv debugs.o dwsolv.o main.o readqubo.o solver.o util.o
$ which qbsolv
~/qbsolv/src/qbsolv
Running the tests showed things are working....
$ cd ../tests
$ ./qbsTest_bqp_Target.sh
-v0
Version open source 2.3 Jan 18 2017,16:06:09
Wed Jan 18 16:17:39 AEDT 2017
Test name    CPU sec W/C   Parts     Energy  qbsolv version
bqp50_1.qubo   0.00000    0    0    2098.00000 Jan 18 2017,16:06:09
bqp50_1.qubo   0.00000    0    0    2098.00000 Version open source 2.3
bqp50_2.qubo   0.00000    0    0    3702.00000 Jan 18 2017,16:06:09
bqp50_2.qubo   0.00000    0    0    3702.00000 Version open source 2.3
bqp50_3.qubo   0.00000    0    0    4626.00000 Jan 18 2017,16:06:09
bqp50_3.qubo   0.00000    0    0    4626.00000 Version open source 2.3
bqp50_4.qubo   0.00000    0    1    3544.00000 Jan 18 2017,16:06:09
bqp50_4.qubo   0.00000    0    1    3544.00000 Version open source 2.3
.
.
.
Total cpu time 0.02 Jan 18 2017,16:06:09
Total cpu time 0.01 Version open source 2.3
Elapsed time 2 seconds
Test non target mode bqp50
Test name    CPU sec W/C  Parts   Energy   Delta Energy   qbsolv version
bqp50_1.qubo   0.51000    0    50    2098.00000    0.0 Jan 18 2017,16:06:09
Now however I create the example QUBO file that was described in the technical document 'Partitioning Optimization Problems for Hybrid Classical/Quantum Execution'
$ cat debugOC.qubo
c any thing
p qubo 0 4 4 6
0 0 3.4
1 1 4.5
2 2 2.1
3 3 -2.4
0 1 2.2
0 2 -3.4
1 2 4.5
0 3 -3.2
1 3 4.5678
2 3 1
And when I try running qbsolv with this input, I get a segfault:
$ qbsolv -i debugOC.qubo -v 2
Segmentation fault (core dumped)
Hi,
I have the same problem.
I checked it by gdb:
I think i and j was interchanged. After changing them it works.
Csaba
Rather than swapping the indices I transposed the rows/columns, the convention for i, j in that loop is used elsewhere. Thanks.
