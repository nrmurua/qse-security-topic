Something like cqm.violations() -> Mapping[Hashable, float]. Can be done now with
When we solve a satisfiability problem, we can we will have objective or energy = 0, and there is no distinction between different solutions. It would be nice to be able to easily assess which solution violates less.
I think there should be two functions. cqm.violations() and cqm.constraint_energies() or something like that.
Here is the difference.
for ==, the violation is the absolute of energy (or square of)
for <=, the violation is zero, if energy <= 0, otherwise, it's equal.
The latter seems like the right "default" definition. We could potentially combine them into one method with something like
edit: nevermind, I misunderstood your point.
Trying that again:
Additionally could imagine keyword arguments like filter_satisfied=False which would skip any satisfied constraints.
Maybe I misunderstood the clip argument or maybe that's the wrong argument. I was expecting to see negative values for equality constraint when clip=False
This produces:
I like to be able to say that x+y+z - 2 (regardless of == or <=) has a current value/energy/evaluation of -2 or -1, or 0, etc. The violation is correct (the abs(value) for equality and value if value >= 0 for inequality).
I am confused why there would be negative values for equality constraints? This value is returning the "violation" of the constraint, and if the lhs != the rhs, then the violation is positive.
If you just want lhs - rhs, then we also should not swap the sign on the >=. Otherwise we are not being consistent in what we mean by violation.
To expand, there are two self-consistent ways we can encode this information:
If we want to do (1) then IMO we should make a separate method cqm.iter_lhs_minus_rhs() or the like, if we want (2) then I would implement it as I have in #975 . We can also have both ðŸ¤·
edited with feedback from @hsadeghidw @rahmani15 @pierrelouisp
The issue with the second suggestion is that it hides the direction of infeasibility for equality constraints.
My suggestion
I am resistant to reinterpreting the >= as <= as the default behavior. I understand why that may be convenient in some cases but IMO that's exactly the kind of special case that causes lots of user confusion.
I suppose an ugly but explicit way would be
(a) cqm.violations(..., signed_equality=True). Terrible keyword name but you get the point.
(b) cqm.lhs_minus_rhs(..., reinterpret_ge=True). Again bad name, but you get the idea.
