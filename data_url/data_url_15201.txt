The following circuit is equal to the identity:
At optimization_level=2 one gets a empty circuit:

At optimization_level=3 one does not:

What is left is a unitary that is equal to the identity (as it should be) but it is not removed from the circuit data.
Transpile above example
The circuit should be empty like at optimization_level=2
No response
So I think the issue here is that you're not specifying a target or basis_gates in the transpile call. The 2q unitary synth optimization passes need a basis to determine how to synthesize the unitary and without that being specified it's skipping the synthesis stage after the circuit is collected into a single unitary block.
That being said it's probably not too much extra overhead to add a check either in the collection pass or in the synthesis pass that still checks for identity unitary removal even without a target specified. As this isn't the first time this exact behavior has been raised in an issue.
The difference in behavior between optimization levels is the surprising part, and leaves one having to explain why the higher optimization level is also not an empty circuit; A tricky conversation when it is an implementation issue, and one that until now I was not even aware of.
#9222 should fix this issue, for 1q optimization it will try all euler basis the decomposer supports and use the result which results in the shortest 1q sequence. For 2q optimization (which is optimization level3 only) it will simplify identity unitary matricies and otherwise just add a UnitaryGate to the circuit if it's not an identity.
