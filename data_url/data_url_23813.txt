I want to pull out a discussion from #74 especialliy this discussion.
Basically what we need is a parameter-combiner class which just behaves as a parameter, but contains other parameters.
Lets say I have magnet.x_fld, magnet.y_fld, magnet.z_fld I want to combine those into a magnet.fld which takes and returns arrays, has labels for each sub param and units and so on.
And also copying my comment from this discussion:
In this case, I think the channel is similar to the mercuryIPS magnet axes and both should be handled in a similar way. In the keithley_2600 you create a new instance of the class every time you add a channel, whilst in the mercuryIPS you create a new set of parameters for each axis. I would propose to rethink this. my idea would be to create a channel class that inherits from Instrument and is an attribute of the instrument, e.g. magnet.x.field or keithley.a.volt.
This is much more fundamental than channels in individual instruments.
One might want to merge parameters from different instruments and do a sweep along a frequency-gate channel. Or temperatue-backgate...
I agree. This is important. You can for example have a quantum dot with an effective plunger gate that consists of several other gates or decoupled flux channels for transmons. In the easiest case there is a matrix translating the effective parameter to a few channels of an instrument or whatever.
@cdickel that is a good point with the matrix.
Very useful also for coordinate system translations that aligns the magnet axes with the sample.
Discussion was to add a combine or similar method, and allow tuples as parameters.
See "syntax" in https://gist.github.com/guenp/04c29aa7b5cc39cee652e7b517f00e0d#file-essentials-md
