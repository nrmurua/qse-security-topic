The usage of Adj+Ctl in some of the operations is not very clear. This  new concept is generally not a part of any general purpose programming language. Hence, a kata dedicated to the usage of the below will be really helpful for newbies like me.
Yes, I checked the documentation below, but this is not very intuitive.
https://docs.microsoft.com/en-us/quantum/techniques/operations-and-functions?view=qsharp-preview
For example:-
With some effort, newcomers can gradually understand that other than Unit, there is another datatype called Result ,which is the return type of M operation. Additionally, Q# can return tuples as output because it is a tuple in tuple out language. Therefore it's intuitive to understand what the below snippet is doing.

However, all of a sudden the usage of Adj+Ctl is not intuitive
Newbies : Ok, Adj =Adjoint  and Ctl = Controlled.
P.S. I am sharing exactly what I as a beginner am facing and believe that, most Qbies might get stuck at this point (Not sure, but definitely a possibility)
Trying little harder, I still could manage to get till the ones in green.

But the ones in Red, doesn't tell :
1. What is the significance of having those? How does it make the code different from the previous one.
2. When is it okay to skip the Adj+Ctl?
3. When is it  a must to include it?
I therefore request for a new Kata, in the tutorial section that  provides a more intuitive and hands on understanding on this topic.
is Adj+Ctl means that Q# compiler will create adjoint and controlled variants of this operation automatically for you. You include this in operations that allow this (they have to have Unit return type and have no mutable variables or measurements in the body), and you skip that when you don't want Q# compiler to generate these for you.
Have you checked out the documentation on Q# type model? It has information on what exactly this means and how Q# deals with it.
I agree this information is not very discoverable; but I think it would be better served by improving the documentation - I wouldn't want the learner to do through a bunch of tutorials if they're just looking for an explanation of this one bit of syntax for some other purpose. Let me share this issue on the documentation repo as an extra data point for future docs improvements.
I also added this request to the Roadmap of this project, so once somebody gets to implement that tutorial, this information will be more prominent in the katas as well.
