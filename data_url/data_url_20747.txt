The McEliece cryptosystem fixes n, k, t, f, and F (originally "g") as the parameters 2 parties have to agree on to inter-operate.
For example, the 6960119 parameter set fixes n = 6960, k = 5413 (from k = n âˆ’ td, d = 13); t = 119, f = { 13 , 4 , 3 , 1 , 0 }  (8219 dec), and F = { 119 , 8 , 0 } (664613997892457936451903530140172545 dec).
However, of these 5 parameters, I can only seem to programmatically extract 3:
How can these parameters be programmatically extracted?
As we have only adapted the upstream source code, this is a question for the Classic McEliece submission team.
I have implemented McEliece bindings based on the reference implementation (https://github.com/tniessen/node-mceliece-nist) and based on this repository (https://github.com/tniessen/node-pqclean), and I don't think either exposed anything besides k, m, n, and t.
I believe most modern standards prefer named, standardized parameter sets over explicitly encoded parameters (e.g., MODP groups or elliptic curves). In this case, you might not need to explicitly refer to f or F if the protocol agrees on the name of the parameter set that fixes f and F.
Agreed, these values should be mostly viewed as implementation details and are not up for negotiation.
In this case, you might not need to explicitly refer to f or F if the protocol agrees on the name of the parameter set...
Yeah, named parameters sets are another option, since they are only going to drawn from a set of hard-coded constant sets in general use...
As we have only adapted the upstream source code, this is a question for the Classic McEliece submission team.
This definitely canonically closes this ticket, anyway. I checked out the upstream source and it's only slightly less scrutable than this codebase; I didn't realize how close to the originals this codebase is kept.
