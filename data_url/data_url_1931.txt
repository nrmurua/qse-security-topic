Hello,
I am trying to package this into openSUSE Tumbleweed.
Could it be about protobuf issue?
Thanks.
The installed packages are as follows.
Full log here: https://build.opensuse.org/build/home:andythe_great/openSUSE_Tumbleweed/x86_64/python-cirq/_log
@kevinsmia1939 I can't reproduce this just yet.
I tested on a virtual env with python 3.8 and your list of dependencies.
This might a difference between protobuf 3.12.2 and 3.12.3 but I doubt it based on a look at their commit log. For some reason protobuf  3.12.3 is not yet on PyPi - I haven't had success yet installing manually. How does openSUSE pull it in?
Can you try to reproduce this issue in a virtual env separately? That would help a lot.
The bash script tests are also odd that they are failing - maybe it is something related to SUSE?
@kevinsmia1939 I can't reproduce this just yet.
I tested on a virtual env with python 3.8 and your list of dependencies.
This might a difference between protobuf 3.12.2 and 3.12.3 but I doubt it based on a look at their commit log. For some reason protobuf 3.12.3 is not yet on PyPi - I haven't had success yet installing manually. How does openSUSE pull it in?
Can you try to reproduce this issue in a virtual env separately? That would help a lot.
The bash script tests are also odd that they are failing - maybe it is something related to SUSE?
Protobuf 3.12.3 is from github repo.
https://github.com/protocolbuffers/protobuf/releases/tag/v3.12.3
I will ask other packager and will keep you update,
Thanks.
Hello,
An update.
I tried building Cirq from master branch instead of 0.8.2, some issues were solved.
Only bash_scripts_test.py failed. The rest of the issue is gone.
Also, I have to install pyquil and quimb as it is needed as dependencies for master branch.
Thanks for the follow-up: pyquil and quimb should only be required by contrib. If you need contrib, you should install requirements from cirq/contrib/contrib-requirements.txt.
The bash tests are only testing the bash scripts for development - I think you could safely skip those, they will have no impact on the validity of the package.
Thanks for the follow-up: pyquil and quimb should only be required by contrib. If you need contrib, you should install requirements from cirq/contrib/contrib-requirements.txt.
The bash tests are only testing the bash scripts for development - I think you could safely skip those, they will have no impact on the validity of the package.
Thanks for info.
While bash script test is does not test validity of the package as you mention, skipping certain test must required some justification( at least in the practice of packaging for openSUSE ), I will ask openSUSE maintainer if it is acceptable and will keep you update.
@kevinsmia1939 do you have an update here?
Also, what is the entrypoint for the tests when you run them? We could potentially introduce something there to exclude dev tool tests.
@kevinsmia1939 do you have an update here?
Also, what is the entrypoint for the tests when you run them? We could potentially introduce something there to exclude dev tool tests.
Hi, I have not submit it to openSUSE python package maintainer yet since it is a master branch, they prefer a point release.
I have not tried the latest master yet since 19 Aug, but I will try the latest one today.
I can tell pytest to ignore the dev tool test with --ignore option. So not an issue if I need to exclude some test.
About the entry point, I will do it sometime today, afk at the moment.
Does bash script test need any dependency?
I check and I do have bash installed as dependency just in case.
I'm not sure what you mean by entry point. But I think you mean where pytest was execute?
This log should give a full commands use to run pytest.
Do you have some suggestion to make Pytest more verbose?
Full log here: https://build.opensuse.org/build/home:andythe_great/openSUSE_Tumbleweed/x86_64/python-cirq/_log
As described in the Development documentation there are two ways to run tests - slow and fast.
Fast way uses git to determine which local files were modified, in order to run pytest against only those files that were modified/deffer from the BASE_REVISION.
In order for fast tests to run, a local repository (.git directory) needs to be present.
Git repository (.git directory) is not included in the official releases, and since local git repository is missing but expected, following fast tests are failing.
verbose-pytest.log
As described in the Development documentation there are two ways to run tests - slow and fast.
Fast way uses git to determine which local files were modified, in order to run pytest against only those files that were modified/deffer from the BASE_REVISION.
In order for fast tests to run, a local repository (.git directory) needs to be present.
Git repository (.git directory) is not included in the official releases, and since local git repository is missing but expected, following fast tests are failing.
verbose-pytest.log
@danchev
Thank you for the help. I hope this will be useful to @balopat .
By the way, how do you make pytest verbose?
I submit to openSUSE python repo, and they accept it but without any comments.
You can make pytest fully verbose by using -vvv.
The tests require git to be present.
The tests themselves create a temporary folder, run git init on it and test the scripts based on some changed files.
I think you can totally safely ignore these tests, they do not affect the quality of the package.
Thanks, closing this.
