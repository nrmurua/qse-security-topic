Right now pointwise optimization passes are very general and I believe they can end up having non-local effects.  However there are lots of optimization passes that literally just work on gate replacement patterns.  This set of optimization passes has the nice property that this local changes can be composed.  If we create such a type of optimization pass we could avoid places where we make multiple passes on the data.
There is no "optimizer" abstract class anymore.
In places where we just do additions, we could chain these together.  This would not have impact on the overall runtime.  It could potentially be easier to reason about, but on the other hand the ordering even of replacements matters, so it's not clear that this would have benefit.
Closing unless we see compiler patterns that make more sense.  Then it would be better to create an issue with details of the idea.
