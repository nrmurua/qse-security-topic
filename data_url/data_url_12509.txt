Dear everyoneï¼Œ If I want the PQC to output a specified state, such as: (|0000>+|0011>+|0101>+|1010>+|1100>+|1111>)1/square(6)

How to design the observable, and how to optimize and train the  PQC in TFQ?
In theory, there are two methods. The first is to define the measurement operator according to the target state, and obtain the expected value of the measurement operator to optimize the parameters in PQC, but I don't know how to define a specific measurement operator in TFQ. The second method is to directly calculate the fidelity of the PQC output state and the target state, and use the fidelity as a loss function to optimize the parameters in the PQC. I don't know which way is feasible.
Do you have any ideas or can you give me some suggestions?
Hi @yqwangncu thanks for raising this issue, this question seems like it would be more useful if asked on stackoverflow. Generally we like to keep GitHub issues reserved for feature requests and bugs. I can answer it now, but going forward maybe try to use stackoverflow and get help from the larger community :)
but I don't know how to define a specific measurement operator in TFQ...
In order to define a specific measurement operater you can make use of the cirq.PauliSum class. I would encourage you to look at the intro tutorials that cover this kind of functionality: https://www.tensorflow.org/quantum/tutorials/hello_many_worlds This tutorial also links off into our documentation that contains lots of examples of how to define operators and calculate expectation values https://www.tensorflow.org/quantum/api_docs/python/tfq/layers/Expectation
Going to close for now.
