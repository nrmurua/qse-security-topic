
The positive amplitude of a signed integer is one less ((1 << N - 1) - 1) than the negative amplitude ((1 << N - 1)). This is intrinsic and you will also find it with such fine hardware as National Instruments DACs. Currently, scaling involves just a simple multiplication with a power of two. Changing the behavior would make that calculation more expensive. You have the choice.
Could the gateware have one more bit and then clip?
This is not just gateware. If there was one more bit, it would make each of the four coefficients on that spline one byte wider, from the kernel support, all the way down into the gateware. I'd much rather change the scaling factor.
Better just to leave it as is, and add an extra explanatory note in the documentation?
The current situation is very standard for any DDS type hardware (cf AD9910 ASF).
@hartytp This would result in an inconsistent API. sawg.offset has the 2**N issue but sawg.amplitude1 and sawg.amplitude2 do not.
@hartytp Agreed that the 2**N wrapping bit is common for DACs. But sawg is a sufficiently high level interface to the DAC -- it's even got CORDICs and DUCs! -- that it ought to handle this too.
I'd be fine with a non-linear solution like the following
2^N -> 2^N -1 (fix)
2^N -1  -> 2^N - 1 (usual)
@jbqubit no. amplitude1/2 have the same issue. just there the scaling factor is already dense and therefore I moved the problem from "1.0" to "1.0 + epsilon" and thus "out of your zone of curiosity".
By that logic every "sufficiently high level interface to" a device should be expected to have solved every problem "common" to those devices by now. That is obviously not the case.
That "nonlinear" solution would be even more expensive. I'll just change the scaling factor.
I'd be fine with applying a scaling factor as for amplitude1 and amplitude2.
We can also test that the floats passed are in the range [-1.0;1.0[? (or ]-1.0;1.0[ if it makes it easier to test with any applicable bit twiddling hack)
I don't think testing will help. It does give the user some error message. But it is more expensive than changing the scaling factor and it fails as soon as someone becomes curious and expects those tests to be applied to the spline outputs as well.
Confirmed.
