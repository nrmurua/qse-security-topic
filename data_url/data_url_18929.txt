Per https://github.com/Qiskit/openqasm/blob/master/source/language/types.rst, variable identifiers can begin with a percent sign.
But this means that %0, %1, ... are valid variable identifiers, which seems like it should be disallowed since those are intended to be used for hardware qubits.
cc @ajavadia
I agree that that is problematic.
Should we reserve %<uint> for qubit declarations, or consider physical qubit identifiers to be implicitly defined?
I lean toward %<uint> being convention rather than hard-coded definition. Defcals would have to be updated to take an arbitrary qubit identifier if this was the case.
We could then have a system.qasm file.
That would then be included when mapping to a device
We could disallow % from identifiers and require %identifier as arguments to defcals? This also allows the option for arbitrary physical qubits %q.
My only concern w/ the above Thomas is what if the user decides to define their own %0? (Maybe that is just their fault)
@zachschoenfeld33 The top-level program still needs a way to refer to physical qubits. In your scenario how does that happen?
I didn't realize that % was allowed in variable names at all. I had originally thought that the % identifier was like an additional type specifier that indicated physical qubits vs logical qubits.
In the end it is probably better to have an actual separate type for physical qubits vs. logical qubits. The language and compiler can enforce the limitation that defcals can only accept physical qubits as arguments.
@taalexander defcals already accept arbitrary qubit identifiers %q occurs in https://github.com/Qiskit/openqasm/blob/master/source/language/pulses.rst all over the place.
My 0.02:
The OpenQASM 3.0 Spec: https://qiskit.github.io/openqasm/language/types.html?highlight=qubit
says this:
Q1: How does the compiler determine what %0 and %1 refer to?
Q2: What is the difference between the following two declarations:
and
To the compiler the Unicode declaration  qubit Î³; looks like a re-declaration of  qubit gamma;.
@zachschoenfeld33 The top-level program still needs a way to refer to physical qubits. In your scenario how does that happen?
You do %identifier, where identifier cannot have a percent. I think this would work? The physical qubit would be required to always be accompanied by a % and cannot be referenced solely w/ an identifier.
Honestly, while I prefer to have an actual physical qubit type to distinguish from logical qubits I think the spec already covers the original issue described above. It says, "Variable identifiers may not override a reserved identifier." This covers %0, %1, etc. as they are 'reserved.'
What is reserved should simply be spelled out elsewhere in the spec.
Given the change of physical qubits to the reserved $ identifier, I believe this issue can be closed. If further clarification is needed, we can open a PR to improve the spec
