Dear developers,
I have cloned and installed version 1.1.0 of bqskit and tested it with a 3-qubit test circuit:
OPENQASM 2.0;
include "qelib1.inc";
qreg q[3];
u3(4.707070683003517, 4.604714231023226, 0.04918238423440794) q[0];
u3(6.390994679954742, 5.094901160800916, 4.712379819519058) q[1];
u3(3.0810930115279493, 3.572893849374564, 5.262773343415476) q[2];
ry(6.391104451952066) q[0];
u3(9.20931432670505, 2.644855382159607, 6.256381761584648) q[2];
cx q[1], q[0];
ry(-6.391104451952066) q[0];
cx q[1], q[0];
u3(7.821145690948443, 4.206827121850208, 1.2955017812513867) q[0];
u3(4.728497216558546, 4.661085695713504, 2.455113454629134) q[1];
u3(-0.2771924777337314, 1.5336574476348532, 0.38986198201909245) q[0];
ry(3.3568117486807902) q[1];
cx q[2], q[1];
ry(-3.3568117486807902) q[1];
cx q[2], q[1];
u3(10.990786769077374, 3.2306352301960577, 4.658824933089809) q[1];
u3(-6.124241080777066, 1.5707954191652511, 3.48987561517256) q[2];
I created a simple python script to generate a circuit from the qasm format and read out the unitary from the circuit by the following code. (Using Qiskit and bqskit)
`
from qiskit import QuantumCircuit, transpile
import numpy as np
import bqskit
#################################
qc_qiskit = QuantumCircuit.from_qasm_file( 'test_circuit.qasm')
from qiskit import execute
from qiskit import Aer
import numpy.linalg as LA
backend = Aer.get_backend('unitary_simulator')
job = execute(qc_qiskit, backend)
result = job.result()
unitary_qiskit = result.get_unitary(qc_qiskit)
unitary_qiskit = np.asarray(unitary_qiskit)
#################################
from bqskit.ir.circuit import Circuit
circuit = Circuit.from_file('test_circuit.qasm')
unitary_bqskit = circuit.get_unitary()
################################
unitary__dot__unitary_inverse = np.dot(unitary_qiskit, unitary_bqskit.conj().T)
print( np.abs(unitary__dot__unitary_inverse) )
`
At the end of the code I am  comparing the unitaries obtained by QISKIT and bqskit. (the product of the unitary with the adjugate of the other unitary should be identity up to a phase factor). Unfortunately, they differ significantly. I have faith in the QISKIT version (justified by other packages). So bqskit does not seems to determine the unitary correctly in this case.
Problem resolved: just learned that qiskit and bqskit are numbering the qubits differently
As you discovered, BQSKit uses the convention of Big Endian while Qiskit uses the convention of Little Endian.  IBM has a note about the difference on their documentation for the CXGate.
You can flip the order of bits in BQSKit to make the unitaries match using the renumber_qudits function.  Your code should give the expected result if you add a line like this:
circuit.renumber_qudits(range(circuit.num_qudits-1, -1, -1))
This renumbers the qudits using a list that counts down from the highest qudit index to 0, which is equivalent to reversing the endianness.
Note that if you do this and then output qasm, the qasm will have the qubit indices in the reverse order.
