3
Any
Any
StringLiteral is not an option in expressionTerminator. In qasm3Parser.g4, expressionTerminator is defined as:
It seems that we need to add StringLiteral to one of the options or we cannot use StringLiteral in an expression.
Using an ANTLR tool, in my case, I used IntelliJ V4 tool for IntelliJ. Open qasm3Parser.g4, right click expression and select Test Rule expression. In the Input, enter "q". The Parse tree reports error.
The expression rule should be able to parser "q".
Need to add StringLiteral as a choice to expressionTerminator. Also need to fix the visitExpressionTerminator method in parser.py. Add more unit tests.
Strings aren't actually a valid data type in OQ3, especially now that bit strings are in properly. The only rules they should have been part of in the original ANTLR grammar were for the include statement and defcalgrammar. Now that BitstringLiteral is in for actual bitstrings, I think it's right for StringLiteral to have been removed from the expression tree.
(By the way, I'm very shortly about to PR a complete rewrite of the ANTLR parser to make it a lot shorter and more legible - it'll be good to get your thoughts on that.)
OK. Since Strings are not a type in OQ3, I agree that this is not a bug. However, since OQ3 does not have Strings, it is harder to interact with an extern that expect strings. I can see that OQ3 may not want to get into the business of string encoding, but an easy way to express ASCII strings instead of 0s and 1s would be helpful. I reclassified this issue as enhancement.
Looking forward to seeing your rewrite of the ANTLR parser.
