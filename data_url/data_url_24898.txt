Describe the bug
As per the documentation, changing i=0 and j=1 should give the rates for qubit excitation. This excitation rate should differ from the relaxation rate by a factor given by \frac{S(-\omega)}{S(\omega)} = \exp{\frac{\hbar \omega}{k_B T}}. But currently the output for both is identical which is incorrect.
Expected behavior
The excitation coherence limit should be more than the coherence limit due to relaxation between any two levels.
To Reproduce
fluxonium.plot_coherence_vs_paramvals(param_name='flux', param_vals=np.linspace(-0.5, 0.5, 101), scale=1e-6, noise_channels=['t1_capacitive', ('t1_capacitive', dict(i=0, j=1))],  ylabel=r"ms");
OS and version used (please complete the following information):
Additional context
Maybe this should be part of the test script?
Be default, both up and down rates are summed up. If you don't want this behavior, you need to pass total=False option. This is documented at the top of the docs page you linked (inside the "Note" box).
You can try this to see it in action:
Note the bottom left plot looks like the top row, presumably because the downward rate dominates.
We had internal debates on what most users would expect the default behavior to be, and in the end ran a poll among our friendly neighborhood experimentalists. The result was overwhelming to have total=True be the default.
I think it's worth thinking about this once more. I am not suggesting to change the default, I do respect the majority voting result.
However, what I continue to find confusing is that I can choose i=0, j=1 or i=1, j=0. These are distinguishable, tempting one to think that the choices should give different results, which is consistent with individual up and down rates.
This is "bug" report number 2 on this topic (which is more than we have seen on nearly any other issue). We are correctly documenting this. But maybe there's more we can do to avoid confusion? (One trivial step I will take is to update the bug report template, adding a box where the user needs to confirm that they have read the documentation about the function in question before filing a bug report.)
Actually, I take one thing back. I find the documentation confusing, too. The table here https://scqubits.readthedocs.io/en/latest/guide/noise/depolarization.html talks about "initial state" and "final state". "Initial" and "final" are meaningless if the default is the total rate.
hmm... I agree about the tables - indeed could clarify that some more. Maybe I could link to the little note we have at the top from all the tables, where i and j are described.
Another thing we could do would be to force the user to pass total any time i and/or j are given. We could have a nice informative error message shown when this is not done. That would make things more cumbersome, but perhaps clearer?
Alternatively we could also change the interface somewhat, and instead of having i, j and total be separate entities, we could have the users pass a tuple such as (i,j,False), with the third element determining the value of total. That would probably be optimal, but interface changes aren't pretty...
Thoughts?  and/or better suggestions?
I'd be in favor of a temporary "zombie" version with a FutureWarning, analogous to what we are doing with InteractionTerm:
After a fair-warning period has passed, we de-zombify the code and drop support of the old interface?
In the latest version (2.0), we added a warning that shows up the first time any method that calculates t1 times/rates is called. We also expanded the depolarization section in the documentation, making the default behavior much more clear for every relevant noise channel.
Closing this, but please reopen if you still find issues.
