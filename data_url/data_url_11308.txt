I've been looking over PolynomialTensor after seeing some PRs touch it, and had a few questions. I'm not very familiar with the class, so I think one of them might be a misunderstanding, but the others appear to be problems that are a) not sufficiently tested and b) could give errors in the code.
My questions have to do with several places where a TypeError is raised, or tensors are considered unequal, if self.n_body_tensors.keys() != other.n_body_tensors.keys() in https://github.com/quantumlib/OpenFermion/blob/master/src/openfermion/ops/_polynomial_tensor.py.
The questions I have are
Thoughts?
This is true in Python 3 but not in Python 2, see e.g. https://stackoverflow.com/questions/5629023/key-order-in-python-dictionaries .
This is a fair question in general - I don't have a good solution really. I agree that isclose is a better way to handle things rather than __eq__ at least for the purposes of consistency.
I think you're misinterpreting a point about functions and methods from the docs (I think you might be looking at the second paragraph of https://docs.python.org/3/library/exceptions.html#TypeError ?). The paragraph below clarifies this - "Passing arguments of the wrong type (e.g. passing a list when an int is expected) should result in a TypeError, but passing arguments with the wrong value (e.g. a number outside expected boundaries) should result in a ValueError." In this case the arguments would be of the correct type but incorrect value (the dictionaries x.n_body_tensors and y.n_body_tensors have different keys), and a ValueError or similar would be the appropriate error to raise.
Three. Okay, I agree that we should raise ValueError in some of these cases then.
@idk3 I made a new issue at #274 to implement the changes discussed here. Do you think that covers everything? If so I think we can close this issue.
