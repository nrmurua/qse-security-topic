At the top level, it would also make sense to add support for passing openqasm3.ast.Program to through circuit wrapper and having compatibility with the transpiler, e.g.
This new integration would simply extend the existing functions implemented in OpenQASM 2 & 3 modules by extracting the underlying qasm string before making a conversion, e.g. the circuit wrapper would just perform openqasm3.dumps(qasm_program) to convert to qasm2 or qasm3 string, and then perform the conversion as usual.
As a second part to this issue, I'm thinking that the OpenQASM 2 & 3 wrapper classes and interface modules could potentially be streamlined if we use the openqasm3 package to process input/output qasm string program types. There might be some elegant way to leverage the built-in features of the openqasm3 package to reduce redundancy/simplify some of the existing functions e.g. openqasm3.parser to simplify draw_circuit(), convert_to_qasm3,  and/or openqasm3.printer to simplify _qasm3_random.
@TheGupta2012 By the way, you might've noticed but I removed the explicit openqasm3.ast.Program wrapper class because almost all of its methods were redundant with the existing OpenQasm3Program string wrapper class, and instead just detected the openqasm3.ast.Program type in the circuit_wrapper function, and dumped it into a string before proceeding:
https://github.com/qBraid/qBraid/blob/79306c1be8e9d9dff7c4cdc4c3247467f58993a7/qbraid/wrappers.py#L57-#L58
Yea that makes more sense I guess, I was also feeling some redundancy while building that class.
