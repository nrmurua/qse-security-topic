Following our discussion, we should test the code examples in docstrings.
One possibility is to use https://docs.python.org/3/library/doctest.html
@andrea-pasquale could you please give a try?
Of course, I will look into it.
Using the doctest library all the code examples must be converted into an interactive python session. For example
should be changed to something like this:
where the line print(c.draw()) is compared to the drawing of the circuit below when executing the code.
If this looks good I can implement it in all the other docstrings.
In the case where we expect a certain tensor in output do I need to compare it directly, just as in the previous example with the circuit, or should I only limit the check only to the execution of the line?
I ask this because in the case of tensors the output depends on the backend used, therefore the example in the docstring must specify correctly the backend and the printed tensor.
where the line print(c.draw()) is compared to the drawing of the circuit below when executing the code.
I guess the initial idea was to just check if the code cell works, eg. if it executes or raises any error but not necessarily check the output. This would be a good first step on this. If you can also check the output this would of course be even better but may be much harder to implement as you might find cases in the examples where we don't specify the output and even when we do there is no specific structure to where or how we specify.
I ask this because in the case of tensors the output depends on the backend used, therefore the example in the docstring must specify correctly the backend and the printed tensor.
Generally in tests if you like to check whether two tensors agree you can use
which should work for any backend and regardless of the types. For example final_tensor can be tf.Tensor while target_tensor is np.ndarray and this will still pass as long as they have the same shape and values. Following what I wrote above though, I am not sure if this can be incorporated in the doctest case. For example if you want to compare printed tensors then it's a completely different story.
I guess the initial idea was to just check if the code cell works, eg. if it executes or raises any error but not necessarily check the output. This would be a good first step on this.
Ok, so for now I will be focusing on this and maybe include some simple check like the previous one.
For example if you want to compare printed tensors then it's a completely different story.
Of course, I was thinking the same.
Thank you, @stavros11.
If I understand correctly, in order to use the doctest library it is required to edit all examples in both the source code and the documentation itself.
I guess the rendered docs would also change as well.
It may be tedious, so I would suggest to implement such tests only for a small portion of the code, then maybe open a PR so that we can discuss if it's actually what we want or look for alternatives (maybe this https://www.sphinx-doc.org/en/master/usage/extensions/doctest.html)
Shall we close this issue?
Yes, lets close it now. Thanks.
