In #7211 we refactored the search algorithm in the BasisTranslator transpiler pass to perform a dijkstra search using retworkx. To accomplish this the pass had to generate a retworkx graph object from the EquivalenceLibrary on demand and then perform the dijkstra search over that graph. However, it would be better if the equivalence library itself just internally wrapped a graph object. The data in the EquivalenceLibrary is inherently a graph and using a graph representation for the internal data model makes sense and will also improve the performance of the basis translator because there will be no overhead for constructing the graph object.
The output of this issue should be to change the internal _map attribute of the EquivalenceLibrary with a retworkx.PyDiGraph object built as the basis translator does during it's basis search: https://github.com/Qiskit/qiskit-terra/blob/8a3e760ffaf6dcd06c0a0e04f13612fdefd9ab3c/qiskit/transpiler/passes/basis/basis_translator.py#L470-L502
We should maintain the same public API that exists on the class, but just change the internal data model (and likely add helper functions to access the graph object). Then after we update the EquivalenceLibrary in a second pull request we can update the BasisTranslator to leverage the internal graph object instead of creating it on demand for each search.
I'd be interested in working on this.
Thanks Edwin, let me assign you.  Matthew's not at work this week, so he might be slower to respond than usual.
