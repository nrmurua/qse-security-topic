C(X).generate_command(q) doesn't return a command equal to what C(X) | q sends to q's engine.
Also, note that the implementation of projectq.ops.ControlledGate.__or__ imports projectq.meta. This is a cyclic dependency. projectq.meta depends on projectq.ops.
Yes, but this is not a requirement (the same is true for Tensor, btw). generate_command is really just a helper function to facilitate implementing custom gates. Maybe we should add such a statement to the docs.
I guess the "nice" way to handle this would be to introduce a decomposition rule for ControlledGate, but this would affect performance.
We decided to create a nice syntax for the user by overloading the __or__ operator not only for user code but also when writing internal code such as decomposition rules. So applying gates to qubits is always done using | which creates a consistent looking syntax.
If generate_command is not able to match the behavior of __or__, then I strongly recommend removing  generate_command. The non-matching behavior causes generate_command usage to be a bug.
What do you mean by 'the non-matching behavior causes generate_command usage to be a bug'? generate_command is just a helper function to facilitate implementation of custom gates.
Isn't generate_command supposed to return the command(s) caused by applying the gate to some qubits?
No, it's really just a helper function so one does not have to re-implement the same thing over and over again. We should probably add this to the docs if it causes confusion, explicitly stating that it's just a helper function and that there are no guarantees / requirements w.r.t. the or-operator.
In that case I would recommend renaming it (e.g. include the word "helper").
Yes, we can do that. I'll close this issue since it does not return incorrect results.
