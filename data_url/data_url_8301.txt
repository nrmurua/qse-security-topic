Hello
I'm working on a qutrit system (spin 1). Eventually need to do some pulse optimization but for testing I tried to propagate using a very simple Hamiltonian, namely just Sz^2 with D=2000.
Units are Âµs for time (so MHz for frequency).
versions used:
I solve with sesolve or mesolve with  (|+
1> + |0>)/sqrt(2) as initial state.
expected: quite trivially, population should stay 1/2 for any t for |+1> and |0>, 0 for |-1>
result: population of  |+1> goes down linearly and |0> goes up
a few observations:
it does not seem like having a coefficient on the order of 10000 or 10^5 time steps is that unreasonable, does it ?
anyway, this is about the right, convenient choice of unit for us here.
any idea what's wrong ?
here's the result I get:

Hi,
This seems to ba accumulation of numerical error.
You can increase the solver precision (atol, rtol, max_step) in options:
sesolve(..., options=qutip.Options(atol=1e-9).
You could also remove the normalization of the state Options(normalize_output=False), then the error will not spread to the "010" state.
ah great the rtol set to 1e-9 solved it.
thanks a lot !
out of a curiosity I need to ask though: why is the bias so constantly driving the population exclusively downwards (or upwards) ? I have no idea where the numerical error actually comes into play but I would have expected the error to be a lil' more all over the place...
This error comes from the integration algorithm.
Take a differential equation like dy/dt = -iy.
With a simple method like euler:
y(t+dt) = y(t) + f' dt = y(1-idt)
So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.
The default method we use is "adams" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.
I see. thanks a lot!
