@MarquessV
Description: This proposal aims to introduce a new feature to PyQuil, specifically a realistic noise simulation of Rigetti's QPU. This feature will enhance the current PyQuil simulator's capabilities (noise.py module) by providing a more accurate representation of noise.
Problem: Quantum computers are sensitive to noise from various sources, such as gate and measurement errors, decoherence, and environmental factors. Accurate simulation of these effects is crucial for researchers and developers to better understand their impact on quantum algorithms and design error-correcting techniques. While PyQuil already provides a noise simulation framework (noise.py module), the current implementation lacks the ability to simulate realistic noise in Rigetti's QPU, which limits its usefulness for those working with this specific platform.
Current Implementation: PyQuil's noise simulation framework includes two main components, the QVM and the noise.py module. they support basic noise models, such as amplitude damping and dephasing channels and readout.  However, these models do not use the real parameters from the calibrations of the real QPUs at Rigetti and missing some additional channels of noise which can be measured in Rigetti's QPU.
We propose to enhance the noise simulation of Rigetti's QPU in PyQuil by incorporating the following features:
Calibrations (Class): Introduce a dedicated class to handle the most recent calibration data from Rigetti's QPU, such as gate fidelities, readout error rates, and qubit coherence times. This class will enable the creation of realistic noise models based on actual hardware specifications.
Single qubit noise - amplitude damping and dephasing: Improve the single-qubit noise simulation by including both amplitude damping and dephasing channels, which will provide a more accurate representation of the types of noise experienced by qubits in a real QPU.
Depolarizing channel: Include the depolarizing channel in the noise model, which represents a common type of noise in quantum gates and is essential for accurate simulation of quantum computation.
Readout noise: Add support for simulating readout noise, which is a significant source of error in quantum computation, especially when dealing with measurements.
Custom Intensity parameter: Allow users to customize the intensity of the noise model parameters, such as gate error rates, qubit coherence times, and readout error rates, enabling them to simulate different levels of noise or the effects of ongoing hardware improvements.
Support for non-native gates: Extend the noise simulation framework to support non-native gates, which are important for users who want to test custom gate sets or investigate the impact of gate decomposition on their algorithms.
github repository
Thanks again for this! Really excited to dive into the notebook and play with the examples.
As a next step, would you mind opening a pull request? This will let us easily see what code you are adding, give feedback, validate the code against our test suites, and finally, merge it directly into pyQuil when it's ready. Here's a quick guide:
Once the pull request is open, feel free to tag me in it and we'll take a look!
