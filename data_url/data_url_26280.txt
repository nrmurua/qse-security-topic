Create a function that yields the generalized singlet state acting on two n-dimensional systems. This state is defined as:
where swap_operator.
This feature should be added as toqito/states/singlet.py and should include proper test coverage defined in tests/test_states/test_singlet.py. Examples and documentation should be added to the function comments and the feature should also be mentioned in docs/states.rst
Hi @vprusso, I'm having trouble with the testing of the relative_entropy function. I will rest a day or two from that function. I will try to create this one in the meantime. This is the first time I see this definition of a Singlet state. Can you provide more information about it?. If I understand correctly, this function creates the density matrix for a generalized singlet state?
Thank you so much for the help!
Hi @victor-onofre. No problem on the relative_entropy front. I've responded to your comment there and hope my input is valuable. Of course, let me know in any case.
Regarding the singlet state, yes exactly, this is a function that is intended to calculate an n-dimensional singlet state. The mathematical definition of that state is provided in the description of this task. Fairly direct, but of course, if you have any follow-up questions on that, I'm happy to help.
Cheers!
Hi @vprusso, I have made a pull request for this function. I hope there are not many problems as in the past one.
Thank you!
Hi @victor-onofre. Excellent, thank you again for your contributions. I added only a few minor comments, but aside from that it overall looks pretty good! Let me know when you address those comments, and I'll include it in toqito. Thanks again, and great job! Looking forward to more contributions!
Thank you for reviewing my code @vprusso. I have made the changes to the function.
I will definitely keep contributing to  toqito . Is a perfect opportunity to learn new things! :)
Awesome, looks good to me, @victor-onofre! Thanks again for your efforts, and looking forward to seeing more contributions from you. Cheers!
Closing as this was implemented in #67. Thanks again!
