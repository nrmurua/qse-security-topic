Currently, the OQS-OpenSSL_1_1_1-stable branch only supports liboqs's master. Enable using the nist-branch.
Strategy for v0.1.0: use a define in oqs's config to detect the version/branch (see oqs PR429), and ifdef the openssl functionality accordingly. For the following release, we could enable/disable each algorithm based on their define macros.
The version based approach makes sense.  Once 429 and the corresponding master branch code land, we can do the code here.
For the following release, enabling/disabling each algorithm based on their define macros still wouldn't be enough I think, because the same macro may indicate the presence of e.g. Picnic in both master and nist, but they still use different APIs.
Yes, the per-algorithm macro wouldn't be sufficient; we'd still need a nist vs master branch define. They would however help to detect if an optional alg is enabled (e.g. bike).
Oh yes, that makes sense.  I thought we were already doing that, but if not, we should.
PR #46 enables the above-mentioned strategy.
I've merged PR #46.  One thing I noticed that was missing (but I didn't want to block the merge) was that there's no OQS_DEFAULT curve in the list of supported curves. Can we add one?  OQS_DEFAULT is the only way to map on to the additional KEMs in nist-branch that are not exposed as named algorithms in OpenSSL.
@smashra Since PR #46 has landed, you can now update the integration testing script to have the OpenSSL 1.1.1 + nist-branch configuration.
Yes, I can add OQS_DEFAULT; I'll also update the README and see if I can add the other nist-branch algs. I'll work on it tonight (after the Halloween celebrations :))
I started to work on a new PR adding OQS_DEFAULT, but it's taking longer than expected because I'm also adding the other nist-branch KEMs. I'll finish and push it tomorrow
See PR #47 adding OQS_DEFAULT and nsit-branch KEMs.
Resolved by #47.
