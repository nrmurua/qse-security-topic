The method QuantumVolume at qiskit.circuit.library.quantum_volume can be used to  generate quantum volume circuits. Some of the circuits generated by this method throw an error when they are saved as a QASM file, and then read in using QuantumCircuit.from_qasm_file(path)
This circuit:
was generated using the qiskit.circuit.library.quantum_volume method. When I run this code:
I get the error
Naming each su4 declaration with additional unique numbers so there are no duplicates.
It seems like a QASM2 exporter bug. The gate su4_976 is indeed declared twice with the same definition.
Hi @epelofske-LANL , I was trying to reproduce the issue but I could not find any case. The point is to find a qiskit.circuit.library.quantum_volume.QuantumVolume that, when exported to QASM2, ends with to repeated gate declarations. I tried this:
In other words, how did you build qasm_error_circuit.txt?
@1ucian0 For some reason, I never encountered the error while handling the circuit as a qasm string returned by the QuantumVolume method. The only time I ever got an error was when reading in the qasm file using QuantumCircuit.from_qasm_file. As for exactly how to generate a circuit which has this repeat declaration, I do not have a random seed saved that does this. However, in my experience the rate at which these circuits occur is somewhere a bit under 1% of the time - if you generate 1,000 random circuits the error should occur. Also, the error seems to be somewhat independent of the num_qubits argument. I got this error for num_qubits=3,4,4,5, and higher.
The only time I ever got an error was when reading in the qasm file
that's because the file is not valid. QASM2 importer does not allow double gate declaration. That's way the focus should be in how that invalid qasm file was generated. I assumed it came from something like QuantumVolume(3, 4).decompose().qasm(). It this a fear assumption?
btw, 10'000 circuits and still nothing:
@1ucian0 The way I have encountered the error is from QuantumVolume(5).qasm() (and then reading that qasm from a file). Edit; yes it should be QuantumVolume(5).decompose().qasm()
What I mean is that I did not encounter an error when running the code you have above - i.e. circuit.qasm never threw an error even if there was a double gate declaration. Specifically only QuantumCircuit.from_qasm_file threw the error. I am guessing that is why you are not seeing an error even after 10,000 tries.
I just wrote this code:
It gave this output:
Total number of errors = 30
And here are some of those 30 files it produced:
1.txt
2.txt
3.txt
Could you post the output of
I can't produce any errors with your script on any Terra 0.18.x or the current main, and the format of the files you're providing isn't consistent with the output of Terra 0.18.  In yours, each gate is defined immediately before it is used, so the lines go
but Terra 0.18 will output something like
with all the gate definitions first, followed by the main programme.  I suspect your environment might have gone wrong somewhere, and a Terra from the 0.17 series or earlier has ended up on the path by accident, which is before #5887 was merged to fix many of these problems.
What I mean is that I did not encounter an error when running the code you have above - i.e. circuit.qasm never threw an error even if there was a double gate declaration.
Also, @epelofske-LANL: we understood that the bug was in reading from the file, not generating it, it's fine.  The error was telling us that there was a duplicate error definition, so @1ucian0's attempt to reproduce it was a streamlined version of that.  Instead of parsing the QASM each time, he just slimmed it down to a quick regular expression that checked if any gates were defined twice, so he could run more loops quickly.  If you run that error detection on one of your bad files, it should find the problem as well.
I suspect your environment might have gone wrong somewhere, and a Terra from the 0.17 series or earlier has ended up on the path by accident, which is before #5887 was merged to fix many of these problems.
@jakelishman Yes, that is the problem. According to pip I have qiskit-terra==0.18.1 installed, but  the actual version I am using is 0.17.0:
Ah, that's good to know!  Thanks - bugs are always super scary when we can't reproduce them, so good to know the cause in the end.
In general, conda and pip play a little weirdly together. When you're using packages from both at once, conda list is typically a little more reliable than pip list, because conda knows how to read pip's status, but it doesn't really work the other way around.
