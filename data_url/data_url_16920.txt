I've been looking into this one. For the original code you posted, I currently have it returning
This is how it returns other types of circuits:
I think I can improve the code I used for these. I currently have another method which handles creating the actual qasm string for the composite circuit, which gets called within the qasm() method if the instruction is a composite circuit. So I will continue to look into improving the code I have, but just wanted to make sure what is being printed out seems acceptable.
For the original code you posted, I currently have it returning
That output would solve thins problem! Are you planning a PR?
gate circ_c q[0] c[0]; {h q[0]; measure q[0] -> c[0]; }
I dont think that QASM supports that.
gate nested q[0]; {gate nested_2 q[0]; {h q[0]; } nested_2 q[0]; }
Similarly here, I think nested definitions is not a QASM thing...
I dont think that QASM supports that.
Which part is not supported? I can edit it so that it only includes syntax supported by QASM. I can also remove the nested definition handling as well.
I will open a PR, but will not be able to until Jan 21st, as I am unavailable until then.
Which part is not supported?
The QASM specification does not allow classical bits as arguments. I think. Check out if you can parse them back.
I will open a PR, but will not be able to until Jan 21st, as I am unavailable until then.
Great! We can wait until  then.. no worries.
If the classical bits and nested composite circuits are not allowed, what should be done in the case where the composite circuit includes a one of these? Should I implement a check to make sure these are not included, or should I assume these will not be included?
A related issue that has been open for a year:
#1566
It is the inverse of this issue. Seems there is an open PR for it but does fully work.
