There is no standard library included in python which allows to plot a vector, but there are several external libraries that cover this. In Issue #16, matplotlib has been mentioned. Is this your requested library for this @qutech/bluhm-group?
In my opinion matplotlib is the easiest way to go and maybe one of the most mature plotting libraries for python out there. On my quick search for alternatives I stumbled across pyqtgraph which feels faster and more interactive(zooming with mouse wheel YAY).
As we will only use the library for plotting the waveforms I would tend to PyQtGraph as I like the interface better. I recommend having a look at the examples which are shipped with it via:
import pyqtgraph.examples
pyqtgraph.examples.run()
We might want to look at whether the respective plotting library is compatible with the ipython notebook, as it is a popular interface for scientific python or at least its event loop is compatible with ipython. This is certainly true for matplotlib.
EDIT: pyqtgraph is indeed a lot more responsive and pretty powerful. There are nice demo examples and things like linked graphs with one showing a zoom-in on the other are reasonably easy to implement. The biggest drawbacks seem to be maturity (compared to matplotlib) and that it is an "external dependency" (given matplotlib's status as de-facto standard)
Compatibility with the iPython event loop is indeed very useful. matplotlib is easy to use and similar to Matlab, hence convenient. However, it appears to be rather slow. Alternatives would include chaco or interfacing with gnuplot, as done by QTlab. pyqtgraph also sounds fine at first look.
For a quick and light duty implementation similar to what we have so far, matplotlib should be fine. Performance may only be an issue when plotting many similar waveforms in a movie-like way. Before investing a major effort, the alternatives should be investigated though.
I would also prefer matplotlib for now. There is a performance comparison of chaco, gnuplot and matplotlib (redraw everything or only update data) here. Matplotlib is actually not so slow when only updating data and not redrawing the whole figure (see pylab2 example code in the link).
VisPy might be interesting (very good performance, GPU accelerated, OpenGL based) in the future but is a very young project at the moment.
OK, so let's just use the standard matplotlib package for now. There is one more issues that I would like to address regarding plotting. Even in the simple case of a Table Pulse we currently have no method to just apply parameters to a pulse without also providing a Sequencer (although there is a dummy sequencer in the tests that might be useful for plotting)
there is now a simple prototype in the issue-40_plotting branch.
Closed: Is implemented.
