The following minimal code causes segfault
See above.
There should be no segfault.
No response
The segfault here is a missing safety check in Aer - it should be a Python-space error - but overall, this failing is expected (and required by our data model).  Aer says that it knows about a p gate in its basis set, and Aer expects that to take one parameter.  This gate says "I supply the p gate", but it doesn't have any parameters, so when Aer looks for one it errors.  Any backend that supports a gate called p with a parameter should throw an error when given this circuit after transpilation.
The simulations probably work if there's no measurement or storage because Aer throws away instructions without simulating them if it detects that they have no observable effect, so it wouldn't ever try to access the missing parameter.
I'll transfer this to Aer because I think we can insert a sanity check on the parameters when we lower this to the C++ parts to ensure the error is in Python space not a segfault, but an error is the correct behaviour.
