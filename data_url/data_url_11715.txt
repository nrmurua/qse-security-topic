{'qiskit-terra': '0.11.1',
'qiskit-aer': '0.3.4',
'qiskit-ignis': '0.2.0',
'qiskit-ibmq-provider': '0.4.5',
'qiskit-aqua': '0.6.2',
'qiskit': '0.14.1'}
Executing on IBM Q Experience Jupyter Notebook Server
Executing on IBM Q Experience Jupyter Notebook Server
When using LogicalExpressionOracle to create an oracle from an expression, sometimes the circuit is not correct. For instance, with expression '(x & y) | (~x & ~y)', the circuit evaluates input 00 to 0 (it should be 1)
from qiskit import *
from qiskit.aqua import *
from qiskit.aqua.components.oracles import *
from qiskit.aqua.algorithms import *
expression = '(x & y) | (~x & ~y)'
oracle = LogicalExpressionOracle(expression)
c = oracle.construct_circuit()
c.add_register(ClassicalRegister(c.n_qubits))
c.measure_all()
backend = Aer.get_backend('qasm_simulator')
job = execute(c,backend)
print(job.result().get_counts())
The code above should give 1 on the output bit every time
When using optimization to build the oracle (LogicalExpressionOracle(expression, optimization=True)) the circuit seems to be correct, at least with expression '(x & y) | (~x & ~y)'. The error might have to do with the way the expression is processed when no optimization is present.
Thanks!
