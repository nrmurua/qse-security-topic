@marcusps suggests that readout symmetrization is a useful way to improve error rates in readout by averaging over measurement of 0 and 1 states. The general procedure, as I understand it, is this:
Given an instruction like
uniformly randomly either do nothing, or transform it to
This will, over many shots, symmetrize the behavior of MEASURE, giving it asymptotically 50% chance of reading out 0 or 1.
It would not be wise to actually transform the Quil program, and this sort of thing ought to happen during compilation to actual quantum machine code. But for the purpose of simulating error, we can install this behavior into a transition method, probably on the noisy-qvm class where it's actually useful.
The improvement comes not from the symmetrization per se, but the fact the symmetrized errors in readout are easier to correct for.
The correct, IMHO, is OK to be performed at a higher level in the stack. Symmetrization should happen by inserting special instruction during compilation (similar to what you suggest), but also by coordinating with lower parts of the stack during execution. For that reason, others may want to chime in, in particular @caryan and @blakejohnson
Regarding the instructions you suggest, I would propose instead that
be replaced with
and some additional logic to only flip c if theta is pi (and not flip when it is 0). The reason to leave it parametric is that during execution we can choose to either randomly symmetrize, or to exhaustively symmetrize (if it isn't too expensive).
