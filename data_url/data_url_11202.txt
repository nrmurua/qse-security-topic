With the current state of the docs (and given that the new filestructure might still need some edits), finding whether or not a function already exists can be difficult (esp. if the function is in an odd location). An easy solution to this is to make imports explicit right down to the root directory, as then one can ctrl-f in the init file.
Also, being explicit prevents having multiple functions with the same name being defined and overwriting each other (... or at least means that it becomes easier to catch).
@ncrubin you had some qualms with this, wanted to raise an issue to start the debate before just dropping a PR.
Originally I thought it it wasn't necessary to import from submmodule init.py with wildcards (especially from the same global namespace that we were maintaining...because surely we wouldn't use the same method name in two locations and it wasn't obvious to me that this would prevent a name collision!) but @viathor gave some great reason for why not to use wildcard imports in init.py.  Put simply, namespace collisions can lead to methods being overwritten when the module is loaded.  Furthermore , there is no guarantee if code is in the init.py and thus wildcard import can potentially have an unwanted side effect--for example loading constants defined at init.py level.  I think this is what you are also saying so it looks like I'm just catching up.  I can assign this issue to myself since I did the damage!
