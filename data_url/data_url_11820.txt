At present circuit cache unit test does an overall test of an energy computation with and without caching aspects to test that the final result is not altered. This test should also assert other cache behavior such as num misses and num hits to test that the cache internally is doing what we expect.
Ideally other finer grained aspects of just the caching should be tested so its more a unit test. E.g for a given circuit test it caches it as expected. Check that clear indeed clears/resets etc.
Makes sense - two things:
In #306, I added the miss check where I am able to today. When that's ready it'll be in the master. Second, I'll be able to confirm misses for the dictionary-based instantiation once #308 is merged in. As of now, I don't have access to the cache object inside the quantum instance.
I also wanted to add a time-based check to make sure the caching is actually speeding up the computation as intended, but I'm not sure that's a "test," or more a benchmark (but still should be checked during PR submission). Do we do anything like that today?
Given that in setup of a test you could run without caching, that would set some baseline performance, this could be used to assert that with the caching it was faster (maybe faster by some factor).
Caching tests have been improved as part of above PRs
