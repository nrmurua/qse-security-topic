The mutability of the controls on a command is creating weird dependencies across API boundaries.
For example, submitting a command to an engine can cause it to have new controls. Very surprising, very easy to cause bugs.
Yes, this is true more generally (i.e., not only for control qubits).
Our rule is that every engine may modify all commands in its local buffer until it sends them on to the next engine. We could get rid of this rule and the mutability in general, but this would cause substantial overhead due to copying. And performance becomes an issue rather quickly when trying to compile large algorithms for resource estimation.
Is the performance of the pipeline actually an issue? All of the expensive inner-loop stuff is in the simulation.
I agree that making copies is slower, but I would expect it to be negligibly slower in this case.
Do you have a performance test for this scenario?
Yes, it is actually quite a large issue. For large circuits, the overhead from Python function calls in the pipeline results in long run times. Just try getting resource estimates for shor for N > 100 by compiling to rotation gates, for example. Even without simulating, this takes quite some time.
For small circuits, which are important for near-term applications, Python function call overheads influence the runtime significantly as well, even when simulating. For example, cutting the number of engines in half resulted in a 2x speedup of an entire QAOA run.
Closing issue as I think this has been addressed by expanding the Command initializer.
