from qiskit_optimization import QuadraticProgram
from qiskit_optimization.translators import from_docplex_mp
from docplex.mp.model import Model
mdl_red = Model(name="TSP-Variable Reduction")
m = G.number_of_nodes()
y = {(j, l): mdl_red.binary_var(name=f"y_{j}_{l}") for j in range(m) for l in range(m) if j!=0 and l!=0}
tsp_func_red = mdl_red.sum(
G.edges[j, w]["weight"] * y[(j, l)] * y[(w, (l + 1) % m)]
for j in range(m)
for w in range(m)
for l in range(m)
if j != w and j!=0 and l!=0 and w!=0 and (l+1)%m != 0)
mdl_red.minimize(tsp_func_red + y[(1, 1)] + y[(1, 3)] + y[(2, 1)] + y[(2, 3)] + y[(3, 1)] + y[(3, 3)])
for j in range(1,m):
mdl_red.add_constraint(mdl_red.sum(y[(j, l)] for l in range(1,m)) == 1)
for l in range(1,m):
mdl_red.add_constraint(mdl_red.sum(y[(j, l)] for j in range(1,m)) == 1)
qp_red = from_docplex_mp(mdl_red)
print(qp_red.prettyprint())
Problem name: TSP-Variable Reduction
Minimize
y_1_1y_2_2 + y_1_1y_3_2 + y_1_2y_2_1 + y_1_2y_2_3 + y_1_2*y_3_1
Subject to
Linear constraints (6)
y_1_1 + y_1_2 + y_1_3 == 1  'c0'
y_2_1 + y_2_2 + y_2_3 == 1  'c1'
y_3_1 + y_3_2 + y_3_3 == 1  'c2'
y_1_1 + y_2_1 + y_3_1 == 1  'c3'
y_1_2 + y_2_2 + y_3_2 == 1  'c4'
y_1_3 + y_2_3 + y_3_3 == 1  'c5'
Binary variables (9)
y_1_1 y_1_2 y_1_3 y_2_1 y_2_2 y_2_3 y_3_1 y_3_2 y_3_3
Then I use the QuadraticProgramToQubo module to reproduce the Ising Hamiltonian with the code
from qiskit_optimization.converters import QuadraticProgramToQubo
qp2qubo_red = QuadraticProgramToQubo()
qubo_red = qp2qubo_red.convert(qp_red)
qubitOp_red, offset = qubo_red.to_ising()
print("Offset:", offset)
print("Ising Hamiltonian:")
print(str(qubitOp_red))
The Ising Hamiltonian has been reproduced successfully, but when I try to create a QAOA circuit of the Hamitonian, as the code
gamma = Parameter("$\gammma$")
qc_qaoa = QuantumCircuit(N_QUBITS)
U_qubitOp_red = (gamma*qubitOp_red).exp_i()
U_qubitOp_red.to_circuit().decompose().draw(output='mpl', style={'subfontsize': 20})
An error occurred as
TypeError: can't convert expression to float
The above exception was the direct cause of the following exception:
TypeError                                 Traceback (most recent call last)
Cell In[27], line 4
2 qc_qaoa = QuantumCircuit(N_QUBITS)
3 U_qubitOp_red = (gamma*qubitOp_red).exp_i()
----> 4 U_qubitOp_red.to_circuit().decompose().draw(output='mpl', style={'subfontsize': 20})
File ~\anaconda3\envs\my-quantum-env\lib\site-packages\qiskit\opflow\primitive_ops\primitive_op.py:283, in PrimitiveOp.to_circuit(self)
281 """Returns a QuantumCircuit equivalent to this Operator."""
282 qc = QuantumCircuit(self.num_qubits)
--> 283 qc.append(self.to_instruction(), qargs=range(self.primitive.num_qubits))
284 return qc.decompose()
ile ~\anaconda3\envs\my-quantum-env\lib\site-packages\qiskit\circuit\parameterexpression.py:477, in ParameterExpression.float(self)
475 # TypeError is for sympy, RuntimeError for symengine
476 except (TypeError, RuntimeError) as exc:
--> 477     raise TypeError(
478         "ParameterExpression with unbound parameters ({}) "
479         "cannot be cast to a float.".format(self.parameters)
480     ) from exc
TypeError: ParameterExpression with unbound parameters ({Parameter($\gammma$)}) cannot be cast to a float.
As previous sections, reproduce Hamiltonian and assign parameters to form a circuit as the codes mentioned above.
The QAOA circuit should be reproduced, not raising "Parameters cannot be cast to a float". I tried another Quadratic Program Qubo problem before, the error didn't happen.
Is there a solution to find the possible defects in ParameterExpression.float(self)? Or there is another problem?
I would suggest to look at this https://qiskit.org/documentation/stubs/qiskit.circuit.library.PauliEvolutionGate.html Its what the QAOAAnsatz, part of circuit library, uses.
Note exp_i() is function within opflow which has been deprecated and will be removed in an upcoming release - you can see some code in this regard in Example 2 here https://qiskit.org/documentation/migration_guides/opflow_migration.html#other-evolution-classes
Thank you. I have tried it and the circuit is reproduced. What if the Hamiltonian I want to reproduce is not a set of Pauli operators but Fermionic operators? In this case, the PauliEvolutionGate cannot be applied, what can I do?
You would map the Fermionic Operator to a qubit operator. Take a look at Qiskit Nature where it has such an operator and mappers which do that - its why UCC there in Nature is given a mapper so it can convert its fermionic hopping operators to qubit form.
Thank you!
