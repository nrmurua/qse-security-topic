See https://arxiv.org/abs/1710.05867
Per the above paper, "CoherentUnit" represents an optimized "Schrödinger algorithm.” Major additional performance gains can be made keeping the representations of separable subsystems of bits as independent CoherentUnit object until a gate is acted that might entangle them.
The "Cohere" and "Decohere" methods can be used to combine and separate subsystem descriptions of state. An optimized "SeparatedUnit" should start by allocating all qubits as completely independent quantum subsystems in a vector of CoherentUnit objects with one qubit apiece. As gates act that could entangle bits, they should be combined with "Cohere" into larger CoherentUnits capable of representing the entanglement. As they are measured, each measured bit should be separated again with "Decohere" into a string of single qubit CoherentUnits.
Maintaining the one dimensional indexing of bits like in CoherentUnit, a SeparatedUnit could have a vector of separable CoherentUnit objects and a lookup table that gives a one dimensional ordering over qubits within the total set among all CoherentUnits in the SeparatedUnit. In general, bits might become entangled in noncontiguous order, but the lookup table should maintain the original indexing of the qubits while allowing them to be combined arbitrarily in CoherentUnits, as multi-qubit gates act on them.
SeparatedUnit will have basically the same API as CoherentUnit, abstracted to keep track of which systems are separable, so that computational overhead is minimized. The SeparatedUnit API must draw together qubits from various CoherentUnit objects within it to act gates on contiguous sets of qubits, by passing through to the underlying CoherentUnit API in a heap of arbitrarily entangled and separable qubits.
A branch has been started for this optimization, including some constructors for SeparatedUnit.
"SeparatedUnit" has been implemented to these specifications, inheriting from CoherentUnit. It was implemented with both a lookup table, as described above, and an inverse lookup table. Cleanup of the implementation and abstraction is to follow shortly.
