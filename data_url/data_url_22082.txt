exception artiq.coredevice.exceptions.RTIOCollision
Raised when an event is submitted on a given channel with the same coarse timestamp as the previous one but with a different fine timestamp. (link)
Logically, RTIOCollision should also be raised if the event has the same coarse timestamp and fine timestamp as the previous. This would catch for example
Other examples.
TTL devices do RTIO replace, so that e.g. .on() followed by .off() is equivalent to just .off(). Following a mailing list discussion, this feature ought to be kept (https://ssl.serverraum.org/lists-archive/artiq/2016-November/001052.html). But it is enabled at the RTIO channel level for all RTIO operations to that channel, and cannot currently be applied to certain operations only.
Having some filtering (e.g. per address) on what RTIO operations in one channel have replace enabled is doable, but it will take some work and increase FPGA resource usage a bit.
For SAWG here's the desired behavior
But it is enabled at the RTIO channel level for all RTIO operations to that channel, and cannot currently be applied to certain operations only.
Does this mean it can be disabled for SAWG?
Coincident modification of multiple registers is not supported.
Coincident modification of multiple registers is not supported.
By "contemporaneous" I mean happening at the same point on the experiment time line.
Based on your response I believe my confusion has to do with the auto-magical creation of sawg knot points. I'd like to have a discussion about this element of the API and propose a tweak. Please don't deflect by pointing out that I can write a wrapper for sawg to get whatever interface I want.
It looks like there are two classes of parameters for sawg.
Features of each class of parameters:
sawg_knot_p
sawg_config_p
Define a user-side data structure to hold sawg knot data.
Define an explicit routine for adding knot points to the sawg timeline as an alternative to auto magic knot addition.
Example
Since p is a simple data structure there's no confusion about overwriting, concurrency or when an RTIO event is issued. All the intuition users have about how a simple data structure behaves pertain.
Example
I updated my comment to be less pseudo-code and not abuse Spline() so badly.
What do you mean by "auto-magical creation of sawg knot points"? And I don't understand what problem you are trying to solve.
The docs are good at saying which things advance the timeline.
The docs are less clear about which calls add sawg/spline knot points or modify existing knot points. A concise statement and example could make this clearer.
But it is enabled at the RTIO channel level for all RTIO operations to that channel, and cannot currently be applied to certain operations only.
Does this mean it can be disabled for SAWG?
The SAWG is a multi-channel device, and configuration requests have one dedicated channel (that has replace disabled).
The only thing you can do on a spline channel is setting the current spline coefficients.
The behaviour of RTIO rtlink.OInterface() with enable_replace=False is not documented.
@jordens A brief explanation on what happens behind the scenes in the language of RTIO would help help users develop a mental model for how SAWG works.  Here's a proposal.
Valid request. That would need to be done for all RTIO channels, not just SAWG. Please file a separate issue. This one has drifted.
How many new Issues do you see here? I count two. Maybe three.
I proposed an update to SAWG documentation which was not addressed in your comment. The language connects the user-facing SAWG API and the underlying mechanisms of RTIO. ARTIQ documentation is increasingly succinct and abstract but leaves me wanting connections back to how the concepts are deployed. That is linking "what xxx is in abstraction" to "example instances of xxx in the the code base".
@jordens ping regarding
I proposed an update to SAWG documentation which was not addressed in your comment.
Above you propose an API modification (which I don't understand), describe the current documentation, and raise something about "add sawg/spline knot points or modify existing knot points". I have responded to the latter. I am unsure what you are referring to.
My ping today relates to my proposal to better document of the current API in lieu of an API modification.
I don't get it. The link you supply is not your proposal, it is my implementation, and it is already committed. What do you want me to comment on?
Github shows my commit above your comment. I already commented on that request of yours:
rtlink is an internal API. We don't duplicate the code functionality in the description of internal APIs. If you want to know how the code works you have to read the code. It is ultimately pointless to attempt to explain the implementation via the documentation only.
Not sure why the links (there are two) are causing confusion. Maybe different browsers render differently -- I see a difference in vertical scrolling in Chrome that could be confusion which isn't present in Firefox. Anyway....
Thank you for your comment on rtlink. My ping relates to the rest of that comment. Reproduced below.
A brief explanation on what happens behind the scenes in the language of RTIO would help help users develop a mental model for how SAWG works.  Here's a proposal.
Ack. It's a bit verbose but otherwise would address part of #777
