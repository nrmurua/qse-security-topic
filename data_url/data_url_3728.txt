In order to produce an PauliTerm  such as X0Y1Z5 one must specify each PauliTerm atomic element individually and multiply them together.  It would be easier to specify the tensor product in one go by passing a tuple of tuples representing the (operator, index) pairs.
Proposed mode of operation
would be equivalent to the current way of constructing X0Y1Z5
@ncrubin is the second way not ideal because it is annoying to type in the interpreter?  The shortcuts could be helpful for that, e.g.
pterm = sX(0)*sY(1)*sZ(5)
Or would the pain point more from needing to map from the strings "X", "Y", "Z" to the sX, etc. functions very often? Something like this snarky one liner might help?
We could wrap that instead in a separate function called something like term_from_list.  Would that work?  That would be preferable to adding a more complicated method signature to the PauliTerm init.
@willzeng The multiplication of terms to construct a PauliTerm is inefficient--involves __mul__ which involves copying and returning a new PauliTerm.  Furthermore, the PauliTerm data structure seems to encompass tensor products of arbitrary size but can be constructed only by multiplying atomic elements.  It seems more useful, and more general, to allow construction of PauliTerms by non-atomic construction--avoiding building a sand castle one grain at a time.  Also, I don't think reduce is officially supported in python3 or considered pythonic (it was moved to functools).
I see your point, there's lots of redundant simplify calls. I can have the same method signature and add a classmethod:
Let me know if there's a particular use case where that wouldn't work.
@ncrubin The implementation in #122 assumes that the terms are disjoint. I think that this is the use case you have in mind?  Or is it needed for there to be some smart simplification and allocation of a list where terms are repeated on multiple qubits?
