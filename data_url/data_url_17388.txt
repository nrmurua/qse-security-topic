The method run in classes Unroller and Decompose changes the input dag object.
When executing run, e.g.:
The object dag will be overwritten by the output of Decompose().run.
The passed input object dag should not change. (Unless this is an expected behaviour due to performance aspects, which should be mentioned in the documentation).
Make a deepcopy of the dag input in Decompose().run and in Unroller().run, e.g.:
This suggested fix was tested with transpiler unittests and was running successfully.
This should be solved with an immutable DAG.
Agree that an immutable DAG would solve this, but this is still fixable with the current DAG. We haven't been great about adhering to "passes shouldn't modify the input DAG" policy, in general. We could review existing passes, document current behavior, and at least fix simple cases with e.g. a deepcopy and check performance implications (and add tests around preservation of the input dag).
I see this coming, a deepcopy at the beginning of the run will be expensive. :)
Yeah this is related to: #1435
It is something we should fix and have tests for, but I'm a little worried about the performance penalties of doing this a few days before the release (unless it is not that bad? do we have some rough numbers?)
So I'd like to understand the bug report a bit better. @quantumhamiltonian what is the context here? Did you get a bug in your code when working with these passes?
Because if you work at the level of circuits (and not DAG), it should be ok. The conversion from circuit->DAG has an inherent copy, therefore the original circuit remains untouched.
@ajavadia So I get the bug while working my own context, therefore in no qiskit routine from the homepage. But I am wondering, why you can give a circuit as input for the Unroller. The way I understand the documentation, the input-parameter for both must be a DAG. I would be lucky if you can explain me why it works in your case.
The unroller works on DAG. We just recently added a PassManager.run() method for simplified usage of running a pass manager on a circuit. It goes to DAG internally and comes back to circuit again. Similar to transpile(circuit, basis_gates) for example that internally goes to DAG.
These are currently our public user facing functions. There are hidden copies in these conversions, which is why I am not too worried about the bug you raise. It should be fixed, but only someone that directly works with the DAG will see them for now.
