The framework is at a stable point where we can begin to think about applications that build on top of the CUDA Quantum primitives / programming model. A good first use case for this is in quantum chemistry. We have use cases where we need to compute ground states for prototypical molecules via something like the variational quantum eigensolver. But this could evolve into future algorithms that are not variational.
We lack support for common data structures that would make it easier for programmers to write quantum chemistry application code.
We should create a set of data structures that allow our users to describe a molecular system at a high level and generate the spin_op data type necessary for integration with cudaq::observe(). I propose the following structures:
With users creating molecules in the following manner and having access to all the usual data
Thus far I've described the public API for creating molecular hamiltonians in CUDA Quantum C++. An initial implementation should implement create_molecule in a manner that is extensible for the 3rd party library that can generate the hamiltonian. A first implementation there could use the pybind embedded interpreter to invoke pyscf.
Another thing we will need is a library that allows us to provide a getter / setter for general tensor data with runtime-known shape. For this I propose that we pull in as a tpl the https://github.com/xtensor-stack/xtensor header-only library. It is BSD-3 clause.
Thanks for that feedback @DmitryLyakh . I'll make some updates.
