Compiling liboqs for systems without a (full) standard library (e.g. for embedded systems) causes problems at the moment, as liboqs uses multiple library functions (e.g. fopen), which might not be available on these systems.
Some of these calls are located in the function(s) OQS_randombytes_system() in rand.c and will also be compiled  when providing a custom randombytes algorithm with OQS_randombytes_custom_algorithm(). Unless I am missing something the compilation of OQS_randombytes_system() is not necessary when a custom algorithm is provided and removing them from the compilation process could ease future use and integration.
I propose adding a new configuration option, which will enable/disable compilation of these functions by wrapping them in a preprocessor macro similar to this:
This could also be extended to other library calls to improve the usability of liboqs in different settings.
This sounds like a good proposal. Would you be willing to contribute a PR for this? Best including a test case for a system with such limitations?
Yes, I'd love to contribute a PR for this.
For the test cases I was wondering what the ideal approach would be, as some of the default test cases would fail or need to be modified as they don't use a custom algorithm (except with the optionOQS_ENABLE_TEST_CONSTANT_TIME).
For the test itself, what do we want to test for this configuration? Whether the problematic functions are still being included by analyzing the resulting library or something else?
what do we want to test for this configuration
I thought about a (CI) environment fully representing such resource-constrained environment: liboqs as-is now wouldn't successfully build/run in there but with the new config would/should.
This seems to be largely resolved by #1621.
