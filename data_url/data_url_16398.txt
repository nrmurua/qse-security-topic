When transpiling certain circuits (with gates specified on hardware qubits), extra CNOT gates are added.
This only seems to happen when routing_method is set to 'lookahead' but other parameters don't matter (but optimization_level==0 seems to makes the issue less likely.)
Run the code.
optimization_level=3 doesn't always fix it:
Another example:
The output circuit only has new swaps required to execute the circuit, not extra ones on the other side of the device.
For the first example, I expect gates on only qubits 3, 4, and 5 (and potentially neighboring ones depending on error rates).
Either fix the lookahead router so it doesn't produce excessive swaps or remove no-op swaps in a later pass.
Maybe we could force LookaheadSwap to restrict the search only on swaps that involves active qubits, using the idle_wires() method from DAGCircuit
I'll close this issue as stale now - these particular reproducers don't give the same result any more, though that might just be due to internal changes in the randomisation.  It's possible the problem still persists, but equally there have been improvements to our unitary synthesis since this issue was created, and dead-code elimination is better now.
If anybody is still having problems with this, please feel free to open a new issue.
