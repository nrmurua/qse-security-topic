I think I'm seeing an issue associated with this (closed issue #6018)
I can't call the indexed classical register (ie r[0]) as shown as an option in your examples above...I have to make separate registers for each (ie r0).
When I try to use indexes to get to the classical register, I get errors like this....
Traceback (most recent call last):
File "/Users/juliegermain/Library/Application Support/JetBrains/PyCharmCE2020.3/scratches/QuantumResearch/scratch_1.py", line 14, in
qc.x(q[0]).c_if(r[0], 1)
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/circuit/instructionset.py", line 59, in c_if
gate.c_if(classical, val)
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/circuit/instruction.py", line 346, in c_if
raise CircuitError("c_if must be used with a classical register")
qiskit.circuit.exceptions.CircuitError: 'c_if must be used with a classical register'
########### Here is a small example of what works:
from qiskit import *
q0 = QuantumRegister(1)
q1 = QuantumRegister(1)
q2 = QuantumRegister(1)
r0 = ClassicalRegister(1)
r1 = ClassicalRegister(1)
r2 = ClassicalRegister(1)
qc = QuantumCircuit(q0,q1,q2,r0,r1,r2)
qr = [q0,q1,q2]
for i in qr:
qc.reset(i)
qc.measure(q0,r0)
qc.x(q0).c_if(r0, 1)
############# versus this that gets the error:
from qiskit import *
q = QuantumRegister(3)
r = ClassicalRegister(3)
qc = QuantumCircuit(q,r)
for i in range (0,3):
qc.reset(i)
qc.measure(q[0],r[0])
qc.x(q[0]).c_if(r[0], 1)
Should be able to call either way
I'm a newbie...pretty sure you don't want me to solve it.
Hi @jgermain48 . I think the feature of single bit conditioning was added in Qiskit Terra version 0.18.0. Could you try updating Qiskit Terra to the latest version and let us know if it still doesn't work?
I did update and the samples I sent now seem to work.  I'll give it a try in my larger program.
Thank you for your quick response
Still a related error in my larger code.  When I try to draw the circuit via Matplotlib it works with the individually assigned classical bits.  But produces these errors when I try using indexed classical bits in the section of code that includes the c_if statement.  I'll paste those updated samples below.  Here are the errors produced:
Traceback (most recent call last):
File "/Users/juliegermain/Library/Application Support/JetBrains/PyCharmCE2020.3/scratches/QuantumResearch/scratch_1.py", line 16, in 
qc.draw(output='mpl')
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/circuit/quantumcircuit.py", line 1606, in draw
return circuit_drawer(
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/visualization/circuit_visualization.py", line 238, in circuit_drawer
image = _matplotlib_circuit_drawer(
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/visualization/circuit_visualization.py", line 591, in _matplotlib_circuit_drawer
qubits, clbits, nodes = utils._get_layered_instructions(
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/visualization/utils.py", line 223, in _get_layered_instructions
nodes = _LayerSpooler(dag, justify, measure_map, reverse_bits)
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/visualization/utils.py", line 308, in init
self.add(node, current_index)
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/visualization/utils.py", line 426, in add
self.slide_from_left(node, index)
File "/Users/juliegermain/opt/anaconda3/envs/QuantumResearch/lib/python3.8/site-packages/qiskit/visualization/utils.py", line 350, in slide_from_left
index_stop = self.measure_map[node.op.condition[0]]
KeyError: Clbit(ClassicalRegister(3, 'c0'), 0)
from qiskit import *
import matplotlib.pyplot as plt
q0 = QuantumRegister(1)
q1 = QuantumRegister(1)
q2 = QuantumRegister(1)
r0 = ClassicalRegister(1)
r1 = ClassicalRegister(1)
r2 = ClassicalRegister(1)
qc = QuantumCircuit(q0,q1,q2,r0,r1,r2)
qr = [q0,q1,q2]
for i in qr:
qc.reset(i)
qc.measure(q0,r0)
qc.x(q0).c_if(r0, 1)
qc.draw(output='mpl')
plt.show()
from qiskit import *
import matplotlib.pyplot as plt
q = QuantumRegister(3)
r = ClassicalRegister(3)
qc = QuantumCircuit(q,r)
for i in range (0,3):
qc.reset(i)
qc.measure(q[0],r[0])
qc.x(q[0]).c_if(r[0], 1)
qc.draw(output='mpl')
plt.show()
@jgermain48 The drawers for the single bit conditioning are not available yet as of v0.18.0. The text drawer is available in the main branch of Qiskit Terra but not yet in the stable 0.18.0. As for the MPL drawer, we are working on it (#6259).
This should have been fixed by the merge of #6259.
