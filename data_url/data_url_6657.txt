Dear Liquid Team,
I have copied over the example project in the "source/" directory for my own purposes and it has functioned well so far and I ran some programs. Now I wanted to change the namespace from "Microsoft.Research.Liquid" to my own namespace. With some modifications to the imports statements a lot of things work fine. However, when I run liquid and give my function as a command line argument, I get the following message:
I have tried the following cmd line arguments: myFunction(), myNamespace.myModule.myFunction(), myModule.myFunction(), and myNamespace.myFunction(). All give similar errors. How do I point RunLiquid() to the right function?
Note: Everything works as soon as I change the namespace to Microsoft.Research.Liquid and have cmd line arguments myFunction()
And could it be possible to pass RunLiquid() the function directly instead? I'm not sure why we bother with command line arguments in a functional world.
(Sorry for the delay, we've all been traveling).
I have good news and bad news. The good news is that the assembly loader is designed to look in all assemblies (and namespaces) with the exception of mscorlib, System.* and FSharp.*. However, a change in VS2012 made it impossible to know if a module is actually written in FSharp  (FSharpType.IsModule). For this reason we decided to lock it down to only look for [<LQD>] attributes in the Microsoft.Research.Liquid namespace. The rest of your app can be in any namespace you want, but we won't find the [<LQD>] attribute if you put it in anywhere else.
I'm new to F#, but would it be possible to check both functions declared directly in ....Liquid as well as fully qualified paths, e.g: myNamespace.myModule.myFunction()?
Oh, there are several ways it can be done. It's now on the "to do" list and if I can find a nice way to add it without causing other problems, you'll probably see it shortly. This is why I didn't close the issue ;)
We'll leave it for a possible future update, but it's not really blocking anyone at this point, so I'm going to close the issue.
