Provide an updater (manual or automatic) to update externally developed library (like pyEPR) as needed.  Possibly a check at metal startup with a notice to the user: " is out of date, update now? (y/n)".
A question we need to answer: How can we be sure that the updated library doesn't break anything in metal?
If a library is updated and we need the update in metal (like a new pyEPR update) we need to be sure the users of metal have the updated library for the functionality to work properly.
Hi,
I have been thinking about this the past week. Also found two ways to implement it but then decided to not proceed. Here are my reasons, I would love to discuss them (and either way it is good to document this).
I suspect user will want to choose the update manner that is more compatible with their setup (or to switch to a new setup) to proceed. Creating an updater could turn out to be much more troublesome than giving them instructions.
Thus my counter: No automation, just alerts [that I already inserted] and clear instructions (can either add in the alert itself, or in a guide notebook, or in the docs). Thoughts?
Are the alerts you already put in general, or just for pyEPR?
I agree that an alert check only is a better way to go that an automatic updater for the reasons you describe above.  If bugs are reported we have the about function which will tell us what versions were in use so we can easily identify if it's a library version issue.
If by general you mean "reusable for multiple packages", then no I did not do it general,
the way I added the alert is a try/except around the methods that do not exist (or error out) in older versions of the package, so that the user will get an helpful "need to upgrade pyEPR to version x or above". The wrapping is very specific, so is the text.
Thinking further about general, I suppose we could use decorators with parameters (package name), instead of a try/except wrapper, with however the loss of control over possible except handling and the remainder of the code from the method that calls the failing dependency.
I thought about putting global alerts, but decided not to (After figuring out how to do it), because many users might not need at all that part of the metal code that needs the update. For example ADS users would never need to update pyEPR. That is why the close wrapping of the method call. Similarly, flat compare of the setup/requirement file could cause upgrade warnings that could become bothersome in case one intentionally keeps an older version due to other dependencies he has.
The try/except blocks could be sufficient, provided we do it whenever necessary.  @ThomasGM4 @dwang429 Thoughts?
Closed by PR #280
