Debugging a large quantum circuit is difficult because as the code changes it is very difficult to keep track of what action is performed at each simulation step. If the action of adding a sequence of gate operations to a circuit could have an optional string identifier, user defined function to be called with an established protocol before and after the execution of the gates when simulating a strong tie in could be immediately achieved between what gates have been added to a circuit, and much later in the logic when the simulator actually executes these gates.
Eg:
def show(stepno [Step number], step [step data], after [True/False], id [identifier]):
show_change(step.state_vector(), after, id)
circuit.append(gates, id="Perform H*n", before=show, after=show)
-- all named parameters optional
Regards, Ian
textserver.com@gmail.com
I am not sure I understand this feature.  Will the recent addition of tags work to fix this problem?
You can now tag Operations with meta-data, such as strings.  Would this work for your use case?
https://github.com/quantumlib/Cirq/blob/master/cirq/ops/raw_types.py#L406
Note that one can do this already using code like this
which produces
The only thing I can think beyond this that would help is if Moments could have user defined names.  Potentially this could also be used in more detailed diagraming as well.
I'm going to change this over to the moment labeling suggestion, since I think you can do step through circuits nicely with step numbers and access to the last moment using the above pattern.
Moment names would be a nice feature for debugging and visualisations.
I have also met situations where subcircuits (a sequence of moments) would be great to be named. Could sequences of moments with the same name (e.g. SUBCIRC) be drawn under the same moment parantheses?
We likely need some notion of collections of Moments in order to get control flow to work, so I think we would want to understand that before adding this behaviors, but it is a good suggestion modulo that.
xref #3235
cc @95-martin-orion - is the request in #2740 handled by subcircuits?
Subcircuits don't solve the issue as stated in the first comment (though Dave's suggestion seems like a reasonable way to do that), but they resolve everything discussed afterwards; subcircuits are labeled in diagrams and simplify thinking about large, repetitive circuits.
Ack, closing. @ijdavis @alexandrupaler please feel free to reopen if suggestions in this thread don't satisfy your use cases.
