Is your design idea/issue related to a use case or problem? Please describe.
GateOperation._equal_up_to_global_phase_ currently uses self.qubits != other.qubits as a comparison criteria to determine if the two operations are applied on the same qubits. It then goes on to determine if the two underlying gates are equal up to global phase.

However, GateOperation uses self._group_interchangeable_qubits() for determining the value equality b/w two operations.

Describe your design idea/issue
My proposal is that we should self._group_interchangeable_qubits() instead of self.qubits for qubit comparison in _equal_up_to_global_phase_ as well so that it's easier to reuse the implicit  implementation for more complex cases where interchangeable qubits exist.
self.group_interchangeable_qubits appears to be a potentially costly operation, because it iterates over all the qubits every time when it's called. Should it not instead be re-evaluated only when the qubits have changed between the calls?
(Upd: I see that qubits within GateOperation are supposed to be immutable, in that case it would make even more sense to memoize the output of group_interchangeable_qubits.
I can take this if there are no objections.
@Ashalynd Go for it!
Thanks!
Closed by #4941
