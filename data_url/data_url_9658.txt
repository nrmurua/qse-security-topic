Python is a dynamically-typed language (see: duck typing), but Python 3.5 and pep-484 introduced type hints as a way to annotate Python code with types. These are not enforced by the language at runtime, but they can be checked by third-party libraries such as mypy. The impetus for adding type hints and using mypy is that they generally encourage developers to write saner, simpler code (the flexibility of Python is a double-edged sword). This issue is mostly about good code style and therefore is optional -- it doesn't block CI setup (but once it is complete, the CI can be used to do this type checking automatically).
Hi @HGSilveri @karalekas, I went through the issue and would like to work on it. I have a few questions, I found this GitHub Action which can be used to implement the type hint ci, so can it be used? or do it need to be implemented using shell script?
Hi @TripleR47, I've done it for the Register class (I will PR #132 tomorrow) but I did it manually ü§®, while adding "Enhanced ErrorValue messages" (#148) at the same time.
Hi @TripleR47, no preference regarding how the mypy checks are occur, as long as they are programmed into the existing workflow, if that's what you're asking. But bear in mind that is not the crux of the PR, but rather going through the existing code and adding the appropriate type hints to each function and method. After that's done, then you can incorporate mypy into the CI routine.
I realize it's quite a bit of work, but that's why there's a bounty on it!
Okay, I'll ask in the unitaryHack's server if anyone wants to collaborate on this issue. Can it be assigned to me?
Hi @LaurentAjdnik, wanna collaborate on this issue?
Hi @LaurentAjdnik, wanna collaborate on this issue?
üëç
Hi @LaurentAjdnik, wanna collaborate on this issue?
üëç
Are you in unitaryfund's discord server? If you are then DM me on discord, we can discuss further on this.
@TripleR47 @LaurentAjdnik So, can I assign it to you both?
Sure
@TripleR47 @LaurentAjdnik So, can I assign it to you both?
Yup!
Your feedback on #155, in which I added type hints, will be insightful for the current issue.
Then, we can sync with @TripleR47.
Hi @LaurentAjdnik, wanna collaborate on this issue?
üëç
Are you in unitaryfund's discord server? If you are then DM me on discord, we can discuss further on this.
@LaurentAjdnik
@TripleR47: Nope, not on Discord. I'm waiting for the feedback on #155 and we can move on from there.
Adding type hints will be pretty straightforward. Maybe we can dispatch classes between us.
@HGSilveri: Will you be in charge of adding mypy to CI workflow ?
@LaurentAjdnik : I'll review #155 first thing on Monday. And yes, I can add it to the CI no problem. I would advise you to use it to test your own typing as you go. Did you try it already on #155?
Running MyPy on #155 (screenshots below):
With the --ignore-missing-imports option:

Without the --ignore-missing-imports option:

Hi @TripleR47!
Have you been working on it ?
PR #155 has been approved and type-checked with MyPy beforehand. We could use it as an inspiration.
Yes, I have been going through mypy and Pulser documentations and have started working on the devices module.
@LaurentAjdnik, let's split up the rest of the modules.
Yes, I have been going through mypy and Pulser documentations and have started working on the devices module.
@LaurentAjdnik, let's split up the rest of the modules.
Great! I'll start working on waveforms.py then.
Hi again @TripleR47!
I just PR-ed #163 on waveforms.py for a feedback from experts, that we can use for further work.
Hi again @TripleR47 and @HGSilveri, I start working on sequence.py.
Okay, I'm almost done with the devices module, will start working on parametrized and simulation after that.
Great! I'll start working on _seq_drawer.py, channels.py and pulse.py so that the root directory is done.
Okay! I'm done with the parametrized module, start working on simulation next.
Hi @LaurentAjdnik , @TripleR47 ! Glad to see you're making progress.
I just wanted to clarify a few things:
Keep up the good work!
Sorry, I started PR-ing without respecting this order...
And the branch I'm working on will include all remaining files in the root directory...
I feel like type-hinting everything will soon be over. Hence, if the corresponding PRs pass the existing checks (without mypy enabled), can we merge them into develop, use mypy locally on a copy of develop, adjust everything that's needed and finally enable mypy in CI ?
I'd rather not merge to develop without mypy in the CI... What might happen is that you find, as the modules are incrementally merged into develop, that conflicts in modules that were already type-hinted will arise. This means that these PRs will need to include modifications to files that should already be dealt with. It will make things a bit messier, but I guess it's too late now to go back. Just try to stick to the order laid out above as much as possible. I will also try to order the merging of the PRs accordingly.
Okay @HGSilveri, @LaurentAjdnik if you haven't started working on pulse.py yet, can I take over that module? After that, I can go for pulser.simulation.
if you haven't started working on pulse.py
Well, I've finished working on it. All files in root are done. I might have to split this unique new branch so that @HGSilveri can arrange the merging order.
Okay, I have also finished the pulser.simlation. Let's start working on the test module then.
Hey @LaurentAjdnik, which test modules are you working on?
Hey @LaurentAjdnik, which test modules are you working on?
Hi @TripleR47, I'm done with all files in the root directory.
I haven't planned working on test files.
@HGSilveri: Does it make sense anyway?
@HGSilveri: Does it make sense anyway?
I would say no, not really.
Okay
So, I was convinced that using "parametrized generics" for type-hinting using built-ins (e.g. dict[str, Any] instead of Dict[str, Any]) would only work from Python 3.9, but apparently, according to PEP 585 that's not the case if annotations are imported from __future__, which can be done since Python version 3.7.
I don't like the inconsistency of having both forms, so I guess we should adopt the most modern one throughout, which is to use the built-ins (i.e., dict, list, tuple, ...).
I have been asking you to do the opposite up until now, so it's only fair I make a PR enforcing these changes for all the type-hints that have already been merged. However, it would be good if you could change this on the PRs that are still open.
Okay
@TripleR47, bear in mind that you still can only do this in the type annotations. This means, for example, that you can't do cast(list[int], x), you'll have to use List. But you can type a return or a variable as list[int]. Hope that makes sense
Okay, and what about the special types like Callable, Union etc. Do we have their alternatives in the built-ins?
No, those stay the same. Refer to this list for the built-in generics that replace those in typing.
Okay, thanks!
@TripleR47 : From that list, notice that Callable actually does change (should be imported from collections.abc instead).
Solved by @LaurentAjdnik and @TripleR47 , thank you both for your patience and hard work!
@HGSilveri, thanks for your guidance! üòÉ
