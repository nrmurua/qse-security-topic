Currently one of the biggest reasons why postprocessing is done is to ensure that the correct type of object is returned after the lattice's execution. There are several issues with doing that postprocessing, but they were deemed necessary at the time because of the value it provides. Some of these issues include:
In whatever executor the postprocessing will be done, it will need to have all the dependencies of all the electrons in the lattice. This is because the entire function will be run and the calls to those electrons will be replaced by their outputs.
If the outputs of the electrons are large enough, which happens to be the case in some recently encountered workflows, that will lead to a failure in postprocessing since all of those outputs will be stored in memory just for that purpose (to be put in place of electron calls in the workflow function).
Now, after some detailed discussions we realized that it might be time to get rid of postprocessing as the compromise isn't worth the benefit. So, it was decided that in order to determine the output of the lattice we can analyze it during build graph time.
So, in build_graph, in the case where the output isn't some form of electron:
Since there still might be some contrived cases where performing postprocessing will be necessary, such as
which is why in this issue the proposal is to add an argument to the lattice decorator postprocess whose default value is False to still allow postprocessing in the traditional sense.
Stages of processing the return value:
Implementation details for each stage:
Preprocess Return Expression
Load in Result
Rebuild and Deserialize on Client
In addition to the above, the following details are also to be kept in mind:
Acceptance Criteria:
