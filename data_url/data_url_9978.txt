Description
A rare case in which the indices (i, j) of a quadratic interaction are returned in the reverse order when accessing the values in bqm.quadratic
Steps To Reproduce
Expected Behavior
Environment
The reason for this unexpected behavior is that 3 node is inserted into BQM's adjacency dictionary before 2 is, during the first interaction processing. Nodes are added in this order: 1, 3, 2.
Since dict is ordered in Python 3.6+, iteration over the adjacency dict will yield edges in exactly that order.
The issue that I see with this is that I cannot check the value of the (2, 3) interaction from bqm.quadratic without trying both order permutations
But you can. Both directed edges are set:
Since we promote the use of views instead of direct adjacency dict access, we might change this behavior -- to never add both directed edges for a single undirected edge, and then handle the look-up in the view. But that would slow down the look-up, and possibly cause problems for numpy-based implementations of BQM.
One workaround you might consider if the order is important to you -- is to add linear biases in the desired order. For example:
This works for me because my indices are always sorted:
Your workaround sounds safer, but it takes away the pleasure of setting h = {} :)
Oh, and just to note, if you want the workaround to work in older versions of Python (prior to 3.6), you must use h = collections.OrderedDict([(1, 0), (2, 0), (3, 0)]).
We used to have an ordered bqm (see #397). Also worth noting that the new experimental bqms in #533 are ordered.
