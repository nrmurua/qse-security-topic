Right now, the unitary-synthesis interface is designed for stateless plugins that are run on each unitary effectively completely separately.  In reality, we only instantiate the plugin classes once per intsance of UnitarySynthesis, which we could encode in the interface.  This would let us pass some options into the __init__ method of the plugin implementers, which would simplify existing passes that want to cache items between runs, and better define the period of validity of those caches.
See #7795 (comment).
This would also apply to the Solovay Kitaev pass (see #5657) where we'd like to generate the set of basic approximations once for the entire compilation process. Currently we can solve that with a global variable but it's not ideal ðŸ˜„
