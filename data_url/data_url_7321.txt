This might be a really stupid question, but I am trying to write some type-generic code and got fairly confused.
Looking at Ket, it has information about its basis both the type signature and in the struct fields, and it seems like they are both the same. I am confused as to why this is present as a field, given that the field is always the same for Kets of a given type. I was wondering whether you can give examples where this is necessary.
The reason I am dealing with this, is because I want to implement a convert method that would let a lot of the recasting done in the differential equation functions become implicit and unnecessary. Currently I am stuck with the following:
It does not work, because BaseType() does not work. Any suggestions how to implement such a convert function?
An equivalent question would be: why is the type signature of SpinBasis detailed enough for a complete reconstruction of SpinBasis instance (it contains the type of spin), but the FockBasis type signature is not as detailed? If I look at SpinBasis, I would expect that only Ket type signatures should contain basis information, so why not implement FockBasis in a similar way? That would make the .basis field of a Ket unnecessary, right?
The second question is actually the answer to the first: you need the parametric type for dispatches, but sometimes that is not enough because a basis stores more information than it shows in its type signature.
However, the second question is actually the important one:
why is the type signature of SpinBasis detailed enough for a complete reconstruction of SpinBasis instance (it contains the type of spin), but the FockBasis type signature is not as detailed?
For this specific case there is actually no good reason. The idea behind having e.g. SpinBasis type signature complete is to leave "basis checks" to dispatch. At the same time there are bases that are rather complex (see for example ManyBodyBasis) such that storing all fields as parameters doesn't make too much sense and would probably lead to a lot of dynamic dispatches. That is why we also store bases as a field, and they are not always the same.
But we should agree on a specific way to define bases and change e.g. FockBasis accordingly.
Any suggestions how to implement such a convert function?
I don't think you can. From the type signature you don't have all the information you need about the basis.
