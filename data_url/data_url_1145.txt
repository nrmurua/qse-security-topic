This happens when one expression contains an int and another contains a float of the same value.
Expected behavior:
Actual behavior:
This causes the transformed parameter values to have two entries evaluated to the same value.
This is caused by a sympy bug where a+1 == a+1.0 but hash(a+1) != hash(a+1.0) (sympy/sympy#11707).
This function could possibly be used to canonicalize expressions before using them:
This function could possibly be used to canonicalize expressions before using them:
Has a canonical convention been established? I've been working on implementing the above, but while it avoids the duplication of [a+1, a+1.0], it has the side effect of transforming expressions such as sympy.Symbol('c') / 2 + 1 to <0.5*c + 1.0>, losing the fractional representation. Is there concern for losing the fractions (for visualizations or other)?
