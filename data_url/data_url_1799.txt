Feature: Separate R* and *Pow gates
Problem: Cirq has many gates that are based upon the EigenGate, so called Pow gates.  These have the nice property that they admit an interpretation in terms of powering these gates, i.e. one can define gate**exp.  Another way to specify gates is as exponentiations of Hamiltonians, i.e. exp(-iH) type constructions.  The first of these are the *Pow gates and later are the R* gates.  *Pow gates are not a standard way to construct gates in quantum computing, and this causes confusion.  Further this suffers from the problem that exponentiating is not fully defined with making choices about branch cuts (similar to the fact that the square root of four has two roots, plus or minus two).   Another issue is that the R* gates require symbolic resolution when serialized as a *Pow gate, causing slowness an unnecessary parameter resolution.  Currently we support R* gates by delegating to *Pow gates.  This feature would be to disentangle this and create a separate class of gates R* gates.  These would stand alone from *Pow gates.
Rough requirements:
I'm not sure what's the advantage of defining (completely separate) R* gates given that we already support cirq.rx etc. For the points mentioned above, my thoughts are as follows:
But we do have rx, ry, rz factories and corresponding 'Rx()' 'Ry()' 'Rz()' representation in circuit.
Assuming this means ry(np.pi/2)**(1/2) equals ry(np.pi / 4) and not -ry(np.pi/4), how would this problem go away if we define explicit R* gates? We would still have to make a decision for the branch cut right?
This slowness due to unnecessary parameter resolution also happens for other gates like S, T etc. Do we plan to have separate classes for all of them?
This representation issue is also related to the confusing QASM output bug, which can be fixed independently.
Also, separating the R* and *Pow gates would be a breaking change. Eg:
Now:
After separation:
PR3920  tries to add separate explicit Rx, Ry, Rz gates by deriving from the corresponding *Pow gates to maintain backwards compatibility (eg: isinstance would still work) and improve usability (have explicit gates instead of function factories).  Is this enough?
