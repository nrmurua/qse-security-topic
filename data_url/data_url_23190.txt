need to rethink the automatic feeing of scope resourse (basically, free instruments much faster)
Oh yes, in fact, the clean way of dealing with that is to make a python structure that allows:
I am assigning myself on that tonight.
I already implemented the contextmanager part,  I would like to change the way spectrum analyzer is refreshed. Instead of relying on a timer that is somehow in double-use with the timer of the scope (+ adding a curve_ready() statement each time the timer timeouts), I would like to simply connect the check_for_curve of the specan to the display_curve signal of the scope...
concerning your recent commit 8e5a821 there is a frequent issue in your code:
(example from http://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none)
I am not sure what you mean? where did I misuse == and is?
8e5a821 bottom of the page. but if you are aware then its a type, just wasnt sure because if fixed it recently once or twice..
OK, I see what you mean, but still the eq function that you suggest looks completely absurd no?
Ok, to come back to the initial question, There was a "double display bug" because
I think, we don't want to free the scope between successive acquisitions when the spec an is in continuous mode no?
Also, I realize the bandwidth is irrelevant (and therefore should be blanked) in baseband mode no ?
Im not sure how you implemented this so far. I would be highly in favour to free the scope between acquisitions, provided that the implementation does not write or read any registers (i.e. only takes nanosexonds). I believe this gives better-to-read code.
Another practical option would be to force-free an instrument that is not available to a gui tab with a button.
The bandwidth, once everything is properly implemented, should not even appear in the other mode, no?
I like the idea of a gui button to force free (or maybe a contextmenu that opens upon right click).
On the other hand, the main point of pop/free is to provide an automatic save/restore of state, so I think we should rather write some work around to prevent pop/freeing too often when timing is critical rather than giving up this functionality everywhere. That s what I did in the previous commit where I don't free the scope if running_continuous is true...
I guess it can be considered close
