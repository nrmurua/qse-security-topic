When building up a circuit by hand it can be useful to look at part of the circuit, especially when print debugging (which is where I've wanted it)  This makes me think it might be useful to support slicing?
Slicing by moment seems easy and has the natural slicing
circuit[0:4]
which is a new circuit over the corresponding moments.
Slicing by qubit is more complicated, because qubits are not naturally ordered, and also because multi-qubit gates span outside of a choice of a set of qubits.  Maybe the second slicing type should be handled by a method instead of a [] so the user can better express which of the two natural behaviors (exclude gates crossing out of boundary, include extra qubits from gates that cross the boundary)
@Strilanc @maffoo thoughts?
I've also thought about adding slicing to circuits and think it would be a good idea.
As for qubit slicing... I did think about that for awhile without coming up with anything compelling. There's the syntax issue of course (python wants slices to be ranges not sets), but as you mention the particularly tricky part is that operations may only be partially covered by the slice. Do you drop those operations? Include them? Do you transitively include qubits implicated by operations crossing out of the intended slice, and all the operations on those extra qubits? If you don't include the extra operations, won't the circuit be half-broken? But if you do, won't the extra qubits have yet more operations that pull in yet more qubits until essentially every slice grows to cover the entire circuit in almost every case?
I think slicing by moment makes sense, for example doing circuit[:-1] to chop off trailing measurements. For xmon devices, it could also be useful to slice the array of qubits as I described in #285, but that would require that a circuit has a reference to device, which it does not currently have, and there would also be the possibility of dangling gates outside the set of sliced qubits, as @dabacon mentioned. In the general case without a natural qubit ordering it's probably better to "filter" the circuit to a given set of qubits, rather than slice a list of qubits. The filter_qubits method (or whatever it's called) could then take additional args to specify what to do about dangling gates, for example.
Done in #313
