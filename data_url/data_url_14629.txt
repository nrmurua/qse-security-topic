A matrix inner product is computed like this:
https://github.com/Qiskit/qiskit-terra/blob/a9571724e5d15073a82fd2f65742313dc38f32c3/qiskit/quantum_info/operators/symplectic/sparse_pauli_op.py#L375
There are more efficient ways to do this. I tested several options. Which is best varies depending on factors such as the size of the matrix, and number of cores available. But, in all cases the current code is uniformly slower than some options. The TLDR is that I suggest using einsum.  If we wanted to optimize, we could switch between this and what I call fvec below. But, I don't think this code is a bottleneck and it's probably not worth the engineering effort. However,  simple, easy-to-read code that is uniformly faster is probably a good idea.
Here are the options. I did some benchmarking, which I don't include here.
Terra commit: 82635d5
Here is an example of applying the proposed change. I replace the line in question with
Then define
And run
Here are some times.
Yet another option. Because one of the matrices (the basis matrix) is Hermitian, its transpose is equal to its conjugate, and the latter is a faster operation. So we can use, instead of fsum above, fsum1 defined like this:
if the first matrix a is Hermitian. In isolated tests, this is faster than all the other options. In the application at hand it, it gives nearly identical results to einsum. That is, this line
is as good a choice as any other that I tried.
