The following code is part of a quantum walk algorithm in a two-dimensional space. We analyze the oracle that tells with what probabilities steps are accepted and determine there is an error in the output of the oracle.
Some comments:
The correct or incorrect behavior can be assessed from the printout of the following code, after the
Check of the algorithm!!! call. Correct behavior will happen when the last qubit (the output of the oracle) is always in state 1, whereas incorrect behavior happens when there is some non-negligible amplitude for the output of the oracle in state 0. The current output of the oracle circuit (when initialized to a state that should always output 1) is
Define the bitmap of the oracle (unfortunately, this error only seems to happen for quite large oracles, so I cannot give a smaller version).
We can check that the output at the positions starting by '1101000101' (26,5 is the minimum energy state)  is 1using
which will output
We can try to see if we can actually get the output, which will be in register ancilla. We first create the circuit
Then we create the oracle
And finally, we execute the circuit
Which outputs
We can see that the ancilla (the least significant register) is not always in state 1, which represents a logic failure.
Something similar to
where all the non-zero amplitudes correspond to bitstrings ending in 1.
It is unclear to me what could be failing in the logic of the oracle, so I cannot really say.
