Funded by Oxford.
done
Testing switching out on a Kasli->Kasli->Kasli system. (RoutingTable { 0: 0; 1: 1 0; 2: 1 1â”‚ 0; }). Using the switching125 branch with misoc patched to revert the latest CPU speed reduction and using a -3 speed grade Kasli for the master.
Posting detailed testing notes here so I have them to refer back to in the future. Mute if you're not interested!
Checking that the link comes up reliably on each power cycle, and that link loss is correctly reported, and link reestablished when any Kasli is power cycled.
Power cycling the leaf node seems fine (measured over ~10 power cycles). Master reports
Repeater reports
On power cycling the repeater, master reports
Repeater reports
On a few occasions I've seen errors after cycling the repeater
not sure if those are just significant.
When you shut down the repeater, it probably sends glitches/bogus data. The error reporting function is only run while the link is up, which is why you are seeing the message with a delay.
ack. Anyway, so far I haven't managed to break anything which is always a good sign...
Cycling the master gives this on the master
and this on the repeater
Looks normal.
Looks normal.
Yes, I'm just reporting what I see so that I have a point of reference to come back to if there is any issue later on.
As another data point I had also tested the switching branch with 125 MHz RTIO (just master-satellite with DIO, without another repeater through) a while back and ran it through the usual stress testing and determinism tests and found no additional issues.
Might want to check the more complicated phys though.
@jordens ack. Once I've finished basic testing, measured latencies etc, I'll port an experiment over to it and check that Zotino, Urukul, SU-Servo etc still work
Timing of SERDES/simple TTLs is fully deterministic across multiple power cycles. Latency is in line with expectations:
Good!
NB those numbers include some non-negligible fibre delays.
Dumb throughput test
Mean value of tau (minimum delay for toggling a TTL without causing underflows) is approx 580ns. Max value I measured was about 720ns.
Try it on new, it should be faster.
