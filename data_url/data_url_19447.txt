Germ√°n suggested including the entanglement spectrum, i.e. -np.log([eigenvalue for eigenvalue in density matrix]), as a useful feature.
I think this should be really straightforward as these eigenvalues are already calculated for the EntanglementEntropy callback.
Thanks for this suggestion. If I understand correctly, you would like to have a new circuit callback, right?
I'm not sure if a completely new callback is the best choice. Maybe it is better to include it or combine it with the EntanglementEntropy callback somehow, because if one wants to check both things along a circuit it is pointless to calculate the eigenvalues twice.
But definitely a circuit callback.
I understand your point, but this feature will require a change in the API for all callbacks, e.g. instead of retrieving an array with entropy values, we have to deliver a dictionary with both entropy and spectrum. For the time being I would suggest to have a separate callback or modify the return API.
@stavros11 I think this feature requires changes at the level of Callback.__getitem__, i.e. use dict or for example replacing tf.stack with a list.
I understand your point, but this feature will require a change in the API for all callbacks, e.g. instead of retrieving an array with entropy values, we have to deliver a dictionary with both entropy and spectrum. For the time being I would suggest to have a separate callback or modify the return API.
In principle we could also have a seperate callback that uses the EntanglementEntropy code if we add a mode key in the __init__ which selects if the callback will calculate the entropy or the spectrum. This approach would allow the user to calculate the entropy and spectrum by defining two seperate callbacks:
however this would calculate the eigenvalues twice, which is not what we want.
I believe a better approach is to just cache the spectrum inside the entropy callback for example by defining a self.spectrum list and doing
in every entropy calculation. The user could then use the entanglement entropy callback as normal to calculate entropy and access the spectrum via entropy.spectrum only when needed. I don't think there will be additional computational cost with this, since the eigenvalues are calculated for the entropy anyway.
@stavros11 I think this feature requires changes at the level of Callback.__getitem__, i.e. use dict or for example replacing tf.stack with a list.
If we follow the above approach, we could leave __getitem__ as it is, so that entropy[:] returns entropy values only. The spectrum could be accessed seperately using entropy.spectrum, right?
Ok, appending to spectrum sounds good to me and does not require changes in the callback object.
@stavros11 I can take of that.
