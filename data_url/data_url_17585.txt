Sometimes I run jobs with a noisy simulator, and sometimes I run on real devices. It would be good to be able to do this with a single execute line
With noise_model=None when using a real device.
Currently this throws an exception because of the use of an Aer kwarg (noise_model in this case). I'd suggest making it throw an exception only when Aer kwargs are set to something non-trivial.
This is partially addressed by Qiskit/qiskit-ibmq-provider#44, which adds these kwargs to IBMQ backends that are simulator. So you can submit your circuit and noise model to both local simulators and remote simulators.
But why do you want this for devices? i.e. why do you want to do
instead of just removing the kwarg and doing
I would say that the expected behavior would be that noise models don't make sense for devices, so they don't even accept this option.
My motivation is that I have applications that can be run on various backends, with and without noise models. Inside those applications I need to perform the execution, and sometimes this requires a big block of ifs and trys to deal with what is and isn't possible on all kinds of backends.
This will always be needed to some extent, I'm sure. But the easier it is, the better on the user. And allowing noise_model=None prevents the need for two different calls to execute.
Currently, qiskit/execute.py:execute does not  have noise_model argument. Is this issue still valid?
This is related to the run_config issue where backends do not ignore elements of run_config that they do not use.
I'm closing this as fixed, with the backend's interface BackendV1 this works as expected either with backend.run() or execute. Aer backends expose a noise_model option in their options attributes which can be set via a kwarg on run (or via backend.set_options(noise_model=model), which adjusts the default value).
