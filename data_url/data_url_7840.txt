It seems like the measurement.measure function does not produce the correct density matrix after the measurement of a two-qubit system. In the minimal example below I prepared the density matrix $\rho$ of two qubits, both in $|X\rangle$ eigenstate:
$\rho_i = |X\rangle \langle X| \otimes |X\rangle \langle X|$
If I measure the projection along the $X$-axis of the first qubit with the operator
$\hat{O} = \sigma_x \otimes \mathbb{I}$
the measurement function produces the correct eigenvalue (which is 1), but not the correct output density matrix $\rho_e$ (which should be equal to the input density matrix $\rho_i$, since the first qubit is already in the eigenstate of $\hat{O}$)
The correct result of the output matrix should be $rho_i$, as the input matrix is already an eigenstate of $\hat{O}$.
The output of the measurement shoud be:
$\rho_e = |X\rangle \langle X| \otimes |X\rangle \langle X| =$ [[0.25  0.25  0.25  0.25], [0.25  0.25  0.25  0.25], [0.25  0.25  0.25  0.25], [0.25  0.25  0.25  0.25]]
Instead the measurement output is given by:
$\rho_e = |X\rangle \langle X| \otimes |Z\rangle \langle Z|$ and $\rho_e = |X\rangle \langle X| \otimes |-Z\rangle \langle -Z|$
which is the expected output if the measurement operator would be $\hat{O} = \sigma_x \otimes \sigma_z$, instead of $\hat{O} = \sigma_x \otimes \mathbb{I}$
The error does not occure if state vectors are used as input for the measurement.measure function instead of the density matrices.
Thanks for  pointing this out, my initial thought is it might be an issue with not taking into account potential degenerate eigenvalues in measurement operators.
So in your example the qeye(2) is essentially being split into two separate operators when the total ''op'' eigenstates() are calculated, and then the state is being projected onto two possible outcomes of these two eigenstates. In reality these are degenerate outcomes, and the two eigenstates  of ''qeye(2)'' should be recognized as having degenerate eigenvalues and collated into one new measurement operator that projects onto the subspace of both possibilities?
if this is correct, it seems like a straightforward fix, maybe @hodgestar and @BoxiLi can confirm?
We have a similar issue for a while in #1800.
It felt through the cracks since we are focusing on v5.
