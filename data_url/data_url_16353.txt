If you set the name of circuit register as qreg or creg in your QASM, then the parser fails.
In general, ny name is allow for registers
However, the parse seems not supporting qreg or creg as names:
I'm not fully sure if qreg and creg are reserved words in the specification. If so, It should not be allowed to do ClassicalRegister(1,'creg') (or, alternatively, change the name when qc.qasm(), with a warning). Otherwise, the parser needs to be fixed.
Can I help with this one?
@1ucian0  Where is it possible to check specs for QASM? Can I do it myself?
Meanwhile, I ran a few checks:
Failing:
Not Failing
So I suppose it's maybe a regex on the whole word?
Also, running in debug mode:
They're reserved words in the spec: https://arxiv.org/abs/1707.03429 (see Table 1). But I don't see what's wrong here (besides maybe a better error message). The terra QuantumCircuit class doesn't have a 1:1 mapping with qasm, there are things you can do with a QuantumCircuit not expressible in qasm. I don't think allowing qreg as the name in a QuantumCircuit class is an issue as long as we fail when a user tries to generate qasm because it's not allowed in qasm.
I don't think allowing qreg as the name in a QuantumCircuit class is an issue as long as we fail when a user tries to generate qasm because it's not allowed in qasm.
I tend to agree with this. It seems the issue is that .qasm does not generate valid QASM. Renaming the issue.
On the other hand, Qiskit does a check about "valid names" using the OpenQASM specification.
https://github.com/Qiskit/qiskit-terra/blob/3dec07aaccf3254432a93ed6b5990be27b47016d/qiskit/circuit/register.py#L59-L61
I think this is a good opportunity to move this check into the new .qasm check, where the names are screen against a list of reserved words.
About failing at .qasm-time when a reserved word is used. I think is better to do warning-and-rename instead. For example rename <reservedword> to <reservedword>_ in the QASM dump.
What's the status on this issue? If no one is working on it, I can probably implement what @1ucian0 described.
We are factoring the QASM-related code out of Qiskit: https://github.com/1ucian0/qiskit-openqasm2
At same point we need to freeze the QASM-related changes in Qiskit and, given the low priority of this issue, probably not worthy to work on it on this code base. You are welcome in qiskit-openqasm2 to see how to fix it there.
