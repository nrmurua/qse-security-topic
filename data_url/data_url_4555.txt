Describe the bug
The frequency custom operator gives wrong frequencies for some state vectors / probability distributions, such as the ones in the example below. Thanks to @igres26 for finding this.
To Reproduce
While the final state vector is correct the frequencies contain only the '00' bitstring while the '11' is also to be measured with equal probability. The problem does not appear for nshots < 1e5 where the old tf native approach is used.
A simpler code to reproduce:
Thanks for reporting this. We should include the relevant missing test that did not spot this issue on time.
This may require changes at the op and python level, right?
I think the issue is related to Metropolis only. It fails in cases where the allowed bitstrings of non-zero probability have Hamming distance greater than 1. In the above example the allowed bitstrings are '00' and '11' so the Metropolis starts in '00' and gets stuck there forever because it cannot to '11' directly with single bitflips but cannot cross '01' or '10' either because these have zero probability.
An easy solution is to replace the mechanism that generates new bitstrings from the current:
which adds only powers of 2 (bitflips) to
which adds any random integer allowing to go from '00' to '11' directly. I tested this and it fixes the issue but I am not sure how it affects other distributions.
My main concern is that I don't know how to make sure that the algorithm will be robust and work properly for all cases of distributions that may come up here. We have tests for random distributions but these give some probability to every bitstring so they did not capture the issue with the "sparse" distributions found here. We can add tests for sparse distributions but we may still be missing a different case.
@stavros11 ok, could you please check with @igres26 if this approach works for the tests he is doing?
What happens for other channels with these changes?
