Starting from the symbolic operator representation in OpenFermion, an interesting feature could be the explicit (sparse) matrix representation of the action of these operators on fermionic Fock spaces (using Slater determinants as basis functions). This idea has been worked out in https://arxiv.org/abs/1103.0872, with utility functions like getting p-marginals and the computation of reduced density matrices (RDMs). In particular, one could apply exact diagonalization to (toy) model problems and probe representability conditions.
I'm not sure what sparse matrix functionality you're referring to beyond those provided by functions that convert to sparse matrices and additional ones like jw_number_restrict_operator and jw_number_restrict_operator.
However, I like the idea (inspired by your reference) of having a data structure to symbolically manipulate Fock states! At first thought, I think we'd want more flexibility and memory efficiency than the implementation from FermiFab, though, even if it means more expensive operations. Thus, I think we should mirror the implementation of SymbolicOperator and store the required basis states "lazily". That is, we store the state using a terms dictionary whose keys are sets indicating the Fock basis vector and corresponding value equal to the coefficient. The default initialization would produce a terms dictionary with one entry equal to the empty set with coefficient 1, indicating the vacuum state.
OK, thanks for the suggestion! The "lazy" storage seems to resemble a sparse vector or matrix representation, right?
By translating the FermiFab functionality to Python, one feature would then be the (symbolic) computation of p-marginals or RDMs given a (pure) input state as sparse vector. This is not implemented in OpenFermion yet, is it?
Yes, I guess my proposal is similar to a sparse vector representation but with the ability to interact with FermionOperators.
I think symbolic representations of numbers probably have no place in OpenFermion, but I can see the potential for symbolic representations of states with floating point coefficients. My ideas on this are half-baked though.
Sure, that would be really cool.
@kevinsung Indeed I was also thinking of symbolic representation of states with floating-point coefficients...
@cmendl I wanted to gauge you interest in this again.  I've certainly implemented lots of my own RDM utilities so maybe that means they should go into the library.  I think if we are restricting ourselves to marginals of particle conserving operators then we can implement RDM generators the way that they do in chemistry FCI codes.
closing due to inactivity.
