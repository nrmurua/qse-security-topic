It would be handy to be able to easily check if an operation commutes with everything in a moment. For example, it makes things like https://quantumcomputing.stackexchange.com/questions/13488/reordering-commuting-gates-in-cirq-to-reduce-circuit-depth easier to implement.
Currently, checking if a moment and an operation commute raises an exception saying the case hasn't been implemented.
Here's a simple implementation, which has the downside of having quadratic overhead when comparing two moments.
Thanks for filing this! It should be easy to avoid the quadratic overhead in the moment vs moment case by checking commutation only between operations that share at least one qubit.
Esteemed,
I've started working on this issue. Cirq is pretty new for me and I would need some guidance here, could you please advise?
Especially my question was:
Where it is better to implement "commutes" functionality:
Also I would need some support in writing tests, since I'm not that good at modelling what commutes and what doesn't. Anyone can guide me?
Thanks and I appreciate any help
Andriy
Regarding testing, I think it should be relatively easy to cook up some testcases, just experiment a bit with cirq.commutes(op1, op2) where op1, op2 are different operations on qubits (e.g. cirq.X(cirq.NamedQubit(“a”))). Now, for a Moment, you’ll have a list of these guys, so it should be straightforward to create testcases. A Moment commutes with a given operation if all of its operations commute with it. If an operation does not share qubits with another operation, they trivially commute.
Hey @balopat, could you please check the proposed solution, if no comments I'll create a pull request
Hey @akushnarov, create the PR and we can continue from there, it's easier to comment on a PR!
@balopat here is the PR
FYI I added an issue #3529 (as it was discussed separately).
