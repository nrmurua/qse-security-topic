We now support QStabilizerHybrid with a QUnit as a (sub-) general engine type. We want functionality like top layer QUnit, but stabilizer formalism is not necessarily immediately compatible with our methods for "Decompose-ing" state ket representation. It should always be possible to transform the representation of a stabilizer state to that of a ket, but it might not be "efficient" to do so.
QStabilizerHybrid can have two pools of "shards," one managing all stabilizer shards, and the other being a QUnit, managing a shard pool internally.
Once stabilizer shards become entangled, they must remain part of the same unit. They are mapped from QInterface indexing to unit indexing. When one shard in a unit executes a non-Clifford gate, all of its unit components are "Compose-d" with the single QUnit. (A QStabilizerHybrid shard contains a mapping to the QUnit index when unit is NULL, therefore not in the QStabilizer pool.)
As qubits are directly acted upon in wrapped QUnit, they can be further checked for separability with TrySeparate() and returned to the QStabilizer shard pool.
As it seems we can get this working in a QUnit -> QStabilizerHybrid stack, this enhancement is unnecessary at this time.
