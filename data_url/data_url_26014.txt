We would like to make our own stand-alone class/function(s) that allows circuit visualizations of OpenQASM files / strings. This class/function could leverage other visualization tools (e.g. Pylatex), but ideally would not have explicit dependency on any other quantum circuit packages. What we do not want, is a function that simply converts the openqasm code to a cirq, qiskit, or other circuit type, and then renders the circuit drawing from that package. Instead, we are looking for original code that parses a OpenQASM string (or file), and creates a circuit visualization / drawing (latex, plain text, or other) based on the qasm gates and operators pulled directly from the source code.
References:
Because of the large number of gates and operations supported by OpenQASM 3.0, we will restrict this first implementation to a smaller gate-set to make it a little more approachable. For this, you can use the following code to generate random qasm3 strings to use as the test data/files for the circuit drawer. Once the circuit drawer is reliably working for any circuits generated by this function, then we will consider this issue closed, and open a new issue that expands the scope.
Hi! The issue seems interesting. Could I collaborate on this issue?
@Miguelillnino Absolutely! Let me know if you have any questions :)
Hey, I'm new to open-source contributing, but I've also written code that works well on the sample input generator; how would I go about sharing my code? Would I create a new branch and link it to the issue?
Hi @CalebMcIrvinGitHub, yes, you can also work on the issue! Per the unitaryHack rules:
For pull requests resolving bountied issues, the first accepted PR from the project maintainers will receive the prize!
To submit your code:
The rules don't say anything about collaborating with other contributors, but if both parties want to work together and potentially split the prize, I don't see a problem!
Do we need to support more than just ASCII output? For example, Latex output?
Do we need to worry about invalid output? Or it is enough to write code that will pass any test generated by random_circuit?
Hi @Newtech66, for now just the ASCII output is sufficient. But if you would like to go beyond that, more power to you!
And an implementation that covers all the random_circuit possibilities is good for now, but some error handling for unrecognized operations is never a bad idea. The Amazon Braket example above is somewhat restrictive, so using qiskit for these tests would probably be the best approach, e.g.:
