Description of the issue
Previous discussion: #3538
When calling cirq.resolve_parameters with a multi-step ParamResolver (e.g. {a: b, b: c}), whether or not the resolution completes depends on the alphabetical ordering of the symbols involved. From sympy.Basic.subs:
In order to obtain a canonical result, unordered iterables are sorted by count_op length, number of arguments and by the default_sort_key to break any ties.
Given that this is the expected behavior in sympy, we either need to switch to one-step parameter resolution or hack together our own recursive multi-step resolution process.
How to reproduce the issue
Cirq version
0.10.0.dev
A trouble with our own recursive multi-step parameter resolution is of course that it may never complete, e.g.:
Alphabetic ordering is just one of many unsatisfying ways to prune a subset of edges from the parameter dependency graph to force it into a DAG. I doubt a satisfying solution exists to this problem without some extra information to guide the pruning.
I think it's reasonable to switch to one-pass resolution instead. For most use-cases there should be no difference and in the few where it does matter the users are probably aware of the complexity in their resolvers and can perform the resolution appropriate number of times on their own.
OTOH, dependence on alphabetic ordering of parameters sounds like a problem waiting to happen.
