Expected minor-embedding index-to-node numbering to work up to full unit cell. Might be that they sometimes fail, sometimes succeed, I haven't looked at it that much.
sampler = DWaveSampler()
sampler.nodelist
Out[78]:
[0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
sampler.adjacency
Out[79]:
{0: {4, 5, 6, 7, 128},
1: {4, 5, 6, 7, 129},
2: {4, 5, 6, 7, 130},
3: {4, 5, 6, 7, 131},
4: {0, 1, 2, 3, 12},
5: {0, 1, 2, 3, 13},
6: {0, 1, 2, 3, 14},
7: {0, 1, 2, 3, 15},
Works as expected:
G = dnx.chimera_graph(1, 1, 2)
colors = dnx.min_vertex_coloring(G, sampler)
print(colors)
{0: 0, 1: 0, 2: 1, 3: 1}
Works as expected:
G = dnx.chimera_graph(1, 1, 4)
dnx.min_vertex_cover(G, sampler)
[4, 5, 6, 7]
dnx.maximum_cut(G, sampler)
Out[84]: {4, 5, 6, 7}
ValueError                                Traceback (most recent call last)
 in ()
----> 1 colors = dnx.min_vertex_coloring(G, sampler)
 in min_vertex_coloring(G, sampler, **sampler_args)
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave_networkx\utils\decorators.pyc in _binary_quadratic_model_sampler(f, *args, **kw)
66
67         # now run the function and return the results
---> 68         return f(*new_args, **kw)
69     return _binary_quadratic_model_sampler
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave_networkx\algorithms\coloring.pyc in min_vertex_coloring(G, sampler, **sampler_args)
137
138     # use the sampler to find low energy states
--> 139     response = sampler.sample_qubo(Q, **sampler_args)
140
141     # we want the lowest energy sample
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave\system\samplers\dwave_sampler.pyc in sample_qubo(self, Q, **kwargs)
298         info_keys = {'timing'}
299
--> 300         future = self.solver.sample_qubo(Q, **kwargs)
301         return dimod.Response.from_futures((future,), vartype=dimod.BINARY,
302                                            num_variables=num_variables,
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave\cloud\solver.pyc in sample_qubo(self, qubo, **params)
144         linear = {i1: v for (i1, i2), v in uniform_iterator(qubo) if i1 == i2}
145         quadratic = {(i1, i2): v for (i1, i2), v in uniform_iterator(qubo) if i1 != i2}
--> 146         return self._sample('qubo', linear, quadratic, params)
147
148     def sample(self, type, linear, quadratic, params, reuse_future=None):
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave\cloud\solver.pyc in sample(self, type, linear, quadratic, params, reuse_future)
159         # Check the problem
160         if not self.check_problem(linear, quadratic):
--> 161             raise ValueError("Problem graph incompatible with solver.")
162
163         # Mix the new parameters with the default parameters
ValueError: Problem graph incompatible with solver.
ValueError                                Traceback (most recent call last)
 in ()
----> 1 dnx.min_maximal_matching(G, sampler)
 in min_maximal_matching(G, sampler, **sampler_args)
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave_networkx\utils\decorators.pyc in _binary_quadratic_model_sampler(f, *args, **kw)
66
67         # now run the function and return the results
---> 68         return f(*new_args, **kw)
69     return _binary_quadratic_model_sampler
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave_networkx\algorithms\matching.pyc in min_maximal_matching(G, sampler, **sampler_args)
180
181     # use the sampler to find low energy states
--> 182     response = sampler.sample_qubo(Q, **sampler_args)
183
184     # we want the lowest energy sample
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave\system\samplers\dwave_sampler.pyc in sample_qubo(self, Q, **kwargs)
298         info_keys = {'timing'}
299
--> 300         future = self.solver.sample_qubo(Q, **kwargs)
301         return dimod.Response.from_futures((future,), vartype=dimod.BINARY,
302                                            num_variables=num_variables,
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave\cloud\solver.pyc in sample_qubo(self, qubo, **params)
144         linear = {i1: v for (i1, i2), v in uniform_iterator(qubo) if i1 == i2}
145         quadratic = {(i1, i2): v for (i1, i2), v in uniform_iterator(qubo) if i1 != i2}
--> 146         return self._sample('qubo', linear, quadratic, params)
147
148     def sample(self, type, linear, quadratic, params, reuse_future=None):
c:\users\jpasvolsky!git_docsos\env\lib\site-packages\dwave\cloud\solver.pyc in sample(self, type, linear, quadratic, params, reuse_future)
159         # Check the problem
160         if not self.check_problem(linear, quadratic):
--> 161             raise ValueError("Problem graph incompatible with solver.")
162
163         # Mix the new parameters with the default parameters
ValueError: Problem graph incompatible with solver.
In this case you are trying to use a Structured sampler for unstructured problems. These are the methods that construct a QUBO that does not match the input graph. The solution is to the dimod's EmbeddingComposite
