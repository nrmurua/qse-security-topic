When I run the following code, I get the corresponding error:
It looks like gate.params returns the unitary matrix U, and then pi_check tries to apply complex(U), which results in the error.
Run the code above.
No error should occur.
This looks like the same error as reported in #4447. It looks like the problem arises because gate.params is simply the numpy unitary matrix, but the .qasm() method assumes that the parameters are all floats and calls pi_check on the unitary matrix. I'm not sure if this is an issue with the .qasm() method, or with the way parameters are stored for the controlled gate object. (When you remove the .control() call from the definition of gate, the code runs as expected.)
UnitaryGate.control() returns an instance of ControlledGate (not UnitaryGate), which doesn't override a qasm() function. thus qasm() reverts back to instruction.qasm() which assumes that self.param is an array of qarg. while UnitaryGate.control()  stores the matrix representation in params
I think the solution is either to:
either way this shouldn't change the qasm code generated for the standard controlled gates (cx,ccx.. etc)
I'm trying to implement option 2. But if anyone wants to give it a shot, no problem.
Can I give this a try?
@faisaldebouni
sure no problem.
Any progress @rochisha0 ?
@rochisha0 is not responsive. Do you mid PRing your solution @faisaldebouni ?
Sure, I will work on this right away.
I need some guidance with this. I see many problems with how qasm is being generated in general. Directly fixing this issue will not give the correct qasm code.
Mainly, generating qasm definition for circuits with custom gates is not done recursively.
ex:
will give:
However, print(qc2.qasm()) will give the correct qasm code.
UnitaryGate definition is pretty flat, so the gate will be correctly defined. But UnitaryGate.control() builds a gate with nested circuits in it's definition. So, if ControlledGate adapts the same procedure for generating the qasm code, the resulting code will be incorrect. (uses undefined gates).
One "temporary" solution is to make UnitaryGate.control() revert to gate.control() which uses add_control.py. This gives a correct, yet flat definition. Which in turn make the generated qasm code correct. I couldn't figure out why UnitaryGate defines it's own control function, although add_control.py does handle UnitaryGates correctly
So My questions are, Do I:
This is mock implementation that  adopts how qasm generation currently works regardless.
mock branch
By simply moving qasm() from Unitary to Gate. The generated qasm from the example provided in issue will be:
It seems to me that an arbitrary matrix should be synthesised to create a QASM definition.
(Sorry this answer this late. This felt between the cracks)
Still valid
