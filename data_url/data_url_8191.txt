Hi, I am wondering if qutip can calculate the average of a time-dependent observable or probability of a time-dependent state when simulate a time-dependent Hamiltonian. It sounds a little weird, but it indeed occurs when we consider a time-dependent Hamiltonian in a new state representation. The related unitary transformation can be time-dependent. Do built-in solver support it?
For example,
where coeff1(t,args) and coeff2(t,args) are coefficient functions.
You have a couple of ways of going about this.  The simplest is to use the callback form of e_ops - you make a single function which looks like
where t is the time and state is a Qobj.  You can return whatever you like here, really, so you can return a tuple of values if you want to track more than one.  If you do this, then you do
and result.expect is a list of the same length as times, where result.expect[k] is the output of your function at a time times[k] (note that this is a slightly different output format to the normal method).
Alternatively, you can do the calculation yourself without too much difficulty if your observables can be put in the form A(t) = sum_k f_k(t) A_k, like your example here.  Because the expectation is a linear operation expect(A(t), psi(t)) = sum_k f_k(t) expect(A_k, psi(t)), so you can pass the list of A_k to sesolve and then just calculate the time-dependent coefficients yourself afterwards and add them up.  This will generally be faster than the previous method, but it's more complicated to do.
Thanks for your reply! Can I add some parameters other than t and state to the function e_op?
Qutip will only call it with e_op(t, state), to pass other parameters, you could use partial.
