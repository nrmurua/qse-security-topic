First of all, I apologize if this should have been posted to Stack Exchange instead. It seemed specific enough to the code that I thought I would post it here.
It seems that, at least for some inputs, cirq.inverse(val) modifies the input that it is given. Is this the intended behavior? It seems counterintuitive from a user perspective that
would yield anything other than an effective identity operation.
This behavior can be seen specifically in the example notebook provided by OpenFermion-Cirq here:
https://github.com/quantumlib/OpenFermion-Cirq/blob/master/examples/tutorial_1_basis_change.ipynb
In particular, one can modify the second cell in the notebook in the following way:
to yield something which no longer acts as expected.
Indeed, cirq.inverse will modify an iterator by "using it up", i.e., calling its __next__() method repeatedly. In this example, basis_rotation is a generator iterator returned by the function bogoliubov_transform. That's the reason for the repeated calls to bogoliubov_transform. One could avoid this behavior by converting the iterator to a tuple or list.
This is intended behavior; using iterators to generate operations is a common pattern in Cirq.
This is why I've been moving away from exposing methods returning OP_TREE to users, and always flattening them into lists first. We should do the same thing in openfermion-cirq. I've opened quantumlib/OpenFermion-Cirq#302 there, so that for example this mistake wouldn't happen.
In other words, I do think that this is a bug but I think it's a usability bug in openfermioncirq.bogoliubov_transform as opposed to a behavior bug in cirq.inverse.
Thanks for the explanation! It certainly wasn't the expected behavior but I'm coming to understand the way that iterators are used throughout the codebase as I get deeper into it.
Thanks,
Bill
