If you create a Hermitian operator including a term with an odd number of Y terms as a PauliSumOp and convert it into a measurement StateFn it flips a sign where it should not. See code below.
test = SummedOp([(Z ^ Z), (Y ^ I)]).reduce()
test = ~StateFn(test)
test.primitive.to_pauli_op()
gives
SummedOp([PauliOp(Pauli('ZZ'), coeff=1.0), PauliOp(Pauli('YI'), coeff=-1.0)], coeff=1.0, abelian=False)
The following  cases are handled correctly
for
test = PauliOp(Pauli('YI'), coeff=1.0)
gives
PauliOp(Pauli('YI'), coeff=1.0)
and for
test =  SummedOp([(Z ^ X), (Y ^ I)])
gives
SummedOp([PauliOp(Pauli('YI'), coeff=1.0), PauliOp(Pauli('ZX'), coeff=1.0)], coeff=1.0, abelian=False)
It seems like the adjoint operator ~ does not implement the correct complex transpose on a PauliSumOp.
The error seems to be somewhere in the PauliSumOp.
Thank you. Sorry for my mistake.
Thank you for taking care of this.
