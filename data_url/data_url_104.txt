The issue with this is that a pure-device kernel (bell) created by the kernel_builder does not generate a .thunk function since GenKernelExecution will not add the kernel to the worklist at line 720. So when the callable(q) call happens, kernel_builder::operator()(Args...) is invoked, but fails in the JIT compilation (no thunk, kernelReg, kernelInit, etc), and in invokeCode we'll have no way to call it since there is not thunk.
Is there some python code to be tried here? (This doesn't compile with nvq++; there is no cudaq::make_kernel.) Actually it seems a bit off to me. Here is the complete error message:
Removing the reference, cudaq::qreg<>, gets past this problem but runs into the following
Changing the cudaq::sample to
gives more compilation failures.
At this point, we have achieved a circularity. When changing the template argument to make_kernel to remove the reference, we now can't find a copy ctor for the cudaq::qreg.
So there are some issues to iron out here in the header files.
