When a dependency only exists for type annotations, you can use
and then you can use the type as an annotation as a string
I thought the proposed convention was
i.e., use top-level imports (stringified)
Oh that is probably better yes.
What about imports from outside of Cirq? I can imagine that there are some numpy.ndarray used for type checking only, for example. Should we do the same to those?
Also, is there a good way to automatically find all instances of this?
The main goal would be to reduce our internal module dependencies.  The drawback of the string is likely that it makes using and IDE to navigate a bit harder.  For external dependencies I wonder how many people use their IDE to navigate to these methods.  Otherwise they don't really add much to our dependency graph, so I'd leave them.
Not sure when it started to do it but pylint reports cases when an import is only used for type annotations:
e.g. if I move the import cirq statement out of TYPE_CHECKING in cirq/devices/device.py, pylint will complain:
I think we can close this but I'll wait for your input @dabacon
There are still (many?) locations in the code where a type annotation uses a cirq submodule that is only ever used in the type annotation and should be turned into the "cirq.XXX" string idiom. As an example, I opened a random file (simulator.py) and saw immediately that we
but only ever use circuits.Circuit in type annotations where "cirq.Circuit" would be better
@dabacon -- at least pycharm handles the string form just as well as if it were a real object.
Oh, okay, that's fair - I'll rename the title then to reflect that standardization effort.
