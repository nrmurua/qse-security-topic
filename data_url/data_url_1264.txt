Description of the issue
When you create a matrix gate with a name and exponentiate it, the initial name is lost as the name is not handed over to the power gate:
def pow(self, exponent: Any) -> 'MatrixGate':
if not isinstance(exponent, (int, float)):
return NotImplemented
new_mat = linalg.map_eigenvalues(self._matrix, lambda b: b**exponent)
return MatrixGate(new_mat, qid_shape=self._qid_shape)
How to reproduce the issue
Create a matrix gate with name and print a circuit containing a power of the gate
What would you expect the name to be? It probably shouldn't have the same name after exponentiating because it's not the same matrix. Could maybe construct a name like "U**2" in the example you gave, but that could lead to some strange edge cases, for example if you square again the name would end up as something like "U**2**2" which is ambiguous.
Another possibility is that you exponentiate the matrix manually and then construct separate gates with the names you want, e.g.
Then use U and U2 as desired. One advantage of this is the matrix products are computed once when U2 is defined, rather than every time U is exponentiated, which could be many times in a large circuit.
To be honest, I would have expected something like "U^2". For me, it feels wrong that the name is lost. But I understand your point that potentizing several times can result in very long names.
We could perhaps add a method MatrixGate.with_name to create a new gate with the same matrix but a different name. Then the example I wrote above would be:
If we could add that, that would be great and would meet my requirements.
Would it be possible to make MatrixGate into an EigenGate? IIUC you can use np.linalg.eig to get the eigencomponents from the input matrix. Then the exponent and phase are passed in separately and kept in the base class. Only thing is I'm not sure if eig will always return a usable result.
But even if not an EigenGate, seems like exponent and phase could be kept separate (memoizing a self._final_unitary whenever it gets calculated), allowing the diagram to display them as desired.
