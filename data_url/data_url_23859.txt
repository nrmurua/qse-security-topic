Version information about the qcodes package is defined in setup.py, but does not appear in the packages as qcodes.__version__. Such a version string is useful for other packages (for example the qcodes setup.py uses these strings for version checking).
We should add qcodes.__version__. The only question is how to keep the version in setup.py and qcodes.__version__ the same. A method that is used by numpy is to extract the version in setup.py from a file numpy/version.py (see https://github.com/numpy/numpy/blob/master/setup.py line 103). If we agree this is a suitable method I can make a PR.
Interesting, numpy does a whole bunch of stuff to bake the version (including the git revision) into the build. Their primary source of the version numbers actually seems to be setup.py itself, but then the reading of version.py comes in if you run setup.py on a copy of numpy that has already had write_version_py run... which I guess is what they post to pypi?
Another model is eg plotly.py - where a version.py is read by both setup.py and __init__.py
This is a whole lot simpler, and I'd think it would suffice for our needs. The only thing missing is the git commit id - we've talked about logging this when you run commands. For that purpose it doesn't really need to be part of qcodes.__version__, and I think for the most part if people have qcodes installed as a regular package they should be using a released version (so major.minor.patch is a unique identifier) and if they have it installed as a dev version, they'll have it in a cloned git repo and we can read the revision the same way as numpy's git_version
@alexcjohnson The plotly model is indeed simpler. I implemented it and accidentally committed to master instead of a new branch.
Shall we keep the commit to master and close the issue?
Sure, looks good. We still need a qcodes/version.py right? But then I'm happy to close this.
Just added version.py, I'll close the issue
