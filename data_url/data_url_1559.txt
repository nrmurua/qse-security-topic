Right now, the state vector simulator will stochastically choose a path when it encounters a non-unitary operation (measure, reset, noise). You can get into deep trouble if you e.g. put in a measure operation and then expect to have a state vector that means anything in isolation.
@Strilanc has said: "I regret calling it simulate instead of e.g. sample_final_state_vector. Exactly this kind of ambiguity."
Some of the pauli expectation functions do checking that you don't have any measurements which will likely mess them up in a major way.
Talked offline, it seems there are a few things we could do.
xref #1740
Note in the linked issue, it's regarding the cirq.final_state_vector() function, which definitely smells odd that it would be nondeterministic. To make sure we're on the same page, do we also want to state StateVectorSimulator.simulate() should be deterministic?
Proposal in cirq cync:
Not high-priority since this only affects certain use cases of specifically instantiation simulator and calling simulate() with non-unitaries.
@mpharrigan For item 2 in your list, would you want that to be a special simulator used only by the mux module (e.g. final_state_vector, final_density_matrix, etc, or should DensityMatrixSimulator itself be endowed with this functionality?
I'm not sure. I was just brainstorming.
@mpharrigan I created an implementation #4488 for item 2, but it was decided in cirq sync that there are not any big real-world use cases for this feature, and so this is not worth the cognitive overhead. So I closed the PR. If there is a real-world use case then I can reopen.
Sorry for leading you astray. Thanks for opening the PR anyway.
What's the most current design proposal? Could it potentially introduce backward-incompatible changes?
If i'm reading this correctly, the proposal was
(1) is a no-op
(2) was tried by @daxfohl but then it was nixed
(3) is captured by #1740
so maybe this issue is redundant?
Closing this for now per comment above, but please feel free to reopen if you think that's a mistake!
