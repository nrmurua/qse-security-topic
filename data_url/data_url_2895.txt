Imports like this:
from cirq.google.decompositions import two_qubit_matrix_to_native_gates
where two_qubit_matrix_to_native_gates is a function in module cirq.google.decompositions, makes impossible to use unittest.mock.patch on it and mock this function.
While testing no error appears and the original function is called.
This kind of direct imports (for both functions and classes) should be most likely avoided and present code migrated, since this problem spreads to the users of the module importing dependencies this way.
+100.
Direct imports pollute the namespace and provoke name clashes. They should be discouraged before it's too late.
Can we write a test to catch these?  I don't know how many we have, so trying to write a test to spot them would be a good start.
I had a feeling that at some point mocking was not an encouraged testing practice in Cirq. Is that still the case?
In core Cirq I think this is true.
But for interface boundaries it is good, so for example Engine code uses mocking.  Another place that it seems ok is for "more complex" abstract classes which want to test that "more complex" by mocking out the abstract classes.
Closing this because it's stale and more of a local implementation detail / development guideline than a bug / feature request.
