It's the second time that I encounter a bug because different behavior  in python2 and python3 and DAGCircuit.predecessors. On top of that, I noticed that sometimes I used next(predecessors) because return an iterator, while the documentation says it should be a list.
Some order in both python versions. Also
Is it too okey to return this in DAGCircuit.predecessors?
I have frequently experienced the same kind of python 2/3 issues with other DAG functions. However, I'm not sure that predecessors should have any inherent order, as according to the networkx docs A predecessor of n is a node m such that there exists a directed edge from m to n. This does not imply any inherent order in which the nodes are returned.
I think returning an iterator is preferable to a list, and it is what is returned from the networkx implementation, so the docstring should be adjusted rather than the code.
quantum_predecessors and quantum_successors return lists... I'm okey with any, but it should be the same :)
This does not imply any inherent order in which the nodes are returned.
There are some order assumptions in the tests:
Maybe they should be fixed?
quantum_predecessors and quantum_successors return lists.
I agree that consistency is needed! I'm not sure either way is better, as nodes will generally have up to 3 predecessors/successors the efficiency gain from iterators is, I assume, minimal. However, I do think that the order shouldn't matter, so perhaps a set would be better? The list is currently set-like, as if the node has 2 connections from a previous node (for example two cx nodes in a row), it only appears once in the list.
There are some order assumptions in the tests:
I agree, I think these should be corrected.
I would also vote for iterators, and updating quantum_predecessors/quantum_successors to return iterators. Also let's make sure docstrings are correct.
