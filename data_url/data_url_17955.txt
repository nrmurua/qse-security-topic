Backends can support extensions to the instruction set. For instance, simulators offer noise, snapshot, wait, save and load instructions. These should not live inside the base Qobj schema. The base schema should allow these to pass, and it will be the responsibility of a backend to allow or prevent them from passing the backend-specific schema.
The schema validation mechanism then becomes a simple 2-step process. Validate against base qobj, validate against backend qobj.
After a few discussions with @dcmckayibm @levbishop @jaygambetta @delapuente , the plan is to do the reverse of this. The backends, instead of expanding the base qobj schema, will restrict it. Essentially they act as a second filter, and any Qobj sent to them must pass the backend-specific schema as well as the base schema. To do this, the base schema will be loosened up so that it accepts any openqasm instruction. The backend schema later has the option to say "i don't accept instruction x".
Therefore, the base qobj schema should not dictate oneOf for its openqasm instructions. It should however provide a schema for the common instructions (i.e. those in qelib1.inc). It should say for example:
If you include a u2 gate, it should have 1 qubit and 2 parameters.
If you include a Molmer-Sorenson gate, I don't enforce anything, will leave it up to the backend.
I don't know how to write a schema like this however :)
(I updated the title and description to match my comment).
I'm going to open a different issue for implementing the double check. This issue is now about implementing the correct schema but we need to implement the double check mechanism too.
So if I understand correctly you wish to:
Questions I have are:
Rather than two separate validation steps for 1/(2&3), it should be possible to dynamically append to the initial JSON schema a uri reference to the schemas of 2 and 3.
My understanding was implementing validation against all schemas e.g. something like;
