Following my comment in #657, it would be useful to have one (or more) implementations of the parameter shift rule. We had a discussion with @DiegoGM91 and a potential way to do this would be a gradient module which contains methods with the following format:
This could also be exposed as a circuit method circuit.gradient(loss, parameters), however a module would be better to add different variations of the parameter shift rule.
The basic approach which requires 2 * len(parameters) full evaluations of the circuit with different values for the parameters is certainly needed because it is hardware compatible. For simulation we could explore various shortcuts and optimization, including caching or parallelization of the circuit evaluations (for small circuits).
Hi @stavros11 , I like this approach.
Instead of a loss function I would run the PSR to calculate the derivative of a generic observable with respect to the target parameter. If one then wants to do this for a loss function it will be sufficient to use the PSR appropriately in the algorithm (as I did in the tutorial of the vqregressor).
I agree with @MatteoRobbiati about the derivative of Hermitian observables, since this is actually what the parameter shift rule gives you. The user can then apply the chain rule for more general loss functions. I discussed with him today, and he's going to open a PR implementing the basic parameter shift rule in a new module that we might call gradient. Regarding the observables, I suggested using qibo Hamiltonians.
@stavros11 please let us now what you think.
Yes, I agree with implementing it on an observable instead of the loss. It is more flexible and we could even consider using it in conjuntion with other autograd libraries such as tensorflow that implement the classical chain rule.
Regarding using Hamiltonian as the observable, I believe it should work. In the future we could consider implementing a more primitive Operator object if it is needed for other uses.
To summarize, I guess the interface will change to:
Okay, great.
I think *args is not needed anymore since we dropped the dependence on the loss.
