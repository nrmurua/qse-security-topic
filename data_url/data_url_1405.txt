AbstractJob provides an __iter__ method (currently just wraps a call to self.results() but default). I imagine this is to support a scheme where results can become available one at a time and you can consume them as they come in by using a for loop, for example.
I'm no expert, but I think we should also support calling next() on AbstractJobs for the same reason. Here's some docs: https://docs.python.org/3/library/stdtypes.html#iterator.__next__
In practice, I tried calling next() on a job and it said "E           TypeError: 'SimulatedLocalJob' object is not an iterator"
cc @dstrain115
actually, following the docs I linked under "generators", I changed the definition of __iter__ to:
and was able to use next()
Doug: let's follow the standard for the dunder method, but this sounds fine
Added #5136.  @mpharrigan let me know if that fully addresses your concerns.
