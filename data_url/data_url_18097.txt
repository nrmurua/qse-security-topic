Currently, QISKit gates are dynamically added as methods to the QuantumCircuit. This is bad for several reasons:
1- Can break some IDE linters.
2- Methods may not be discoverable through usual inspection methods.
3- The code can be ugly (have to add lines for this dynamic appending to every gate).
Although this is not on QISKit's critical path, it would be good to address in the near future.
Recently it was proposed by @eddieschoute over at #316 that using mixins and multiple inheritence may be a solution. Perhaps we should discuss that idea here.
Some of my desiderata:
1- The usage of gates should be backward compatible (otherwise basically all previous qiskit code breaks)
2- Would be good if it worked uniformly for standard gates, simulator extensions, etc. Currently the standard gates are auto-imported and added, while for simulator extensions one has to write from qiskit.extensions.simulator import *. The monkey path is done at import.
The mixins work by defining gates as superclasses of the QuantumCircuit, since that is the object we wish to modify with additional methods (per requirement 1).
I've posted example code before at https://gist.github.com/eddieschoute/9586c4a4734764e35492602cf1c3f030 . The idea of a gate inheriting from a Circuit-type class, however, was considered inappropriate in #316 (comment). So perhaps it needs looking at again if it would still work out.
Figuring out where gate definitions were coming from took me some time too (certainly more than a few minutes) so I definitely agree this should be changed. My IDE also complains about undefined gates. With this change, I believe it will suggest which gates can be performed on the circuit in completions which would be very helpful.
@atilag @diego-plan9 in a similar way as in #316, would you mind to take a look at this issue and add your opinion from an architectural perspective?
A deprecation plan is needed for this. We should start with that asap if we want to continue this way.
