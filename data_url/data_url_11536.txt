See #1379
This returns a ListOp even if you slice a ComposedOp, SummedOp or TensoredOp. Is this the desired behavior? If not, a simple solution would be to overwrite __getitem__ method on all this subclasses.
A number of these also construct via self.class so this can be an option too.
Sorry, my bad ):
Yes, I think self.__class__ seems be more convenient, since the same pattern has been used in a few other methods. Can I fix this?
Sure, and please add a unit test(s) for these types to ensure we also end up with the type as expected - thx.
I was about to reuse the same branch that I use the other day, but I found that someone has merged a commit into it. I didnâ€™t know that that was possible (I thought it was mine).
Should I use that branch or make another one to keep the merge cleaner?
A PR cannot be merged if the branch is out-of-date so what happens when you do a PR is that if the branch is out of date, because other PRs were merged since you created the branch from the latest code, then update the branch button here will push a commit back to your fork to update it (it may not be able to sometimes if there are conflicts in the changed files which would require manual intervention to fix things).
The best way is to keep your master branch on your fork up to date the with this repo then create a new branch for each PR - I also delete it once the PR is merged so I am always doing new work on a newly created branch off master.
