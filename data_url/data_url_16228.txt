
@kdk Just to confirm. The right answer should be {'111': 1024} and if the indices are changed
to [0, 1, 2, 3], it would be {'0 111': 1024} and [0, 2, 4] would be {'011': 1024} or {'0 11': 1024}?
@kdk Just to confirm. The right answer should be {'111': 1024} and if the indices are changed
to [0, 1, 2, 3], it would be {'0 111': 1024} and [0, 2, 4] would be {'011': 1024} or {'0 11': 1024}?
The first two examples are consistent with what I'd expect. For the last, I'd expect 0 11.
Thanks. I think I've found where the problem is, and right now I'm working on finding a reasonable solution. It's weird, there are about a dozen tests for marginal counts, but none of them seem to set memory_slots to less than the number of cregs.
This is meant as the start of a discussion about marginal_counts() which grows out of this issue.
The problem with a solution for the case above is that the final output, say [0, 2, 4] giving you '0 11' is that it is not unique. [0, 1, 4], [1, 2, 3], etc. will give you the same '0 11'. If this is passed to another function, all the original indices info is lost.
As an alternative, first consider how marginal_counts() currently works.
There are 2 problems here,
Any feedback would be appreciated.
