To make implementing grover's algorithm in code faster, there should be a simpler way to generate cnf's from a unstructured array and a list of target items.
The ideal end goal is for a black box function that outputs a cnf to use with acqua's grover implementation after taking in two parameters (a list to query, a list of targets to search for).
I plan for there to be several intermediate methods before fulfilling the final goal. For example, one key intermediate function would be to generate bitstring solutions and bitstring non-solutions from a list to query and a list of targets. The value of the bitstring converted to decimal would correspond to an index of the query list.
Also, another simpler function to implement that could serve as a stepping stone to the final goal would be to make a black box that takes in N, the size of the query list/database, and a list T of the target indices that are solutions, to output a cnf for acqua's grover algorithm
Feature request.
Here is what I have worked on so far for this feature. Please let me know of any comments/suggestions/criticisms you may have. I plan to first style this code to meet the project's rules and then I'll continue refining it until I reach the final goal
@CyberGuy99 do you have maybe a few examples to demo the usage?
Yes! A quick way to start would be to use cnf.py's get_cnf() function.
The following should create a cnf string with the clauses necessary to indicate a solution of 1 or "binary 01" and 2 or "binary 10". I'ved added a few comments for that function as well.
The first argument is a 'maximum possible value' in base 10 for the search query, and the second argument is the array of base 10 solutions.
get_cnf(3,[1,2])
Please let me know what changes I should make!
The input file is in the general DIMACS CNF format. And your get_cnf method helps generating input files/strings in this format. I can imagine it come in handy for someone who wants to benchmark Aqua's Grover on solving SAT problems. But I can't say I'm understanding how your get_cnf is an improvement/enhancement to Aqua directly.
Please correct me if I'm missing something. Thanks!
Yes, that's correct. At the moment, it isn't much of a direct improvement, but I plan for this to be a stepping stone to a general black box function that accepts a list to query and a list of targets. For example, my goal is to work on function that would accept a list of strings to query and certain target strings to find the indices for.
Do you have any suggestions on how to approach something like this?
That sounds like an interesting direction but might have little to do with a quantum computing algorithm library I'm afraid.
Thanks for the feedback! This isn't necessary then, and I shall close it.
