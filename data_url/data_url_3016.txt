Currently gates that implement the trace_distance_bound do not so approximately.  For many of these we can explicitly calculate these bounds and we should do so.
In class ExpZGate for example
Where does the 3.5 come from? Is that what you mean by "approximately"? If so, how would it be calculated explicitly?
The tight bound is min max_p trace_dist(p, U p U^-1) where p is a (possibly multi qubit?) density matrix and U is the operation you are trying to bound. That is to say, find a state such that you can distinguish the before-operation state and after-operation states with high probability. The idea is that if the before/after states are nearly impossible to distinguish, then optimizations can provably drop the operation while maintaining a target error budget.
IIRC I assumed the worst case for Z**t was operating on a qubit from an EPR pair, and 3.5 is just a number bigger than some formula involving pi.
@Strilanc  I'm thinking about doing all the calculations with p = |0><0|. Is that okay?
Definitely not. That would assign a bound of 0 to the Z gate. You have to pick the worst case state.
@Strilanc Did you mean that the tight bound is max rather than min?
@bryano Oops, yes you're right. Fixed it.
@Strilanc What's the definition of a worst case state? An even mixture? 1/2*(|0><0| + |1><1|)
The worst case state is argmax_p trace_dist(p, U p U^-1).
(Keeping in mind that in principle p may use up to twice as many qubits as the number of qubits that U acts on.)
p is needed to calculate the trace distance. I want a generic p to use in every case. That's what I'm trying to find. I don't see how that comes from argmax_p trace_dist(p, U p U^-1).
I suspect that the state where each qubit acted on by U is fully entangled with a qubit not acted on by U is always the worst case state, but I've never tried to prove it. @dabacon are you familiar with how to compute these values exactly without missing tricky corner cases? These kinds of distinguishability questions sometimes have tricky corner cases.
If I've understood correctly the trace_distance_bound method is meant to calculate the diamond metric distance between the given operation and the identity. An explicit general formula isn't known as far as I'm aware, but this reference (https://arxiv.org/abs/quant-ph/9806029) gives a formula for the distance between two unitary operations, which could give cirq a way to explicitly calculate the trace distance bound for any operation with a unitary. The section where the formula appears implies that knowledge of the eigenvalues of the unitary allows you to calculate the distance between the unitary operation and the identity by solving a simple geometry problem. Edit (typos, clarity)
The diamond distance measures the distance between two quantum channels. The trace distance bound is bounding the distinguishability of the input state and corresponding output state of a channel. Two different quantities.
Isn't it the case that the trace distance bound is a special case of the diamond metric? The diamond metric measures the distance between two quantum channels. It does appears to do so by calculating the trace distance of the output state of both channels given a common input state, and taking the maximum value over all input states.  If this understanding of the diamond metric is correct, it seems natural that the maximum trace distance between the input and output of channel "A" would be the same as the diamond metric distance between the identity channel and channel "A". The reference I provided actually uses twice the trace distance between the two outputs but then the resulting formula just needs a factor of two correction to keep the output between 0 and 1.
Ah, yes, that sounds correct.
I believe @c-poole #1842 does this.
#1842 calculated the trace distance bound exactly for unitaries. I don't know of a computationally cheap way of calculating the value exactly for a generic mixture or channel. For mixtures we can get a reasonable upper bound by applying the triangle inequality to the unitary case. I haven't implemented that yet because I'm waiting on my other mixture PR to be finished.
