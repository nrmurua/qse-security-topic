Here is a QASM file, representing the value 1.
If we run it, we will get the final state:
0 0 0 0 1 0 0 0
The final state indicates the value 4. That suggests each follows a different endianness. I guess the latter is from a tensor product of |a[0]> |a[1]> |a[2]>. Well, is there anything wrong to produce the final state from a tensor product of  |a[2]> |a[1]> |a[0]>?  One would think the final state should be:
0 1 0 0 0 0 0 0
You explained the endianness of the classical registers clearly in the Issue 75. Would you please comment on this issue?
Hi,
In |a0>|a1>|a2>, the left-most is the zero qubit. So x a[0] change a[0] from (1 0) to (0 1) (as column vectors). From which it follows that (0 1) \otimes (1 0) \otimes (1 0), which is 0 0 0 0 1 0 0. Again, qubit zero is stored at the leftmost position (or, at the lowest address).
BTW, writing // a = 001 indeed depends on the endianness. Most often (in the literature/other software etc), qubits are labelled from left to right, or top to bottom, and that's what we use in Quantum++ as well, so for us this really is a = 100. We prefer this convention because using it a[0] refers to the zero-th element (qubit/classical bit), otherwise we'd have to write all the time a[size()-1-j] to refer to a[j]. Had we followed what you mention here, we'd have to refer to the first qubit as a[2], and things can get easily messy.
Think also whether it makes sense to represent classical values as string of qubits. I don't really find a compelling argument for this.
Thanks.
