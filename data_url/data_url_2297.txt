Now that #2037 has fixed most circular import issues, most of the function-local import statements used in protocols/ can be made module-level imports.  The only exception is circular imports within protocols/ like has_unitary.py <-> apply_unitary.py.
I started looking into this, but I'm running into two issues.
In cirq.protocols.has_unitary I'd like to import the device module at module level, and in  cirq.protocols.resolve_parameters I'd like to import study. However that gives the following errors in import_test:
But in #2037 you say "protocol code can import any other module at import time". Is this a bug?
Also, is it OK to have import cirq at module level? cirq.protcols.json._ResolverCache.cirq_class_resolver_dictionary has a lazy import of cirq which I could move to module level.
That sounds like a bug in #2037.  At the last minute I changed "protocols can import anything" to "protocols can import ops or anything that comes before it in the dependency list."  If a protocol needs the study module then this should be changed.  Do this by editing cirq/__init__.py.  Move devices and study up a few lines so they come right after ops.
I would still avoid import cirq for now.
