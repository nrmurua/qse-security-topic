Hello!
I'm currently working on the mapper branch, testing the contents the 'metrics.h' file.
However, even when doing changes only to that file, I find that running 'nmake' always recompiles a lot of stuff, such as Lemon, scheduler.h and cc_light_eqasm_compiler.h, quantumsim_eqasm_compiler, etc...
This makes the debugging cycle a lot slower.
Note: Since I am testing the metrics.h file, in /tests/CMakelists.txt I replaced the test_mapper.cc mentions by test_metrics.cc
A quick way to do testing would be to setup the python package and then write your test in python. In this way, openql is compiled as a library and is available as a python package. This will let you do detailed testing without requiring any re-compilation of openql.
Yes, but this also makes having to compile everytime when debugging the C++ code, after writing it.
Isn't there an easy fix for this? Shouldn't the build system handle this?
Also, how can I access my classes from Python? Do I need to set it up somewhere or?
How does the file structure/namespace organization translate to python?
Thanks!
Indeed, if you change the implementation code, you will have to re-compile. but if you are only chnging the tests, you dont (with python interface). that was my point.
You are asking for a fix, but i dont see it a problem, rather its the choice that you want your library to be header-only or not for the portability reasons !
Regarding your second question, the api in openql/openql.h is what is exposed to python user.
The header-only approach increases compile time for a single compile because it defeats the use of parallel threads. When generating several outputs, each of them requires a full compile, instead of linking against the commonalities.
More important, I think the fact that everything is effectively in a single unit defeats proper structure: nothing stops you from referencing functions you never explicitly #included, because such an include may have been done upstream.
I actually split the CC backend (and a few other) .h files into .h and .cc and made a library for the .cc files in PR #221, but will not take that further from here.
for now i have made it a low priority issue to do the split for rest in .h and .cc files.
closing this as recent release has separate .h and .cc files.
