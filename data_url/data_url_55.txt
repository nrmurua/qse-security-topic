Our current way of combining classical and quantum code won't work on macOS. The current behavior implemented in nvq++ calls the cuda-quake tool that outputs:
At this point, if we were to generate object code for both files (foo.classic.o and foo.quantum.o) and try to linking them together, we would get an error about duplicate symbols since quantum kernels appear in both files using the same symbols.
The fixup-linkage tool aims to solve this problem: It looks for kernel symbols that appears in both foo.qke.ll and foo.ll, and modify them in a way that, once we generate object code, the implementations in foo.quantum.o will be selected by the linker.
The current implementation of this mechanism won't work for Mach-O. The first reason is that the fixup-linkage tool looks for the symbols using a regular expression that requires the presence of dso_local or internal. These are not be present in Mach-O, for a example: see. Furthermore, suppose we solve the regex issue, I'm unsure if adding dso_preemptable would work. We need to further investigate this.
Try to compile any free function kernel to a macOS target.
Successfully compilation of the program.
Not a regression
No response
