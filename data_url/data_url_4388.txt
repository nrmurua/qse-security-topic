Circuit.invert() is raising error when ThermalRelaxationChannel or PauliNoiseChannel are present in the original circuit. E.g.
I have tried with ThermalRelaxationChannel and is also breaks. However, it does not break with DepolarizingChannel.
Explanation about how the invert method could work following the discussion in the last meeting.
Right now, the following is implemented:  given a circuit represented by an unitary $U$, the invert method returns $U^{\dagger}$.
Let's now define the notation in which $\widetilde{U}$ represents the noisy implementation of $U$. Currently, when applied to circuits that contain noisy channel,  the invert method returns $\widetilde{U}^{\dagger}$, such that $\widetilde{U} \widetilde{U}^{\dagger} = I$.
It is also relevant to have the method return $\widetilde{U^{\dagger}}$ instead, which is the noisy implementation of $U^{\dagger}$ and conceptually a different circuit. Instead of inverting the circuit queue element by element, this inverts the ideal gate while preserving the fact that the noisy channel comes after the ideal gate, not before.
This could maybe be done by introducing a boolean argument to invert, e.g.
$\widetilde{U}^{\dagger} = \widetilde{U}.\text{invert(invert\_noise=False)}$
while
$\widetilde{U^{\dagger}} = \widetilde{U}.\text{invert(invert\_noise=True)}$
There is an additional issue here because the invert of a quantum channel might not exist. When it exists, it isn't necessarily a proper quantum channel at all, even though it is a linear map.
