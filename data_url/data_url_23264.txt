In the test cases, RedPitaya is instantiated without supplying a password. The tests therefore fail if the root password is different from the default.
ok. how about an the test checking for environment variables of the kind
REDPITAYA_*, building a dict with all those and passing it to RedPitaya.init ?
e.g.
REDPITAYA_hostname = "192.168.1.100"
REDPITAYA_password = "toor"
Would that be convenient?
Yes, I think that would work great. So far I just modified all the tests to look for this variable, but it's much more convenient and elegant if it happens in the instantiation of RedPitaya().
Ok, I merged it all now. I implemented the following:
for k in ["hostname","port","user","password","delay"]:
if "REDPITAYA_"+k.upper() in os.environ:
overwrites python configuration variable and issues a warning
Environment variables have priority over python variables. They are REDPITAYA_HOSTNAME, REDPITAYA_PASSWORD and so on. It's easy to add more to the list if you need to.
All this is done in RedPitaya.init(), such that the test instantiation is only one line now.
Hope it's not too much work to change your variable names, but i guess the longer names i chose are more consistent now.
