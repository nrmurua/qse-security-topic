While implementing the "sweep module", a new SweepMeasurement class has been implemented (see in PR 1107 or in qcodes/sweep/measurement.py once #1107 is merged).
The class is implemented by simply subclassing from Measurement class, and adding a register_sweep method.
The implementation is lacking design for the following reasons.
Thanks to the direct inheritance, register_parameter methods can be called on SweepMeasurement objects. But this is NOT  desirable. The whole point of the SweepMeasurement is to get away from register_parameter, and use a sweep object for both "measurement definition" and "measurement execution". So, SweepMeasurement objects should not have register_parameter-like methods. If there is a need to add or remove parameters, that should be done through the sweep object.
Since SweepMeasurement make sense only for once sweep, what is the need for an explicit register_sweep method? Why not pass the sweep object directly to the constructor of the SweepMeasurement?
Compare two lines
with one line
Thanks to the sweep object infrastructure, the measurement execution code itself becomes very concise, and more importantly generic. For example:
Why not implement a method on SweepMeasurement class that does that since SweepMeasurement objects are created based on a sweep object and they can contain it inside?
Since the run method is considered, it is also worth noting that the run method of a Measurement object does not actually "run" anything - it just initiates a data set and returns a context manager from within which measurement results can be saved (e.g. added to the data set). On the other hand, a run method of the SweepMeasurement class can indeed "run" the experiment, because the experiment definition is already known from the sweep object.
@sohailc @WilliamHPNielsen @jenshnielsen @Dominik-Vogel
I fully agree. The run part has come up in discussions before, and it does seem a bit pointless to not just let the sweep do its thing with a single method.
