Hi!
Thanks guys for making this toolbox.
a very short suggestion from a new user: in the documentation, many equations are showing explicitly the symbol \hbar. Perhaps it would be clear to add that the solvers assume  \hbar=1 (or in case it's already there, I just missed it)? It took me a while to figure it out by going into the source code.
Kind regards,
Wouter
Hi Wouter!
Technically the solver doesn't assume \hbar=1, but rather that the Hamiltonian is given in units of 1/\hbar. It would just cancel anyway, but probably lead to considerable rounding errors because \hbar is such a small number. But you're right, this isn't really mentioned in the docs anywhere. Not sure where to put it so people don't miss it, but I guess I'll add it somewhere.
Thank you. A different question I have is the following. In the documentation, you are referring to DifferentialEquations.jl for the solver options.
However, it is not clear to me how to move manually beyond the standard QuantumOptics.jl options without leaving this interface completely? It seems to me that the tolerance used is set to 1e-3 here in the function Integrate, which is still moderately large, so I would like to decrease it to check if the result changes.
I've tried to add such options directly here, i.e.
but I'm a bit suspicious as whether this is really working, since the solver does not slow down significantly, and in fact any other dummy argument that I completely made up (e.g. using fruit="banana") won't throw an error
That tol sets the tolerance when computing a steady state (with steadystate.master). What you want is setting the absolute and relative tolerances with abstol and reltol, see the keyword arguments here:

The fact that you can basically set any keyword argument and it will just be silently ignored is a bit annoying. This is caused by DifferentialEquations.jl, though. So even without using QuantumOptics.jl, you can do e.g. solve(prob, Tsit5(), fruit="banana") without any error being thrown.
thanks! I thought I was dealing with numerical inaccuracies, but apparently I was only facing unexpected behavior because I chose the Fock-dimension too low.
It was also a bit hard to find the keyword to set the solver itself, but apparently alg = OrdinaryDiffEq.<solver>() should do the trick?
Oh well, that happens ^^
apparently alg = OrdinaryDiffEq.() should do the trick?
Yes, that should work just fine.
