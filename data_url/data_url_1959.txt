There is hacky code in cirq.Device that falls back to these method for qubit_set, apparently according to the comment to preserve backward compatibility.  These other methods should be properly deprecated and removed instead.
If someone picks it up - this is the part in question:

And the test that ensures this behavior is in device_test.py / test_qubit_set.
For proper deprecation, we can't use the @deprecated annotation as we don't have access to these attributes or methods, but we should try to imitate it: we should keep the test but also add tests for deprecation messaging that is consistent with the other deprecation messages (see cirq.ops.fourier_transform.QFT for example). We should aim to remove these by v0.10.
Good first issue for someone!
Would all the block of code be deprecated (apparently dropping backward compatibility) or only qubits and _qubits?
Since last Aug I learned a bit more about how we deprecate things.
This is how I would do this:
Another design note:
We have deprecation helpers for functions, parameter, module attributes and modules.
This falls under the category of deprecating "private" functions that are used by protocols and/or abstract classes. We don't have a good design here yet, hence my recommendation is to write the generic deprecation_warning method. But maybe we could think a little bit more around something like
But I'm not convinced yet that this abstraction is very useful - so I would just go with the generic deprecation_warning method outlined above for now.
This is going to be superceded by moving qubits information into devicemetadata. Think we are good to close here.
