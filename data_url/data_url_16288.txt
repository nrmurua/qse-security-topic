qiskit.result.utils.marginal_counts was one bottleneck for my qiskit project, so I tried to optimize it. The new code below for the subroutine _marginalize avoids regex (seemed like overkill since all it was used for was to drop characters at certain indices from strings), is shorter / easier to read, and for my use-case was ~10-20x faster. My minimal tests showed the output counts were the same as those given by the old code. (If the type specification Counter vs dict is a concern, may want to convert to dict just before returning).
If appropriate (maybe with further testing / consideration of scaling) perhaps this could be added as a new version of this function.
This looks good, just from a quick glance that definitely will be faster, I haven't really thought about edge cases though, there might be some. The one called out here with the return type, we probably should cast it to an dict for the return. While Counter is a dict subclass it probably would be better to leave the type as it was before. (although it might be a qiskit.results.Counts object I think). Please feel free to submit a PR making this change and we can iterate and discuss there.
Can you first add a benchmark to https://github.com/Qiskit/qiskit/tree/master/test/benchmarks so we can track performance/scaling and catch any future regressions?
@aeddins-ibm I'm working on a marginal_counts issue, #5424, and left a comment there about some possible design changes. As a marginal_counts user, I thought you might have some insight about the issue.
I think the code here already landed on master. Thanks @aeddins-ibm and @enavarro51
