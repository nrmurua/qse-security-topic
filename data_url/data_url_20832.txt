The incremental hashing APIs provided by the common/ directory appear to be doing some assumptions. For example, the incremental hashing API for SHA256 assumes a state of 40 bytes.
Aside from this not being documented, this also leads to some difficulties if anyone wants to substitute the SHA256 implementation. I am trying to replace SHA2 by the Rust Sha2 crate, but because this implementation has a slightly different structure the state is some bytes larger.
I'd propose introducing some constants like PQCLEAN_SHA2_INCREMENTAL_STATE_BYTES to then replace the hardcoded constants.
Alternatively, we could also do it with structs, like the AES api.
Having spent a few more minutes thinking about this, I think I'd prefer a struct for the state, as this would allow the type checker to verify that things are being used correctly.
We talked about this offline for a bit; I agree - a struct seems to be the right approach here (also for SHAKE).
Will this be an opaque struct so that consumers replacing this with their own SHA2 implementation can  still use their own (potentially different) struct?
