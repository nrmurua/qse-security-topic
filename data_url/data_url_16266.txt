A single call to execute with a list of circuits takes around 10s longer than calling it for each circuit sequentially.
Example code
Similar results are found for different numbers
They should take around the same time. But when running the above I get the following
I do not see the same problem when running on IQX. There I instead get
Which still isn't perfect, but it's better. So maybe it is an OSX problem?
I should install Linux ;)
I expect this is actually overhead from parallel_map in terra for transpile and assembly. For python 3.8 multiprocessing on osx (especially 10.15) is problematic as 3.8 switched to spawn by default instead of fork. This causes both buggy operation and way more overhead. Can you try setting the env variable QISKIT_IN_PARALLEL to  TRUE and running? That will disable parallel_map in terra so the transpilation will be executed serially. Also you can try splitting the transpilation and assemble out from backend.run and see the overhead there. Basically do:
Or you could install Linux :)
Thanks. That certainly seems to speed up running the circuits, though assemble seems to have a bit of an overhead too.
Yeah, assemble also runs in parallel_map for assembling multiple circuits (it was added in 0.13.0 with #3971). So it will suffer from the same issues with macOS.
I'm going to transfer this issue to terra and push up a PR that will make parallel execution opt-in for macOS. It's a big performance hit for people on older versions of python and/or macOS, but I don't think I've had a single week go by since we added python 3.8 support that I've had to help someone fight these issues.
