Importing after conda install with lastest:
/Users/paul/.pyxbld/temp.macosx-10.9-x86_64-3.7/pyrex/qutip/cy/openmp/parfuncs.cpp:626:10: fatal error:
'src/zspmv_openmp.hpp' file not found
#include "src/zspmv_openmp.hpp"
I couldn't reproduce this with an install into a fresh conda environment, but I did once see that same error when I tried to make an OpenMP and a non-OpenMP qutip coexist in the same environment.  When that previously happened, the package actually worked, it just reported that error.
My guess is that this happens if pyximport.install() has already been activated when qutip is imported, and consequently the test in __init__.py as to whether qutip.cy.openmp.parfuncs is importable causes this error.  It should not be able to even attempt to import it unless pyximport has been turned on, and if it's been turned on by something other than QuTiP, then it should fail with a numpy header file error instead (this is something we should probably fix too, but I've not noticed it before).
Is there any chance you're importing or reimporting qutip in a Python session in which some other version of qutip is already imported (like in an IPython profile file)?
Yeah, it was not a fresh conda, but one that I did not previously install QuTiP in.  However, that warning is essentially telling me that it is trying to build the Cython openmp stuff at init.  It should not be doing this, but will do so if it is trying to load a Cython generated file that was not built yet.
Do you get the same behaviour with QuTiP 4.5.0 in the same environment?  The offending parts of qutip/__init__.py have been there since then, so it shouldn't be new in 4.5.2 at least.
I can't reproduce the error unless pyximport.install() has already been run before QuTiP is imported (e.g. if I do import pyximport; pyximport.install(); import qutip or importlib.reload(qutip)).  We have qutip/__init__.py organised so that we don't enable pyximport until after we've done the test for qutip.cy.openmp.parfuncs: first we do

and only after that do we

In your error it's trying to build qutip.cy.openmp.parfuncs, and the only line that ever attempts to import that (in Python space) is line 101 above in __init__. It can only attempt to Cythonize files if pyximport is activated, but qutip doesn't activate that til a few lines later.
It's certainly still a bug that this error appears if you've manually activated pyximport before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear.  We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.
Probably the safest solution for us right now is to completely elide this run-time check, and have setup.py hard-code the value of settings.has_openmp at compile time.  Does that sound reasonable to you (since you wrote most of the original OpenMP stuff [and most of the current QuTiP code...])?  Also checking with @Ericgig, since I know you're a heavy user of it too.
Edit: I forgot, I actually already fixed the possibility of this happening in dev.major - it uses a much more rigorous importlib import to ensure that we're attempting the OpenMP bit with the natural import system, and so it doesn't conflict with relative imports elsewhere in qutip:

I often get these kind of error when installing manually. If you install Qutip with openmp once, the next time you install it without, you need to clean the old version or you get similar error. I never got this from a clean install.
Setting the has_openmp flag at installation is better, but I would let the precompiler set it instead of setup.py.
Also, recently using conda install qutip seems to not locate the qutip package and one needs to add the conda-forge channel. Should we change the installation instructions on the website?
@quantshah: This has always been the case, and it's part of the installation instructions in the user guide (http://qutip.org/docs/latest/installation.html#platform-independent-installation).  If there's anywhere it's missing we should add it.
One possibility would be to set the use of openmp in the version.txt.  Since building openmp QuTiP requires setting the argv at setup, this can easily be done.  Then the init can just query the version file to see if the version is an omp build.
I'm going to close this for now because I think it's more to do with previous installation artifacts, which is something that is difficult to handle neatly without making a huge __init__ full od all sorts of one-off special cases that only QuTiP developers ever encounter.
We're doing a variant of Paul's suggestion in dev.major using new read-only "installation settings", and besides, we're going to have OpenMP built into the same C extensions and completely remove use of pyximport then too, so this sort of problem shouldn't appear again.  It's possible we may still see very occasional bugs from QuTiP developers in the 4.x branch, but since it's mostly related to how QuTiP leaks its changes to the Python import process (via pyximport), which are fixed by the Coefficient object, it's probably not worth developer time back-porting such a major change.
