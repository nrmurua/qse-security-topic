Is your design idea/issue related to a use case or problem? Please describe.
Soon all the built-in simulators will have migrated to the act_on pattern. At that point, all the simulators will have a _base_iterator method that creates an ActOnArgs and then iterates the circuit. I'm proposing that we split this into two separate abstract methods: one to create the ActOnArgs, and another that iterates the circuit with that ActOnArgs object. Splitting it this way enables adherence to the single responsibility pattern, and brings a number of possible use cases with it.
Describe your design idea/issue
Draft RFC: tinyurl.com/split-actonargs
@95-martin-orion The RFC is ready for review.
