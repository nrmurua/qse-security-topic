qc = QuantumCircuit(q, c)
qc.iden(q)
circuit_drawer(qc)

qc = QuantumCircuit(q, c)
qc.swap(q[0], q[1])
circuit_drawer(qc)

qc = QuantumCircuit(q, c)
qc.cswap(q[0], q[1], q[2])
circuit_drawer(qc)

It would be good to have a gate for this since it is in the standard extensions. This would be a control - swap
qc = QuantumCircuit(q, c)
qc.reset(q[0])
circuit_drawer(qc)
gives an KeyError: 'texparams'
qc = QuantumCircuit(q, c)
qc.z(q[0]).c_if(c, 0)
circuit_drawer(qc)
does not work if there is no measurement before
While the below is correct i would like to show these gates dont have a control they are the same no matter what which qubit is the control. I like for cz the standard


and for the following we could have a number next to the line e^{ilambda}

Also is there a way we can say dont add the classical register and i want to discuss what it means to have the qubit registers in state |q_0> and not |0>. I think that since we take the default that a circuit means that the qubits are initially in the state |0> then the left should be q_0: |0> and c_0: 0 to denote the initial state and then circuit drawer should have an option for unitary where the states are dropped as well as the classical registers and then the left just has q_0, q_1, etc. I think reset, measurement, and if should not be possible in unitarty
