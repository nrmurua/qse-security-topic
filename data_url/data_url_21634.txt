After commit 2538840, running self.urukul0_ch0.set(100e6) results in
Ack, the breaking change should be the & <mask> here: 
According to the docs this should be inferred as TInt32. I expect wraping the expression in another int32() to fix this.
Hmm changing that to
changes the error to
Strange ðŸ¤” Just to confirm, this works fine without the & 0xffff? Could you email me your simulation device_db?
Random thought: Do type hints on turns_to_pow make a difference? (They shouldn't make a difference on the core? I'm unfamiliar with the simulation mode. Hopefully it behaves the same.)
Yes, it's the mask on l.177 that's the issue: removing that, the kernel compiles.
Type hints do something! Adding a  -> TInt32 seems to make it compile. However, the DDS now doesn't output anything... Same with removing the mask.
You can ignore the simulation mode in the above, that only refers to the peripherals we have in our lab: the core itself is connected.
Here's the device_db FYI: _device_db_2.txt
The only other ad9912 change in that commit is the mask on line 163. Does commenting both changes restore normal operation?
Yes, using artiq as in https://github.com/charlesbaynham/artiq/tree/hack_AD9912 fixes things. I assume you put them there for a reason though!
The masks were added so that only valid codes are returned from by the SI unit to mu conversion. Previously, entering an out of range Si number would return an invalid code.
Edit: This change was made in response to bugs such as #1444
@charlesbaynham Unfortunatly, I don't have an ad9912 to test this. Could you run a few tests to see if any of these fix the issue:
It was a combination of frequency_to_ftw and turns_to_pow that did the trick: see #1466
