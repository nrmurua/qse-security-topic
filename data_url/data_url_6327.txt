Inspired by a paper by Bravyi, Browne, Calpin, Campbell, Gosset, and Howard, QUnit already has elements in place to extend stabilizer simulation for its "shards" to limited instances of the use of T, diagonal, and other gates, via its single-control gate buffers on top of stabilizer.
In QUnit, in flight, acting on shards that are in stabilizer representation, say we encounter a T gate, which cannot be simulated directly via stabilizer formalism. Using the singly-controlled gate buffering system of QUnit, we could buffer this gate as the combination of a controlled T and an "anti-controlled" T on this bit and another arbitrary bit in the coherent width. (Or, we might buffer a single bit gate, instead, but this would be new functionality.) Once we do this, the buffering system is designed to commute as many further gates as possible around the buffered gates, with appropriate transformations on the buffers, with the original purpose of the buffering system being to avoid representational entanglement. To take advantage of the buffering system for extending stabilizer simulation, we just need to encode rules into QUnit for when it is appropriate to buffer any non-Clifford gate that we can accommodate over stabilizer shards at all. Once QUnit is modified to invoke buffering optimizations to prevent conversion from stabilizer formalism to ket formalism, then phase and "inversion" gates can be maintained and commuted as buffers for as long as possible before application to the underlying stabilizer representation.
If commuting these buffered gates over stabilizer representation ultimately produces a Clifford gate, it should immediately be "flushed" into the underlying stabilizer state. Otherwise, the QUnit buffering system should be co-opted to maintain stabilizer formalism for as long as possible before "flushing" non-Clifford gates.
Singly-controlled buffers are now used before converting out of stabilizer formalism, for QUnit shards. Single phase gates, for example, are still not handled this way.
Rather than relying on the buffering system of QUnit for single bit gates, we could put a single-qubit gate buffer layer in QStabilizerHybrid. As far as I can figure, no opportunity for fusing single bit gate buffers with singly-controlled gate buffers is missed, this way. It's also more general, for the purposes of QStabilizerHybrid with or without QUnit, while QUnit otherwise gains no benefit from single bit gate fusion.
