Describe the bug
"fmmesolve" gives wrong expectation values with "e_ops".
To Reproduce
Use tutorial in https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html
This p_ex is different from what computed above
Expected behavior
The expectation values are the same as the one without "e_ops" and manually computed
Your Environment
QuTiP Version:      4.5.0
Numpy Version:      1.18.1
Scipy Version:      1.4.1
Cython Version:     0.29.15
Matplotlib Version: 3.3.4
Python Version:     3.7.6
Number of CPUs:     52
BLAS Info:          INTEL MKL
OPENMP Installed:   False
INTEL MKL Ext:      True
Platform Info:      Linux (x86_64)
Installation path:  /home/user1/anaconda3/envs/env1/lib/python3.7/site-packages/qutip-4.5.0-py3.7-linux-x86_64.egg/qutip
Additional context
Suspected the issues comes from floquet.py:829 , where the transformation is "False"
I met the same question, thanks for your advise~
I use this codeï¼Œthen i will get the right figure for the  tutorial:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
output = fmmesolve(H, psi0, tlist, [sigmax()], [], [noise_spectrum], T, args,floquet_basis=False)
p_ex = np.zeros(tlist.shape, dtype=np.complex128)
for idx, t in enumerate(tlist):
f_modes_t = floquet_modes_t_lookup(f_modes_table_t, t, T)
p_ex[idx] = expect(num(2), output.states[idx])
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
but I met another question.
When I change the omega from
"omega = 1.0 * 2* np.pi"
to
"omega = 1.0 * 4"
I get the bad figure, this is amazing!
Same here. In the tutorial, changing omega to any other number will lead to a mismatch between fmmesolve and mesolve result.
I think the original issue with the basis change was resolved at some point?
Regarding the example and changing the driving frequency, essentially there is no reason the results should match. The floquet master equation is derived very differently from mesolve(), and has a different range of validity. Personally, I dont much like the example in the docs as it inadvertently implies the results should match for all parameters, which is not the case.
As a check, you can also think about comparing fmmesolve() to brmesolve() for that same example but with smaller omega, as I believe these methods should match for slow driving (given equivalently defined noise spectra, which can be a bit annoying to do because they rely on slightly different definitions).
I think the original issue with the basis change was resolved at some point?
Yeah it has been solved
Regarding the example and changing the driving frequency, essentially there is no reason the results should match. The floquet master equation is derived very differently from mesolve(), and has a different range of validity. Personally, I dont much like the example in the docs as it inadvertently implies the results should match for all parameters, which is not the case.
Thank you for explaining! I just read about the valid parameter region for floquet theory.
