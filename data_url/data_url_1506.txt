ExecutableGroupResultFilesystemRecord.load is used to load an ExecutableGroupResult from disk. It does so by calling cirq.read_json_gzip with the correct path storing the files on disk.

The current implementation limits the functionality to reading only dataclasses which are already defined in cirq, even though for many types, like ExecutableSpec the recommendation is to use an inherited custom defined type which is specific to the problem.

This can be fixed by adding a custom_resolvers parameter to the load method which appends the custom resolvers with the default resolvers and forwards the updated resolver list to cirq.read_json_gzip.
@mpharrigan
The recommended way is to register your resolvers with cirq at import time. For example, in __init__.py
Your suggestion is worth considering, though. You could imagine having a custom "reader" and "writer" function to e.g. toggle between writing gzipped or uncompressed json (as well as supporting custom resolvers)
Decision from cirq cync:  Proposed work-around registering the resolvers with cirq seems to work for this and it seems to be the better solution.  For now, we will close the issue.  If we want to support custom readers or writers as per the last comment, we can open a new issue.
