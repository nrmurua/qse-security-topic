When histogram is called without a fold_func specified, the results can be interpreted as a sparse array, and it feels like it might be useful to be able to slice it (as one way of calculating marginals, for instance). However, this isn't implemented in the native collections.Counter class (as the key values are not necessarily integers).
Would it make sense to add this functionality to the output? (Sorry if this has been thought of and dismissed before.)
Thank you for opening @obriente! This sounds like a nice idea - I would love to hear more use cases to justify an implementation.
So as a simplest example:
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
The number of keys in the counter can vary depending on whether the measurement was seen or not.  So in the example given if number of repetitions is 1, for example there will only be one element.  So I guess what is desired is to be able to slice according to the binary strings, not indices.
But then is the desired behavior to return a list with counts including 0 in the slice?  That would cause some issues in terms of efficiency since most histograms would have a lot of 0s.
I'm wondering if the use case described here, where you want to get the marginals is what this should really be.  Something like subclassing Counter and then you can ask
hist.marginal([0]) which returns the marginal with only the 0th qubit.
Decision from cirq cync:  For more complicated slicing and processing, the user could use the underlying numpy array of the measurements (instead of calling the histogram).  numpy has much more syntactic sugar for handling these sorts of operations.
@obriente, have you found a workaround for this? Doug's comment describes the Cirq team's recommendation on this.
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
