Quantum programs are hard to debug - unlike classical programs, we can't print quantum states.  We measure intermediate states by creating a copy of the quantum circuit up to that point in the code, then use statistical tests to verify that the distribution of measurement results is as expected.
Pull request incoming that implements ideas in this paper
Hi @1ucian0,
Thank you for following up on this!  I recall a major reason PR #2867 was on the back burner for a few months is because there was discussion that by nature its unit tests are statistical, i.e. have a small but nonzero probability of not passing.  Now that I have finished my undergrad (woohoo!) and will be starting PhD research in quantum computing this fall, I am 100% on board to maintain this, and have pinged @edasgupta and @yipenghuang0302.  Please let us know, beyond maintaining and linking to the repo, anything we can do to get this ready as an external module on the dashboard - that's a fantastic idea :) I am actively checking my Qiskit slack messages this summer.
Another completed project that could be an external module on the dashboard is the Qiskit transpiler pass @edasgupta and I built supervised by @ajavadia and @ewinston last summer.  I'm certain a dashboard would be a good home for this project, which necessarily consists of both a fork of Qiskit Terra and a fork of PyZX (also previously, not anymore, they were under conflicting open-source licenses).  My 5-pg writeup of it accepted to the ACM Student Research Competition final round internationally is at https://src.acm.org/candidates/2020.
Sincerely,
Lia
Hi @the-legend-of-lia - yes I think having the assertion work as a separate module on top of Qiskit would be the best way and if you could maintain it then we can include it the dashboard @1ucian0 talked about.
I was also pleased to see PyZX license compatibility recently. If you could add that as a transpiler pass in your fork (adding a dependency on PyZX) then I'd be interested in playing around with it a bit and then we can find a good home for it. This would be similar to how we use and external optimizer for our oracle compilation (#4522 )
I'm going to close this issue about the assertions, but let's follow up separately about PyZX if you decide to do this. Thanks!
