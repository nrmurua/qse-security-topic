Really nice project! Making these optimizers available in Python is a great idea!
I would be very interested in using them but for my research it would be desirable to have control over the optimizer rather than having the optimizer control my objective function.
Currently, the objective function is passed to minimize:
I was wondering if you would consider providing an ask-and-tell interface too?
This is how that could look like:
copy-pasted from this issue: scikit-optimize/scikit-optimize#68
Yes, no problem. The reason for the callback interface is to allow a shim to make things consistent, save intermediate data, etc. There's nothing fundamental about it.
But what's the specific use case? In particular, what and how much state should there be between the two calls and how/whether to reset?
Thanks for the fast answer!
In my specific use case the objective function would be an automated chemical experiment in the lab.
We treat it as a sequential optimization of a black box function and are looking for an interface like: next_point_to_evaluate = optimizer.suggest(parameters=Xi, results=yi, bounds) where Xi is a matrix with all evaluated points and yi a matrix of the corresponding function values.
Alternatively, you may want to keep track of Xi, yi, and bounds in the state together with anything else that's needed for the algorithm to function properly, thinking of SNOBFIT initial call / continuation call. If there is an optimizer class, we would just reset by creating a new instance. Hope that makes sense.
Useful link:
https://github.com/scikit-optimize/scikit-optimize/blob/master/skopt/optimizer/optimizer.py
None of them are consistent enough internally (although snobfit comes close) to make that straightforward, but I need to cleanup internalized state anyway, to allow restart with saved points. It's not just the points, though, but that while not opt.stop() must mean that some state is interned (e.g. the number of failures seen so far, or the amount of budget used up). This may not work for optimizers that are pulled in through PyPI, but will work for the rewritten ones.
I'm thus working on this:
with state internal to skopt for now (but could be documented later if I can make it consistent across all optimizers) and result a normal optimizer result as if run to completion.
Snobfit alone would already be very cool!
The interface looks good and would resolve the issue.
For SnobFit, have a look at this while loop, which is pretty much that interface:
https://github.com/scikit-quant/scikit-quant/blob/master/opt/snobfit/python/SQSnobFit/_snobfit.py#L221
only that the data so far is an internal structure (it's not in the original SnobFit MATLAB code: it's written to file and read back for each iteration; I didn't understand what that was good for, but now I do :) ).
