At DCL, we decompose CZs into two single qubit flux pulses:
       "cz q0 q2": ["sf_cz_se q0", "sf_cz_nw q2"],
These sf_cz gates get scheduled separately, and are thus do not always coincide in time, which is a requirement.
It would seem natural to add wait statements around the sf_cz gates, but that is not supported ("Error: custom instruction not found for 'wait'")
decomposing after scheduling could maybe help (once implemented), but then the scheduler wouldn't know the duration of the cz (unless you would also define a gate for cz, which sound counterintuitive).
Still I thing the currents waits could do the job, if they could be used in gate decomposition
The necessity for support of barrier/wait within gate decomposition arises from the 'single qubit flux' gates that were introduced to practically allow 2 qubit gates with the CC-light (and which are a bit of a hack).
The CC backend could easily be changed to allow specification of 2 (3) codewords for a 2 (3) qubit gate, by changing JSON field 'static_codeword_override' from a scalar to a vector. One could then write:
and
in conjunction with:
To the scheduler this just uses 2 and 3 qubit gates, the expansion to codewords is done in the backend.
I still think that a wait/barrier should be available in gate decomposition though, it should very much act as a C macro IMHO
@wvlothuizen wrote: Still I thing the currents waits could do the job, if they could be used in gate decomposition, and, I still think that a wait/barrier should be available in gate decomposition though, it should very much act as a C macro IMHO
It was argued that this doesn't help for cz expansion.
So, what is the use case?
I didn't try but when defining a 0 duration custom-gate with 2 qubit arguments with the name barrier2, wouldn't that be allowed/supported in the current gate decomposition?
