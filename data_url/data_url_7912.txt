In this issue #580 we discussed ways to make the import qutip lighter. This can up again today when discussing the qip module with @BoxiLi during our mentor meeting. It would seem like a good idea to only import to level functions (that is not module functions in sub-folders) when
is used. This would be in-line with how SciPy works for instance.
A lot of people use the * import, so we should give warning, and should probably only do this in a major release. So the suggestion is that when we release the new QIP features that we move to V5. Arguably we could have done this for the solver changes in 4.4.
Does anyone know how we would give some kind of deprecation warning when from qutip import * is made to say that only core functions will be imported from v5 onwards?
Code in __init__.py is executed on import, including printing and raising error.
But I don't know if we can differ between import methods (import qutip vs from qutip import *)
I find Python's collections module a good example (https://docs.python.org/3/library/collections.html). Python moved Collections Abstract Base Classes like Iterable to the collections.abc submodule. In python3.7,
The following code still works but there will be a deprecation warning
It won't disturb other users since there is no warning when
But the following will give an error,
So for those who use from qutip import *, they still don't know what happens.
I'm not sure if it is possible to add a deprecation warning for this case separately. Maybe we can modify the top-level init.py so that we qip function is imported directly with the qutip namespace, it is wrapped with a deprecation warning. In this way, the warning only shows when the functions are called. Not sure if this is practical, though.
This could be a way of wrapping all the qip functions in __init__.py with a deprecation warning without disturbing other users. I use functools.wraps to make all the name, doc attributes come with the wrapping. https://stackoverflow.com/questions/308999/what-does-functools-wraps-do
It will only give a deprecation warning when cnot imported under the namespace of qutip is called It should be possible to write something similar for class objects
Does anyone know how we would give some kind of deprecation warning when from qutip import * is made to say that only core functions will be imported from v5 onwards?
@ajgpitch
I know I'm resurrecting a dead thread, but I have a way of detecting star imports if you can cope with a fairly gross hack.
The only internal difference in from qutip import * (that I know about) from import qutip is that in the former, the import system access the qutip.__all__ list to see which names it should import.  This is intended to be a list of names, so the star import doesn't have to import every single name, i.e. so you can manually set what's public to a module; the star import is designed for use within packages, and the user importing a package like that is strongly recommended against (though in scientific code, I'm 100% sure that's a losing battle).
So, what if we make __all__ look like a list, but a list that injects a warning whenever anyone tries to see what items it has?  An example:
I put that in a package called "test".
or
I won't complain if you want to scream after that...
I've moved this to the 5.0 milestone. I'm considering migrating QuTiP 5 to https://scientific-python.org/specs/spec-0001/, but regardless of how we want to address imports, QuTiP 5 is the time to do it.
Note that 5.0 is already a lot better about what it exposes via from qutip import *.
