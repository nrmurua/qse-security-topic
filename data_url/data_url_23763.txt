Several instruments (for example the IVVI and the FPGA used at Delft) use a protocol without termination characters. The drivers try to handle this by setting VI_ATTR_TERMCHAR_EN to 0 (False), but this feature does not work. The results is that the instrument drivers fail at random times (e.g. when the measured data contains the termination character \n by coincidence).
The bug is not in qcodes, but in the visa lib itself. The issue is reported here for people who run into similar problems.
We have worked around the issue for now by modifying the drivers to read data one character at a time. This is less efficient, so we have not pushed the code to github.
The bug is also reported at the pyvisa github https://github.com/hgrecco/pyvisa/issues/225
Is it a bug in the pyvisa wrapper or the visa library itself?
That's annoying... it looks like what you describe is exactly what pyvisa tries to do when you set read_termination=None so they at some point thought it worked... will be interesting to see how hgrecco responds (or if, seems like some of his visa projects have gone a little stale, unfortunately)
Should we make a VisaInstrument subclass that implements fixed-length reads as you're describing? I guess the implementation of message_len = self.write(message, raw=raw) is dependent on the details of your command structure - with the expected return length in the 3rd byte... but it would be easy for specific subclasses to override that part and still use the fixed-length read capability.
Speaking of which, won't expected_answer_length be wrong in the IVVI driver if you use raw=True? It should be message[2] then, no?
Also, couldn't you do this by reading as many characters as it will read (up to the length you want) and if you didn't get enough just read again and append the extra characters? That seems like it would be more efficient, ie typically you'd only have ~1+nbytes/256 reads, rather than nbytes reads.
@Rubenknex  It seems that it is an issue with the visa library, the pyvisa is mostly a simple wrapper.
@alexcjohnson Reading characters untill termination is indeed more efficient. The current version of the IVVI driver we are using is here: https://github.com/qdev-dk/Qcodes/tree/IVVI/termchar. I am not sure about the extra overhead we introduce here. If this is small, than perhaps we could make it into a PR.
@alexcjohnson The expected_answer_length is indeed not correct, but I guess we are not using it. I will convert it to None to indicate it is invalid in case raw=True
I just found out that VI_ATTR_TERMCHAR_EN is ignored based on some other visa variable (see http://www.ni.com/tutorial/4256/en/#toc2). By setting VI_ATTR_ASRL_END_IN to 0  the termination character is ignored. I will update the IVVI driver to set VI_ATTR_ASRL_END_IN by default.
