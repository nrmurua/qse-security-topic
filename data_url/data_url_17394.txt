In both device and simulator default pass managers there is an unavoidable unrolling to basis that requires converting the circuit to dag, and then traversing the dag.  This can be expensive if you are running on a simulator, where many gates are native, and those cases where the circuit is already written in terms of the basis gates.  This is especially expensive as the number of gates / width of circuit grows.
It should be possible to check whether a circuit needs to be unrolled before it is actually done, thus saving time.  I have previously advocated for the ability to provide hinting for which backend a circuit is meant to run on.  This would work here:
then if a gate that is not in the basis of backend is added the circuit could indicate that unrolling is necessary qc._needs_unrolling=True, otherwise qc._needs_unrolling=False.  I think there is additional opportunity here since every standard extension is already defined in the standard basis for our backends.
Also see #2181 for an additional unroller savings
Tying circuits to the backends they would run on is something I really would like to avoid.
The unroller takes O(g) time (g=number of gates). It may be possible to avoid it by checking the circuit's gate set in the transpiler and seeing if it is a subset of the unroller's target.
But also before going down the path of optimizing the passes too much, I think we should see if we can eliminate a large chunk of time by removing circuit->dag and dag->circuit conversions (by making circuit and dag the same). My hunch is yes, and preliminary profiling shows yes, as there are copies involved in these methods.
Yes, the conversation takes the bulk of the time. However, the dag traversal and node checks are not negligible either. Unless the circuit keeps track of the operations appended to it as they are added, you still have to traverse the dag. So I would agree with your solution as well provided that the circuit does this.
I think this can be closed with the upcoming changes in the unroller that @kdk  proposed.
