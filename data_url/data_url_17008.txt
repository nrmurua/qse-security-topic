qiskit/test/mock contains a fake provider, a fake job and several fake IBMQ backends with configuration and noise properties. This can be used for easier local testing.
We need to make the backend.run() method of these to actually run the simulations using BasicAer and give back the result. Ideally I'd like to run Aer with noise simulation, but that would introduce a dependency of Terra to Aer.
You could just do it only if aer is available. Something like:
Although you'll have to adapt all the options etc to match what's needed
I am interested in it. In order to exploit BasicAer, is there a methodology less-computationally expensive than density matrix formalism for modeling noise?
Moreover, I read that the five-qubit fake hardware is FakeTenerife, which is not available anymore. Is it required to create different classes for fake five-qubit backends, e.g. FakeYorktown, FakeVigo and FakeOurense?
@giovanniamedeocirillo  great let me know if you'd like to work on it.
is there a methodology less-computationally expensive than density matrix formalism for modeling noise
Aer injects noise, so you don't have to do anything. You just have to use a basic_device_noise_model and make the backend.run() method of these fake backends use that. See the tutorial here: https://github.com/Qiskit/qiskit-iqx-tutorials/blob/master/qiskit/advanced/aer/2_device_noise_simulation.ipynb
Is it required to create different classes for fake five-qubit backends, e.g. FakeYorktown, FakeVigo and FakeOurense?
All of these are already there in qiskit/test/mock. And they have backend.properties() which means that the above device noise model can be made from them.
@ajavadia I am still interested in working on it, thank you.
