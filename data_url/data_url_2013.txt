Raising a Pauli to an arbitrary exponent generally does not return another Pauli. Therefore, it doesn't make sense for the constructor of these (private) classes to take the parameter.
Note that functions like __pow__ do the right thing by instantiating an appropriate gate from common_gates.
Also note that this requires custom implementation of algorithms that use with_exponent. I think there is just one implemented in EigenGate. _equal_up_to_global_phase_.
If we remove the exponent from constructor of the Paulis, we'll have to override the _with_exponent virtual method in eigen_gate.py. However, mypy won't allow me to return an XPowGate from _PauliX because of the constraint in original function that return type should be same as self. As a workaround, I had to modify the return type constraint in _with_exponent and _resolve_parameters_ to return an EigenGate instead of TSelf, similar to __pow__.
PTAL at PR2924 for the exact implementation.
