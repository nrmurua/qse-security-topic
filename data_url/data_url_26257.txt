There currently exists a function schmidt_decomposition.py. Given a vector, the function provides the Schmidt decomposition.
Ideally, this function should include the ability to provide not just the Schmidt decomposition of a vector as input, but be robust enough to handle inputs provided as density matrices as well.
Consulting and enhancing the schmidt_decomposition.py file should be where the aforementioned enhancements should take place.
Hi! I'd like to work on this. Any pointers other than the aforementioned hints? Thanks!
Hi @paniash. Fantastic, that's great to hear.
And yes, I can offer a bit more context on the above.
Presently, the schmidt_decomposition.py exists in state_ops/schmidt_decomposition.py (one part of this task may be to move the schmidt_decomposition.py file to the more appropriate location of state_props/schmidt_decomposition).
It presently only works on vector inputs, but it would be ideal for it to work on matrix inputs as well. If you take a look at state_props/schmidt_rank.py, this function had the same issue associated with it but was recently adapted to take into account both vector and matrix input. I would imagine the structure and patterns here would be somewhat similar in design.
The main part of allowing schmidt_decomposition.py to take matrices will involve doing a bit of vector-to-matrix acrobatics. For this, I would encourage looking at the OperatorSchmidtDecomposition.m implementation from the QETLAB package as a source of reference.
Let me know if I can lend any other pointers. Thanks again for taking this on, and excited to see what you come up with!
@vprusso Hi! Sorry about the delay. I've been swamped with some personal work lately and couldn't get back to this. And I don't see if I can complete this before the hackathon.
I hope it's alright if I can continue on this at a later stage (or earlier if I find the time). :-)
Hi @paniash. Thank you for following up with me, I appreciate you keeping me in the loop.
I completely understand of course and would welcome your contribution at a later date if that lines up better with your schedule. In any case, I appreciate the prior contributions and feedback you have provided to the project. I hope to see a future contribution from you and do let me know if you have any questions in the meantime. Cheers, and hope to hear from you when you have a bit less on your plate.
Closed from #87
FYI: For UnitaryHack contributors, this task has since been closed. Thanks to @jli0108 for closing.
