Add methods to qiskit.backends for getting parameters and calibration data.
Currently the way to obtain backend parameters and calibration is through QuantumProgram methods. These could be moved to qiskit.backends.
Good idea, it feels more natural for those methods to be part of qiskit.backends. In the same spirit, perhaps we can take the chance to also revise the way the backends are handled as a whole in QuantumProgram? At the moment there is some overlap between the Qp.__ONLINE_BACKENDS / Qp.__LOCAL_BACKENDS class variables (with the methods that modify and use them) and the qiskit.backends machinery.
Yes I agree. The overlap might cause confusing behavior. For instance, if one sets up remote backends through qiskit.backends and then calls QuantumProgram.available_backends(), the remote backends don't show up. We should probably remove backend/api related methods and class variables.
There is a slight functional difference, however; some of the QuantumProgram methods query the API directly, getting a live update. To do that with qiskit.backends requires a call to update_backends first. This seems okay to me since it's more flexible.
I completely agree. Lets removing from quantum program all api stuff. (we just keep old code around with a warning for a few versions). I think i would prefer configuration over get_backend_configuration.
So the four methods would be
qiskit.backends.configuration('name') -- this is just a renaming of what is there
qiskit.backends.status('name')
qiskit.backends.parameters('name')
qiskit.backends.calibrations('name')
and then with discover_remote_backends(api) and discorver_local_backends you cover most users.
I think when we add the schema for configuration, parameters, and calibrations we will need one for status as well.
