I have noticed that results returned by UMDA optimizer via a callback wildly oscillate and yet the optimizer consistently and progressively finds the optimum value at the end.
Working with the source of UMDA class, I have noticed that the class uses the concept of "generation" in which it performs numerous stochastic objective function evaluations and at the end identifies the best which should be reported via a callback as the next value of the optimizer iteration. However, UMDA uses the minimize() function for all within-generation evaluations, and this in turn triggers callbacks, which report both the generation-optimum value and all other intermediate evaluations, which cause the wild "plot" oscillations - this will be a problem with understanding the optimization or later publishing such experiments. This may be difficult to correct as _check_generation() relies on the externally provided objective function, which for all TrainableModels (such as NeuralNetworkRegressor) already hard-codes the callback within (when specified).
In the interim, it is possible to make a small change to UMDA to allow the user a non-standard access to the "history" variable, which collects all generational minima, the values that should have been reported via callbacks. At the moment the "history" variable is local and cannot be accessed by the user. All that is required is to make "history" an object variable (turn it into "self.history" in three places). When suitably documented, the user callback function could then watch the changes to the length of the history list and collect or use the callback argument values as needed.
I attach two charts, one INCORRECT produced from the standard callbacks plotting the objective function values after each iteration of UMDA (including the within-generation evaluations) and the second which is CORRECT plotting only the values logged in the UMDA history list.


Here is the regressor "standard" callback, which produces incorrect values of the objective function.
Should the issue be properly fixed, the above code will produce the correct plot. If not then make the "history" an object variable, in which case the callback function can be rewritten as follows, so that it works properly for all kinds of optimizers.
When using the callback with UMDA an optimizer will have to be passed in on the creation of the callback, e.g.
All explained above.
I will handle this issue
