As a developer I would like to specify types of method arguments and employ some kind of automated type-checking where appropriate. This removes the need to implement such checks manually every time I want to be sure about the type of the object I receive.
Using function annotations (see also this blog post) and decorators (cf. this) would be a nice way to solve this. This code snippet may serve as an example.
This would require a convention on annotation usage as there is no official one that I am aware of (cf. PEP 0008, last point).
Actually there is a PEP 0484 for this as well. Guido van Rossum, author of python, did a presentation about the concepts at the PyCon 2015.
I'm not sure whether there exists IDEs / tools already that support this PEP.
That looks nice, but will first appear as part of Python 3.5 which is to be officially released on September 13th this year (cf. PEP 0478 -- Python 3.5 Release Schedule). However, since a beta version of 3.5 is already available and no new features will be added by now, we might just use that and benefit from the typing module of PEP 0484.
Cf. #16
An interesting Package for this purpose would be rightarrow, wich already implements a similar behaviour and is already part of the pypi library, which makes it easier to include.
I would stick to the PEP, since this will be the defacto standard in a few months anyway. The package typing can be included and used in any version of python 3.x as well. It has no dependencies for python 3.5.
I also favor the PEP syntax-wise. Locally, I've installed the 3.5 beta which seems to work just fine but copying the typing.py is also a reasonable solution.
I like typing in this context and the PEP seems to do a good job at integrating types into python. If we want other people to be able to use our software as well, I think it is a good idea to not force them to use a beta version of python (including typing.py might be sufficient, idk). rightarrow looks a bit Haskell-like and might be easier to disable (to not force a specific version of python).
EDIT: it seems that code typed that way is still valid python 3 code (function annotations can be used for anything, really). so using the pep version of type hinting, while not working on earlier python 3, will only break compatibility with python 2.
@j340m3 : There is an implementation of a typechecking decorator. Can we close this issue?
I think so. EDIT: can you link the decorator?
j340m3 implemented one. It is in src/utils/type_check.py . It may be, that the implementation is not fully finished yet, hence my question above.
If we are PEP-484 compliant, we can also use the mypy checker (by one of the pep authors). It's a static checker that aims to implement PEP-484. I hope that proper checkers pop up when the new python version is released.
We are PEP-484 compliant (or at least that's our aim) and the usage of mypy is intended. However, some test during runtime might not go amiss, thus our typchecking decorator.
Agreed. Close?
