I have read through most of the docs, at least those relevant in what I would like to achieve.
It seems like there is no support for 2 spatial directions, at least for wavepacket transport. I have tried the extremely naive:
but I cannot express/create a gaussianstate in two spatial dimensions. Is this true?
P.S.: I was wondering if you have a gitter room, or some other means for users to contact you if they have questions, etc. Because github issues are not very suitable for questions.
It's true, that there is no "native" support for more dimensions. However, this is simply because multiple dimensions are just a product space of one dimension such that they are still quite easy to implement.
When running your code, I get an AssertionError. This is caused by the last line H = LazySum(Hkinx, Hkiny). This is because you are taking the sum without building the product space first, i.e. you write H = Hkinx + Hkiny instead of H = Hkinx ⊗ one(b_positiony) + one(b_position) ⊗ Hkiny. The following lines of code give you what you are looking for in terms of lazy operations:
Using the composite space also answers your question about Gaussian states. A two-dimensional Gaussian state is just the tensor product of two one-dimensional states, e.g.:
Does this answer your question?
Addition Comments:
A very quick question: What is the latex completion entry for ⊗?
Also, ⊗ does not have documentation strings, where can I look them up and learn more in the documentation?
Edit: LazyTensor does have a documentation string, it was a Juno display problem
Second edit: ⊗  is equivalent with tensor, right?
Awesome, the tensor docstring also has the unicode symbol! I am sorry I am constantly asking stupid stuff, but I just started on the package so bear with me :P
@david-pl I am amazed!!!
Not only it worked perfectly, but I was also able to implement a one-dimensional potential barrier. I am extremely pleased with QuantumOptics.jl! In fact, I spent most of my time trying to animate the wavepacket motion; using QuantumOptics.jl was clearer and easier than using PyPlot.jl. (If you want a gif for the website let me know).
There is still one thing I could not conceptually understand. In the case of one-dimensional potential, I did the following:
And it worked fine. If I had a potential that was depended on both x and y but was separatable I could do the same V(x, y) = V1(x) + V2(y). What I am not sure about at the moment is how to add a potential that depends on both x and y at the same time without being separatable, e.g. V(x,y) = sin(x*y) for an extreme example.
V = potentialoperator(b_comp, V_f) does not work because potentialoperator doesn't know how to accept a composite basis.
Furthermore I don't see how to use V_comp = LazyTensor(b_comp, [1, 2], [V1, V2]) since I Cannot separate the potential to V1, V2.
I am glad you like our framework!
In order to create a potentialoperator in two dimensions that is dependent on both coordinates such as in your example sin(x*y) it is, unfortunately, not possible to use the implemented function potentialoperator. However, all this function does is to create a diagonaloperator. So, considering the fact that the operators x and y are diagonal in a position basis (and hence also their tensor product), applying a function to a tensor product x ⊗ y results in a diagonal operator where the function is applied to each element of a diagonal.
In terms of your example, this can be realized by
You can check that this potential barrier has the correct form by plotting (using PyPlot)
I hope this resolves your problem! I had no time to check if this also results in the correct dynamics, though, so please make sure to double-check the code above.
In the meantime, I think this issue has gone far off-topic so I will close it. However, I created a Gitter room, so if you have further questions please ask them here. I will look into adding the badge to the GitHub page.
