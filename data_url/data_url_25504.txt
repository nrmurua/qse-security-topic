All reads and writes to the datastore currently occur on the main event loop. Since these operations could involve a significant amount of data, they could take a long time to complete. They would stall the entire Covalent server (all API endpoints and workflow processing) while they are in progress.
All of these I/O operations should occur asynchronously to keep the server responsive. This means that any potentially long-running operation (such as reading from a slow filesystem or network connection) should either use async-aware frameworks or be manually run in a separate thread if such native asyncio-aware libraries are not available.
Fortunately for us, async-aware libraries exist for both database and filesystem I/O.
All DB and filesystem operations should use these async-aware methods.
The following files require changes:
@cjao is this resolved?
@wjcunningham7 No one has formally picked it up yet. It is mostly resolved using threadpools in this long-running OS branch.
