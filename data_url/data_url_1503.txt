Currently, all optimizers in cirq are present in a single directory --  cirq-core/cirq/optimizers/*. It contains not only transformers (which transform/optimize circuits) but also utility methods like analytical decompositions of matrices into target operations.
Also, after #4708 and #4692; almost all existing optimizers would need to be re-implemented to
The proposal is to
Note: Heuristic compilation is an active area of research and is an important primitive for compensating for actual gate angles calibrated via techniques like Floquet / XEB calibration. We can expect more primitives to get added here in future.
cc @MichaelBroughton @dstrain115 @dabacon  Thoughts?
Part of roadmap #3238
I like the looks of this plan.
Create a new cirq/transformers/
Move decomposition utilities from cirq/optimizers to sub directories under cirq/transformers/
Deprecate the existing transformers in cirq/optimizers in favor of new implementations using the moment preserving primitives and following the new non-mutating API, which would be added at top-level in cirq/transformers/.
Where possible, I would be in favor of doing this one module at a time and not all at once so multiple people can work on this at once and also take the opportunity for the rewrite/cleanup of their module one module at a time.
This is fine with me, but we should announce this broadly.  We already mentioned at a cirq cync, but it might be worth an email to cirq-announce.  We could maybe combine this with a forward-looking "What's changing in cirq 1.0" email to all of cirq-announce that explains all the changes we are planning to do.
Picking up expand_composite.py.  Please let me know if someone already works on it.
Random question: with #4858 do we need convert_to_cz_and_single_gates.py anymore ? I'd personally be in favor of cutting unless there is some big difference between that and the new plans for decompose
Hi all, I would like to help with this issue, Can anyone please tell me further details?
From the check list, it seems like the only thing left to close this is #4362, but @Ashalynd is already working on it.
The task which is still open is about adding a new transformer and not migrating any existing transformer, so I'm going to remove the task from the list and the issue will be tracked independently.
This particular issue is about migration of all existing optimizers, which has been completed and I'll therefore go ahead and close the issue.
