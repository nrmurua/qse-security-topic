They are currently too slow compared to other pipelines.
An easy win might be to filter down the dev requirements being installed.
If we get desperate we could also consider omitting the contrib tests.
There's also always the option of paying travis-ci more money, so we can run more builds in parallel.
@verult How long does it take to run Pytest on Windows in Prow?
Appveyor may be worth looking into. Another possibility is packaging wheels/install utilities to speed up making an environment in windows or just straight up spoofing an environment. If we choose this second option we would need to make sure that changes to our various requirements files didn't cause issues.
#1732 disables the virus checker which gets the time for the windows test down to comparable to the coverage test.  Going to close for now.
Note that our current travis-ci integration runs 5 in parallel, but since we have two really fast tests parallelism doesn't really help.  The slowest two tests dominate the time right now (and other quantumlib repos don't submit at a high rate yet).
Also just for clarity I also got caching working for pip on windows.  It ended up not really having much impact because while the pip steps are faster, the cache download time also goes up by enough to make this at best a few second improvement.  Our dependencies are O(180) Mb if this grows somehow, then we should revisit.
We do have the option of splitting tests across multiple builds, except for the incremental coverage build.
Splitting the tests across multiple operating systems would defeat the purpose of testing on multiple operating systems wouldn't it?
I didn't mean split it up like that, I meant split it up like "pytest circuits", "pytest ops", etc for each operating system.
We could use the multi-threaded pytest plugin, if it didn't get so upset about some of the tests being generated with random parameters.
