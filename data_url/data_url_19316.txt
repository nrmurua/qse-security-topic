For benchmarking crosstalk among qubits the gates used for every qubit have to be extracted.
A feature making methods like .unitary() or the execution itself qubit specific would be great.
Maybe something like axis in numpy?
I think the cleanest is to create a new circuit with the required gates, because then you can use it in any way you want (calculate unitaries, simulate, etc.). If that works, we could add a circuit method that creates this for you, something like circut.keep_qubits(0, 2, 5): returns a new 3-qubit circuit containing only the gates that act on qubits 0, 2 and 5.
I assume that gates that act on at least one qubit that is not included are completely dropped. For example in the above case a gate that acts on 0, 1 is dropped since 1 is not included.
@wilkensJ I think the proper way to do this is the following
Does this work for you? You can also keep more than one qubits with the same approach, by modifying the if condition accordingly. As I wrote above we could also add it as a circuit method, just let me know if this is what you need.
Thanks @stavros11,
this is a bit clumsy for what I want.
In my case I have a circuit with n qubits with only single qubit gates and I want to extract the unitary which acts on each qubit.
All circuits look like this with random unitaries:
I want each concatenation of unitaries for each qubit in a list like $[U_{\text{q}0},U_{\text{q}1},\ldots,U_{\text{q}n} ]$ where the concatenation mathematically is
$$U_{\text{q}k} = \prod_{j=1}^m U_{kj},$$
or being calculated on the fly but this has to be done many times for the same circuit so storing them in a list ist better.
Maybe something like:
Or something similar for the queue and then with the gates from the queue another circuit is build and the unitary extracted.
What do you think @stavros11?
Maybe something like:
This can be implemented but in the end it would fall back to the code I wrote above because I do not see any other way to make it work for a general circuit that may contain two (or more)-qubit gates. Also the gates it would return may act on more qubits than what you asked for. For example if there is a two-qubit gate between qubit 3 and another qubit you did not specify, will this gate be included or no?
In this case, where you don't have two-qubit gates, you can also do circuit.fuse(max_qubits=1) and you will get a circuit with a single FusedGate in each qubit. You can also access the list of gates contained in a FusedGate using fused_gate.gates or get it as a single unitary using fused_gate.matrix.
In this case, where you don't have two-qubit gates, you can also do circuit.fuse(max_qubits=1) and you will get a circuit with a single FusedGate in each qubit. You can also access the list of gates contained in a FusedGate using fused_gate.gates or get it as a single unitary using fused_gate.matrix.
This also works for me and looks much more elegant, thank you! But it is specific for a circuit where there are only single qubit gates.
Now I don't know if the requested feature should still be implemented, and if yes how the two qubit gates should be handled.
@igres26 what do you think? You also had some ideas how the feature could come in handy?
