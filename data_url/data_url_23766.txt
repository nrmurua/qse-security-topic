Some of these may be mentioned in issues related to this milestone.
Make sure all these boxes are checked. If they are, we're ready for release! üçª
I'd rather have this as a milestone that an issue :P
The setup,teardown methods should also be part of loop?
@giulioungaretti I added this cause of the markdown formatting :P it looked weird in the milestone description
@spauka I'll add it
cool, I will probably split all the points in issues, if they are not already there and then close this. Unless somebody has a strong love for duplicate things :D
From @akhmerov & the theorists:
@akhmerov  maybe worth discussing in other issue but
is a preference to have that interface or really just an example?
Would be nice to have a sanctified way of making an instrument that just wraps asynchronous parallel function calls, but it doesn't make a big difference whether it's a driver or a tutorial example.
async (as in concurrent ) is more important than parallel ?
Most of what we do is covered the by concurrent.futures.Executor interface. I don't think exposing parallelism (scheduling, job distribution, and whatnot) is necessary‚Äîwe can just plug in whatever we like.
Pinging @jbweston in case he wants to chip in.
As of now and as far as I know, ¬†qcodes as no notion of concurrency for now.
A call to the instrument (to get data) blocks the process it lives in (until it returns data ofc).
I think Alex also mentioned ¬†reasons ¬†why ¬†this design was chosen.
I really like ¬†that interface as well because it gives us cheap concurrency and real out of gil parallelism ¬†in one shot.
Anyway, let‚Äôs continue this in another issue.¬†
--¬†
Giulio Ungaretti¬†
On 19 July 2016 at 20:36:56, Anton Akhmerov (notifications@github.com) wrote:
is a preference to have that interface or really just an example?
Would be nice to have a sanctified way of making an instrument that just wraps asynchronous parallel function calls, but it doesn't make a big difference whether it's a driver or a tutorial example.
async (as in concurrent ) is more important than parallel ?
Most of what we do is covered the by concurrent.futures.Executor interface. I don't think exposing parallelism (scheduling, job distribution, and whatnot) is necessary‚Äîwe can just plug in whatever we like.
Pinging @jbweston in case he wants to chip in.
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.
@qdev-dk/qcodes  all the things with a x at the end have their own issue and neatly categorised, so we avoid making the same mistake of having a giant ever growing confusing issue üå≤ .
The data part in the list is obscure to me: see comment inside **.
@giulioungaretti Good! I do like having it all in one place but issues makes it more organized indeed.
With "Explicit use cases" is meant the same as "Modular use outside of a loop". @AdriaanRol is that right?
having things in one place makes it too easy too talk, and too hard to action IMHO.
Let's wait for arians answer.
@nataliejpg @alexcjohnson @spauka @cdickel @AdriaanRol   regarding the multi-value parameters (or hard parameters) you have been the most active: do you think we should open an issue to recap the state of them ?
regarding the multi-value parameters
The usage of multi-value parameters is covered by #263 I think, other use cases already work.
The definition of them is still awkward, but I don't think that's a V0.1 issue. 0.2 maybe :)
I'd agree. Definitely need docs for them though. I'm now at the junction of multivalued parameters with different channels but I think that's more a meeting two existing issues rather than a new one.
@nataliejpg @alexcjohnson, I am not able to write the docs for this FYI.
I can write an example notebook and include it in the pull request if that helps and there are also lots of comments. Not really sure what further I can do.
@nataliejpg
I can write an example notebook
I'd prefer if you could integrate it in the existing tutorial notebook that I made. Otherwise we might end up with too much scattered information.
@giulioungaretti
do you think we should open an issue to recap the state of them ?
I think we should. I think it is covered in the existing issues, however the names are misleading  and overlapping. (don't know what happened in this respect last week)
@guenp @giulioungaretti
With "Explicit use cases" is meant the same as "Modular use outside of a loop". @AdriaanRol is that right?
What I meant was that we need to work out explicitly how we want our data to look for different use cases (as we did on the whiteboard) so that it is clear what needs to be implemented. I think we covered the basic use cases (1D, 2D and multi-valued (both array and tuple like)) but did not go into nested measurements (which is more of a V0.2)).
The modular use of the dataset (including not blocking access to the dataserver) is a V0.1 for sure IMO. This is also a requirement for easy test-cases involving the dataset and formatters.
@AdriaanRol @giulioungaretti:
tbh thinking about it it's really the driver writing part which I think needs documenting which won't really be helped by an example notebook.
@nataliejpg  yep :D
@nataliejpg I thought an example of a Loop/Measurement over a multi-valued parameter would be very useful. Driver writing in a notebook wont work though. Related to some pickling issue when instantiating an instrument (sorry don't know the issue #)
@AdriaanRol  measuring it in a loop is literally identical to how you would measure any other parameter and since we don't have the functionality to be able to take a Measurement() of any kind of parameter yet there's nothing to write there yet either (and even when we do I doubt the syntax will be different for multi-valued or single valued). The instructive part with setpoints etc all happens in the driver.
We've changed directions so many times since this plan was aired, so I am closing this issue.
