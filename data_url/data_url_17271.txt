but:
Also, the versioning looks for the packages via pip, but this does not mean that terra can find them.  I have run into this before where I update terra (e.g. 0.8 -> 0.9) only to find that I must reinstall the ibmq-provider, aer, etc. even though the identical packages are in the site packages.
I think the ideal solution here is for __qiskit_version__ to grab terra version from  qiskit.__version__ and then have versioning information included in all the other elements.  For example, ignis should have a qiskit.ignis.__version__ that can be used to get its info.  This can then be checked with a Try, and if an element cannot be loaded we go to None.  Thus only those elements that can actually be found in qiskit are displayed in the versioning info.
I think the ideal solution here is for __qiskit_version__ to grab terra version from  qiskit.__version__ and then have versioning information included in all the other elements. For example, ignis should have a qiskit.ignis.__version__ that can be used to get its info. This can then be checked with a Try, and if an element cannot be loaded we go to None. Thus only those elements that can actually be found in qiskit are displayed in the versioning info.
I thought about doing it that way back when I added __qiskit_version__, but IIRC there were 3 reasons I didn't go that route. First was to actually figure out if the meta-package was installed and at which version. I had to use pip for that because there isn't actually any code installed. Also, when I checked ignis it didn't have a __version__ string set (which we should fix, I meant to but forgot) and the other was because of -e and dev versions like what you were proposing in #1796. I think we can probably pair the two together and solve both this and the dev versions. But we'll still need to rely on pip to figure out if the meta package is in use.
Also I'm having a hard time reproducing the version mismatch you're hitting. I've reinstalled multiple versions of all the packages and dev versions with -e and I can't get it to report the wrong version locally. How exactly did you manage to do that?
I think we are on the same page.  I agree that meta cannot be tagged like the others.  I think the dev versioning is easily handled.  Something like:
does not work on win, but you still get a 'dev' coming out.
And as always, I role with setup.py install.  I am still bitter aboutpip messing up my conda installations.
