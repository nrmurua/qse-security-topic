When one uses the floquet_modes function, the Floquet modes can sometimes come out non-orthogonal.
More info
IÂ think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that floquet_modes uses eig from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the numpy docs. 
I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the propagator function within floquet modes, and it does affect the result a lot. The floquet_modes_mod function that appears in the code below is exactly floquet_modes, only I modified it to also accept Options that are then passed to propagator (by the way, is there a smarter way to do this without defining this new function?).
I expected the Floquet modes to be orthogonal up to numerical precision
No response
@fpetiziol It is quite possible that the need to orthogonalize eigenvectors that share an eigenvalue was missed (e.g. it happened #1851 for QuTiP 5).
Would you mind checking against QuTiP 4.7? I wouldn't be surprised if it wasn't fixed yet, but it would be good to confirm.
The options argument you added is already present in QuTiP 4.7 -- woot.
Thank you very much for the quick feedback and sorry for the delay!
I checked also QuTiP 4.7 and yes, it still returns the same results so apparently this wasn't fixed yet. (I double-checked that I get the same result using the built-in floquet_modes with options rather than my floquet_modes_mod)
@fpetiziol Thanks for checking. We should fix this for 4.7. It's probably not a very difficult fix (or at least we have logic for making eigenvectors orthogonal elsewhere in QuTiP that we can call or re-use).
Thank you very much once again! Just in case it helps, I found out that a possible solution could be to use schur decomposition (e.g., from scipy) instead of eig to diagonalise the unitary propagator.
