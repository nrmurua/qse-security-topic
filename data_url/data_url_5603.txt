Qiskit aer supports MPI. According to the tutorial, I can only run repeated results on one node. What if using MPI and having a large number of quantum programs run on multiple nodes? Can you give me a simple example? If you could help me, I would be extremely grateful.
For example, how can a 50qubit GHZ program run on 5 nodes? Can you give me guidance?
Or give me a website address for a similar issue
Please refer to https://qiskit.org/ecosystem/aer/howtos/running_gpu.html for parallel execution. The document is for GPU but it is similar to run on CPU with multi-nodes.
By the way, if you run 50 qubits using statevector simulator you will need 512 TB of memory per node for 5 nodes (same as 4 nodes).
Please refer to https://qiskit.org/ecosystem/aer/howtos/running_gpu.html for parallel execution. The document is for GPU but it is similar to run on CPU with multi-nodes.
By the way, if you run 50 qubits using statevector simulator you will need 512 TB of memory per node for 5 nodes (same as 4 nodes).
Thank you for your reply,this is my code:
`import numpy as np
from mpi4py import MPI
from qiskit import QuantumCircuit
from qiskit import Aer, transpile
#from qiskit.tools.visualization import plot_histogram, plot_state_city
#import qiskit.quantum_info as qi
comm = MPI.COMM_WORLD
#size = comm.Get_size()
rank = comm.Get_rank()
node_name = MPI.Get_processor_name()
circ = QuantumCircuit(2)
circ.h(0)
circ.cx(0, 1)
circ.measure_all()
simulator = Aer.get_backend('aer_simulator')
simulator.set_options(device='CPU')
circ = transpile(circ, simulator)
result = simulator.run(circ).result()`
I will run this code on 2 nodes, one of which has 3 processes, which means there are 6 processes. But the results showed that it was{“11”：509，“”00：515} {“11”：493，“”00：531} {“11”：500，“”00：524} {“11”：491，“”00：515} {“11”：486，“”00：538}{“11”：514，“”00：510}
The result gives me the feeling that this code repeatedly runs independently on all processes on each node. That is to say, the code ran independently 6 times. But the effect I want to achieve is to split multiple qubits into fast, blocks run on one node, and finally the results on each node are combined to form the final answer. I'm not sure if my expression is accurate. If you understand, could you please explain it to me? Looking forward to your reply.
Please refer to https://qiskit.org/ecosystem/aer/howtos/running_gpu.html for parallel execution. The document is for GPU but it is similar to run on CPU with multi-nodes.
By the way, if you run 50 qubits using statevector simulator you will need 512 TB of memory per node for 5 nodes (same as 4 nodes).
Can you leave your email or other contact information? I want to communicate with you carefully. This question has been confusing me for too long.
That kind-hearted person saw my problem and if there is a solution, please help me. This problem has been confusing me for a long time。
Can someone reply to me? I really need your help
You can not parallelize 2 qubits circuits using MPI, but al least 3 qubits is required to parallelize. It is better to parallelize using 2^np processes and you can parallelize nq qubits circuit where nq > np + 2
To parallelize the simulation, please include option blocking_qubits where nb qubits of statevector is allocated on each process and nb < nq - np
For example, simulating 25 qubits circuit using 4 processes (nq = 25, np = 2) nb < 23 is set to the option blocking_qubits = 22
Then the Python script is executed by using mpirun command (you do not need mpi4py if you do not process data parallelly in Python script)
The result of the simulation is distributed to each process so each process obtains the same result.
Also MPI support is only available building from source code
Please refer to the document to build from source code with MPI support https://github.com/Qiskit/qiskit-aer/blob/main/CONTRIBUTING.md#building-with-mpi-support
Yes Aer support MPI parallel simulation by building from source code. If you have installed by pip install qiskit-aer your Aer does not support MPI
You do not have to write MPI codes if you do not execute pre- or post- processes in Python codes
Here is an example of QuantumVolume circuit to enable parallel execution
Saving this to qv.py and run the script by
mpirun -np 4 python qv.py
We are also looking for the good example of useful large qubits circuits :)
If you want to learn how quantum circuit works, please try running some circuits on the Qiskit tutorials/learning.
You can run parallelly in the same way I put above
you can pass your circuit as same as the example above
Please refer to the document to build from source code with MPI support https://github.com/Qiskit/qiskit-aer/blob/main/CONTRIBUTING.md#building-with-mpi-support
