We've mentioned this task a number of times but never explicitly recorded it. I assume we do want to do this?
IIUC the safe way to do this is to rename the existing classes and files to what we want, and use those everywhere. Then create subclasses of each with the old name, and immediately deprecate them? This would break isinstance(ActOnXYZArgs), which seems fairly low-risk. I believe everything else should continue to work.
I fully support this, so long as it doesn't introduce collisions with some of the new object names (*QuantumState should be fine...were there others that may be confusing?)
If we reference these in docs, those will also need to be updated.
Yeah, there are others that would be fairly confusing actually. We already have DensityMatrixSimulatorState and StateVectorSimulatorState that are completely unrelated. They are used internally but AFAICT they're only used as intermediate steps to calculate the final state vector / density matrix. I don't see any public functions that return these to the user. So we may be able to get away with just killing those and calculating the state vector directly from the corresponding ActOnArgs variant.
There's also a CliffordState that is returned in CliffordTrialResult.final_state, so we can't just get rid of it without some kind of deprecation. It would be nice to deprecate the final_state function and replace it with the one returning the ActOnChFormArgs, or just merge its functionality directly into CliffordTrialResult.
Once we do that we can remove the TSimulatorState from the generics list in SimulatesIntermediateState, which would be nice. Unless that would affect qsim.
Removing the purely-internal types sounds fine to me as long as we're not losing performance or usability as a result.
RE qsim: QSimSimulator does not and will not implement SimulatesIntermediateState and has no concept of StepResults. As long as that's compatible with the changes happening here, I'm happy with it.
Sgtm, I think I have a way forward on that. Can I get the linked PR merged first so I can begin without conflict?
As of #5293, this is solved. There's still deprecation to be done, but that will wrap up in time.
