In #2002, we added a function to solve Ax=b problems using qutip data object (Qobj.data).
counstat was done prior to that PR and has it's own wrapper around scipy's functions.
It should be changed to use qutip.core.data.solve.
Ideally, we should add the capacity to pass options to this solver:
Hello. I am interested in this issue. Can I try this?
Hello. I am interested in this issue. Can I try this?
Yes, please go ahead and ask questions if needed.
Hi. I replaced scipy wrapper with _data.solve. I ran pytest and error occurred. Does anybody know how to solve this? Thank you.
File "qutip/core/data/dispatch.pyx", line 582, in qutip.core.data.dispatch.Dispatcher.call
raise TypeError("unknown types to dispatch on: " + str(dispatch)) from None
TypeError: unknown types to dispatch on: [<class 'scipy.sparse._csr.csr_matrix'>, <class 'numpy.ndarray'>]
Traceback (most recent call last):
File "/root/opt/qutip/qutip/solver/countstat.py", line 83, in _solve
return _data.solve(A, V, "splu")
@tamakoshi2001 I suspect the issue is that the argument V is a numpy array. It should be a data instance. You can wrap the numpy array with _data.Dense(V) to convert it.
@hodgestar Thank you for your reply. I added _data.Dense(V), but failed. The first code failed and the second code passed the test.
Hi. By clarifying the data types _data.solve(_data.CSR(A),_data.Dense(V)), Typeerror stops, but Attribute error occurred instead.
Hi @tamakoshi2001,
The whole function _solve(A, V) should be replaced by a call to _data.solve.
It is used only once at line 116, and the input are CSR and Dense object converted to scipy and numpy classes for this one call. You can just remove the conversions and replace the function.
@Ericgig Hi. I thought the same thing and changed like this X_rho = [_data.dense.fast_from_numpy(_data.solve(A, op)). However, pytest failed and outputs TypeError. I tried to fix it by specifying the data types; _data.CSR(A), _data.Dense(op) and AttributeError happens in this case.
The input are originally already _data.Data object (CSR or Dense), for the _solve call, we transform them to numpy/ scipy object and then transform them back to _data.Data.  To make this work, you need to remove unneeded transformation in both direction.
@Ericgig Thanks for your advice!! I replaced _solve with _data.solve. PR is #2120
