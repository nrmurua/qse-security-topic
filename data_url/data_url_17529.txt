Running this script:
will always raise the following error:
qiskit.mapper.exceptions.MapperError: 'swap_mapper failed: layer 25, sublayer 3'
It's worth pointing out that for any other value of n_qubits (<=14 which is the number of qubits for the backend) it seems to work fine. It on raises an error with 8 qubits.
Run the above script.
It transpiles the circuit successfully
Fix it
You may need to add some ancilla qubits to the circuit to have the mapper succeed.
I just tested it and yeah adding an ancilla qubit to the circuit does make the mapper work. But I still think there is potentially an issue here because the mapper works fine without an ancilla for the same circuit generation function with 1-7 and 9-14 qubits with that coupling map. It only fails when I use an 8 qubit register.
The above example actually works for me using master version.

Hmm, interesting. It fails very consistently on both my laptop and my desktop with the MapperError. Although they both run very similar software versions of everything. Linux x86_64 with Python 3.7.2
I have compiled this circuit 10,000 times with randomly picked seeds and it always works for me.
Grabbing the latest master, the example does not even run anymore:
TranspilerError: 'initial layout not supplied, and cannot be inferred from backend.'
That error is being fixed by #1883
Update: Err, actually never mind that's a different thing
Actually that error only pops up on Win 10.  On OSX, the latest master now gives the same result you mentioned earlier:
MapperError: 'swap_mapper failed: layer 25, sublayer 3'
I do not know why the same master has two different errors for the same code on different platforms, nor do I understand why it worked previously.
The bug in the mapper was introduced with the merging of #1767.  So @1ucian0 should investigate it.
I think the problem is the lack of ancillas (the MapperError does not make any sense to me, tho). We have a pass to enlarge the layout with ancillas that should be called before swap_mapper in qiskit/transpiler/transpiler.py:222. So the fix can be added after PR #1862 is merged.
Fixed by #2023
Is there a test that makes sure the pre bug circuit is the same as the new circuit returned?
