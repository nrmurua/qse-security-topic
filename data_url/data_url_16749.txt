As I can see documented here (and other places), there is a plan to fully replace networkx with retworkx. The retworkx package imposes extra platform limitations, as it requires a rust compiler. I am particularly interested in the IBM i platform (I am on the IBM i team), which doesn't have rust support. This enhancement request would be for the networkx support to remain, and for networkx to automatically be used when retworkx isn't present (and even better, we can condition retworkx in the requirements.txt)
The justification for this enhancement request is that qiskit is (and will continue) to benefit from IBM i driving awareness of this technology. Since the current qiskit master no longer builds, we'll need to abandon this effort if there is no mitigation.
Some Examples (as you can see, the IBM i team has been working with IBM Q.):
http://www.ibmsystemsmagpowersystemsdigital.com/nxtbooks/ibmsystemsmag/ibmsystems_power_201909/index.php?startid=34#/38
https://powerup2020.sched.com/event/YTpf/iq-ibm-i-ibm-q
https://powerup2020.sched.com/event/aGM2/keynote-introduction-to-quantum-computing
https://powerup2020.sched.com/event/aGLz/the-ibm-q-experience-and-qiskit-learn-what-tools-are-available-for-you-to-learn-and-create-your-own-quantum-algorithms
https://powerup2020.sched.com/event/aGMV/open-lab-quantum-computing
This enhancement request would be for the networkx support to remain, and for networkx to automatically be used when retworkx isn't present (and even better, we can condition retworkx in the requirements.txt)
I think a fallback is a very reasonable strategy.
I think a fallback is a very reasonable strategy.
I honestly disagree with this. Fallbacks as we've seen constantly every time we used them in the past are a constant source of problems. (the simplest example of this is the visualization backends, but there are other examples) When a user files a bug which path got triggered, why did it get triggered, etc. We used to have a lot of those in terra and luckily we've moved to a much more explicit and deterministic configuration model. Adding it back to something as core as the underlying graph library used in DAGcircuit is frankly just not a good idea.
If we were going to do this it would have to be an explicit opt-in to use networkx (like what exists today). But, that being said I am opposed to this as a long term commitment because it means we're committing to long term dual maintenance of the DAGCircuit class. Moving forward we're also going to start looking at replacing the remaining networkx usage in terra (for example things like CouplingMap) it would mean we're committing to duplicate implementations of all of those too. We may push back the removal of the networkx dagcircuit so the transition is longer than 1 release, but eventually the networkx usage will go away.
Honestly, adding llvm support for either os/400 or aix (to be usable via PASE) is going to be the path forward (we might push back the removal of the networkx class, but long term it's not staying). The reason there is no rust compiler is because llvm doesn't support either platform. Once there is llvm support adding rust support to the platform is pretty straightforward (I'd even help on the rust side if needed once llvm support is there). FWIW, retworkx already actively supports ppc64le, s390x, and armv8 on linux and actively tests all 3 on each commit and publishes linux ppc64le and arm binaries.
If we do anything to support PASE I'm available to test. @ThePrez and I work together on this.
Would be a reasonable solution to continue the IBM i  demos with previous version of Qiskit?
At this point I think it's moot. For those of us so engaged (@ThePrez and myself, exclusively, AFAIK), the task of keeping Qiskit Terra alone running on IBM i has grown beyond the cost/benefits ratio. Unless support for Qiskit on IBM i becomes a priority within IBM (which I am neither recommending nor discouraging, it's a business and resources decision) it's not going to happen. For my COMMON presentation in September, 2020 I've authored a message queue driven solution to relay qasm jobs to a Linux server with results being returned in the same manner.
But if I may allow myself to express a thought: It might be a good idea to coordinate company-wide IBM's efforts to make sure that strategic open source packages run on all supported Power platforms, in order to close the gaps and avoid duplicated effort.
Closing this as wont fix. Feel free to open it back if there is still pending discussion...
