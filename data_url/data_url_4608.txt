Let us imagin that we have two circuits with 4 qubits each. We want these two circuits to work as building blocks for a larger 8-qubit circuit in such a way that the final circuit is similar to
_________              _________
|0> -------------------|                |------------|                  |
|0> -------------------|    U_1     |------------|                  |
|0> -------------------|                |------------|                  |
|0> -------------------|                |------------|                  |
||              |      U_3     |
_________              |                  |
|0> -------------------|                |------------|                  |
|0> -------------------|                |------------|                  |
|0> -------------------|    U_2     |------------|                  |
|0> -------------------|                |------------|                  |
||------------|_________|
Is there anyway to write it with blocks using the circuit.add(method) or something like that?
Conceptual example
C = Circuit(8)
C.add(U_1, qubits=[0,1,2,3])
C.add(U_2, qubits=[4,5,6,7])
C.add(U_3, qubits=[0,1,2,3,4,5,6,7])
If there is not, do you think it could be implementable at some point?
If I understand your request, you would like to have a union/append operator. Which API do you think is the best for your test case? The one you have quoted requires the knowledge of the final state, however we could create an C.append() which does this part automatically.
First of all, I would like to add a scheme for the circuit more understandable than what is depicted in the previous message

And, yes, I would like an append operator able to work with different qubit registers. Is it mandatory to know the final state? Isn't it possible to locate some gates in different qubits? I do not know the exact inner work of the program, but (as a na√Øve approach), I think that is the easy way.
