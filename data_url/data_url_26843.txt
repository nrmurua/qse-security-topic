The arch file generated by the toolchain does not set the variable CXXOMPFLAGS (C++ OpenMP flags). As a result, DBCSR's C++ code is silently (!) compiled without OpenMP support (see line https://github.com/cp2k/dbcsr/blob/develop/Makefile#L500), leading to race conditions that are very difficult to debug.
Yes, race conditions are a pain. Good job tracking this one down!
If I understand correctly the problem arises because Fortran gets compiled with  -fopenmp while C++ is not.
In the past all the OpenMP stuff happened on the Fortran side. So, going back to this is probably the safest solution. You can of course submit a PR for the cp2k toolchain, but this doesn't help for users who write their own arch files.
The deeper issue here seems to be that DBCSR and CP2K are still tightly coupled through the build system. So, maybe we should start to make plans for turning DBCSR into a fully standalone library?
This is interesting because even the regtest on Daint doesn't set OpenMP flag for the C++...
At this point I wonder how important it is the race condition...
As a safe guard you could compare omp_get_num_threads() on the C++ and the Fortran side, e.g. during dbcsr_init().
The race conditions show up very easily on summit for instance. Many of the regtests fail if we activate openmp during the compilation (it is even worst is we play with the compilation parameters). We got case where more than 300 tests fail with a segfault. Others fail with some bad parameters given to fortran functions. Note that, we observe this on Summit which is a power architecture not intel.
We thought about a compiler problem, but we can not compile cp2k with xlc/xlf (xlc++ does not like c++), or pgi. clang is also installed on the machine but has no fortran support (flang exists though) so we are stuck with gcc on this machine.
Yes, race conditions are a pain. Good job tracking this one down!
Thanks! :)
If I understand correctly the problem arises because Fortran gets compiled with -fopenmp while C++ is not.
Exactly
In the past all the OpenMP stuff happened on the Fortran side. So, going back to this is probably the safest solution. You can of course submit a PR for the cp2k toolchain, but this doesn't help for users who write their own arch files.
Going back to a solution where all the OpenMP stuff happens on the Fortran side is not an option anymore. Since the introduction of JITing, there is a data structure which holds handles to JITed kernels, and access to it needs to be thread-safe (see this function for example).
I will submit a PR for the cp2k toolchain, since this definitely needs fixing.
For users who write their own arch files, I guess the requirement of setting CXXOMPFLAGS will have to be documented.
The deeper issue here seems to be that DBCSR and CP2K are still tightly coupled through the build system. So, maybe we should start to make plans for turning DBCSR into a fully standalone library?
I wholeheartedly agree.
This is interesting because even the regtest on Daint doesn't set OpenMP flag for the C++...
At this point I wonder how important it is the race condition...
As @mtaillefumier said, the race condition appears very frequently on Summit.
As a safe guard you could compare omp_get_num_threads() on the C++ and the Fortran side, e.g. during dbcsr_init().
Yes, we should definitely have some consistency check of that sort. This would also help users who write their own arch files and may have forgotten a -fopenmp somewhere. I will open a PR in DBCSR with a suggestion for this check.
OK, now there is an issue on DBCSR for what suggested by Ole. I leave to @shoshijak to handle the issue.
@shoshijak Could you please update the arch file under the arch directory?
Great, will do.
Note that, we observe this on Summit which is a power architecture not intel.
A dashboard test for Summit would be a nice addition. I'm afraid until then we're kinda flying blind on POWER9.
Not possible with their current security. ssh keys are deactivated. And also refrain from redefining these constants -D__GNUC_MINOR__=6. This is really a bad practice. I know cuda is picky about the C compiler but doing that might lead to more harm than good.
DBCSR could sanitize this even if the issue is decided to be solved differently. One could set CXXOMPFLAGS based on COMPFLAGS or FCOMPFLAGS (or whatever the names are) but of course only if CXXOMPFLAGS was found empty. Perhaps this must be sanitized separately for Make and CMake.
@alazzaro unfortunately, I cannot fix CRAY_XC50-gfortran_gpu.psmp, since it is not in this repository.
Oh sorry, that one is not in the repo, I have already fixed it (see https://www.cp2k.org/static/regtest/trunk/cscs-daint-xc50_gpu/CRAY_XC50-gfortran_gpu.psmp.out )
Just fix the arch files in the repo. Thanks!
