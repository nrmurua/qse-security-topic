I'd find it useful if
could import all objects. Now only the zne module is imported at that time (why?).
I'm lazy, and already mitiq is quite nested, due to its intrinsic interoperability, so I'd personally find it useful to implement such a global command.
The current main __init__.py file is quite empty. I think this is a good modern practice to keep, (although I am not 100% sure). I discussed this also here.
In usage, and examples,
and
is preferred to
But besides good practices, do we really want to forbid a user to quickly import all functions (or at least allow it for all those that do not live in a more nested structure?)
If the __init__.py lists all of imports of sub-modules, it can become slow. This is an issue in qutip, for example.
(A related "issue" popped recently during doctests with Sphinx for the documentations, as I was getting error for functions that Sphinx was not finding. I was using doctest_global_setup, importing mitiq, but not mitiq.factories, and thus a docstring example of >>> fact=Factory() was giving an error.)
What if we add something like mitiq.all or mitiq.global so that we can do something like
and we import all the objects of the package? Maybe I'm super ignorant and there is already a way to do it.
I'm not sure of this proposal and happy to be convinced out of it.
I tend to be cautious about any import * usage. It imports hidden things that might overwrite definitions unexpectedly.
That said, making it easy to do from mitiq import execute_with_zne, etc. does seem useful.
Could you propose a list of what should be in the top level right now?
I'm also against any from mitiq import * usage.
This is a great point to raise however and we should discuss it, the current import structure is not ideal and there's a bunch of extra things floating around that shouldn't be there, e.g. import mitiq makes visible
I think the main objects for ZNE are execute_with_zne, factories, and folding. The top-level should therefore include these. Additionally, any module mitiq_<package> should be visible at the top-level. In my opinion, this is all that should be visible (except for minor things like version, etc.), but it's a matter of taste after this.
Note that the addition of PEC will probably change the import structure, but I think we can and should make the change now.
Also since this is about __init__.py, there's a bug determining the available program types. The loop should read:
I'm not sure how to test this with CI. We'd have to make multiple builds where we install only a subset of the available program types and check that the support program types is correct. For example, only install Qiskit and check that
(Does not include "pyquil.Program".)
@rmlarose fixed this bug and so am closing this issue
