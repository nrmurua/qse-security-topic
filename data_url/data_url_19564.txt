I ran the test03_Hartman6 test on the SNOBFIT implementation within the test_snobfit.py file with a number of required points per iteration of 2. I ran into an issue where SNOBFIT sometimes gives back more points than requested.
Modified options in test03_Hartman6 to options = optset(maxmp=2,maxfail=10,verbose=True):
I get the following result (I've marked the request with a higher number of requested points than 2):
The loop in lines 515-528 of _snobfit.py generates a new requested point before checking the break statement (whether number of generated points for request equals number of requested points by user):
Moving the the break statement to the beginning of the loop (see below). This solves the issue, however I'm not sure whether this is correct, as in the original SNOBFIT Matlab code (v2.1) the break statement is also at the end of the loop.
Thanks! Let me dig a bit more b/c the code as it currently is follows the original MATLAB code correctly. It may have a reason/interfere with something else if changed.
So I agree that SNOBFIT is wrong here.
Interestingly, I find that with maxfail=10, I get different results then the original code (when applying the fix to both). The results are the same up to maxfail=9 ...
Still investigating ...
I found a logic error that had crept in by putting minqsub inline.
The remaining differences appear to be accumulation of floating point round-off errors (esp. for each solve), but they do get rather large in this specific example, when so many iterations are called for. I guess some of the parameters have rather flat profiles. Interestingly, though, the Python version slightly outperforms the original, so although I will likely revisit this in the future, I'm not worried at this point. :)
Fixes released with 0.7.0 on PyPI.
Thanks a lot for looking into this and fixing it! It sounds good that the python version performs slightly better. Thanks for the great work üëç
