The current custom backend does not support tf.functions properly, so we may call tf.config.run_function_eager(True) in the custom backend in order to avoid issues, and reintroduce tests.
By the way, we are also setting TF_CPP_MIN_LOG_LEVEL in 2 places: here and here. Does this is strictly necessary?
The current custom backend does not support tf.functions properly, so we may call tf.config.run_function_eager(True) in the custom backend in order to avoid issues, and reintroduce tests.
If I understand correctly, if we use this then it will automatically ignore all tf.function calls and will execute the corresponding functions in eager mode. This should be okay for the custom backend, we just have to make sure that we re-enable the ability to compile if the user switches to defaulteinsum (eg. using tf.config.run_function_eager(False)). Because if for example we only enable eager in the custom backend initialization then doing something like:
in a machine with custom operators will not do the compilation unless we do tf.config.run_function_eager(False) during the set backend.
By the way, we are also setting TF_CPP_MIN_LOG_LEVEL in 2 places: here and here. Does this is strictly necessary?
No, it is probably redundant. I think that removing it from the second place is sufficient because the first place will be executed during the K = Backend() line which always runs once a user imports qibo or any of its submodules. From a code design perspective though, it may be better to move all tensorflow imports and the log level in the backends/tensorflow.py file.
Yes, indeed, in particular in view of the experimental backend tests, we should really consider making a tf import optional, in order to consume less memory.
Just a quick feedback after our discussion. I think we can keep the error raise mechanism as it is, but move all tf related to a single place.
