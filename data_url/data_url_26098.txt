The following classes need to be developed implementing the corresponding interfaces:
The first of these classes follows the Facade/Abstract Factory pattern, while the other two are Class Adapters. For an example check the Qiskit variants.
I would like to work on this issue. I started learning Q# just a few days ago through Qchack, organized by Yale and Harvard, but I've been catching up on the language pretty fast, so I'm confident that I'll be able to complete the task.
I'll be exploring the repo thoroughly in the coming days and will hopefully be able to make a PR by the time UnitaryFund's hack begins.
Great to hear @Avhijit-codeboy! Unitary hack will last for about 15 days, I am happy that you will be participating. If you are studying the source code before the hackathon begins, just make sure that you check the dev branch for the latest updates: those will be merged to master by May 12. Good luck!
Sure! I'll check  dev branch out. If you're on discord, then I'll get in touch with you for some more guidance along the way :)
Also if you have any Q# related questions, feel free to ping me on the Unitary Fund Discord! My handle is the same as here :)
I'll surely ping you @crazy4pi314. I've got a lot of questions to ask! Thanks a lot for your support :)
The pip install qsharp command does not install the IQ# kernel.
The following two commands does the job.
Which implies there should be a dependency for Dotnet as well.
Thanks @Avhijit-codeboy! I do not really want to add dotnet as an extra dependency unless I find a way of hooking those two commands during installation... Any suggestions @crazy4pi314?
So I think the easiest option (if you wanted the dependency) would be to install the qsharp package with Conda (the Anaconda package manager). Since Conda manages dependencies outside of Python, you don't have to add any other install instructions. I could also ping @cgranade for thoughts ðŸ’–
Agreed, conda is a great way to handle that. On the Quantum Development Kit team, we publish the iqsharp and qsharp conda packages to the quantum-engineering channel, so you can take a dependency with an environment.yml file that looks something like the following:
Of course, it's also nice to support pure-pip installations, so you can do something like use a try / except block to make the IQ# dependency an optional one:
https://anaconda.org/quantum-engineering is the link to the Quantum Development Kit packages on anaconda.org, btw.
Thanks so much @cgranade and @crazy4pi314!! I will look into this more carefully once we are done implementing all the Q# functionality, but I sounds good ðŸ˜Š
Thanks so much @cgranade and @crazy4pi314!! I will look into this more carefully once we are done implementing all the Q# functionality, but I sounds good ðŸ˜Š
No worries, happy to help! If there's anything else I can answer or help with, please let me know!
Thank you all for helping out with this! @crazy4pi314 @cgranade And of course congratulations to @Avhijit-codeboy for putting together such a wonderful contribution ðŸ˜„ I can't wait to see this in the hands of users! Stay tune for v1.0.0 ðŸ˜‰ðŸ˜‰
I can't wait either!
This is such a wonderful project! Thanks @pedrorrivero for putting up such an amazing work for the world to see and giving me an opportunity to contribute something to it.
And thanks a million to @crazy4pi314 @cgranade for helping me so much with Q#. I love this language!
