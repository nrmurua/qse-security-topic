This issue aims to spur discussion on intermediate representation languages for the compilation toolchain. To allow for a truly modular compiler design (as introduced in issue #266), it is of extreme importance that the compilation infrastructure supports general (and fully encompassing) intermediate representations, that provide an interface between compilation steps.
Any discussion on this issue should be preceded with documentation on the current intermediate representation supported by OpenQL.
Then, the discussion should evolve to determine whether the currently supported representation is sufficient to fully describe the applications developed in the context of WP15, and whether it is capable of addressing the full capabilities of the supported back-ends.
The features described in this issue are also of high relevance for the transpilation capabilities described in issue #272.
This issue aims to spur discussion on intermediate representation languages for the compilation toolchain. To allow for a truly modular compiler design (as introduced in issue #266), it is of extreme importance that the compilation infrastructure supports general (and fully encompassing) intermediate representations, that provide an interface between compilation steps.
Any discussion on this issue should be preceded with documentation on the current intermediate representation supported by OpenQL.
Then, the discussion should evolve to determine whether the currently supported representation is sufficient to fully describe the applications developed in the context of WP15, and whether it is capable of addressing the full capabilities of the supported back-ends.
The features described in this issue are also of high relevance for the transpilation capabilities described in issue #272.
By intermediate representation (IR) we mean internal (in-memory) and external (readable, file, input and output) representations.
After the merge of the mapper branch in the develop branch, the IR was made largely independent of the passes: it has a meaning independent of a pass; also see the new documentation.
Next step is modularization at the pass level and test this IR pass independence in practice.
After that, we'll focus again on external requirements and how they impact the IR.
