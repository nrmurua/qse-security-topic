Currently there is a circular import between pulse.schedule and pulse.ops that was originally solved by a module-level pylint: disable=cyclic-import (and if #2401 goes through, it would be solved by the disable at a smaller-but-probably-not-enough scope, see #2400 for more context).
It would be good to see if we can avoid the cycle along with the disable entirely, or at least narrow its scope further, to prevent it from obscuring other unrelated cycles.
Currently, in 0.19:
I think this is a result of sugar methods for building up schedules - such as https://github.com/Qiskit/qiskit-terra/blob/ed83c9b7ac470a3229f98f658216b783a7aa57e5/qiskit/pulse/instructions/instruction.py#L180. While these are no longer the recommended way to build schedules, there is much code that relies on this. The fix may be to either ignore this cycle or perform dynamic imports in the methods themselves.
I'd vote to close the issue as stale here - the original module-level imports are gone, and the sugar methods Thomas linked do use the dynamic method-level imports.  As long as we support pulse.Instruction.insert and friends, there is a logical circular import which we can't avoid without doing something even worse (like monkey-patching the classes after they've been defined).
If we wanted to avoid the method-level imports, it's legal to do something like from qiskit.pulse import schedule in the module scope, and then refer to Schedule as schedule.Schedule (this works by deferring the name look up until runtime), but imo the current form is better - it's clearer about what is needed, and makes circular imports clearer.  It's the same thing QuantumCircuit does to define its gate methods, and that's an integral part of our interface right now.
+1 to @jakelishman, closing. Feel free to reopen if you disagree.
