I've been trying to refactor the protocol methods, and I've run into a bit of a problem. The issue is that, e.g. in _apply_unitary_, we use return None or equivalently return NotImplemented to mean two different things. It could mean "this object does not have a unitary effect" or alternatively it could mean "this object has a unitary effect, but I don't optimize this particular case; try calling _unitary_.
I think we should start explicitly distinguishing between these two values, and document that we are doing so. If a method returns NotImplemented that means "act like I don't even exist", e.g. move on and try _unitary_. But if a method returns None that is a definitive result. This will bring us more in line with the behavior of e.g. __add__.
This will require a lot of small changes throughout the code base to bring it into line with this idea. There are cases where we return None where we should be returning NotImplemented.
Do you see any obvious drawbacks?  I don't.
The drawback is that it's a breaking change. A class that was returning None from _apply_unitary_ and not None from _unitary_ will become inconsistent, whereas right now it happens to work.
I've bumped up against this a few times, and think it's worth doing before it becomes even more of a breaking change.
Okay, let's do it.
I think this was solved by #1790 some time ago.  Trying to track down if there is additional tasks to be completed.
Confirmed by @Strilanc  that the above PR fixed this issue.  Closing.  Please re-open (or open a new bug) if new corner cases related to this are found.
