Basing on the tutotrial "qiskit-tutorial/community/hello_world/string_comparison" I wanted to prepare something simpler and explained in more details. Could you help me answer my questions and provide better explanation in placess marked by: (???)
in bitstring_encoding.ipynb
Hi Łukasz. Hope this helps!
??? 1
In this encoding a four bit output of abcd means that the value at position abc of the original bit string is d. So, for example, 0001 means that the value at position 000 (i.e. 0, and so the first bit in the original string) is 1.
To decode, you can loop through all the four bit strings, extract the positions (from the first three bits) and the values (from the fourth) and use them to reconstruct the original 8 bit string. For example (note: untested code)
Ideally, all four bit strings should share the same probability. And it should be impossible to get the results abc0 and abc1, because this would be telling us that the bit value at position abc is both 0 and 1: not possible for a classical string.
In real life, imperfections happen. So you could use the probability to resolve ambiguities: if you find both abc0 and abc1 in your results, accept the most probable and reject the other as noise.
??? 2
The initial state of any circuit is that with all qubits in state 0.  So encode_bitstring(BS1,...) takes 0000 to the required superposition  for BS1, and encode_bitstring(BS1,...,inverse=True) would take that superposition  (and only that one) back to 0000. This is why the combination of the two yields 0000.
??? 3
Let's use |BS1⟩ to denote the superposition state created by encode_bitstring(BS1,...), and |BS2⟩ for the same with BS2. For these states, as with any states, we can write
|BS2⟩ = a × |BS1⟩ + b × |other_stuff⟩,
for some coefficients a and b, and where |other_stuff⟩ is orthogonal to |BS1⟩. We could use a as a measure of how similar |BS1⟩ and |BS2⟩ are (and therefore the bit strings BS1 and BS2).
We know that encode_bitstring(BS1,...,inverse=True) rotates |BS1⟩ back to 0000. We also know that, since it is orthogonal to |BS1⟩, encode_bitstring(BS1,...,inverse=True) would rotate |other_stuff⟩ to anything but 0000. So by applying encode_bitstring(BS1,...,inverse=True) to |BS2⟩, we can deduce the value of a (actually, of |a|^2) from the probability of the result 0000.
Also, we'd love to host your simpler and more explained method here when it's done.
@quantumjim Thanks for your elaborated explanation. I'm going to finish my notebook and of course do the pull request to the source repo. Thanks for your time once again.
Hi @quantumjim, I'm still working upon the tutorial could you please take a look on (??? 4).
Hi Łukasz.
Sorry for the late response. I am not sure what you wanna do with ????4. Can you elaborate?
In bitstring_encoding.ipynb
section BS1_inverted measure.
Why the inverted string consist only with 1's: '11111111'? I've expected it that inverted: 10000001 will give 01111110.
Hi @lukasszz. Sorry for the christmas-induced delay. I'm on it, and I'll get back to you soon.
Thanks @quantumjim waiting for your support ;) with (??? 4), and with the last section of the tutorial.
Hi Lukasszz,
I am not sure about the decode_bistring function. I think you should check, test, and verify if the procedure works as expected for all inputs.
Also, you need to clean typos ("colud" instead of "could", etc. ) and some math definitions, such as,
$$
\alpha_1^2 + ... + \alpha_n^2 = 1
$$
is not true for complex numbers.
