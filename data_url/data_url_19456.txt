A key issue when designing and presenting adiabatic computations is the gap energy of the system as the Hamiltonian is evolved. Having a callback that returns the gap energy in each step or, alternatively, both the ground state and the first excited state, will be useful going forward.
I understand that this might require the diagonalization of the hamiltonian at every step of the computation and that will be computationally costly. To deal with that we might want to introduce a sparse matrix diagonalization, as most of the Hamiltonians that are used for adiabatic evolution tend to be sparse. This sparse option is available on some libraries or we could implement it qibo, whatever might work best.
I think the scipy.linalg.eigh provides this feature, e.g. you can set the flags subset_by_index and eigvals_only=True.
If the performance on CPU is acceptable we can try to port this algorithm to GPU.
