The current behavior is unnecessarily verbose and irritating.
How to exit cleanly on KeyboardInterrupt? Python asynchronous exceptions are broken by design (there is a race condition).
Should we catch Ctrl-C in the main loop instead?
Maybe we don't always exit cleanly on KeyboardInterrupt. But even in that case I feel that the harm done by not printing the traceback would be smaller than the annoyance caused by printing it (all the time).
What's the main loop? If you mean adding a signal handler I don't think that's better than suppressing the traceback.
Yes, regular signal handlers have the same unsolvable race condition bug.
On Linux this can be solved with signalfd (and then watch the fd in the asyncio loop), but I don't know how to do it on Windows.
Since at it's core it is about exiting cleanly when requested, we can circumvent issues with signals and windows/unix differences.
This approach would do what I want. Opinions before I expand this to the other tools?
What about exiting from the client/dashboard instead? Then it's just using the existing sockets.
Threads in python are not so well implemented and it is best to avoid them when possible.
That's a different feature. This one applies to other tools than master as well. And as long as you can't start the master from the dashboard I'm not that interested in being able to shut it down. If a tool is started from the command line it should be possible to end it cleanly right there as well.
What's wrong with that?
Threads, and also it's easy to inadvertently press Enter.
Have you tried this on Windows:
https://docs.python.org/3/library/signal.html#signal.set_wakeup_fd
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.add_signal_handler (doc says it supports only Unix, despite Victor's comment below)
https://bugs.python.org/issue12304#msg238411
This works on Linux and Windows:
done

