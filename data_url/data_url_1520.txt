Is your feature request related to a use case or problem? Please describe.
RIght now some of the functionality to output quil programs is intermixed with cirq-core. We have things like cirq/protocols/quil.py and cirq/contrib/quil.py and cirq/circuits/quil_output.py. There are also modules like these in cirq-rigetti as well.
Describe the solution you'd like
We should move all of the quil related functionality into cirq-rigetti
What is the urgency from your perspective for this issue? Is it blocking important work?
P2
Hi @MichaelBroughton, I'm Rishabh from India.
I have some questions regarding this issue
What is the urgency from your perspective for this issue? Is it blocking important work?
P2
Taking this.
Hey @erichulburd @kalzoo @dbanty. We are going to deprecate the quil protocol. This will come down to also removing all __quil__ implementations in order to replace it with a standalone method in cirq-rigetti. The standalone method will be in the same vein as quil_import except custom gates will not be supported.
Please let us know if you have any concerns.
@vtomole Thank you for the heads up. Let us know if you want any input on the preliminary migration.
Moving forward, if new features or breaking changes are made in Cirq, can we expect any support for the necessary updates to the new Quil exporter?
Is this a general approach towards language interoperability? I notice that cirq/protocols/qasm.py is also present in Cirq core. Why I ask: Quil is owned by the quil-lang organization, of which Rigetti is part; it just so happens that we are the only backend provider for the language, but it is not inherently coupled to Rigetti.
I notice that cirq/protocols/qasm.py is also present in Cirq core
I feel like OpenQasm is different from Quil in the amount of support it has. There is Qasm support in Pytket, Braket, Qiskit, Q#... Even Quilc supports OpenQasm.  I think there is a push in industry and academia to have OpenQASM be an interop standard so it makes sense for us to support it natively.
Moving forward, if new features or breaking changes are made in Cirq, can we expect any support for the necessary updates to the new Quil exporter?
We want to make breaking changes before the 1.0 release; hence why we are doing this QUIL stuff now. Once they are moved to cirq-rigetti, we don't plan on adding new features or breaking stuff related to cirq-rigetti. We want to move all Rigetti-related code out of cirq-core before we won't be able to after the 1.0 release.
@vtomole How is this project going?  Cirq 1.0 is quickly approaching!  Do you need assistance on this task?
@dstrain115 Thanks for the ping! I have a local branch that removes the call to protocols.quil in class QuilOutput. I'll clean it up and open a draft PR before next week's sync and we can iterate on it.
Rough outline of the PRs I'll open:
The only part left is to remove the QUIL functionality off cirq-core; but this will be done during the 1.0 release. Will close this because the move has been done.
