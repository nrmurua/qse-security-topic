I find the autoformatting that we currently use in cirq to be less than ideal. There are three main issues:
Describe the solution you'd like
Describe alternatives/workarounds you've considered
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
I absolutely hate the yapf formatter and it often makes my code less readable. I also think a line length of 100 strikes a better balance between screen real-estate and superfluous wrapping.
I personally like the pycharm formatter. It leaves things alone that don't break any of the rules. While that means there isn't a "canonical" way to format things, it lets the code author use line breaks and indentation to indicate intent, e.g. when building a nested list of stuff. Of course, it's much more difficult to install and run the pycharm formatter than a command-line utility.
File-based incremental sounds good. A massive formatting change scares me, but may be our best bet. Maybe we can use that as motivation to get the number of open PRs down :)
I am a little bit worried about having an noisy git history too - git annotations really help understanding previous decisions, and while black offers a workaround using ignore-rev-files which should work with IDEs, it is not integrated with Github, and will add more dev setup for all of our contributors.
My first impressions with black:
Those 7 files are giving errors like this:
@mpharrigan and @balopat, thanks for your comments!
@balopat, It looks like the formatting errors you see are a regression in recent black (I suspect it's due to a recent change to how they handle trailing commas). If you pip install black 19.10b0 it seems to work and should give you a better sense of what black formatting looks like.
Re your questions:
2a) Picking a formatter is of course subjective, so saying I like black's formatting better doesn't carry much weight. But I do think black's formatting is objectively more consistent and predictable due to a simpler formatting algorithm. The simplicity is also reflected in the >10x speedup in formatting that you observed vs yapf. The main "feature" I like is the lack of knobs so there's less to bikeshed about wrt formatting. I think this will pay back over time and IMO it would be worth a single large-scale change to regularize the formatting.
2b) I don't know of any material differences between the formatting that black produces and google style; are there differences that you are particularly concerned about? I think black is becoming the "standard" formatter for the broader python ecosystem (see its adoption by psf), which is probably more important to align with than google internal style.
This is done now! Thank you @maffoo!
