Is your feature request related to a use case or problem? Please describe.
It might be useful for something like VQE to be able to pass a Hamiltonian as the observable to simulate_expectation_values_sweep().
Describe the solution you'd like
Automatically decompose the Hamiltonian into a Pauli sum to be used as an observable.
[optional] Describe alternatives/workarounds you've considered
Run simulate() then do <phi | H | phi>.
[optional] Additional context (e.g. screenshots)
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
@95-martin-orion
By Hamiltonian we mean the hermitian matrix representation of it, right?
I'm open to this - however it might get pretty expensive in the general case for an n-qubit matrix, we could have a 2^2n term PauliSum.
@balopat The Hamiltonian here can be an arbitrary matrix, and the resulting PauliSum would be the representation of that matrix in the Pauli basis. IIUC, this should require no more than 4n PauliStrings for an n-qubit matrix.
The Hamiltonian matrix itself definitely has the potential to be huge, though, since it will contain 2^2n terms.
The PauliStrings on n qubits form a basis for the space of operators on n qubits, so for a general n-qubit matrix one would need 4^n PauliStrings, not 4n
The PauliStrings on n qubits form a basis for the space of operators on n qubits, so for a general n-qubit matrix one would need 4^n PauliStrings, not 4n
Thanks for the correction! I guess this would look something like k[0] * II...I + k[1] * II...X + ... + k[4^n-1] * ZZ...Z?
What's the runtime for such a decomposition? How does the total runtime differ, from a big-O standpoint, between computing expectation using Pauli sum representation vs. just < phi | H | phi >?
Certainly being able to compute an expectation sweep at the simulator level would be an advantage, but wonder if the runtime of decomposing into Pauli sums would make it worse.
@95-martin-orion  - Yes, you can derive the 4^n basis vectors like that.
Naively for a hermitian matrix M,  I would calculate k[i] for each |P_i> using their projector: |P_i><P_i| M
And then I would somehow do some kind of (union-find?) approach maybe to merge paulistrings with the same coefficient, to reduce the number of terms...
I have not looked into this deeply yet.
@verult: Based purely on the fact that both the Hamiltonian and the PauliSum have O(4^n) elements I don't think there would be much benefit to this decomposition in the general case. This might be useful if the Hamiltonian was known to have a concise PauliSum representation, but as @balopat points out the "naive" decomposition is O(4^n) as well, which doesn't bode well for the overall benefit.
Ack, closing this issue, and if use cases arise for specific Hamiltonian categories where decomposition is simpler, a separate issue can be opened in the future.
Thanks all!
