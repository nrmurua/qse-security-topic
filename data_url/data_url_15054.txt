A circuit implementing Polynomial Pauli Rotations, for a polynomial $p(x)$, a basis state $\ket{i}$ and a target qubit $\ket{0}$ the operator act as $$\ket{i}\ket{0}\mapsto\cos(\frac{p(i)}{2}) \ket{i}\ket{0} + \sin(\frac{p(i)}{2}) \ket{i}\ket{1}$$
A Polynomial should be represented as $p(x) = \sum_{j=0}^{j=d} c_j x^j$ differing from the current documentation showing  $p(x) = \sum_{j=0}^{j=d} c_j x_j$
A simple example could be the polynomial $$p(x) = a +bx + cx^2$$ with $x=2^0q_0+2^1q_1$ substituting $x$ you get
$$p(q) = a + b(2^0q_0+2^1q_1)+c(2^0q_0+2^1q_1)(2^0q_0+2^1q_1)$$
$$p(q) = a + b(2^0q_0)+b(2^1q_1)+c(2^0q_0)(2^0q_0)+c(2^1q_1)(2^1q_1) + 2c(2^0q_0)(2^1q_1)$$
$$p(q) = a + b(q_0)+b(2q_1)+c(q_0)(q_0)+c(2q_1)(2q_1) + 2c(q_0)(2q_1)$$
$$p(q) = a + b(q_0)+b(2q_1)+c(q_0^2)+c(4q_1^2) + 4c(q_0)(q_1)$$
being $q_i$ binary ($[0,1]$) its square is still $q_i$
$$p(q) = a + (b+c)(q_0) + (2b+4c)(q_1) + 4c(q_0)(q_1)$$
this can be translated into the circuit
$$MCRY(4c,t,q_0,q_1)CRY(b+c,t,q_0)CRY(2b+4c,t,q_1)RY(a)$$
with $a=1,b=2,c=3$ it results in
$$MCRY(12,t,q_0,q_1)CRY(5,t,q_0)CRY(16,t,q_1)RY(1)$$
this can be seen in the following code snippet result:
Also I've noticed that the coeffs property documentation is copied from the LinearPauliRotations therefore is incorrect.
Can you check what I've noticed and if my math is correct?
