A three-qubit diagonal gate is a gate whose unitary matrix is of the form np.diag([a, b, c, d, e, f, g, h]). Such gates can be decomposed and simulated efficiently, and this decomposition/simulation code would be useful in several places (e.g. when defining the CXXYY gate in openfermion-cirq).
The ThreeQubitDiagonalGate class should have the following features:
An __init__ method taking the rotation angle for each element along diagonal. (The angles, not the complex values the angles produces. Also store the angles, not the complex values. This makes the behavior of __pow__ better.)
A def _unitary_(self) method that returns its matrix.
A def _circuit_diagram_info_(self, args) method that uses symbols like diag(a, b, ...)----#2----#3.
A def default_decompose(self) method that looks almost identical to the CCZ decomposition, except that the various T/phasing gates are replaced with gates that depend on the diagonal components of the matrix.
For reference, this is the CCZ code:
Each of the ps in the code controls the phasing of four of the eight diagonal entries in the matrix. By varying all 7 you can implement any diagonal matrix (up to global phase). You will have to write code to solve the actual_diagonal-to-phasing_angles problem.
A def _apply_unitary_to_tensor_ method that multiplies the appropriate entries by the appropriate phase values from the matrix.
The code should avoid doing multiplications where the phase values equal 1.
A __pow__ method to extrapolate the phasing effect.
__eq__/__ne__/__hash__
@Strilanc what did you mean by the #2---#3 in def _circuit_diagram_info_(self, args)?
It's a way of indicating the order of the other qubits in the operation. First qubit gets the name, others get numbers. This matters for operations that depend on the qubit order.
