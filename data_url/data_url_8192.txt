Describe the bug
I need at some point to modify the internal representation of a state, so I use myobject.full(), then I modify the matrix, and recreate a state using Qobj (let me know if it's not the usual way to proceed). However, it turns out that the output state does not behave like the initial state: for example I can't apply ptrace on it. Here is a minimal working example:
Demo in the terminal:
Expected behavior
I would expect that Qobj(myobject.full()) is a copy of myobject, but it turns out it's not (can't ptrace). Note that if it is not a bug (completely possible), I'd be curious to know what is the proper way to do what I need to do.
Your Environment
qutip is installed via nix:
It turns out that if I add a line copy_state.dims = init_state.dims, then it works... But then I'm curious, am I supposed to use that? How are dims created (like, what is the [1,1] in [[2,2], [1,1]])?
dims contain the information about the tensor structure of the space. Without it, there is no difference between the states:
tensor(basis(2,0), basis(2,0)) and basis(4,0), both have the same array representation. For tensor space, the dims[0] are the rows of each components and dims[1], the columns. So the tensor between bras will have dims = [[1,1],[a,b]], etc.
Qobj have a copy() method so you don't have to make a copy using an array.
The Qobj constructor also takes a dims keyword argument, so if you need to modify the array structure using Qobj.full(), then you probably mean to do
Oh, good to know, thanks a lot!
