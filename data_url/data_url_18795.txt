The VIM tool is useful, but without a language server we can't really integrate this with a modern IDE like Eclipse.
Sounds like an open source opportunity. I wrote an OpenQASM 2 language mode for JEdit, but,  as you note, that's not useful with IDEs like Eclipse.
I wouldn't be surprised if someone did a VS plugin. Sadly, that sort of thing seems to be eclipsing Eclipse :)
This is something that we're definitely interested in doing - the reason I didn't take the vim plugin further yet is because I anticipated the next step being a full language server, so (as you say) it'll work with any IDE.  We're currently just working out where we're at with respect to other tooling though, so we can build on top of that.  A full language server with linting, refactoring and so forth is really quite involved, so watch this space, but it might just take a little while.
Sounds like an open source opportunity.
Yeah, we kinda need it for our IDE, so I'll probably wind up building one.
A full language server with linting, refactoring and so forth is really quite involved, so watch this space, but it might just take a little while.
I imagine that refactoring is probably going to be too platform-dependent to efficiently implement. We're using QASM as an analog for Verilog/HDL in circuit design for our LOQC architecture, and, for instance quantum RAM in LOQC is possible but it decreases coherency so much that it's impractical for anything over 10 gates on 8 qubits, so we want to notify users of this early on so they know "Hey, I really shouldn't use this with this paradigm unless it's absolutely necessary" whereas there's some paradigms whose entire architecture relies on quantum RAM and if the user forgets to declare QRAM they might want the editor to remind them to do that.
Given the number of different paradigms there are (LOQC, ion-trap, atomic, NMIR, etc.) I think it might be best to create a generic language server for OpenQASM that does all the basics you'd expect (syntax & semantic highlighting, auto-completion, hover-comments, etc.), and then allow hardware vendors to tie into that with additional plugins that support the more advanced capabilities like code refactoring. That way OpenQASM keeps its' generality, hardware vendors can more easily provide users with the best editor support, and developers will have an easier time writing code.
We are actually contemplating some degrees of OpenQASM3/VSCode integration from simple syntax highlighting to a language server that supports auto-complete. Wonder if other IDEs can use VSCode language server. Also, as many SDKs like Qiskit can import/export OpenQASM, we are not sure how many people will code OpenQASM directly. Do you expect to code a lot directly in OpenQASM?
Wonder if other IDEs can use VSCode language server.
Well, LSP is supposed to be an open protocol ...
I'm querying the NetBeans devs whether that would work with NetBeans.
Do you expect to code a lot directly in OpenQASM?
Well, those of us working on OpenQASM itself do ðŸ˜ƒ
For the jEdit editor, I've been using a simple syntax-highlighting file that makes it easier to read qasm code.
Hmmm ... yes Apache Netbeans ... here's an LSP Client Demo.
Do you expect to code a lot directly in OpenQASM?
Another thought, @aspcompiler : OpenQASM 2 is a very simple language. It also did not track well with rapid progress in Qiskit. But it was still easier for a simple program than writing Python code. I wrote a tool to run an OpenQASM program from the command line so it became very easy to use.
OpenQASM 3 is a much more sophisticated language. It further has application well beyond that of OpenQASM 2, since it addresses hardware more intimately.
Therefore, one can easily suppose that if there is good support tooling for OpenQASM 3 such as a language processor, it will see wide usage.
Wonder if other IDEs can use VSCode language server.
They should be able to, it's an open specification. I know Eclipse and Theia can both use VSCode plugins, so they should be able to use the VSCode language server.
Do you expect to code a lot directly in OpenQASM?
Yeah, as I said we're using OpenQASM as a hardware descriptor language for our EDA software; basically you design your ASIC with QASM and then our software generates the necessary manufacturing files to actually build the circuit. We can probably get away with just TextMate for a while, but an extensible language server would be ideal. Both are needed
The IntelliJ family of IDEs (Pycharm, etc) has support for Language Servers through a plugin: https://github.com/gtache/intellij-lsp
A full language server it is not, but I created a VSCode extension and got some basic syntax working
I'll be looking at semantic highlighting, code snippets, and adding in more features.
Here's how it's looking so far

Edit:
Got it up on VS marketplace if anyone wants to try it out
https://marketplace.visualstudio.com/items?itemName=NoahGWood.openqasm-language-support
Edit2:
Was also able to integrate it with Theia to build in support on SpookyIDE
Nice work @NoahGWood
I have created a basic language server with diagnostics from ANTLR4's error handlers, and a client for VS Code with syntax highlighting.
It is not perfect, but it works.

You can find the project here, and I'd appreciate any input or contributions to help enhance the functionality. Feel free to open issues or pull requests with your suggestions and ideas.
