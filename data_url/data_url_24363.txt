What is the feature being requested?
Allow users to easily define variables and sweeps thereof by connecting to Ansys's built-in optimetrics via pyEPR.
To achieve this, store info in each component's metadata, where keys and values correspond to parameters to sweep and equations that define them, respectively. While rendering each element to Ansys, follow these steps:
What are use cases for this feature?
One example is sweeping the pad gap as defined within a given qubit's component options, but inside Ansys.
Chris, Priti, and I have discussed a way to do optimetrics on an Ansys design by passing in the sweep information from each component's metadata dictionary as outlined above.
So this runs the native optimetrics in ansys?
So this runs the native optimetrics in ansys?
That's what we're looking to do by making use of the optimetrics module that's already in pyEPR.
Which parameters of the component? Ansys renderer options (such as the junction inductance)? Or are you referring to the geometries of the layout?
Also will want to edit the first comment in the issue to match the format Jeremy laid out.
Which parameters of the component? Ansys renderer options (such as the junction inductance)? Or are you referring to the geometries of the layout?
Also will want to edit the first comment in the issue to match the format Jeremy laid out.
Geometries of the layout, for example, pad gap. This is a currently a component option.
Formatting has been edited.
For some parameters I think this can work directly I wonder for things like CPW lengths, the calculation is quite complex - not sure how we can do that native in ansys, maybe you have some ideas otherwise we Can always redraw whole design.
I am proposing that the QComponent's meta data would  have a key="optimetrics" to dict.  The dict would have  the variable to scan, ie. pad gap, and value would be the equation for pad gad.  For example, the method for ansys.optimetrics() would read the meta data and place into the variables and their equations in Ansys.  The equation would have to use pre-defined variable names between QComponent and Ansys. @dwang429 had show a naming convention already being used for Ansys.  We were thinking of using that or something similar to that.
Nothing was finalized.  Since we had something that could work for @warrench , we wanted to document it and have a point to start a conversation.
Have a conversation today with few people.  We are going to start within Metal to take advantage of both default_options and the "make()"  method of each QComponent.
Based on priorities for today's conversation, will break this issue into smaller issues.
