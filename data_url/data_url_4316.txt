I see two problems with the current backend selection:
Concerning the first point there is an easy solution: maintain inside Qibo an enum with all the options (it makes easier also to discover them). Enums are part of the standard library.
About the second one, I understand qibo is not the only library doing this, e.g. matplotlib also has global configs (and even a global state) and Tensorflow does something similar.
But learning from Tensorflow, qibo could use at least a context manager (like tf.device).
An option I'd like more (but I'm not sure about feasibility, for lack of familiarity) would be to pass the backend explicitly to a run/execute function. I.e. you first build the abstract circuit, in a completely independent way from the backend, and finally you compile and run on the specific platform, getting back an output object; something like:
Usually, you can always do the same also using globals, but: it hides the flow, and makes it more complex to reproduce results, since there are parameters that affect the output that are not passed as input (this is a purely functional objection), and it makes it impossible to work in a concurrent environment (e.g. a dispatcher thread for various GPUs, sending further computations while waiting for the results).
Thanks @alecandido, just a comment concerning global. We have considered the API proposed here, the main limitation is that the code becomes platform specific, in the sense that you must change the flag manually, while with a global object we can have a default which is controlled by an env flag of the node where the job is executing.
you must change the flag manually, while with a global object we can have a default which is controlled by an env flag of the node where the job is executing.
Well, this can be solved by adding a "fallback" value, like, "if it's None, look for the flag":
On the other hand, maybe it could be even more explicit with a special value qibo.Backend.FromEnvironment. But here we really enter details about DX, people will have their own subjective preferences...
