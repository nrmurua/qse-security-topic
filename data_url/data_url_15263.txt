It's possible to build a Target where the Instruction does not match the number of qubits it's being added to.
For example here I add a 1-qubit gate to a two-qubit tuple.
raise Error
No response
I also feel like this shouldn't be valid, but currently is:
i.e. adding an instruction to unknown qubits. It will later fail if we try to do things like target.operation_names_for_qargs((0,1))
For the main issue: seems fine to me to add the checks, unless Matthew has reasons not to.
Your newest comment looks like a bug in operation_names_for_qargs to me - the construction example you gave is explicitly allowed and means "this instruction is valid on all pairs of qubits".  There may need to be an extra tracker for operations that are defined over None, and the numbers of qubits they're valid for.
Yeah I think this 2nd one is a bug, and is currently blocking #8917 by causing 2 tests to fail.
So the first point is half a feature half a bug. The add_instruction() method allows you to add instructions with new qubits and extend the qubits in the target. Something like:
To make a target with 3 qubits. The idea behind that was for generating target's programmatically it was easier to just parse an instructions payload and get a valid target without having to know the number of qubits ahead of time. But I agree it's a bug that we're not validating the number of qubits matches the operation width.
The second thing is definitely a bug as we should check the number of qubits for globally defined operations and return them in operation_names_for_qargs().
