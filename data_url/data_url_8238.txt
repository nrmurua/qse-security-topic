Is your feature request related to a problem? Please describe.
It is very convenient to take measurements in QuTip by passing list of observables in the e_ops argument of mesolve or sesolve, a list of expectation values at each time step of all those operators will be provided in returned qutip.Result object.
It becomes much less elegant once we implement custom measurements and pass a callback function (for example to work with time-dependent Hamiltonians etc).
According to the documentation
An instance of the class qutip.Result, which contains either an array result.expect of expectation values for the times specified by tlist, (...), or nothing if a callback function was given in place of operators for which to calculate the expectation values.
So to work with callback function, we need to manage the storage by ourselves, for example by defining a global list, as it is done in this example.
Describe the solution you'd like
Currently when we pass a list of operators such as
We will be able to access expectation value of sigmax() in result.expect[0], of sigmay() in result.expect[1] and of course sigmaz() in result.expect[2].
Why not capture the custom measurement in similar way?
Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback function.
So now it is as before but in addition result.expect[3] contains energy and result.expect[4] contains fidelity and no custom managed global external lists required as it was in the example
Describe alternatives you've considered
Alternatively we could establish that custom measurement callback function must return only single value and user would be able to pass mixed list of operators and functions in the e_ops.
Additional context
Correct me if I'm wrong, based on the docs and examples I referenced above I have impression there is no better way to do it, but maybe I just missed it? Please regard this issue as opening a discussion, I'll be happy to participate and of course, implement the changes I suggest.
The documentation is wrong here. When e_ops is a function, result.expect is not empty, but a list of all outputs for that function. So the results is the transposed of what you propose here. For the energy, you would need to do result.expect[t][3].
The alternative could be a good options.
Thanks for your comments @Ericgig , I will see if there is a way to implement the alternative solution while maintaining the backwards compatibility.
Also I'll be happy to contribute and update the docs, let's keep this issue open, I have my full time work but after hours gradually I'll come up with a pull request.
Now implemented in both QuTip 5 and QuTip 4.7! Closing the issue!
