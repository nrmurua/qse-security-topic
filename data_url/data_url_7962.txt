Hi,
I was just starting out with Stochastic Solver and ran into a problem that might be something about definition.
As an example, I can't understand the meaning of the expectation_values when solving with Stochastic Solver.this notebook
In my understanding, the Stochastic Solver solution yields ntraj trajectories, and the average of these trajectories is (or approximates) its expectation (solved by mesolve). But in the example in the notebook, the expectation_values(result_ref.expect[1]) and the trajectory mean(np.array(result.measurement).mean(axis=0)[:, 0].real) obviously do not refer to the same thing.
I originally thought that this expectation value meant the master equation solution (but not Stochastic Master Equation), but Figure 2 compares this expectation with the expectation of the mesolve solution. Although the two are similar, this also means that the two are not the same thing, at least not solved by the same method.
So I'm wondering what exactly the expected value of the smesolve refers to. Or is this expectation value what I originally suspected that the system did not make continuous measurements, but used Schrödinger or the main equation to solve the expected value (but the solution process is different)?
result.measurement is not the same as result.expect, the measurement is an expectation value, but not of the e_ops but m_ops which are usually automatically generated from the c_ops and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually.
smesolve's expect are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from smesolve will be visible.
The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5.
result.measurement is not the same as result.expect, the measurement is an expectation value, but not of the e_ops but m_ops which are usually automatically generated from the c_ops and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually.
smesolve's expect are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from smesolve will be visible.
The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5.
Thank you very much for your reply, but I still don't quite understand smesolve's expect are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides [ntraj [int] number of trajectors], which means that there are ntraj 'ρ(t)' (expect). If I want to show all ntraj ‘s 'expect', how can I do it?
Can I understand result.measurement as measuring(POVM) the smesolve.result (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}{f}=\frac{\hat{\Omega}{m}\hat{\rho}\hat{\Omega}{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement.
What I want to do is simply solve the stochastic master equation to get enough trajectories ρ(t) and solve the relevant expected value Tr[ρ(t)A]. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (Tr[ρ(t)A] maybe with different dW), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(mesolve.expect). This is similar to this code in Note (but the result in Note is result.measurement)
`fig, ax = plt.subplots(figsize=(8, 4))
for m in result.measurement:
ax.plot(times, m[:, 0].real, "b", alpha=0.025)
ax.plot(times, result_ref.expect[1], "k", lw=2)
ax.set_ylim(-25, 25)
ax.set_xlim(0, times.max())
ax.set_xlabel("time", fontsize=12)
ax.plot(times, np.array(result.measurement).mean(axis=0)[:, 0].real, "b", lw=2);`
You can use: smesolve(..., store_all_expect=True) then use result.runs_expect[traj_n, e_op, t].
(Please check the order of the index.)
You can also use options=SolverOptions(average_states=False, store_states=True) to have results.states keep the states of all trajectories.
If you use the v5 pre-release, the with options = {'keep_run_results': True} you have both result.average_expect and result.runs_expect. Same for the states, adding 'store_states':True to the options, you can get the trajectories states with result.runs_states and the averaged states with result.average_state.
