A common literature technique is to "square CNOTs": see Fig. 2 caption of https://arxiv.org/abs/1803.03326 and Fig. 1 of https://arxiv.org/abs/2011.01157. This is not easily possible with unitary folding, even when folding by fidelity.
I propose an interface like
which would do G (G^\dagger G)^{num_folds} for each gate G in gates_to_fold appearing in the circuit.
With this, squaring CNOTs would be like fold_all(circuit, num_folds=1, gates_to_fold=[CNOT]).
Alternatively, we could add gates_to_fold as an optional argument of each (local) folding method. Thoughts?
This is not easily possible with unitary folding, even when folding by fidelity.
Can't one achieve the same result by setting fidelities={"single": 1.0}  (after #521 is fixed) ?
Can't one achieve the same result by setting fidelities={"single": 1.0}  (after #521 is fixed) ?
Yes. I think I was confused by a bug (see below) and thought this wasn't possible. We may still want to implement the interface I proposed to make it clearer how to do this. Folding by fidelity is apparently well-hidden as everyone is surprised to learn it exists.
Pretty sure this is buggy, @andreamari do you agree? The folded circuit has two more CNOTs on the first two qubits than I expect.
@rmlarose, this looks a bit strange because the asymmetry between qubits 0-1 and 2-3,  but I don't think it is a bug.
The initial number of gates is 2. If the scale factor is 6, we expect the output to have 2 * 6 = 12 gates. The output has indeed 12 gates.
Even if one thinks in terms circuit depth (moments) this is more or less consistent.
The input circuit has depth 1. If the scale factor is 6, we expect the output to have 1*6 =6 moments. The output circuit can be
considered as an approximation of a 6 moment circuit (something in the middle between 5 and 7 moments).
Discussed at Mitiq meeting. Ok to add, verify that fitting is fine with num_folds = 1, 2, 3 which is equivalent to scale_factors = 1, 3, 5 (i.e. re-scaling the x-axis).
