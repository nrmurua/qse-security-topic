Qiskit includes a statevector simulator that uses Numpy. This is very nice because it means users can simulate circuits without installing Aer. However, I think the interface could be improved.
Currently the simulator is called using the Statevector class:
It would be useful to expand this functionality so it is used in the same way as other backends. That way it can be incorporated into code workflows that use backends.
Once we switch to using primitives for the basic quantum operations (sampling, probabilities, expectation values & others) this might not be necessary anymore. Since then we would just have an exact, possibly numpy-based, version of these primitives which the algorithms could use.
@Cryoris What are primitives? What exactly are you saying will be made unnecessary by them?
@Cryoris explained to me offline that the BasicAer backend exists and is exactly what I am asking for. So I'll close this issue, though I will say that the existence of BasicAer should probably be mentioned more prominently in the documentation.
According to @jakelishman BasicAer is actually not meant to be a general simulator backend (see his comments closing #7633  and #7634 ). So this issue remains open.
It's possible I missed some discussion that happened internally while I was out - if so, I'm sorry for closing the issues prematurely.  I'm approximately trying to tidy up stuff that came in while I was away.  My view in general would be that Aer is our general-purpose simulator, and it's not a great use of our staffing resources on Terra to manage a separate backend, though.
Aer is indeed the first choice for simulation. But having a pure Numpy simulator is still useful for at least two reasons:
Given that Qiskit already has Numpy simulation functionality, exposing that functionality as a backend seems to be a pretty straightforward task. Indeed, I think it makes sense to extend BasicAer to accomplish this. I still don't quite understand the justification for deliberately limiting the usefulness of BasicAer.
Yeah, in an ideal world I wouldn't be rejecting things that can be useful.  Here, it's rather more about pragmatism than anything else - any feature needs to have people committed long-term to maintaining it, and we just don't have the resources to commit to maintain proper interfaces for both Aer and a second, far less efficient, simulator (we barely have the resources to fully maintain Aer).
It's very much a non-trivial maintenance cost, and it's not just about the one-time effort involved in writing the initial code.  There is already a new version of the Backend interface in Terra that we are slowly transitioning to, which shows the on-going cost of backends we have to maintain.  Even with a non-core-Terra contributor maintaining it, it still adds a lot of review overhead (that does need to come from a core team member), time taken in CI for testing, and of course always the risk that the contributor will one day not wish to maintain the software.
Reducing feature creep is just part of my responsibility to ensure that we can keep our primary code maintained, and focus our available resources on the core mission of Terra, and the general priorities of IBM Q.  If you'd like to maintain a separate Numpy backend, Terra absolutely provides all the APIs you'd need to do that - as you mentioned, it really shouldn't be particularly complicated to build your own on top of Operator, and Terra can easily work with backends that respect the APIs even if they're not defined in the same repository.
The fact that BasicAer exists in the public API already suggests a commitment to maintain it. So this issue does not entail any further commitments. It's really about bringing BasicAer up to a standard that is already implied, but as yet unfulfilled. It is detrimental to a user's experience when they find there is a publicly exposed Numpy simulator and try to use it, only to find that it is not useful.
Related: #7670
I think there is some tension here between some of the goals outlined in this issue and the purpose and future direction of BasicAer. In general as @jakelishman says qiskit-aer should be our general purpose simulator, it's performance will generally be better and it has far more features than what we do in basic aer. To really expand the feature set of basic aer (or introduce yet another new simulator backend) is duplicating effort for no particular reason imo. We should instead direct that effort towards improving aer.
Historically BasicAer existed primarily because when qiskit-aer was first introduced it was a real pain to install for a large portion of our user base. However, that's no longer the case (after a whole lot of effort) and we publish pre-compiled binaries for all supported platforms and installing aer is just as easy as any other qiskit component. That being said we've discussed what to do about BasicAer a few times in the past since aer is easier to install now (for example see: #4443 and #5718) and the consensus has been there is value in Terra having a built-in simulator primarily to serve as a full path test for itself. To that end we have discussed this issue of leveraging quantum info in the past and replacing the internal implementation of the basic aer simulators to wrap the quantum_info Statevector and Operator classes to perform the underlying simulation has always been a long term goal, primarily to reduce the code burden on maintaining the simulator (as right now it's an entirely separate path). This includes a recent parallel offline discussion which is what #7670 was opened about. The biggest blocker for that work though is quantum_info doesn't support operations involving classical state, including measurements, or barriers which BasicAer does today. Once we can support that with quantum_info moving BasicAer to leverage it is trivial (as a circuit gets passed to the backend.run() and we can just pass that to quantum_info). This is also ignoring the tension around the name BasicAer which has served as a point of confusion where people use it and assume incorrectly it's BasicAer. As part of this work we should rename it, which is primarily what #4443 is about now.
However, BasicAer will still be a Backend and the Backend interface doesn't really support a model of executing arbitrary gates with a matrix defined. The interface is designed to model a device with constraints of hardware, one of those constraints is a limited supported set of instructions. The compiler needs to know what instructions are supported up front so it can translate an input circuit to that supported basis set. While simulators are probably able to support simulating any gate with a matrix defined, including aer, the backend interface doesn't support that (as it's not an expressible constraint of the interface). The closest thing is to support the UnitaryGate (which aer already does) which lets you pass a unitary matrix directly as a gate in your circuit.
Given all of this I'm not sure what the expect as an outcome from this issue is. I'm not sure there is a lot of detail here that isn't covered in #4443, #5718, and #7670 (for more implementation specifics). If we keep it open we probably should rename it to better indicate what an expected outcome would be. Something like "Update BasicAer to leverage quantum_info internally" probably (although that's basically the same as #7670.
I'm okay with closing this issue in favor of specific issues about BasicAer. @jakelishman could you please reopen #7633 and #7634?
Sorry about the delay re-opening, these issues had fallen off the front page of my notifications between them updating and me looking at my queue.
I've re-opened #7634, but left #7633 closed on the basis that "use quantum_info" is a duplicate of #7670, and the "support all matrices" is something that we can't officially fulfill within the Backend spec - if BasicAer is converted to use quantum_info underneath, then BasicAer.run() will support all instructions with a matrix, but we can't make BasicAer appear that way to things consuming the Backend API (more detail in #7633).
I'll close this on the basis that #7670 is the direction we want to take to solve the underlying issue here, rather than making a new backend.  If I've missed a further point in one of these issues, please let me know.
