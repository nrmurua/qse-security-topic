Quantum state distinguishability objective function must be real-valued. That is, in state_opt/state_distinguishability.py alter this line:
to
A better approach here would be to simply use picos:
Removing the unambigous case as well for now would also be ideal.
I came here to report the same problem, but I see that you are already working on it and it is probably solved now.
Even if this should be solved in your picos code, I suspect the current cvxpy code contains a bug:
measurements.append(cvxpy.Variable((dim_x, dim_x), PSD=True))
I think this creates PSD symmetric real-valued matrix variables, not complex hermitian matrices, so the optimization is over the wrong set. To obtain the correct solution I think one should create hermitian variables with hermitian=True and then add the measurements[i] >> 0 constraint for each.
Ah, out of curiosity, may I ask the reason to prefer picos over cvxpy? I'm old-school and I come from MATLAB's CVX plus QETLAB, but it seems they have comparable performances now: https://cgois.github.io/posts/cvx_vs_picos/
Hi @falbarelli
Thanks for your comments and input!
I think this creates PSD symmetric real-valued matrix variables, not complex hermitian matrices, so the optimization is over the wrong set.
Yes, precisely, doing this over setting the PSD flag in the instantiation of the object would ensure optimization over the proper set of objects. This is indeed one of the things that is changed in #425
Ah, out of curiosity, may I ask the reason to prefer picos over cvxpy?
For picos over cvxpy, my general impression is that picos seems to have more support for complex-valued SDPs, and specifically, such SDPs that crop up in the context of quantum information. I believe cvxpy has been improving on this as well, but I haven't kept too close an eye on it. As you point out in the article, from a speed perspective, they are both quite close though.
I'm old-school and I come from MATLAB's CVX plus QETLAB
QETLAB is great and Nathaniel is a beast! Indeed, much of the inspiration for toqito came from QETLAB as you can see a wide overlap of functionality.
Out of curiosity, how did you stumble on toqito? Are there problems in QI that you're currently thinking about that having support in toqito for would be useful for you?
Cheers!
Thanks for you work on this project and for the explanation about the choice of picos.
At a quick glance, it seems the new code fixes the problem I mentioned, nice to see it implemented.
Out of curiosity, how did you stumble on toqito? Are there problems in QI that you're currently thinking about that having support in toqito for would be useful for you?
It was mentioned to me by a PhD student in the research group where I work in the context of SDP applications to quantum info.
Regarding the second question, I mostly work on quantum metrology and there is already QuanEstimation, an extensive Python and Julia package.
However I must admit that it is a topic that feels a bit detached from the rest of quantum information, even though there are deep connections. Perhaps things will change with this paper https://arxiv.org/abs/2307.06370
Neat. Happy to chat with you or any of the students about things on the SDP side of things that would be useful to integrate into toqito.
Regarding the metrology side of things, that's definitely outside my wheelhouse, but interesting to see that paper. I'm looking forward to seeing the recorded talk of it at QIP 2024.
If you'd like to chat further about anything, happy to spin up a call. Cheers, and thanks again for your comment, @falbarelli !
