EDIT: See next comment first.
5858c87 , four day old main branch
3.10.5
fedora
Somtimes parsing a physical qubit specification fails.
Write the following to phys_test.qasm.
Then do the following:
No error. When I first read the paper it looked kind of like these should only work in a defcal. But there are snippets in the paper including $0, $1 etc that do not explicitly include this context. The live language spec is pretty clear. There are no qualification on scope or otherwise when introducing physical qubits.
Reading test suite, it looks like physical qubits are parsed correctly in a defcal. This might be a starting point.
This looks like I am trying to declare a physical qubit, which should not be allowed.
There is another implementation of a qasm parser which does allow this qasm code. I think the bug should be filed against that parser, not this one.
Yes, the internal IBM parser allows this as a language extension, but it's explicitly against the text of the spec.  The reference in this repository attempts to follow the text of the spec exactly.
Just to clarify: it's convenient for our infrastructure internally to know how many physical qubits will be used, which is in part why there's the syntax extension, and because our compiler assumes Qiskit has already laid out and routed the circuit, so there's no "register-like" definitions that would conflict.
but it's explicitly against the text of the spec
I see it.
It seems to me that it could be useful for many architectures and simulators to make the resources explicit.  Maybe I missed it, but I don't find this extension documented anywhere.
At any rate, this is not a bug, but rather documented behavior.
I've created #417 as there has also been other related discussion internally.
@jakelishman wrote
... allows this as a language extension, but it's explicitly against the text of the spec.
If a language extension is allowed to transgress a prohibition in the spec, then you can make extensions to make the language into anything you like.
This issue is off topic here. But it should be pursued somewhere.
If a language extension is allowed to transgress a prohibition in the spec, then you can make extensions to make the language into anything you like.
#417
