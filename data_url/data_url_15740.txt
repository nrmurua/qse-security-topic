With the new(ish) scikit-learn version 1.0, there is a FutureWarning issued when using the normalize parameter of LinearModel, which opflow does when calculating gradients. This doesn't fail our tests (though perhaps it should), because FutureWarning doesn't count as a type of DeprecationWarning.
Run the test suite, especially test.python.opflow.test_gradients.TestGradients.test_natural_gradient.
No future warning.
Fix opflow to handle fitting with StandardScaler rather than the now-deprecated normalize parameter.  This has existed for several minor releases of scikit-learn, so should be safe for us to do.
Hi, I would like to work on this as my first issue. If someone wouldn't mind assigning me that would be great. Thanks!
No problem, I'll assign it to you.
See also #6904 where I suggest erroring on all (unexpected) warnings.
Yeah, absolutely agreed on that. It's something I want too - I had started to work on reducing the number of allowed deprecation warnings as a precursor to this, but then other stuff took over.
Hi @st4eve, how's it going?  Do you need any help on getting this working?
We would probably need to see the full logs that those commands allude to, but most likely the problem is that you don't have a correctly working C compiler on your system.  There's a little intro to the "building Terra from source" section on the website that says:
On Windows, it is easiest to install the Visual C++ compiler from the Build Tools for Visual Studio 2017. You can instead install Visual Studio version 2015 or 2017, making sure to select the options for installing the C++ compiler.
Have you got those installed?  In particular, since that link seems to be slightly out of date now, you want the thing that's now marked "Build Tools for Visual Studio 2022", and if it ever gives you an option (I don't think it does), make sure that you install the C++ tools.
I'd also recommend double checking you've followed all the steps in the Installing terra from source, including the final pip install -e . step ðŸ˜„
How is that going @st4eve ? I also would recommend you to ask for help in the channel #qiskit-pr-help in our slack workspace: https://join.slack.com/share/enQtMzAzNDA0MDQzMDMyMy0yZWY4MGU4NDJmM2UzYjc1YjQ4OTg0YmY3Y2FlYzgzMmVhMDU2MDgwMDM5MjM0ZDQyYTA2YjA2OWIzMDc5MDEz
Is this issue actually still present? I just ran the opflow tests and did not encounter any FutureWarning anymore. ðŸ™‚
Yep - for example https://dev.azure.com/qiskit-ci/qiskit-terra/_build/results?buildId=34312&view=logs&jobId=8fcf860c-8d5a-5d3a-546e-59924dc71ae1&j=8fcf860c-8d5a-5d3a-546e-59924dc71ae1&t=d677ba53-4fc9-5372-ced6-0b4a8cddaca6 from line 2753 onwards.
Perhaps you didn't have scikit-learn installed, so the tests were skipped?
Hi, there is a difference between the deprecated normalize parameter and the StandardScaler outlined here Will that be of any concern, maybe in the tests?
@Cryoris, @woodsp-ibm: perhaps you know the answer to this question?
Hi, following up on this if there's any updates?
Since the normalize argument is only used in an empirical regularization method, i.e., Ridge, it should be perfectly fine to implement minor changes such as changing to StandardScaler.
Thanks, Christa.  @prakharb10: the comment above is from the person who originally wrote the code, so we can go ahead with that.  Since it may affect the exact results achieved from a given seed / set of initial points, we should include a one-line "upgrade" release note with the change mentioning that, but it should be sufficiently internal that we don't need any deprecation cycles, I think.
