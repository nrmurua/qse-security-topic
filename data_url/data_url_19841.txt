It seems to me that currently state tomography consists of one clear entrance point - a circuit and a list of qubits - and one clear exit point, namely the density operator. Currently, it is up to the user to move data around - generate the tomography circuits, run the simulator on them, format the data for the fitter and run the fitter itself.
It will be helpful to have a wrapper function such as
def perform_state_tomography(circuit, measured_qubits, **kwargs)
that outputs the density operator after the tomography is complete. The control over the tomography process (e.g. the number of shots in the simulator runs, the simulator to use, the fitter to use etc.) will be done via keywords with sensible default values.
We can also add support for a hash, qobj-like data structure which will explicitly contain the circuits, the intended measured qubits and the additional keywords. I already have a basic implementation along these lines.
I dont think we need to have a wrapper for the tomography. I would rather keep this as make circuits, run experiments, fit data.
