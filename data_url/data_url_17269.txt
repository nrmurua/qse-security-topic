Is there a reason that I cannot do the following, a very common workflow within the algos and applications space?
The logic preventing this is here, barring me from combining two circuits with a matching register name. Almost by definition, a function which gives me a subcircuit for use in an algorithm will reuse the register names for each returned circuit. I'm forced to hack around this by creating dummy wrapper circuits (as is done in Aqua here), which is breakage prone and tightly coupled to the Terra API. A short list of examples where I'd like to use a circuit requested from a generating function more than once:
Is there a specific error behavior in mind that drove this decision?
Accelerate algos and applications work.
I think this is related but if I make two circuits
and try to run them together I get the following error
There was an error in the circuit!. Error = 'duplicate register q'
@dongreenberg To use subcircuits, use inst = subcircuit.to_instruction() to convert them to instructions and then stick them in the circuit with circuit.append(inst, [0, 1, 6]).
I don't know what your function my_function_producing_a_circuit() does, in the title it says "colliding register names" and in the description it says " matching register name". The logic you point to is checking register objects, not register names. The rationale is that it is not correct for circ1 to append to circ2 if they act on different qubits (registers). That's why to_instruction() was introduced -- it anonymizes circuits, meaning the register they act on becomes unimportant.
@jaygambetta i can't reproduce your error.
@ajavadia change the line https://github.com/Qiskit/qiskit-terra/blob/3a5780b0fe6838acc9b249e781d23d8559e0c3a2/examples/python/using_qiskit_terra_level_2.py#L54 to have (2,2) and it will error
@jaygambetta I was able to reproduce this now, and opened up #2558 with more details.
I think this can be closed now, @dongreenberg feel free to reopen if you are not convinced.
