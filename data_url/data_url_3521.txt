ProtoQuil was a term that was originally designed to mean a "common denominator Quil" that just about every quantum machine could implement. "Proto" means something like "primitive" or "first."
ProtoQuil is also a subset of Quil that removes a lot of stuffiness that allows one to perform mathematical studies of extensions of Quil, without getting into the weeds and busywork incurred by, say, classical memory.
The grammar for ProtoQuil is something like this, using the usual conventions for ?, +, and *:
As a matter of convenience, PRAGMA, DECLARE and NOP can show up, but they don't have any effect.
Since this was an executable subset of Quil that Rigetti quantum computers could execute since very early on, the notion of ProtoQuil became conflated with the unstable notion of "QPU-supported subset of Quil", and it crept its way into pyQuil APIs.
I suggest we change ProtoQuil-related functions to match the above grammar precisely, and we come up with a time-varying notion of "supported Quil" with an additional function like ensure_quil_program_is_supported which either does nothing if the program is supported, or throws a public-facing exception with the illegal instruction that was detected.
By making a name like ..._is_supported, we very clearly indicate to the user that "support" is something that can change, be extended, etc. Most of the time the user shouldn't have to call this function themselves, and it should be baked into the APIs of pyQuil natively.
(CC @lcapelluto @ecp-rigetti @mpharrigan)
üëç üëç üëç thank you!
This is done
@lcapelluto üëã
