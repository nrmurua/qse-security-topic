In pyquil 3, memory regions of length 1 could be written with a scalar value like so:
In pyquil 4, however, the memory map will not accept a scalar value:
producing the error:
If the intention of the authors was to force memory to drop support for the special case of scalar values, please close the issue.
Actually, I'm not even sure why this happens, shouldn't rewrite_arithmetic handle it?
@bramathon That is expected, the new MemoryMap only accepts sequences for values, rather than handling single length regions in a special way.
rewrite_arithmetic converts the program into a form where expressions containing a memory reference can be pre-computed, but the memory mapping is still needed to provide the values to compute those expressions.
Is this baked in? It will, unfortunately, break a fair amount of code.
Yes, it's enforced by the types in use in the Rust SDK. We could add a layer on the pyQuil side that wraps atomic values in a list before passing it off, but it would be re-enforcing a rough edge in the API, and would require an avoidable dictionary comprehension before execution.
My hope was that since we were removing program.write_memory, the break to requiring sequences would be trivial, but I realize your use case is a bit different.
I don't see why it would break any code that does not already need porting for v4. You need to replace write_memory(k ,v) with a memory map of contents {k: v if isinstance(v, Sequence) else [v]} if you do not want to change the handling of the up-stream v.
This is working as designed, going to close the issue.
