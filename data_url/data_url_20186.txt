Similar issue to #732 : Using gcc8 in Centos-8, Dilithium self-tests and KAT tests fail when running AVX2 code. On no other platform and neither using clang on Centos-8, this problem surfaces.
Dilithium self tests and KATs also fail for me on macOS with env CC=gcc-8 cmake -GNinja -DOQS_PORTABLE_BUILD=OFF ...
But not with CC=clang.
@baentsch:
Alright, I've modified the Dilithium 2 code to print out a bunch of intermediate values, and compared the output of tests/kat_sig DILITHIUM_2 when using CC=gcc-8 versus CC=clang.  The first difference seems to occur inside src/sig/dilithium/pqclean_dilithium2_avx2/rounding.c function power2round_avx, specifically the variable a0 ends up different when the code is executed using clang versus gcc-8.
Now here's where it gets trippy.  After I saw the difference by printing out a0 at commit 96aba2cf line 51, I added some print statements inside power2round_avx to print out the values of intermediate values in commit 603bffa.  But when I added the print statements inside the for loop for variables f, f1, and f0, suddenly Dilithium2 with gcc-8 output the same values as with clang and passed the  KAT!!!   I don't know enough about intrinsics to know what those operations are doing, but in the past for me, differences in behaviour when print statements are added/removed speaks to memory corruption.  I'll stop here and leave it to you / the Dilithium team to investigate further.
In 13580f0, I copied over the C version of power2round from the "clean" version of Dilithium, and it also causes the KATs to pass (at least for Dilithium 2, I didn't try for 3 and 4).  So using that could be a temporary fix if we wanted to get KATs passing and clear the build failures while the Dilithium team investigates the AVX2 bug.
@dstebila Thanks very much for this deeper investigation.
This issue now is further better documented than by email (and made reproducible outside of liboqs) via GitHub issue for the Dilithium team to investigate (see above). Maybe it's a compiler bug or indeed memory corruption (but then why doesn't this happen with gcc-7 or clang?).
During my absence and in case the Dilithium team doesn't provide a quick fix, please decide for yourself whether you prefer reverting adding the upstream Dilithium code (either via git or --possible at any time-- by not setting the DILITHIUM environment variable when running copy_from_pqclean) or keeping this with "caveats" for (at least) gcc-8 on some platforms.
Just confirmed: The Dilithium AVX2 problems persist also on platforms other than alpine when gcc-9 is used. I thus tend to recommend reverting the upstream Dilithium integration for the time being.
Just confirmed: The Dilithium AVX2 problems persist also on platforms other than alpine when gcc-9 is used. I thus tend to recommend reverting the upstream Dilithium integration for the time being.
Rather than reverting Dilithium upstream from pqcrystals back to PQClean, I've done a temporary workaround in #798 that uses the C rounding code rather than the AVX2 rounding code.  Once upstream Dilithium resolves their issue, re-running copy_from_pqclean will wipe out my temporary workaround and we'll be good to go.
I think we can close this.
