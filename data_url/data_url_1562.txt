As discussed with @tanujkhattar in #4362, creating a separate issue to track GateTabulation refactoring.
@Ashalynd As part of tracking the progress towards our Cirq 1.0 roadmap items, I wanted to check in on the progress on this issue. Could you start working on it yet?
Hi Tanuj, I had to put it on hold for a few weeks due to 80% work. Expect to create a PR this week.
Hey, a quick update: started working on it, fighting with a couple tests :)
Question: does it make sense to also move the code that is using GateTabulation now?
Optimizers like ConvertToSycamoreGates should stay in cirq_google and use cirq.GateTabulation object. So no, the google specific code using GateTabulation shouldn't be moved to cirq-core.
There are some nuances in moving the code to cirq-core, mainly around dealing with two_qubit_gates/math_utils.py. Ideally, we'd like to move / re-implement the methods present in math_utils.py to more appropriate locations in cirq-core. For example,
One difference in methods implemented in math_utils.py vs similar / existing methods in cirq-core is that most of the methods in math_utils.py are vectorized for speed. We should discuss the tradeoffs between consistency of the API with other similar methods and importance of vectorization for this use case. There are 3 options:
Thoughts? cc @viathor @dabacon @maffoo
xref : #4722
