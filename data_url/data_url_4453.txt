I would like to suggest including a feature for measuring in a different Pauli basis besides the computational basis, i.e. include an argument in the Measurement class qibo.gates.M(..., basis,...) such that
If basis = 'Z', pass
If basis = 'X', add a Hadamard gate automatically to rotate the state to the X basis
If basis = 'Y', add a Haddamard + S gate automatically to rotate the state to the Y basis
That would be very useful for several applications: computing expectation values "manually" (useful for educational purposes, closer to the experimental treatment of the quantum computing output) or quantum circuit cutting (which requires measuring and preparing the states on a particular basis)
Following this idea, I would also suggest automatically initializing all qubits in the |+>, |->, |1>, |+i>, |-i>, etc states. e.g. including some function initialize(basis=X, Y, Z, eigenstate = plus, minus) or similar.
Thanks for opening this.
I would like to suggest including a feature for measuring in a different Pauli basis besides the computational basis, i.e. include an argument in the Measurement class qibo.gates.M(..., basis,...) such that
If basis = 'Z', pass
If basis = 'X', add a Hadamard gate automatically to rotate the state to the X basis
If basis = 'Y', add a Haddamard + S gate automatically to rotate the state to the Y basis
The easiest way to implement this would be to make circuit.add(gates.M(*qubits, basis="X")) fall back to
One disadvantage is that this will affect the final state vector returned by the simulation, because the Hadamard gates will act on it even though they were not explicitly added in the circuit. This may confuse some users.
Following this idea, I would also suggest automatically initializing all qubits in the |+>, |->, |1>, |+i>, |-i>, etc states. e.g. including some function initialize(basis=X, Y, Z, eigenstate = plus, minus) or similar.
Would you like to have a stand-alone initialize function that returns the corresponding states as arrays, or would you like to specify it as initial state in the circuit, eg. circuit(initial_state="+")? Note that you can already use custom arrays as initial states to circuit execution.
For the circuit initial state, we could either do it by generating the corresponding array, or by adding the appropriate gates before the circuit. The latter would also work on hardware.
Regarding the measurement, if the user specifies to measure it on the "X" basis, then I don't see why they should look surprised about the state vector looking differently :)
To make things even more transparent, maybe adding another enhancement which is writing the state vector in the $X$ basis, i.e. using $|+\rangle$ and $|-\rangle$ eigenstates instead of $|0\rangle/|1\rangle$ (and similarly for $Y$ basis). That could be a feature to be added to the simulation of the wave function, and it's a linear transformation. Then, the user can select any combination of measurement and, in case they want to simulate the wave function, specify the basis (or similar) [Z being the default].
Regarding the initialization: I'm thinking about the second, adding the gates automatically. State preparation is not trivial at all in general. I believe there has to be a clear distinction between what you can do when simulating things (i.e. using arrays) and what is feasible experimentally. So IMO anything attached to circuit should be things that can be technically implemented in hardware.
I see that both procedures, namely initialization and basis projection, are pre- and post-processing operations that could be handled by helper functions defined outside the circuit API syntax. For example, we could provide a module for state initialization (via circuit, so hardware applications might reused these definitions), and similarly, post-processing transformations for base projections. I believe this approach is more stable because it avoids undesired changes affecting the final state vector and/or probabilities evaluation, and keeps the circuit API clean.
What do you mean by "post-processing transformations for base projections"? You rotate the state to the particular basis using some local gates, measure in the $Z$ basis as always and the $|0\rangle/|1\rangle$ have the meaning of the $|+\rangle/|-\rangle$ if you didn't perform that rotation. There is no post-processing.
Or do you mean measuring in $Z$ as always without any rotation and post-process the result to transform it to the $X$ basis? Isn't that more costly for large qubit systems?
We had an internal discussion with @igres26 and @stavros11. We agree to introduce the following enhancements:
Reopening this as point 3 from #720 (comment) is not addressed yet. Points 1 and 2 were resolved by #799 and #817.
