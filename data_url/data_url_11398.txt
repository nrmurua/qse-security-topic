Currently, the methods to calculate the derivative functions and the quantum Fisher information matrix (QFIM) (located in basebackend.py, the methods derivative_function and qfim respectively) accepts a QAOAVariationalBaseParams object and return a callable which accepts an array of parameters and output either the derivatives or QFIM. This is because the derivative/QFIM argument in scipy.minimize.optimize and our custom gradient optimisers expect a callable that takes in an array and outputs a vector/matrix.
Design wise, it might be more intuitive that these methods directly output the corresponding derivative/QFIM, given the QAOAVariationalBaseParams object, since they already contain angles/parameters.
Some possible solutions to be discussed:
Hi @shaohenc, are there any updates on this issue? Is this still relevant or is outdated?
This issue has been addressed by @shahidee44 in a previous update, where we have fixed the behaviour of both derivative and qfim to be callable that sit outside of the backend objects.
