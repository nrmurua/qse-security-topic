The cmake profile Optimized to build with -O2 etc, seems to break CMake convention. The Rust cmake crate has a automatic profile selection that expects Release instead of Optimized.
This seems to match https://cmake.org/cmake/help/v3.0/variable/CMAKE_BUILD_TYPE.html, which also suggests that #652 was abusing CMAKE_BUILD_TYPE a little bit...
@xvzcf What do you think?
I broadly agree. There's just a few small things I want to think about a bit more, and I was planning to get to this after the cpu features work.
As per suggestion by @xvzcf that I support:
My initial thoughts are that we should add another #define/CMake option to differentiate between portable and non-portable optimized builds
--> It would be good to decide what shall be 'Release' then: An optimised version running on all platforms OR an optimised version (possibly crashing on platforms without suitable CPU extensions). In any case it would be good to have CMAKE_BUILD_TYPES specifying either (i.e., both, alternatively) as a variant without dynamic CPU feature runtime checks is markedly faster.
So my suggestion for naming those would be "Release" for the fastest implementation possible and "Portable" for the optimised variant with CPU feature detection at run-time.
I correct myself: I just repeated the performance tests with and without run-time status tests on HEAD and the performance drop due to those bit-status tests is much smaller than I had seen before. So I rest my case: "Optimised" and "Portable" could well be the same thing: @xvzcf Please do more relevant things before looking into this micro-improvement.
This is no longer up-to-date then? https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs#cmake_build_type
Right, the statement is not quite accurate anymore: The catch-all -mnative has been replaced by CPU-specific optimisation flags at each target and those targets (aim to) test for run-time presence of those capabilities. Until this has been added to all algorithms, the statement that the resulting binary (built on a platform supporting all optimisation features like AVX2) may not be portable (i.e., crash on platforms without AVX2 in the same example) still is correct, though. Ultimately, that sentence should go, too, i.e., Optimised build binaries should run the fastest code possible on the platform it happens to run on.
I'll update the wiki once the changes are settled.
Closed by #726 right?
