I wrote the following test code in google3:
Checking out the sponge test log, the print message reads:
While I expected to get exactly 3 True's, their ordering does not make sense. Furthermore, if I change the dummy label test_label above to 1 (to run a genuinely new test), the new log's message is
So the ordering is not consistent between different tests.
Is this the intended behavior? Am I making a critical mistake in my usage of cirq?
Looks broken to me, I'll take a look.
Note you could replace the append by:
measure_string = cirq.circuits.Circuit([moment])
or even simpler you should be able to do
measure_string = cirq.circuits.Circuit()
measure_string.append(measure_gate.on(qubit) for qubit in qubits)
So if you pass in the qubits to the simulator, then the order should be what you expect:
_, result = simulator.run(measure_string, initial_state=state, qubits=qubits)
I can't seem to get it to change order like you saw yet.  But it does look like the default order for the xmon qubit isn't what you'd expect.
@Strilanc  we are using two patterns in cirq for qubit ordering: one you can pass in the order, and other you can pass in map from qubit to string which defines sort order.  We should probably be consistent (and we can easily add a helper in either direct). Which do you prefer?
I think the standard python thing is to pass in a key-computing function. I think if they don't pass in a function, then we should fallback to the qubit's __str__ after int-within-lexicographic adjustment (as is done in the ascii diagrams).
I think passing in a key-computing function is fine as one option, but it seems most natural to just pass in a list of qubits, and then get results ordered in the same way. I think that should be supported.
This is a duplicate of #290 , closing this and will use #290 to track.
