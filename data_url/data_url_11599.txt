When generating a Hamiltonian using PYSCFDriver for 3 H atoms and charge=1, the generated hamiltonian has FCI energy equal to that of a neutral H3 molecule.
this prints:
exact energy=-1.35073066
Furthermore, the ground state of this system has hamming weight 3, corresponding to 3 electrons.
Using the Gaussian9 package for finding ground state energy, we find
H3_neutral fci energy= -1.3507305683
H3_cation fci energy= -1.2741445
Furthermore, H3 cation should have 2 electrons, or hamming weight 2 in the jordan-wigner mapping.
The issue of h3 with charge=0 was recently fixed, this might be related to that issue? I do not quite understand the solution to this, but would appreciate any help!
Hi, when the 2nd quantized Hamiltonian is built out, since it has one and two- body creation and annihilation operators in its formation, we end up with states in the Hamiltonian for every possible particle configuration. The lowest eigenvalue in that Hamiltonian, ends up being the state with those atoms where the particle configuration (from none, to fully occupied) gives that lowest energy - this may NOT be the configuration you have entered. The NumPyEigensolver just gives the lowest energy period.
If you put k=6, or some number bigger than 1, as a parameter to NumPyEigensolver to get more of the states out you will see the one you expect there.
Let me show you a different way - if I used VQE + UCCSD ansatz, the ansatz will preserve (constrain the state space) whereby the number of particles and spin is preserved.
if you run the above you will see these two result sets. The first is from VQE and you can see in the output where the number of particles is measured on the final state that there are 2 and the energy is as expected. Contrast that with the next result which matches with your result and has 3 electrons.
Does this help explain things? I used the ground state energy app since it facilitated me doing the computations. Using the FermionicOperator directly as you have done is valid too of course - its what is used inside this energy app logic.
The PySCF issue you refer to was causing the computation to fail so you would not get that far. This has been fixed in master and in any case was not in a path that would have affected the integrals/hamiltonian.
Here, I printed the excited states for you so you have an idea (the method is deprecated as we have been refactoring the logic so you will see a few warnings if you run, but it still works.
And the result is - where you see the lowest energy state is degenerate here, the state, corresponding to the one you want, is listed there in the ones labelled excited states
@woodsp-ibm
Thank you so much, that completely clears this up! Really appreciate the help and for the detailed explanation
You're welcome. I'll close this off then.
