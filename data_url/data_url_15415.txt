
This is a snapshot from the textbook.

This is from runtime.
The same code shows different circuit in the textbook and execution time. Not sure whatâ€™s wrong with this? https://learn.qiskit.org/course/ch-applications/solving-linear-systems-of-equations-using-hhl-and-its-qiskit-implementation
Also, the solution states are different.
For the naive solution, is the circuit should be 4 qubits or 5? Thanks!
Update: If I change the extracting vector index:
"""
naive_full_vector = np.array([naive_sv[16], naive_sv[17] ])
tridi_full_vector = np.array([tridi_sv[16], tridi_sv[17] ])
"""
Now, I can get the exact solution same as classical:
full naive solution vector: [1.125 0.375]
full tridi solution vector: [1.125 0.375]
classical state: [1.125 0.375]
But if I try another example i.e., matrix = np.array([[1, -1/4], [-1/4, 1]])
and keeping other code the same, the solution won't match.
full naive solution vector: [1.00580738 0.32752595]
full tridi solution vector: [1.125 0.375]
classical state: [1.06666667 0.26666667]
Is this where the bug from:
https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/algorithms/linear_solvers/hhl.py#L384
Why does allow negative eigenvalues considering adding 1 more qubit in the circuit? If I set neg_value to False, the rendered result showed exactly like the example.
