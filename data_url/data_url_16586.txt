Qiskit uses little-endian convention for representing qubit order: q2 ⊗ q1 ⊗ q0
When doing unitary simulation corresponding to a gate/circuit (i.e. to obtain "the gate matrix") you have to make an implicit assumption about how the gate is applied. In my opinion the gate alone does not have a matrix, only when applied does it make sense to describe it via a matrix. For example, in the little-endian convention:
The current assumption of Operator(gate) does not fit the little-endian convention. It assumes the gate to be applied "from" q0, "to" q1. The assumption should be reversed I think as you want to apply from the MSB to the LSB. If we do this it will have the nice side effect that CNOT matrix will look like the textbook version (if there is such a matrix in the absence of operands).
This became very confusing for me when I was trying to understand why the heck QFT is not working like a normal Fourier transform. A correct Fourier transform is supposed to transform state |1> -> |0> + i |1> - |2> - i |3>.
But simply doing this we get:
I can fix this by ensuring that the QFT is applied "from" the MSB "to" the LSB.
i totally agree.
@chriseclectic pointed out something and I thought some more, and I think what I'm proposing here is not feasible unfortunately. Otherwise we would get different results from:
So in little-endian convention we cannot define Operator(CXGate()) to be
because CXGate already implicitly defines an ordering of its wires. CX is a 2-qubit gate - 0th qubit must be control and 1st qubit must be target. If we change this definition then we would have to write cx(target, control) everywhere, which is not what we want. So I think in little-endian we are stuck with
