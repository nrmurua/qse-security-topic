Currently Circuit is just a list and Circuit.execute() applies each gate from the list sequentially. Alternatively one can apply gates that act on different qubits in parallel, for example in
all gates would be applied simultaneously in a hardware implementation.
Mathematically it is optimal to apply gates sequentially rather than composing gates to a large matrix. The cost of applying M gates on N qubits sequentially is O(M * 2^N), while composing a 2^M x 2^M matrix and applying this is O(2 ^ (N + M)).
From an implementation point of view, it may be beneficial to group gates to moments (as in Cirq) and include multiple gates acting on different qubits in one einsum call. Note that both numpy and tensorflow einsum support multiple inputs. This would require to change the Circuit data structure a little bit and use a nested instead of a simple list.
I am leaving this open for now as its implementation would depend on whether we stick to einsum or switch to matmul or something else (eg. the result of #14).
Closing this as obsolete since we are not using einsum anymore. Strategies for optimizing variational layers of gates are discussed in #98.
