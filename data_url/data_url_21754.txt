artiq.tools.file_import uses deprecated importlib.FileLoader function load_module().
ARTIQ should not rely on deprecated standard library functions. importlib suggests using exec_module() instead.
Relevant code:

Further, this function call appears to be missing the parameter fullname in Python stdlib code.
Related Python stdlib code:
https://github.com/python/cpython/blob/7212148c95947b0fdfcb0c8e37d4357287bdb4bd/Lib/importlib/_bootstrap_external.py#L947-L956
Changing this will require some refactoring, because exec_module() doesn't have any return statement.
Changing this will require some refactoring, because exec_module() doesn't have any return statement.
How do you locate the new module that you just loaded at all?
NB: the Python module API is changing often, and tracking it creates significant work (as you are beginning to notice, it is also not straightforward to use).
see also #652
Changing this will require some refactoring, because exec_module() doesn't have any return statement.
How do you locate the new module that you just loaded at all?
Don't know what you mean by this or why you would want to locate the new module. I haven't looked into what load_module() is supposed to do.
why you would want to locate the new module
Because you have to return it.
Deprecated since Python 3.5: python/cpython@32439d6
following up. ping. Too deep in ARTIQ dependencies for my experience to fix.
Won't fix this without funding. Fixing it is pretty annoying and the current code works properly.
