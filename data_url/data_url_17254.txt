Running the program below yields an error.
The reason is that the same pass manager object is used for transpiling both circuits.
Note that even thought pm.reset() is called in between the invocations, it is not able to reset the pass instances contained within the pass manager, which are themselves stateful. In this case, pass3.layout is modified when it is invoked once, which affects its future invocations.
I think passes should not have global state.
I think this is solved. Can you check it again? pm.reset() was removed in https://github.com/Qiskit/qiskit-terra/pull/3286/files#diff-c62cce1ef62cc854fa7269f6c2c85dd8L193. And that refactor probably solved it. Feel free to reopen.
The general problem is still a potential issue (though I'm not aware of any other concrete instances, so I think low-priority is fine.)
Even after #3286, pass instances are only constructed once, and re-used if the pass manager is re-run, so if any pass writes something to self (other than the arguments to its constructor), it could affect future runs. e.g. The issue in this case with EnlargeWithAncilla was fixed in #3363 by the removal of an assignment in self.layout in pass.run.
hmm... you are right.
An example would be awesome tho.
I'm going to close this issue now as old.  Several of Qiskit's built-in transpiler passes are still stateful (and certainly there are plenty that aren't re-entrant), but they all should be resetting any per-run state once their run is called.  We don't require passes to be re-entrant or otherwise concurrency safe from the same instance.
If there are any existing passes that cause problems when re-run, we can open specific issues for them to provide fixes.
