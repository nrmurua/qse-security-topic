gives
This is similar to #2152
I would expect this to work.  Especially since functions like np.random.randint() and np.random.permutation() come in handy when building random circuits, e.g. Quantum Volume.
I label this as a bug because we should be compatible with the dtypes from the foundational numerical Python library.
Similar to the one in #2152 by @chriseclectic
I think this casting to python ints should be on the user side. Numpy is too out of our control to make us dependant on it.
Our methods are already very polymorphic. With each new input type, they are getting harder and harder to maintain.
I believe we are already dependent on numpy. In the scientific python community, everyone plays nice with numpy. This is simply extending the isinstance check(s)
We check for int type 54 times in the code.
Ok cool. Now we know how many things need to be modified.
Parameters can also be lists... that means that we should also support  circuit.h(np.array([0,1]))? What about circuit.h(np.array([[0,1],[2,3]]))? The answer can be yes to everything, but there is a performance and maintainability price to pay here...
I don't see why we can't follow an approach similar to #2288 here, especially after the consolidation in #2282 . I agree that users having a np.int is probably common enough, and its clear what the expected behavior would be.
It would not be as clean as in #2288 because the extremely polymorphic nature of gate arguments. But if the line limite is in numpy ints, we can explore options. I'm open to be convinced. Shall the issue be reopen or does @nonhermitian decided was a bad idea?
I'm just worried to open the numpy-type-hell door to an already very cluttered API. CMV
Your comment is not very constructive. The NumPy array typing is very logical, and extensible, allowing you to leverage fast memory-aligned C-arrays via Python.  It is incredibly fast, and allows for array indexing tricks like slicing that make no memory copies.  These benefits, among others, is why every single scientific package in Python (including this one) uses it.  I have closed this issue because you do not seem to want users who use the tools in NumPy to have a seamless experience interfacing with your own software.
@1ucian0 's concern is not a baseless one (considering the difficulty of #2282) and adding support for numpy types in a maintainable way would require some thinking, but I certainly don't think its insurmountable, and given the community interest (e.g #2152, #1898, #2056, #2059, #2151, ...) it seems worth pursuing.
I fully agree that terra should "plays nice with numpy". As I said in #2152 (comment), probably the cast-before-validate approach can be a good natural limit in the API's input types.
However, I would like to emphasis that a limit in the input type is inevitable (and repeat that there is a performance and maintenance price for casting and type checks).
I will try to add the idea of a best-effort casting in #2282. Reopening while there is a discussion.
The best-effort-type-casting approach:
1ucian0@6b36e5d
closed via #2288
