The problem is how to best implement a sentinel representing the real number 0 in gradient.py and hessian.py.
Currently what I call an "opflow expression" ~Zero * One (corresponding to <0|1>) is used to represent zero.
However, more or less anything could be used for the purposes of gradient.py. Some problems with using ~Zero * One
repeatedly are
Some ideas are
For the immediate use (gradient.py) the only needed property of the sentinel is that I can create two instances (they may actually somehow refer to a single object) and compare them with ==. However, opflow expressions have the parent class OperatorBase which requires that several methods be implemented, only three of which are included above. Implementing this would require making choices about things (does asking for the number of qubits return zero, or raise an error, or ....?) that are at present not needed. An advantage is that such a class would be meaningful in other contexts. In any case, it seems pretty clear that such an object should not be exposed in the API unless and until it becomes clear that it would be useful in end-user code.
A class ZeroExpr that does not inherit from OperatorBase. This would be much easier and less contentious to implement because it would require, in the first implementation, no methods beyond __eq__. It might also initially be visible only within the gradient code.
Use 0.0 as the sentinel.
An example of the current solution is
https://github.com/Qiskit/qiskit-terra/blob/25b47af83f14afb3441d7b2c1bd31bda93e3549d/qiskit/opflow/gradients/gradient.py#L132-L137
Opflow is now deprecated and will be removed in the future - no new features are being considered.
