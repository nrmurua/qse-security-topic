The transpiler requires scheduling be applied to circuits for a backend if delays are present even if it has not requested. Current IBM backends replace all IDGate with delays making this a common problem. This is further complicated given that Qiskit's scheduling algorithm does not model the scheduling behaviour of backends (such as measurement grouping) and is incorrect.
It still used to be possible to use delays if they were a multiple of 16 as the backend.target.timing_constraints.pulse_alignment and backend.target.timing_constraints.acquire_alignment were the same. This is no longer the case for ibm_seattle.
Which has
Execute
The program should transpile successfully.
Either relax the timing constraints of https://github.com/Qiskit/qiskit-terra/blob/3476ef065e507be880c205b44f77d56d2c44bccb/qiskit/transpiler/passes/scheduling/alignments/check_durations.py#L65 or update the default transpiler to not require this pass for just delays if scheduling is not specified.
Backends ensure that any circuit is valid to be executed, Qiskit does not need to do this.
It should be noted that:
does transpile, but this should not be required for usage of the backend. The default options should be sufficient to transpile for the backend.
Note that IDGate is not a supported basis gate for IBM hardware anymore and has been deprecated in favour of delay operations, see here for how this has been implemented.
Related issue #8985
What would you consider ideal behavior for this use case (ignoring the delay is coming from a transpiler pass inside the ibm provider is adding but more generally)? The delays in this case has a duration of 120 which is not cleanly divisible by the acquire alignment constraint the backend is reporting so Qiskit can't be sure up front that the delay will result in a valid circuit that conforms to that alignment constraints in the target (short of scheduling). Although I guess we could add a check that there is no measurement on the qubits in question (like in this case) and skip the acquire_alignment check there, but that seems like more of an edge case specifically for this example than a general thing we'd expect to come up frequently. If you're saying the backend will ensure this alignment for us and qiskit doesn't need to do anything then we should update the backend to not report these alignment constraints. The job of the transpiler is to transform the circuit into something that conforms the constraints the target backend is reporting about itself. If we don't need to worry about this because the backend will fix this on job submission regardless of any delays now, then the backend shouldn't say there are alignment constraints and qiskit won't worry about this anymore. But, as long as there are reported alignment constraints the transpiler's job is to try and transform the circuit to conform to those. That's why IMO, I would just have the transpiler trigger scheduling instead of raising an error here. This should only come up if there is a an unaligned delay in the circuit and at least from my perspective if I did that as a user I would want transpile() to transform the circuit as needed to make it runnable which if I randomly put a delay on a qubit would mean scheduling it to ensure the timed circuit was valid for the backend.
That all being said I'm thinking a better short term workaround here is to have is maybe to look at restricting the custom ibm provider translation stage to only run when id is not in the target. Right now seattle is at least reporting it supports running id and just passing it through will work fine. Although, this isn't a real fix and we should definitely figure out a path forward to resolve this better in Qiskit which I think is two steps:
But I expect that'll be a longer change that probably won't be something we can accomplish in 0.24.0. But updating the provider to only run the id -> delay conversion pass if id is not in the supported operations seems like an easier thing to do short term.
IIRC the implicit validation for delay duration was motivated by T1 experiment, where experimentalists specified the delay in SI units and used to get backend error. However, in recent Qiskit Experiments, we implemented a logic to format delay vaues with these backend constraints (to be multiple of GCD of pulse and alignment constraint), before assigning a value to a circuit. Note that this approach is much more reasonable because we can use modified delay values for data analysis, i.e. T1 curve fitting.
From Qiskit Experiment perspective, disabling the duration check should be fine in practice. Note that if they write T1 experiment without using the framework, they may encounter frustrating backend error after long queue. However, basically I agree with Matthew. We should validate duration as long as backend provides some constraints.
@mtreinish
The job of the transpiler is to transform the circuit into something that conforms the constraints the target backend is reporting about itself. If we don't need to worry about this because the backend will fix this on job submission regardless of any delays now, then the backend shouldn't say there are alignment constraints and qiskit won't worry about this anymore
yes, and this has always been the case. The missing application of scheduling was only an issue for backends in two cases.
For case 1. the current scheduling passes are overconstraining (and incorrect). For case 2. this should be opt-in and not required by default (especially for case 1. as scheduling is predominantly being used for).
