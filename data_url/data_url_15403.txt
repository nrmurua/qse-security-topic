The qasm generated has multiple gates named the same thing. The parser can't handle because it doesn't know which one is valid.
"Running this will give you the error"
QuantumCircuit.from_qasm_file("qpe.qasm")
The phase should be able to be applied through the for-loop without running into a duplicate error.
No response
In the function CPhase(angle, exponent) a quantumcircuit is defined with only one qubit. If you add a  line with for qc with 4 qubits it will give you the qasm file.
OPENQASM 2.0;
include "qelib1.inc";
gate mcphase(param0) q0,q1 { cp(pi) q0,q1; }
gate mcphase(param0) q0,q1 { cp(pi/2) q0,q1; }
gate mcphase(param0) q0,q1 { cp(pi/4) q0,q1; }
gate controled_phase_0_7853981633974483_1 q0,q1 { mcphase(pi/4) q0,q1; }
gate controled_phase_0_7853981633974483_2 q0,q1 { mcphase(pi/2) q0,q1; }
gate controled_phase_0_7853981633974483_4 q0,q1 { mcphase(pi) q0,q1; }
qreg q[5];
controled_phase_0_7853981633974483_1 q[0],q[3];
controled_phase_0_7853981633974483_2 q[1],q[3];
controled_phase_0_7853981633974483_4 `q[2],q[3];```
Hi @Yelissal, thanks for the report.  This happens unfortunately because our QASM 2 exporter really can't handle parametrised gates very well (see #7335), and ControlledGate (which appears when you use the .control() method) has a lot of problems converting itself to OpenQASM code.  Right now, the only real work-around is to use qiskit.transpile with a basis_gates argument to re-synthesise the circuit in terms of more basic gates.
We're working on overhauling how all parameters and QASM conversions happen, but it's a bit of a slow process, because it's concurrent with a lot of new features.  I can't promise when we'll have a direct fix.  A more limited fix for your particular use-case might involve us reworking ControlledGate.qasm to correctly understand when gates need to be renamed (QuantumCircuit.qasm does this for most gates, but ControlledGate overrides the behaviour), but that will still be quite a tricky endeavour unfortunately.
