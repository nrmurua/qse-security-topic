Is your feature request related to a problem? Please describe.
I would like to check the behavior of the parameter index in the function QubitCircuit.add_gate()
In qutip.qip.QubitCircuit.add_gate(), there is a optional list type attribute called index.
This seems to be used to insert gates in the middle of the gate list (qutip.qip.QubitCircuit.gates).
The corresponding code is shown below.
In this code, if index contains two or more elements, then the insert positions would be shifted one by one.
Is this an expected behavior?
In the current code, the positions in index would not indicate the original positions during the insertion loop. (e.g. When we want to insert a gate A to gates=[B0,B1,B2,B3,B4,B5] in index=[0,2,3], then the output gate list would be gates=[A,B0,A,A,B1,B2,B3,B4,B5], not gates=[A,B0,B1,A,B2,A,B3,B4,B5].)
In addition, the variable num_mes is unused throughout the code.
Describe the solution you'd like
If this is not the expected behavior, and if the expected behavior is like the latter gate list in the former example, then we can fix this part into:
Additional context
This issue is also mentioned in the PR #1489 .
Thanks for the issue @BOBO1997
I agree that it seems a bit odd. One can make an empty list, append old gates and insert new gates one by one to the new list.
Yes, that is one of the solutions.
This issue could be included in the refactoring task of the quantum circuit library.
Perhaps a bit more computationally efficient solution (although, it probably wouldn't make more than a marginal difference, at any reasonable order of number of indices, at which insertion is to be performed): insert at an index i + k , where i is the original index as per the index list, and k is the number of insertions performed so far, as part of the insertion loop.
I'll raise a PR with the proposed fix.
Update: The PR in question is #1892.
I've just noticed that @BOBO1997's proposed solution is effectively the same as what I've implemented in my PR. I also like that his solution takes care of possibly unsorted inputs - I've borrowed that idea and updated my PR accordingly. Thanks, @BOBO1997!
I've also noticed that there are multiple instantiations of the same gate object upon each loop iteration, but I suspect those probably need to be kept distinct, unless the desired behaviour would be that changing one of those objects affects equivalently the other ones. In my PR I have the gate instantiation behaviour as it originally was (i.e., not adding references to the same gate object, but creating a new object upon each iteration). Please, let me know if this should be changed to perform only one instantiation and insert multiple references to the same object instead.
@BoxiLi, I hope my #1892 doesn't interfere with qutip/qutip-qip#15. Please, feel free to close/reject the PR, if it does.
