In order to make the SPSA optimization algorithm run faster, it would be helpful to add GPU support. Specifically, running the vector manipulations on the GPU would decrease the runtime. The angles (parameters) for the gates in my quantum circuits are repeatedly updated with the optimized parameters many times until the eigenvalue of the Hamiltonian (energy) converges upon a value. My circuits themselves are running on the GPU by changing the options of the backend, but it may be more efficient to have support for the SPSA as well. Is there any support for this currently?
Thank you.
Highly related to this discussion in Qiskit Slack Workspace https://qiskit.slack.com/archives/C7SJ0PJ5A/p1686838687866549
This was the response I put there
Hi, while the Aer simulator (native C/C++ code) supports execution of circuits using a GPU the Qiskit SPSA optimizer is simply Python code running under the Python interpreter.
Have you benchmarked what you are doing and find its spending a lot of time preparing the circuits compared to running them? How are you executing the circuits given the optimizer values - Aer can do parameter binding on its run method that is more optimal than binding the parameters before passing a bound circuit - see https://qiskit.org/ecosystem/aer/stubs/qiskit_aer.AerSimulator.run.html There are also a couple of PRs open in Qiskit at present looking to improve the binding performance. That's about all the thoughts I have...
The classical logic in the SPSA optimization only computes 2 shifted parameter vectors, plus the parameter update. If you have d parameters, the current implementation uses
Some parts here could be optimized, but compared to running the circuits, these operations are extremely fast and negligible. Adding GPU support here would probably not make a noticable difference.
I do not think this is anything we are interested in so closing it.
