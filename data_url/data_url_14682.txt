I have a list of 74 circuits. When I submit them all as a single job, I get the titular error. But if I submit any one of the circuits from the job individually, I do not get the titular error.
First, I try to submit all my circuits into a single job. Note that "backend" is a backend object of my own custom class and "submit_job" is a method that does the obvious thing. I have included the source code for this at the bottom for clarity.
This gives the a long error, but I've clipped the bottom with the Attribute Error here:

If I submit each circuit in job_list individually, I get no such error. I can even check on ibmq status that my jobs were submitted correctly
The job should submit when given a list of circuits if each individual circuit doesn't throw an error.
I don't know enough about what's going wrong now to suggest anything.
Hi @naezzell, thank you for reporting this issue! Can you please provide some additional information:
@jyu00
what is your qiskit-terra version?
0.16.3
which backend were you using?
Armonk
based on the exception message, I think the error occurred in assemble(). Can you confirm this?
You're on the money.

does running multiple circuits work if you set the environment variable QISKIT_IN_PARALLEL=true? This would turn off parallel processing in assemble and thus bypass pickling.
I tried running export QISKIT_IN_PARALLEL=true in terminal and then running the code again, and it didn't work. But frankly, I'm not sure how to verify that within my Jupyter notebook instance, that the environment variable is set properly.
I also figured out that running the following
still gives the same bug, so it can't have to do with the incompatibility of two different circuits/ schedules/ etc...
@taalexander @lcapelluto Have you seen this before? I transferred this issue to terra because I think it's related to the actual pulse used and not the pulse library.
The problem appears to be with my custom class wrapper over QuantumCircuit and how it interacts with assemble. To this end, I found two band-aide solutions (although, they are pretty good). Just a reminder "armonk" is an object of my own custom Backend as well, but armonk.backend gives me the usual think obtained via provider.get_backend('ibmq_armonk').
This works same way as above, but instead of turning into a QuantumCircuit, I use build_schedule to turn into a schedule.
By the way, add_x is my own custom way to add the X gate as well. It gives the following circuit:

I do this because it's important to maintain certain phase relationships, etc...
But what's extremely peculiar is the following. Suppose I start a fresh Jupyter notebook up (no instances of assemble have been called yet). Then the following code works. Note that I am adding the "standard x" that comes with QuantumCircuit API and not my custom add_x method.
If I start a fresh instance, as I've reported above, the following breaks with titular error
But then, if I run the following, I get an error:
So it seems the problem is partially with my custom definition of x--but then once assemble breaks once, the issue persists even for circuits that would normally not throw an error until I clear my cache (i.e. restart Python). This is very weird.
