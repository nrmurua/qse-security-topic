Executing the lines
yields
However, according to Eq. (19) of arXiv:1208.5986, the second term should have a plus rather than minus sign. @conta877 or @msteudtner do you have any idea why?
Yeah I agree with you based on eq 19.
I'll wait @msteudtner to comment on this.
I'm quite sure that you're mapping creation operators to annihilation operators and vice versa. This cannot be tested for by looking at the spectrum (particle-hole transformations are just a change of basis). However, if we map all the way to sparse matrices, then we can initialize a state with only mode 1 occupied, and try to annihilate mode 1. This should give the vacuum state, but instead it just gives the zero vector:
yields
Note that in this situation the initial state is represented by the string 01 in both the Jordan-Wigner and parity bases.
We can also just initialize the vacuum state and try to create a particle in mode 1; this also incorrectly gives the zero vector.
yields
it is isospectral. sign is not flipped in eq21. (the annihilation operator)
This is actually a pretty deep bug - awesome catch @kevinsung
In the parity operator way it is defined currently the decoder is not the inverse of the encoder because its mod2.
I believe the way this should be handled is when there is a -1 in a decoder matrix, in linearization one should look at its absolute value to introduce the qubit variable and its sign to add 1.
I'll push a suggestion that I think @msteudtner should review.
This also means that for linear transformations the best practice would be to define the decoder as the inverse of the encoder.
It seems that you want the inverse over the binary field, and not the inverse over the real numbers. Is there an intrinsic problem with assuming all decoders are input as zero-one matrices (over the binary field)?
In other words, is there any place in the code that the encoder and decoder matrices interact with each other and we actually have to worry about arithmetic being mod 2 instead of over reals?
yeah I'm very wrong - they are still inverse of one another as binary. My fix might not be the right sign fix here then.
Yes, the enc_mtx and dec_mtx defined in parity_code are indeed inverses modulo 2.
I think the big clue here is that creation operators are getting mapped to annihilation operators and vice versa, so we need to think about what could be causing that. Other than that, the mapping seems perfect.
It turns out that this issue is not unique to the parity code. Even for the Jordan-Wigner, it is mapping creation operators to annihilation operators and vice versa:
yields
As you can see, the two operators are different. After we fix this, I'd like to see a test like op1.isclose(op2) should evaluate to True.
oh yeah hehe,  I just noticed myself. I have an idea where the problem is. I feel though that I have that one checked already a thousand times.
Very good catch, @kevinsung !!
This is an interesting example of a bug that can't be caught by checking the spectrums of operators!
indeed. I can fix it after fixing my jetlag. I'll keep you updated.
Thank you!
#254 fixes the issue.
I will not work on stuff until after my second cup of â˜•
again, this is a great catch @kevinsung
Closed by #254 .
