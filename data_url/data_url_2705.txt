Blocking #876
Reminder: Revert  PauliStringPhasor(pauli_string, half_turns=round(half_turns, 10))) to PauliStringPhasor(pauli_string, half_turns=half_turns) in cirq/contrib/paulistring/convert_to_pauli_string_phasors.py line 86-87 after this has been implemented.
What's the best way to implement this? Here's a prototype: Looping though all the PauliStringPhasors and calling isclose(), which calls round() on them.
In pauli_string_phasor.py
In circuit.py
I think we'd do this with a protocol such as _isclose_ or _is_approximately_equal_, and a global utility cirq.isclose or cirq.approx_eq. The method would take atol and rtol as the numpy methods do, and then each gate would be responsible for knowing how it compares.
We might be able to make a variant of cirq.value_equality for this task, which would make it much easier.
Check if numpy has a magic method already for isclose. If so, use that.
One tricky thing to watch out for is values mod K must be approximately equal when near the wraparound, e.g. -pi ~= pi for radians.
Approximate equality is now accessible through cirq.approx_eq() protocol. It is being introduced for EigenGate in #1275 and for matrix gates in #1276. It fall-backs to regular equality if neither SupportsApproximateEquality or _SupportsValueEquality protocols are implemented. As far as I remember from conversation with Craig Pauli strings are being refactored and code that is mentioned to be reverted is going to change.
Can we close this issue, is there something still to be done inside of PauliStringPhasor?
@Strilanc Ping.
Doesn't Circuit still need to implement _approx_eq_ to finish this?
Ack, I'll do this by Monday (perfect motivation to get back to Cirq).
I see that I also need to implement _approx_eq_ on Moment which will just delegates to _approx_eq_ on iterable of Operation.
For Device I'll just use type-equality?
If you think that some other parts of Cierq could also use support for _approx_eq_ please let me know, I'm not following everything what is going on now...
circuit and moment supporting it is sufficient
Created #1465.
I see there is also CircuitDag, shouldn't it have support for approximate equality?
@Strilanc  This looks closable
Pinging @Strilanc for @mrwojtek's question (CircuitDag needing support for approximate equality)
@Strilanc Ping +2
We don't need CircuitDag support to close this. Thanks for the pings. üëç
