It is a very common occurrence that a user wants to get the ideal statevector for a circuit, but also send it to a device to get counts. I'm seeing a lot of functions around (Ignis for example) that generate instances of qc and qc_m for these cases.
I think the QuantumCircuit class should have a simple method (circuit.measure_all()) that measures all qubits. (This would add a new ClassicalRegister to the circuit).
We probably also want a measure_active() to measure only non-idle qubits, because in some cases we don't want all the extra 0s that get measured.
In addition we may also consider a circuit.remove_final_measurements() that does the opposite.
If circuit.measure_all() would be adding a new ClassicalRegister to the circuit, would circuit.remove_final_measurements() remove the ClassicalRegister? If yes, would circuit.remove_final_measurements() be allowed to be called without first calling circuit.measure_all()?
Thanks for taking on this issue @Matt-Stypulkoski.
If circuit.measure_all() would be adding a new ClassicalRegister to the circuit, would circuit.remove_final_measurements() remove the ClassicalRegister? If yes, would circuit.remove_final_measurements() be allowed to be called without first calling circuit.measure_all()?
Yes I would say it should remove the final measurements as well as the classical bits they measure into. If called on a circuit with no final measurements, it should just not do anything.
There are some subtleties (i will check the PR, but just mentioning here):
It would be good to have some tests for these corner cases.
I'm pretty sure my PR doesn't fulfill this, so I'll have to rework that method to allow that. I'll add [WIP] to the PR for now while I work on it.
Thanks for the input!
