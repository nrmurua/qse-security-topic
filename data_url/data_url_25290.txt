The main objectives of this stream of work are:
1. Add utilities to compare and modify transport graphs.
 In _core/data_utils/redispatch/patch.py, implement
def apply_electron_updates(tg: _TransportGraph, electron_updates: dict)
def copy_nodes(tg_old: _TransportGraph, tg_new: _TransportGraph, nodes: List[int]):
 In _core/data_utils/redispatch/diff.py, implement
2. Add core support for redispatch.
 In data_manager.py, implement
def make_derived_dispatch(parent_dispatch_id: str, json_lattice: str, electron_updates: dict = {}, reuse_previous_results: bool = False, )
If json_lattice is nonempty:
If json_lattice is empty:
 Reorganize the code for retrieving previous Results:
This should check if the dispatch exists in the Lattices table, and if so call _result_from (essentially the logic in the handler for get_result).
 Enhance dispatcher.py:
Do not enqueue the task for for execution. Users can tell if an electron was reused from the previous dispatch if it was completed with zero elapsed time.
3. Expose redispatch
In entry_point.py, implement
async def run_redispatch(dispatch_id: str, json_lattice: str, electron_updates: dict, reuse_previous_results: bool) -> str
Implement the async POST handler in _service/app.py:
