Dear developer,
While compiling CP2k with GCC 7.2, I ran into:
/trinity/opt/apps/software/CP2K/cp2k/exts/dbcsr/src/utils/dbcsr_btree.F:39:46:
$:ts
1
Error: Pointer initialization target at (1) must have the SAVE attribute
/trinity/opt/apps/software/CP2K/cp2k/exts/dbcsr/src/utils/dbcsr_btree.F:39:46:
$:ts
1
Error: The element in the structure constructor at (1), for pointer component ‘p’ should be a POINTER or a TARGET
What is this syntax supposed to do anyway?
Cheers and thanks for your time!
Lukas
You have to give more details on that. How are you compiling CP2K? Could you report the command you are using, the arch file, the logs, and anything else can help to understand your problem?
We do test CP2K with GCC 7.2 and we don't see such an error. That particular file is generated by FYPP...
Hi Alazzaro,
thank you for you quick reaction! I aim to install CP2K on our cluster so that the geochemists can use it to run their simulations.
I have followed this approach:
This presented the error. I have directed the output and error of make to make.log and it attached here. I have zipped all local architecture file together for your convenience.
local.zip
make.log
Thanks again!
Lukas
Let's go in order.
I would go for only
make ARCH=local VERSION=sopt
Then, I see at the end of your log:
Somehow, the GCC installation went wrong. Could you check if which gfortran gives you the right gfortran installed by the toolchain?
VERSION=sopt
works perfectly!
Executables are being generated in: cp2k/exe/local
Only version sdbg and pdbg result in the error.
(11:04 lukas@login01 finclude) > which gfortran
gfortran is /trinity/shared/apps/tr17.10/x86_64/gcc-7.2.0/bin/gfortran
(11:36 lukas@login01 finclude) > gfortran --version
GNU Fortran (GCC) 7.2.0
I have compiled many other things, some of them very large software projects, with this very same installation of gfortran, although maybe CP2K uses a feature that was somehow never applied in any other of the codes.
I think I am good to go, for now, although I am still a bit curious why the debug builds fail and the others do not.
Thanks you for your expertise, and my apologies for being rude in the first post.
Well, just as double check, was the GFortran compiled by the toolchain?
You say it is
11:04 lukas@login01 finclude) > which gfortran
gfortran is /trinity/shared/apps/tr17.10/x86_64/gcc-7.2.0/bin/gfortran
while the toolchain installation is under:
/trinity/opt/apps/software/CP2K/cp2k/tools/toolchain/
Is there any GCC directory under the CP2K toolchain?
You can also check if /trinity/opt/apps/software/CP2K/cp2k/tools/toolchain/install/setup does set the right path to GFortran. Then, you are really curious to debug, you can try to compare the two arch files
arch/local.sdbg
arch/local.sopt
and by adding some of the compiler flags to the .sopt until you don't find what's causing the error...
Anyway, debugging version are not meant for production, so you are fine.
Can reproduce this bug with the toolchain-provided arch file for sdbg/pdbg and gcc-7.3.1 on openSUSE LEAP 15.
@Hooiberg wrt your question about this syntax: the cited line is meant to be parsed by Fypp, the Fortran Pre-Processor. Some of the expanded macros/code inserted by Fypp together with one or more of the extended warning/check-flags from gcc trigger a compiler bug.
The compiler is aware of the pre-processing being done and shows the source line as the source for the error instead of the pre-processed source.
@alazzaro There is no gfortran (that might be different) in the toolchain directory. The only dependencies installed are:
arch              gsl-2.5             libint-1.1.6    openblas-0.3.5   spglib-1.12.1
cmake-3.13.4      hdf5-1.10.4         libxc-4.3.0     scalapack-2.0.2  tsan.supp
elpa-2017.05.003  json_fortran-7.0.0  libxsmm-1.10.0  setup            valgrind.supp
fftw-3.3.8        lapack-3.8.0        lsan.supp       sirius-6.0.0
Also, cp2k/tools/toolchain/install/setup does not give a preference to another gfortran in $PATH
Following your idea of comparing the two arch files, I notice that the culprit is the flag
-finit-derived
in FCDEBFLAGS
When removed, my debug version compiles as well...
@dev-zero Thanks!
(I run on CentOS 7.5.1804, by the way)
there are some other issues with -finit-derived and GCC prior to 8.3 leading to ICE:
... which means that we have to bump GCC to 8.3 in the toolchain if we want to keep that flag.
Plus we have to get a MWE and see whether we are actually doing something illegal the way we setup the structures/pointers or whether the code injected by GCC to implement the initialization is faulty.
@Hooiberg thanks for the analysis!
I will try the whole installation process with a new GCC. May take a few hours...
...will try this again when our system admin is back from holiday, on Monday. Need to compile some other things with GCC 8.3 as well, to match (openmpi, blas and lapack, etc), and things are becoming a mess without admin permission ;-)
I think Target Milestone: 8.2 in b/82972 means that it's fixed in version 8.2. That would make sense because it's the version we're currently using and it seems to work fine. Nevertheless, we should upgrade to GCC 8.3.
Closing this issue because it is a bug in the compiler, no related to CP2K
