As the other leg of #44 and maybe a partial solution to #862 depending on the gate sets - as we discussed on today's sync meeting, a QASM importer would be useful.
I'm happy to design and implement it.
The issue of specifying a gate set shouldn't come up when importing. Just try to match the gate specified in the QASM as closely as possible, and for now fail if there's no equivalent in cirq.
@Strilanc  - this is my current understanding. Can you please comment?
I'm leaning towards Option 2 in terms of lexer/parser infrastructure.
Let me know what you think!
The following call will create a circuit defined by the input file. Cirq takes care of opening, reading and closing the file.
The following call will create a circuit defined by the input QASM string:
Note: As the standard  Quantum Experience standard and user defined gates (qelib.inc) are all defined based on U and CX, theoretically we could just use cirq.QasmUGate, cirq.CX based on their definitions, but that would require supporting the custom unitary gate control statement and also explicitly mapping to cirq gates is going to result in a cirq-native circuit.
For a quantum register qreg qfoo[n]; the QASM importer will create cirq.NamedQubits named qfoo_0..qfoo_<n-1>.
For a classical register creg cbar[n]; the QASM importer will create measurement keys named cbar_0..cbar_<n-1>.
1.a - Implement CirqBackend
Similar to CircuitBackend we could implement a CirqBakcend and reuse the nice qiskit Lexer and Parser infrastructure.
However this would introduce dependency on qiskit's internals that might break unexpectedly. Their master branch doesn't even have the Unroller infrastructure anymore. Convenient (if works!) but scary.
Also, as we are scoping our QASM importer to not support custom gates, conditionals, etc. our parsing and execution logic could be significantly simpler.
1.b - Reuse qiskit's QASM AST
qiskit is using PLY that is easy to use and relatively stable (at least they still have it in master!). We could just iterate through the AST, and error out on unsupported nodes.
Benefit:
Con:
We have to evaluate some frameworks for this (e.g. qiskit is using PLY, that looks great but there is a ton of others, including ANTLR that can generate a python parser from a grammar).
Benefit:
Con:
This sub-grammar is simple enough that we can do something similar to how pyzx did it in their QasmParser.
Benefit: quick and easy
Con:
