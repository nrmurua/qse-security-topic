After executing a job on qiskit, the typically procedure to get the measurement data from the quantum computer is to call get_counts() like so...
If the final state is, for example, $| 01 \rangle$ then '01' would be the only key in counts. For some analyses, it would be very useful if the returned counts dictionary had 0s for all the states that were not measured. Maybe something like
counts = results.get_counts(pad=True), and counts would then be counts = {'00':0, '01':100, '10':0, '11':0}
The problem with this option is that it has exponential requirements of memory to produce the final dictionary, which is perhaps even more unexpected for the user.  There has been some movement on this, though, and it's possible we will merge it as an option, like you suggested: see #5205.
In the mean time, if you really want to construct such a dictionary, you can do
to do it manually, or do counts = collections.defaultdict(int, **counts), but this will return 0 for any key not in the dictionary, not just valid bitstrings (see also the discussion in #5205 for more pitfalls).
Excellent, thanks!
Would #5205 be a reasonable solution for @ajrazander ?
I read over #5205, but I don't understand what changes were made. How will counts behave now?
If you try to get valid bitstrings from it, it will return 0 if no counts were seen (and obviously return the correct number if the state was seen).  You wouldn't need an option for it to work; it'd do it by default.  Things like print(counts) won't show the 0s, though - that would involve the exponential behaviour that we can't safely include.
Ah ok, I see now. Yes, that behavior is even better! Thank you!
