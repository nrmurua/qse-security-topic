When an H (or S, or inverse S) gate can't be commuted around controlled phase/invert buffers, there's no fundamental reason that the current non-commuting buffers, and any X/Y basis transformation "under" them, can't be pushed into a queue. Most of the time, this just "kicks the can" of entangling and gate application overhead "down the road." It's also adds significant code complexity. I'm starting to wonder if it would give at least some small fundamental overall improvement, though, as on random circuit benchmarks. By queuing multiple layers of buffers, there is still the opportunity to commute and combine around and with them, with subsequent gates. I originally thought this was implementation overkill, weighed against a hypothetical efficiency benefit that might be small or even negative, but I'm curious to try it and see.
Playing around with this idea in #588, it seems unlikely, but not impossible, to give a clear immediate advantage in our canned benchmarks, (which are also not the only relevant potential tests). For example, we could simply skip applying any buffers at all, during commutation, in #588. This is wrong, but it's a plausible lower limit on execution time and RAM for the benchmarks we already have, which don't budge in that case.
Putting this on the back-burner, for the above reason, but I'm thinking about it, and this is not an exhaustive consideration.
