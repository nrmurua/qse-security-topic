The class method CmdDef.from_defaults() currently takes (defaults.cmd_def, defaults.pulse_library) to build the CmdDef. It should just take defaults, as that is what the method name implies - and it's shorter.
Also why can't this just be backend.defaults().cmd_def() that returns the cmd_def? That seems the most natural thing. Once the defaults is deserialized and validated, then we can add these methods to it to enhance useability.
Also why can't this just be backend.defaults().cmd_def() that returns the cmd_def? That seems the most natural thing. Once the defaults is deserialized and validated, then we can add these methods to it to enhance useability
This is what we would prefer. However, up until recently the idea was that objects such as Defaults and Configuration contained only the transport information, so it was a confession the even allow the method build_cmd_def on Defaults. There is no reason the user ever has to see the raw transport cmd_def and pulse_library representation.
agree - I think my IP PR handles this. PulseDefaults has op_defs (which the user doesn't have to interact with, but that is its "CmdDef", although CmdDef is also renamed). from_defaults becomes deprecated.
IP PR == #3526 ?
Yup. @lcapelluto  hopes to tackle Saturday morning SA time and I will review.
seems resolved via #3526
