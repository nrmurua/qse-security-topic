When kernels are serialized into MLIR using cudaq-quake, the resulting MLIR code also contains a function that can't be translated into OpenQASM using cudaq-translate.
The function follows this pattern:
Extract the MLIR code from the following CUDA Quantum code using cudaq-quake kernel.cpp:
The resulting MLIR code is:
When the file is translated using cudaq-translate --convert-to=openqasm kernel.qke, the output is:
The resulting OpenQASM code should be:
Not a regression
I think the issue can be solved by skipping functions whose name doesn't start with the __nvqpp__mlirgen__ prefix, unless they are called by another function that whose name does start with the aforementioned prefix.
@boschmitt This one is due to the recent introduction of adding the entry point signature at the bridge-level to be more clear about the *this pointer for structs vs free functions. Might be good to add a cpp-entrypoint tag to that function and ignore it in the target translations.
Is it sufficient to just look for the "cudaq-kernel" attribute? i.e., don't we want to include pure device kernels? (Filtering out the launchpad CPU code is a good idea. üëç  )
In this case, it looks like it is trying to "translate" a declaration.
#407
