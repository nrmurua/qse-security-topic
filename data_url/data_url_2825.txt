Mypy hasn't caught that the implementation doesn't match the abstract method signature because they aren't currently type annotated.
Because of this, all gate types that implement both ParameterizableGate and TextDiagrammableGate currently have the wrong type signature for text_diagram_exponent(): text_diagram_exponent() -> Union[value.Symbol, float] vs. text_diagram_exponent() -> float.
Current abstract methods that should be checked.
Fixed this for simulators in #3818. Used generics so that child classes can return more specific subtypes, and mypy will catch if they return something else. I think it's a good template for others.
Discussed on Cirq Cynque: heuristics for this
Hi, I am interested to work on this. If this issue is still open then could you assign it to me?
Hey @hohilwik , thanks for willing to take this on. I've assigned it to you. This will also help with #4393.
I was looking into this commit as reference for the code
90c6c99
And there are parts that I don't really understand.
Why was it required to change from simulator.SimulatesIntermediateState to the Base class? And how were the items in the square brackets decided on? This happens a lot in that commit. If someone could explain how this works that would be really helpful
Ping @daxfohl
That commit added generics to the simulation classes. We could have probably gotten by more simply just by updating the return type of e.g. DensityMatrixSimulator.simulate from Iterator[StepResult] to Iterator[DensityMatrixStepResult]. But by making the simulator itself generic allows for slightly more powerful ability to write generic functions that do things with these generic classes in a type safe manner. LMK if you have any detailed questions.
Ah thanks. That does make sense to me.
Do cirq/sim/wave_function_simulator.py and cirq/sim/wave_function.py not exist anymore? I can't seem to find them
Those were renamed to state_vector_simulator.py and state_vector.py.
Bumping for @vtomole.
