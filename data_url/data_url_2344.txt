If cirq.mixture is allowed to return mixtures of various types of concepts, then any code calling this method needs to sort through what it received before knowing how to use it. Rather than having one mixture protocol designed to handle the general case of "probabilistic mixtures of foo", we should have independent protocols for each "foo". We only currently use mixture to describe a mixture of unitaries, and as such the current functionality of mixture should be handed over to mixture_channel. If we wanted to represent other probabilistic mixtures such as mixed states, we could do that with a separate unambiguous protocol such as mixture_of_states or the like. This impacts #1722 and should be decided on before that PR is merged.
I think that mixture_channel may currently return the mixture wrapped to look like a channel (i.e. a combination of matrices A_k such that sum A_k * A_k^-1 == Identity). This is a distinct concept from "tell me the mixture of this object", because it is more of a conversion instead of a getter.
I agree that we should refactor to have one type of mixture, and that this single type of mixture is a probabilistic combination of unitaries, and that this means mixture and mixture_channel need to be tweaked to make this all more clear.
This is obsoleted by mixture_channel being deprecated and mixture taking up its functionality.
