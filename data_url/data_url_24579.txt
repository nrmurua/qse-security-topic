While performing longer and longer measurements, we noticed that the program creation after a deserialization with the FileBackend fails for certain parameter. All the while the original program creation works with the pulse created in the interpreter.
Its about the following template (obviously as json):
2668caaa5485fdf7681ce97b56b0d1b.txt
Whose program can be successfully created by this:
But not by this:
As it yields:
If I understand this correctly you have the following
To debug this I will need some_function_that_creates_pulse_template or a pickled version of pt.
This function should return a pt that reproduces the error:
Let me quickly check it before continuing
For me with this function my previous code snippet has no error.
Sorry for the confusion, I don't know what went wrong here. Here is a standalone example which fails consistently for me:
Looking at the output reveals, that the problem already occurs in the initial program creation before serialization.
If I look at this it seems like the error occurs in the parsing of the pulse length calculating function. This makes sense as the uint32 limit is about 2e09 i.e. 2 seconds in ns. I just checked, the entire thing breaks exactly when the pulse duration exceeds max(uint32).
After a lot of trial and error it seems like the issue is with the params being int and not float, as converting the time-sensitive parameters to float causes the program to work:
The good thing is that this is platform dependent behaviour: numpy/numpy#9464
A simple fix would be to convert all ints in create_program's parameters values to np.int64.
Amazin. But i guess the same would happen for float16, float32 etc.. I would suggest using 'np.str.isnumeric()' or similar.
The problem is that native python int gets translated into int32 in numpy. Native python floats are always double precision.
