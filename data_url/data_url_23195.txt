in pyrpl_widget.py line 110
there are a total of 3 timers in pyrpl_widget, on did not even have a timeout specified and two are defined globally. Why was this done? Could you (Samuel) move them into some class or is that impossible? One of the global timers was reason for bugs in my nosetests..
Yes there is also one in MemoryTree to defer saving. We should make sure the "end" function stops the timer and saves the current config immediatly
thats been done in commit 8eed031
so what about the global timers. is there a reason?
Ahah... the global timer used to patch the excepthook...
Well that one is only doing its job once at the import of the program... The patch needs to be done in a qt event otherwise, if you do it in a statement that is executed by the ipython notebook, you are screwed because ipython qtconsole already plays the same trick of patching excepthook in order to display exceptions occuring qtconsole statements inside the console itself.
Basically, it seems reasonable for me to do that with a global timer since it's a global program thing. In principle, I don't expect any problem with that because the timer is singleshot and should be inactive after it has performed its duty once. --> Maybe it is a bit stupid on the other hand that I put 1000 milliseconds timeout because if your unittest last less than a second in total you might run into a problem. Actually it's probably just fine to put the timeout to 0... Basically, if exceptions occuring in an event are still triggering a red error message in the InfoBox of the PyrplWidget, it means we are fine.
I guess the other one that you call global and that could cause problem is the one in the ExceptionLauncher. That one is just used to turn the errorMessage orange after some time (to make the difference between an old error and an error that occured very recently). That one can definitly be moved in each pyrpl_widget instance...
OK, I think we can consider this closed ? (Even-though the timer TIMER is still global, it is singleshot and with timeout 0...)
