I have written code for my convenience that takes an arbitrary number of qubits and entangles them. For example qc.entagle(0,1) would create a Bell pair, qc.entangle(0,1,2) a GHZ state and so on. Could this be added to terra?
I would like to try this can I ?
I already have the code, I just wanted to check if it would be useful and where I should add it. Any thoughts?
I also have the code defing enatanglement between any no. of qubits and would like to work with you to add it in qiskit terra
and i think i know where we can look
I forked terra and put the function in the quantumcircuit.py file here: https://github.com/edwinagnew/qiskit-terra/tree/entangle
I have had issues generating the documentation however (based off this https://github.com/Qiskit/qiskit-terra/blob/master/CONTRIBUTING.md). I'll add you as a contributor to that fork
Hey @edwinagnew while it's great to have a utility function like this, I think Quantum Fourier Transform which is already available here in Qiskit Circuit Library is what can be used for this purpose. Fourier Transform is entangling and it is already available for basis change. Please correct me if I am wrong.
@abhik-99 I think the QFT does more than what I'm suggesting and creates a more specific kind of entangled state. All I was imagining is a quick way to make a Bell pair (for example for the teleportation protocol) which is general enough to take in an arbitrary number of qubits
@edwinagnew , you can pass in an arbitrary number of qubits with qiskit.Circuits.QFT as well to create a Bell's Pair.
@edwinagnew I would not call this "entangle" as it is a very specific way of creating entanglement. Also it shouldn't be a circuit method.
This might be better as GHZ under qiskit.circuit.library.generalized_gates.
@ajavadia That's a great suggestion, thanks. I will do that instead.
@abhik-99 I can't seem to work out how to do that. I tried this:

which is a very different state.
def entangle(self,initial_qubit,target_qubit):
entangled_circuit = self.copy()
entangled_circuit.h(initial_qubit)
for initial_qubit in range(target_qubit):
next_qubit = initial_qubit+1
entangled_circuit.cx(initial_qubit,next_qubit)
initial_qubit += 1
return entangled_circuit()
I tried writing this in the file but seems something is off
Sorry for the delay.
This is the code I've written:
I'm looking in generalized_gates.mcmt as an example and I see that its a class but there's also a function at the bottom that can be called on QuantumCircuit but has been deprecated. I think it would be better for it to be a circuit method like that but would you suggest it be a class? If so, I'm thinking the init arguments would be QuantumCircuit and a list of Qubits?
I'm looking in generalized_gates.mcmt as an example and I see that its a class but there's also a function at the bottom that can be called on QuantumCircuit but has been deprecated. I think it would be better for it to be a circuit method like that but would you suggest it be a class? If so, I'm thinking the init arguments would be QuantumCircuit and a list of Qubits?
@edwinagnew yes, the mcmt method of the circuit is being deprecated. We're trying to clean up the circuit class (there are hundreds of methods you could add to it but that wouldn't be a very elegant design ðŸ™‚) and separate the circuit class, which is used for gate manipulation, and pre-defined circuits, such as the GHZ state, the MCMT, etc. Therefore the your function should not be a method but a class itself. It's super easy to then add it to the circuit as
@edwinagnew I'm closing but feel free to re-open if you want to continue working on it ðŸ™‚
