Is your feature request related to a use case or problem? Please describe.
Quantum circuit optimization sometimes involves applying different optimization passes/transformations in a sequence until the circuit hits a fixed point, i.e. is no longer changed by the transformations.
As a somewhat contrived but simple example, consider a circuit consisting of arbitrary single-qubit gates and CZs. The user wants to simplify the circuit by combining all neighboring single-qubit gates, and eliminating those that are equivalent to identity. This elimination may bring some CZs next to each other such that they cancel, which in turn will bring new single-qubit gates next to each other so that they need to be combined, etc.
Cirq optimizer classes (such as cirq.circuits.PointOptimizer and its descendants, cirq.optimizers.EjectZ etc.) provide the optimize_circuit(self, circuit: Circuit) -> None method, which takes a cirq.Circuit as input and modifies it in place. However, it does not seem to inform the caller whether any changes were actually made to circuit.
Describe the solution you'd like
The circuit optimizers should inform the caller if any changes were made to the circuit, e.g. via a return value. Maybe even return a summary of the changes, or the number of changes?
[optional] Describe alternatives/workarounds you've considered
What is the urgency from your perspective for this issue? Is it blocking important work?
P2 - we should do it in the next couple of quarters
For descendants of PointOptimizer, this is easy to fix, but there are many other optimizers in Cirq which are not descendants of PointOptimizer and modifying each of them separately sounds like a bad solution.
This is also related to the larger issue of defining patterns for optimisers (#3237).
For the short term, I think comparing copies of circuits could be the way to go. Especially for iqm, I imagine this shouldn't be a bottleneck because the number of qubits on the devices are <= 5 (Adonis - 5  and Valkmusa - 2)
@balopat Thoughts?
I agree with your points @tanujkhattar. As there is a - though admittedly awkward - workaround, it is not urgent in priority we won't pick it up directly until probably Q2, but If @smite or someone from the community wants to work on this, we are open to do something incremental instead of making users wait for the big redesign of optimizers. Before someone jumps in we'll need to agree on the design here. Adding triage/accepted and needs agreed design.
With the new Transformers API, circuit transformers now create a new circuit always and never modify in-place.  I think this is now fixed with the new Trasnformers API.
cc @tanujkhattar to verify.
