I have been bothered lately by the fact the we call parameter_values to a Sequence[Sequence[float]] in the primitives, and I think it is leading to confusion.
I keep coming across with loops like:
which seems intuitive but it is semantically wrong, because the type of parameter_value here is Sequence[float].
I wanted to propose renaming paramenter_values to parameter_bindings. This will make everything more clear imho:
Since we now also support just passing the parameter_values (i.e. Sequence[float] instead of a doubly-wrapped) with #8704, is this still an issue? ðŸ™‚ Personally, bindingsto me sounds like it would be a mapping/dict of parameter: value pairs, and values sounds more like a list ðŸ¤”
it would be a mapping/dict of parameter
I feel like same.
I see your point, but I would not feel very comfortable using the supported exception (single entry) to name the general case (multiple entries), unless we did the same for the other args as well (i.e. circuit and observable  instead of circuits and observables). As a matter of fact I would be perfectly fine with this approach as well.
Consistency is key for clarity.
I thought that $\theta$ itself is a parameter value even if it's a vector, so the list $[\theta_{0}, \theta_{1}...]$ is parameter values.
hmm... difficult. how about parameter_vectors?
Interesting @ikkoham! I kind of like it tbh, although I probably need to get used to it. It is a good middle ground ðŸ™‚
It's a good point with observable(s) and circuit(s)! Reading that actually it to me it would be clearest to use
but I'm not sure it's an option to rename the all arguments based on this ðŸ˜…
transpile's argument is circuits. We used it for consistency.
The more I think about it, the more I like @ikkoham 's idea of calling it parameter_vectors!
I have discovered a ParameterVector class under qiskir.circuit which may be interesting to analyze in this context. I would probably refrain from using it.
The ParameterVector is just a indexed vector of parameters used e.g. in variational ansatz circuits (or even mostly there?). By "refrain from using it", do you mean refrain from using parameter_vectors as replacement of parameter_values? Or refrain from using a ParameterVector? ðŸ¤”
I meant refrain from using the ParameterVector class. But no strong opinions if you think otherwise, especially after your nice explanation! ðŸ˜Š
The ParameterVector nicely solves some problems we had with parameterized ansÃ¤tze, like sorting by index if the name is the same (to sort a b[0] b[1] b[2] ... z instead of a b[0] b[1] b[10] .... z) and adjusting the number of parameters if the ansatz is resized (which e.g. TwoLocal circuits allow) ðŸ˜„ I see how parameter_vectors is confusing as name, maybe we need to choose something else in that case ðŸ¤”
I honestly like parameter_vectors, I just don't want it to be confused with the class ðŸ˜Š and I agree that parameter_bindings may be more confusing
There are only so many synonyms haha but happy to consider alternatives, we have time until the next release
