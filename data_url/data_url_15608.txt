There is an overflow when converting a Python int to a numerical float
It should work
No response
The immediate issue is that the 2 is an int, so Python will allow you to raise it to an arbitrary int power, but floats only have finite precision.  The magic number here is actually 1024, not 1000, because the max float64 exponent is 1023, but that's largely irrelevant.
We can prevent an error being raised by changing the line to lam = np.pi * (2.0 ** (k - j)), which forces us to use floating-point operations and Python doesn't trap on FP underflow (only overflow).  That doesn't actually solve the problem properly, though.  To some degree, this is kind of unsolvable in current precision - we can't actually represent the rotation angle needed there in double-precision floating point.  The QFT calls for pi * 2**-1080 here, but in double-precision maths that's exactly 0.
Yes, you would expect it to auto truncate terms that are smaller than something like floating point zero.
That's fine if that's a final number, but once you put the circuit in place, it's not actually going to do the right thing anymore (in an ideal experimental world where we can actually control angles of 10^-315 of a radian lol).
I'll swap it over to the underflow form, but I'll put in a warning catch as well.
