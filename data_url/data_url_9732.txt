Application
Currently dimod has a BinaryPolynomial class that can be constructed from higher order mappings like {(1,2,3): 1}
which can be passed to make_quadratic to create BQMs. We also have symbolic experssions for constructing BQMs.
However it is not possible to construct higher order BinomialPolynomials symbolically
throws
Proposed Solution
Extend symbolic expressions to BQMs with interactions and BinaryPolynomials:
BQM * BQM --> BinaryPolynomial,    if either argument contains interactions
BQM  BinaryPolynomial --> BinaryPolynomial
BinaryPolynomial  BQM --> BinaryPolynomial
BinaryPolynomial  BinaryPolynomial --> BinaryPolynomial
Also support non-negative integer powers of BQMs and BinaryPolynomials (see #864)
I love this suggestion in principal but there are a few things that we need to do before we should allow this:
Re 1) there is a lot of room for optimization within pure python.
I can start incrementally improving performance in the mean time
There are a lot of Python loops that can be optimised away.
The __eq__ method looks like particularly  low hanging fruit.
For 5) do you mean something beyond HigherOrderComposite?
For those who want to do this in the mean time, you can actually use sympy to get something like the behaviour you want with
I have not rigorously tested this though.
