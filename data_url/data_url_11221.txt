OK. Suppose I have a lattice of spinful fermions with, say, 4 sites (nsites = 4). The Hilbert space should have dimension 4^4 = 256. Any operator in this space should have a matrix representation that is of size 256 X 256.
If I want to create an operator like

where occupied_upspins = np.array([0, 1]) (suppose, purely arbit choice), and I do an iterable of FermionOperator() calls over the up_indices of occupied_upspins, then get a dense representation with get_sparse_operator(num_init_sym).todense(), I actually get a 16 X 16 matrix. Presumably, this is the submatrix of the occupied states only, and all I have to do is pad the extra dimensions with zeroes to get it up to 256 X 256.
I pad it like so:
num_init = np.pad(num_init, [(0, 256-16), (0, 256-16)], mode='constant')
Now, I seek to compute the expectation value wrt the corresponding eigenstate, which should be nonzero. If I get the eigenstate from jw_configuration_state(occupied_upspins, 2 * nsites).flatten() and do numpy.multi_dot, I get 0 as the value instead.
Am I padding it wrong?
I have the code below:
Indeed, you are padding it wrong. Instead of padding the extra dimensions with zeros, you should be tensoring with the identity. So the line
should be replaced with
After this change, the output is 2 instead of 0. If you were expecting 4, that's because when you used jw_configuration_state, you forgot to expand the sites into their up and down components. So the line
should be replaced with
After this change, the output is 4.
you can also specify the number of qubits n_qubits you want in the `get_sparse_operator'.   This will enforce that you are lifted to the appropriate size space.
