If we want to evaluate a set of expectation values for the same observables and circuits, but with different circuit parameters, we can cache the whole transpilation and basis transformation processes. Qiskit's opflow easily allows this and to leverage this it would be nice if we extended the eval_observables to allow returning a callable that takes as input circuit parameters and returns the (efficiently) evaluated expectation values.
Something like this is already used in #8304 and can be extracted and merged with the existing eval_observables in a follow-up.
With the move to primitives, since estimators handle that aspect, can this be closed as no longer relevant. eval_observables will be removed when the now pending deprecated algorithms that use it are removed in the future.
This pretty much transfers to estimate_observables in the same way -- but if we decide to drop that and include dict support in the estimators we can close this issue here, yes ðŸ™‚
If we want to evaluate a set of expectation values for the same observables and circuits, but with different circuit parameters, we can cache the whole transpilation and basis transformation processes.
Since circuits, observables etc should be efficiently cached etc in Estimator my take would be to use Estimator directly - I do not see why we would need another layer now with a callable. You can already 'call' the run with different parameters so I don't see the need here. The estimate observables was simply to do the dict <--> list transform since algorithms support dict input for observables and Estimators do not. Yes, this method would go away should Estimator supported dict directly.
Transferred to new repo: qiskit-community/qiskit-algorithms#52
