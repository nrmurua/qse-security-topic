At the moment, a sweep like Loop(parameter[1:5:1],1) goes through the values 1,2,3,4 as per standard Python slice behavior. I think it would be more intuitive (especially for people who aren't used to Python) if it included the upper limit, i.e. did the same as Loop(parameter[1,2,3,4,5],1).
Assuming this doesn't clash with something else, parameter.__getitem__ could be changed to
I think it makes sense to stick to default python behaviour.
I can understand why it would be more intuitive for people coming from different programming languages, however the price of having multiple defaults within the same program (i.e. the one you propose in addition to regular slices) will result in very confusing behaviour.
As far as I understand this is there to emulate python slice behaviour, if this is the case it should not act slightly different.
I agree that it might be confusing but I feel like the current syntax would
lead to a lot of sweeps with the last point missing. I suppose it's just a
question of deciding which is worse.
Den 31/03/2016 14.00 skrev "Adriaan" notifications@github.com:
I think it makes sense to stick to default python behaviour.
I can understand why it would be more intuitive for people coming from
different programming languages, however the price of having multiple
defaults within the same program (i.e. the one you propose in addition to
regular slices) will result in very confusing behaviour.
As far as I understand this is there to emulate python slice behaviour, if
this is the case it should not act slightly different.
â€”
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
qdev-dk-archive#65 (comment)
I do agree that the current syntax might lead to sweeps with the last point missing. I strongly feel however that we should not change default python behavior as it makes the entire project very confusing which would be worse in my opinion.
To solve the problem of the last point missing, a new syntax might be devised that does not involve slicing, but is based on (e.g.) numpy.linspace
Right, I've discussed this with various individuals in the past so it's nice to collect it all in one issue :)
The slice syntax is nice and compact but it's such a deeply ingrained feature of Python that we cannot alter its behavior. But I wouldn't be opposed to adding a new option with function-call syntax, that we strongly encourage users to write with keywords. That way the user wouldn't need to convert between number of points and step, or increment the endpoint manually. Then we could support many forms (matching numpy.linspace but with additional flexibility), all of which would give [1, 2, 3, 4, 5]:
I wrote this as if we bind to Parameter.__call__, which is currently unused, is very compact, and doesn't seem ambiguous, but might not be intuitive. We could instead use Parameter.sweep or something.
As an aside, note that slice notation allows arbitrary extra arguments, so you can combine several linear sweeps in one call. But with either syntax you can do this by adding the resulting SweepFixedValues objects:
Actually we destroyed the option for this functionality with #76 #78 and #91. too bad I dint read, and realize this earlier.
I implemented it here locally now as a p.sweep(start, stop, step, num, revert) which works great.
What are peoples comments on this? I guess its not too late to revert the other idea. I dont like merging the two into one, that would lead to a lot of confusion.
We now have .sweep() closes the issue.
