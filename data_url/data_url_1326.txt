Description of the issue
cirq.MutablePauliString seems to support identity gates (for example: when passed in pauli_int_dict parameter). The type annotations on on methods like .values() and .items() also have a Union[Pauli, IdentityGate].
This is bad because cirq.PauliString does not support identity gates and hence this leads to inconsistencies between the mutable vs the non-mutable version.
How to reproduce the issue
Cirq version
0.15dev
Also, I see that cirq.MutablePauliString is not an operation; and uses the underlying .frozen() version (i.e. a PauliString) when comparing two instances of MutablePauliString.
Operations are hashable, mutable things aren't hashable, so a mutable thing can't be an operation.
No strong opinion on keeping or removing the identities but my default expectation would be that they were removed. Do some tests fail if they're removed?
I don't remember why we had a mutable version of PauliString.  Was it just convenience?
Also, since it's not an operation, can we make it a private class?
@tanujkhattar It used to be private: #3299
@dabacon
Was it just convenience?
Looks like it was for performance reasons: Add private _MutablePauliString type for aggregating products efficiently - #2232
