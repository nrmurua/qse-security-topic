contents of build/Testing/Temporary/LastTest.log after executing 'make test'.
Hi Chris,
The python tests had some outstanding issues, but we've since moved to C++ based tests using Catch2. These are currently on the develop branch, to be merged into master and a new release very soon. I'd disregard these results, and run the new tests on develop in the same way.
Thanks,
Tyson
I followed your instructions and was able to compile the code on my Mac (Clang 11) and unit tests passed however on my RPi4 and Jetson Nano it does NOT; with GCC 8.3 and GCC 7.4 respectively. Which gcc version should I be using?
Those are all supported versions. What exactly isn't working? Try to get me as much detail as you can, so that I can try to replicate your problem.
Output of make test for Jetson (sorry for the bad photo).

Sample Output of make for RPi4, after 50% of the way through when it starts to compile the test modules, errors like this show up:

I'm not sure where I've gone wrong.
Your first errors (Child aborted) actually seem to be a problem with the exceptions that the QuEST unit tests are intentionally throwing, in order to check user-validation. I've seen the same problem on POWER8. Try this, which directly runs the Catch2 test executable and disables checking these user-validations.
I can see though that calcTotalProb seems to have just failed - that is very strange indeed! Can you check whether that's still the case in the above test?
By the way, unit-test runtime is dominated by testing of mixMultiQubitKrausMap and there's no reason for that particular function to fail if all the others pass. So to speed up your tests, change the last command above to
Your latter RPi4 problem also seems a compiler version problem - your compiler seems to have issues with Catch2, and with QuEST test's use of C++14 complex types. I don't know much about Raspberry Pi, but I can see you're using gcc-7, which should be compatible. Can you please try this (forcing use of g++ for the C++ tests):
Hi Chris,
Any luck on this?
No luck with that the RPi4. I stopped development with the nano for now, will touch upon it later.
When I run the tutorial example, it works up to 23 qubits or so and when it shows the probability of the states for specific qubits, the results seem to be correct.
It seems that the tests would pass if the tutorial example functions as required.
I used the QuEST library in a Benchmark against more barebones code and rewrote the tutorial example and it seemed to work up to 22 qubits but then crashed from a Seg fault. Not sure if my code had the leak but couldn't allocate more than 22 qubits.
Hope this information was helpful.
Actually, I wouldn't trust that just because the limited functions used in the tutorial example work, that the rest of the API runs fine on the platform - there can always be insidious platform and function specific bugs!
A 22-qubit register at double-precision (QuEST's default) costs only 64 MiB, and shouldn't cause any issues in QuEST. One possible explanation is that your own code was allocating things on the stack (e.g. using fixed-size arrays) and so exceeded the stack limit, which is around this size (though is system specific).
In any case, this does not seem to be a QuEST issue. Cheers!
