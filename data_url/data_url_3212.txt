Currently the compiler does several kinds of transformations, including mapping into a target gates set, routing onto a fixed qubit topology, and doing algebraic simplifications (e.g. X 0 \n X 0 is changed to an identity).
When doing things like benchmarking the chip, it can be useful to turn off the algebraic simplification. Otherwise, for example, all randomized benchmarking sequences will compile to an empty program.
A suggested interface could be to split the compiler to allow different passes in the flag, e.g.
Alternatively we could eventually expose different passes as different methods, e.g. backend.route(), backend.gate_transform, backend.simplify etc.
xref #584
One thing we've been thinking is having a mode for total automatic compilation, and then a total opt-in mode of compilation, where you can choose the types of operations you'd like to happen to your program.
The problem with something like simplification keywords is that they don't have a lot of meaning. Simplification means different things to different people, and it becomes exhausting to try to strong-arm a piece of software into doing what you want it to.
I really see three four things as key controls for a user:
While there might be justifiably more things a user might want to control, I think beyond this list, you get into territory that is better served by an automatic algorithm. (As an analogy, most people prefer Mathematica's magical Simplify command as opposed to Macsyma's fine-grained simplification commands like trigsimp, for simplifying trigonometric expressions, or radcan, for canonicalizing radical expressions.)
I would very much like a framework that allows one to specify a plan for how they want the compiler to work. By default this might be an empty CompilerPlan() which is empty. Or one might want to do CompilerPlan().automatic('chip-name') to create a fully magical automatic compiler for the chip chip-name. Or we can be very fancy, and have something like this for example:
which does nothing but precisely what it says. If they want the final simplification, maybe they do
and this c could be passed along with the Quil program to the system processing things, and the compiler can act at the user's command.
I'd really love to see things move in this direction, where we make what the user wants to do more declarative.
(Edit: Edits for clarity.)
agree with the above. I'm removing the milestone from this issue as this won't be completed by Friday milestone doesn't appear to actually be there
I agree too. Composable compilation passes would be great and are better than flag arguments.
I also agree that in the near term, allowing control over the four key controls @tarballs-are-good mentions would satisfy the use cases that I have in mind.
