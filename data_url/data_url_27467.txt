 Single/temporary setting for ParameterNode (or Parameter).
Currently we use the SettingsClass, which overrides getattr. It would be cleaner if it is instead
implemented in the Parameter during a get.
single_settings should be cleared after a get, and temporary_settings cleared after a Loop.
Clearing single_settings is easy, temporary_settings would be more difficult.
The reason is that it's more difficult is in the following case:
Say we temporarily set the value of a Parameter in an AcquisitionParameter (which should now be a Node).
We then perform an acquisition.
This is either by measuring an AcquisitionParameter.acquire Parameter, or we would make the
AcquisitionParameter a Parameter as well as a Node.
The former case runs into the issue that the acquire parameter should point to the AcquisitionParameter, which would then clear all its temporary setting.
The latter case doesn't have this issue, but would require classes to both inherit from ParameterNode as well as Parameter (see below)
 Clearing settings of ParameterNode clears it for all nested ParameterNodes and Parameters.
 Simplified snapshot {parameter_name: value}.
Otherwise snapshotting can become too bulky. Is this necessary? Maybe a better solution would be to make snapshotting less bulky to begin with. E.g. do not include scale etc. if not set.
 ParameterNode.sweep(parameter_name, sweep_vals)
This way we would rarely need to access the Parameter, which is desirable for the nodes with use_as_attributes=True.
 Allow a class to both subclass ParameterNode and Parameter?
We would need to be sure that there is no overlap in methods, especially dunder methods.
Possible overlapping methods:
Some of these enhancements have been added to the ParameterNode (see ticked boxes)
Closing this issue. Most of them have been handled.
Single/temporary settings are no longer needed since the new Measurement can mask pretty much anything.
Having both Parameter and ParameterNode might get too messy
