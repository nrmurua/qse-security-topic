#875
This was intended.  Pauli can rely on the default eq and hash methods because Pauli.X, Y, and Z are singleton objects.
The problem with this pattern is that if you use these globals in a dictionary then they rely on object id, and this causes problems when dealing multiprocesses (since dictionaries can be shared, across processes, but ids are not stable across process boundaries).  Some big companies have testing infrastructure with tests that catch this kind of bug :)
Good point.  I hadn't considered multiprocessing.
Would it be worth adding a test for this sort of bug to EqualsTester?
The tricky thing with adding it to EqualsTester is there's no implicit point in the interaction where the class can conclude you should have added a group containing two equal but not same-reference values and throw an exception.
We could modify the usage to involve a with statement:
and have it fail on __exit__. Another advantage of this style is that it makes it clearer that the "add" methods correspond to some sort of assertion that will be checked at some point.
Why do you need that?  You only need to check objects within the same group so the new check can be added alongside the others in add_equality_group.
I would just assert that each value is equal to it's deep_copy.
Also, a downside of using with is that the assertion failure won't have as useful a line number.
We can open separate issue if we want to add this to EqualityTester, this is such an edge case that I'm not sure it is worth it.
