A simple test shows that the Clenshaw method from @Vutshi does not give results consistant with the other solvers.  This slipped through because the test suite was not testing this new method against random operators.
With the above code, I am getting differences on the order of one, where as the other methods all are close on the order of 1e-12 or so.
I will revert back to the old iterative method until this is resolved.
Interesting... It seems I can not reproduce the problem. I've run the for loop 150 times and always got 1e-12.
about():
QuTiP: Quantum Toolbox in Python
Copyright (c) 2011 and later.
Alexander Pitchford, Chris Granade, Paul D. Nation & Robert J. Johansson
QuTiP Version:      None
Numpy Version:      1.11.1
Scipy Version:      0.18.0
Cython Version:     0.24.1
Matplotlib Version: 1.5.1
Python Version:     2.7.12
Number of CPUs:     2
BLAS Info:          INTEL MKL
INTEL MKL Ext:      True
Platform Info:      Windows (x86)
Installation path:  E:\Miniconda2\lib\site-packages\qutip-none-py2.7-win32.egg\qutip
Huh, your right, it seems like there is some issue with my install, cleared it all out and it works.
It is a really nice test. It clearly shows how bad is the 'iterative' method. For dim=20 the discrepancy between 'iterative' and 'clenshaw' is 1e-12 and for dim=50 it already becomes 1e-5, whereas 'laguerre' agrees with 'clenshaw' up to 1e-14 independent of dim.
It is odd, but if I move the _wigner_clenshaw method and its subroutine into a Jupyter notebook and run it, then I do not get the same result as running the same function from within the qutip module.
Hmm. I created a notebook as you said and it works for me.
here it is https://nbviewer.jupyter.org/github/Vutshi/qutip-notebooks/blob/master/Clenshaw%20wigner%20test.ipynb
Yes, I am not going to worry about it, everything works from scripts and when called from the library, so probably just some funny business.  I am about to commit a minor update where the diags are grabbed directly from the sparse density matrix, for larger density matrices, or really sparse ones, this bumps up the speed a bit.  I will also make a few more unit tests, just for my own sanity. Thanks.
