ListOp.to_spmatrix does not work
This problem is actually not straight forward, because on the type hint said the return is spmatrix. There is an idea to make the type hint Union[spmatrix, list[spmatrix]], but this is difficult because we need to consider the consistency with other methods.
Therefore, I don't have an elegant idea to solve this at the moment, although it would be nice if spmatrix had a higher dimensional tensor.
For completeness, here is the output when reproducing the issue:
The type hint seems to come from Aqua time. Maybe @akarazeev or @woodsp-ibm have some insights?
The suggested solution states this:
This problem is actually not straight forward, because on the type hint said the return is spmatrix. There is an idea to make the type hint Union[spmatrix, list[spmatrix]], but this is difficult because we need to consider the consistency with other methods.
BUT the typehint is that already
https://github.com/Qiskit/qiskit-terra/blob/deebd5cce63601f5a6bb4aa762baedd9cb4876b3/qiskit/opflow/list_ops/list_op.py#L374-L383
The issue is more that when its a list of sparse objects the multiply is not working as I think was intended assuming this was a numpy array and it would distribute the multiply over all the elements.
The best I could come up with is this for the to_spmatrix()
This then returns either an spmatrix or a numpy array of spmatrix (instead of a list). Well actually since ListOp can be nested the list/array tself contains either spmatrices or Lists where the Lists are spmatrices and Lists etc i.e. its a recursive structure. As a simple example
the above works if spmatrix code is change to what I put above. If one prints the result it looks like this where the contents of the arrays I enumerated to print them to make sure.
Bottom line here is that ListOp is complicated as it allows other ListOps to be nested. Subclasses like SummedOp should collapse to a single matrix due to the combo function. But ListOp is just a list and if they are nested the structure can be quite complicated/ragged. As I said the above is what I can come up with at present. I have no idea of the utility in general when it returns this complicated list structure rather than a single matrix.
