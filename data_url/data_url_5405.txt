If my memory does not fail, if you decide to use Eigen, every time you transfer some data between C++ and python the data will be copied.
Eigen will not easily deliver a pointer to the data but, instead once Eigen is done doing it's thing it will deallocate the data causing issues, thus data has to be copied every time, significantly decreasing performance.
The only place in the Walrus were we moved large chunks of data was in the hermite_multidimensional.hpp where the data is transferred cleanly (without copying) using the classes ArrayWrapper and ArrayWrapperFloat in https://github.com/XanaduAI/thewalrus/blob/master/thewalrus/libwalrus.pyx . In C++ this data is just a pointer and the de-allocation is handled by the python classes.
Hopefully a better way can be found to make Eigen play nicely with python. In our case we simply ditched Eigen for hermite_multidimensional since the vector class from C++ was enough.
Thanks for the info @nquesada!
So far we've been following the discussion on Eigen in the pybind docs: https://pybind11.readthedocs.io/en/stable/advanced/cast/eigen.html#pass-by-reference
They recommend using Eigen::Ref<MatrixType>, e.g., doing
This allows passing by reference, but with some caveats. Luckily we just want to pass a vector so we might get away with this choice and avoid the complications (e.g. row major vs column major).
However it's good to know of this alternative!
Thanks!
Thanks @nquesada, let us know if you see any other things we need to be mindful about üëç
