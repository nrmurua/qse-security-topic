Description
This issue regards defining how to properly structure the main code of the repository krylovsolver to merge it into quip and provide it as a new solver.
Possible solution
We have created a temporary branch in the original repository labeled qutip, on which the algorithm code styling has been adapted to follow a similar one based on qutip (i.e. using sesolve.py). The analogous file to sesolve.py can be found at PyKrylovsolver/krylovsolve.py.
Additional context
Krylovsolver has been developed via the Unitary-fund grants program.
Hi Emi,
There are a few options:
krylovsolver could exist independently of Qutip and be used as:
If you want it to be part of qutip itself, since it solve the same problem as sesolve, it could be inserted as an options to sesolve or be it's own function. It would be better to not have too many function doing the same thing, but since we don't have many alternative method in sesolve it could be overlooked. Seeing the state of krylovsolve, both would be quite easy to do.
Do you have benchmarks to compare it to sesolve? From what I understand, krylovsolve is a faster sesolve limited to constant Hamiltonian. So it would be interesting to see how fast it is.
If we add krylovsolve to qutip, would you be able to maintain it? A new major version of qutip is in development and it will need to be updated.
Hello Eric, thank you for the quick response!
We have spoken with some members of the qutip team during the grant meetings regarding porting it directly into qutip, and we agreed it would be a good addition as a separate solver. There are a couple of we-believe-good reasons to provide krylovsolve as another qutip solver.
As you mention, the method is currently limited to constant closed system Hamiltonians.  Another possible addition discussed during the meetings was support for open quantum systems, which provides another unitary-fund grant opportunity for some students!
Another important application for many-body systems comes in handy with Krylov. Given the memory limitations from matrix representation of operators and the exponential growth of many-body systems Hilbert spaces, the limit of qubits on which the solvers live is around 15 qubits. This limitation gets expanded (in exchange for some slow down in the computations) to a few more qubits exploiting the binary operational nature of many-body systems. While any solver could use operations instead of matrices, it is a good testing bead to use Krylov's algorithm because of a property when constructing this space. This feature is a must-have within our research group, and everyone could also benefit from it.
More importantly, Krylov is gaining increasing interest in the research community, and we believe that providing it as a qutip solver will increase the traffic of the repository.
Regarding benchmarks and some documentation, we have a public jupyter notebook with some benchmarks here krylov use examples, and there's also a medium blog post with some other details.
As for maintenance, yes, the way this code-block fits in should not be problematic to update even with qutip changes. We use krylovsolve for research and will keep the solver repo outside qutip up to date and (hopefully!) inside of it for the community.
A blog post with the method is now hosted also at https://unitary.fund/posts/krylov.html
@Ericgig @emilianomfortes what is the next step? I suggest you proceed by opening a PR. Due to the limitations of the method applicability, I could see a use for it as krylovsolve for the time being.
Pinging also @quantshah @cgranade who've been involved in the mentoring of the project.
Hello again Nathan, we just finished some minor documentation improvements. We will proceed to open the PR, and keep discussing any details and future expansion of the mentioned limitations.
@emilianomfortes that's great!
Do you have time to add some of the documentation for krylovsolve to the QuTiP documentation? Converting the example Jupyter notebook and blog post to a guide (under doc/guide/ in the qutip repository) might be one sensible approach.
Hey Simon, sure! I'll get to it tonight.
Most important, congratulations!!! :)
Thanks @emilianomfortes for adding the guide. ðŸš€
