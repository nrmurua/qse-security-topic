Because python falls back to reference equality when NotImplemented is returned from __eq__ methods, it is difficult to test the case where object A delegates its equality to object B by returning NotImplemented (instead of simply returning False, since A is not B whenever you do this).
A workaround for this would be a class that thinks it is equal to anything with the same hash code, or that it is equal to some specific instance. For example:
The idea is that, if the instance X under test returns False from __eq__, then X == F(X) would be False instead of True, and X == F(None) would still be False. This demonstrates that X is delegating to F (assuming you do both orderings) without needing to call __eq__ directly (which I think we should avoid).
So: create a test that uses this class to detect classes that fail to return NotImplemented for values they don't understand, and add a test proving this actually works.
@bt3gl Done.
@vtomole  please close this ticket.
@jitendrs Which PR was this done on?
