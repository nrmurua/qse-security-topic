Hi,  I am interested in the layer / component that maps to the actual concrete quantum hardware: is it the backend interface that abstracts the concrete hardware, or is it the mapper?  Eg. my team is interested in using a measurement based quantum hardware underlying your software stack: which component described in [arXiv:1612.08091v2 [quant-ph] 29 Jan 2018 do we have to implement?
Thanks for your help,
Frank
Let’s consider the IBM hardware.
The IBMbackend, derived from a BasicEngine, defines the available operations in a function called is_available which returns True for supported operations.
https://github.com/ProjectQ-Framework/ProjectQ/blob/develop/projectq/backends/_ibm/_ibm.py#L92
The specific compiler setup for IBM is defined in https://github.com/ProjectQ-Framework/ProjectQ/blob/develop/projectq/setups/ibm16.py#L56
This defines the list of compiler engines through which all operations pass. The AutoReplacer takes care of expressing high-level operations with supported low-level operations (defined by the is_available function of the next engine). The AutoReplacer uses decomposition rules defined in the folder https://github.com/ProjectQ-Framework/ProjectQ/tree/develop/projectq/setups/decompositions
I haven’t worked with measurement based quantum computing. It might require additional decomposition rules.
For a tutorial, see https://github.com/ProjectQ-Framework/ProjectQ/blob/develop/examples/compiler_tutorial.ipynb
The GridMapper in the IBM setup takes care to add Swap operations which takes into account the topology of the underlying hardware. So if the topology is different (and not all-to-all) one needs to write such a mapper.
SwapAndCNOTFlipper in this setup makes sure that CNOT gates are applied in the correct direction (IBM’s backend allows only one direction) and hence also take care of one specific hardware constraint.
A mapper tutorial is here:
https://github.com/ProjectQ-Framework/ProjectQ/blob/develop/examples/mapper_tutorial.ipynb
