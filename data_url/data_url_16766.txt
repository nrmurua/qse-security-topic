In order to emulate the following QASM, Parameter needs to apply along with trigonometry.
A possible way, it would be using sympy
but this raises CircuitError: 'invalid param type cos in instruction u1'. Other libraries like math and numpy require a float-castable parameter. Same applies to the rest of the "QASM ufunc".
Probably, the best solution is to extend Parameter type with these ufuncs. So the example would look like:
From today's discussion, consensus was that its better for this to look something like
I'm new to qiskit, and I'm trying to make my first contribution. I'd like to give this one a go if you don't mind :-)
Hi @ymarathe , that sounds good. Since this is more involved than a typical first contribution, can you write up a short plan of how you'd expect to implement this? That way we can find any questions early in the process.
Thanks @kdk.
Sure, here's what I have figured out so far:
Right now, I'm stuck at figuring out how to do the parameter binding. Is circuit.bind_parameters() the only way to bind parameters?  If that's the case, is there any way we can setup a dependency from Parameter phi in the example above to the Parameter cos(phi/2), so that when the user passes the value of phi using the parameter dict, cos(phi/2) get evaluated automatically. What would be the right place to do it?
The best place for these would be in the ParameterExpression class (though having them as separate functions in the parameter module would also make sense, since that's how we're planning for users to use them ref: #3908 (comment) ).
Right now, I'm stuck at figuring out how to do the parameter binding. Is circuit.bind_parameters() the only way to bind parameters? If that's the case, is there any way we can setup a dependency from Parameter phi in the example above to the Parameter cos(phi/2), so that when the user passes the value of phi using the parameter dict, cos(phi/2) get evaluated automatically. What would be the right place to do it?
Check the ParameterExpression class and how it handles the currently supported operations. In short, it is what handles the dependency between the qiskit Parameter instance, and the sympy.Symbol instance used in the expression.
