Qiskit Terra version: 0.7.1
Python version: 3.5.6 (Anaconda)
Operating System: Windows 7
Attempting to call append or concatenate with a list of Register objects results in a NumPy array that contains integer values along with the Register objects.
This should first print 5 and then print an array with 5 elements, all QuantumRegisters.
This is occurring because NumPy calls __len__ when doing an append or concatenate operation. For the time being, I can do x[::2] to remove the integer values but this is a stop-gap approach.
Just out of curiosity, why do you want to put QuantumRegisters in a numpy array?
I was writing code to automate management of ancillary qubits and I was using numpy arrays to store the QuantumRegisters I was managing.
I expect that quantum software components will be integrated into classical data structures more and more as we move forward so we should ensure that these operate as a programmer would expect them to when that happens.
I agree this is an issue (not an easy one, so removing good first issue tag). However, I'm not fully sure what "a programmer would expect".
It seems that @Woody1193 would expect this:
Nevertheless, I can argue that is also not correct. QuantumRegister (and Register in general) is an iterable. An the problem is that the elements of that iterable are also iterables (tuple specifically). This happens because we dont have a Bit class, but we piggyback tuple to express a Bit combination.
In this way,
So, go ahead and convince me that the I'm wrong :) @ajavadia @Woody1193
CC @nonhermitian , who usually have good insights on what a NumPy user would expect.
I would expect an array of registers to contain registers in the same manner as a list.
The original posters code however is confusing because you cannot have register as a dtype, it would be object, and doing append is super inefficient.
However, our objects should play nice with numpy arrays because it is a fundamental scientific python library.
I would expect an array of registers to contain registers in the same manner as a list.
I'm not fully sure if I understand. You mean this?
@1ucian0, the specific issue I'm having is that when you index into a QuantumRegister, you get back a tuple so, when using np.append to add a collection of QuantumRegister objects to an np.array, the append function will attempt to flatten the collection recursively, resulting in a list of QuantumRegisters and ints:
I can get around this by doing np.append(x, [ QuantumRegister(1) for _ in range(5) ] )[::2] but that is fragile. I could also extend QuantumRegister so it has the code you noted but that also won't fix the problem because np.append looks at __len__ to determine whether or not to flatten.
Yes. We agree that returning a tuple is a bad idea. However, if we want to keep QuantumRegister as iterable, the result will be:
I'm just trying to make sure we are all on the same page on what should it be the result.
With PR #2414:
