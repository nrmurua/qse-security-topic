I'm using CP2K 6.1. When building ELPA using the toolchain script, it fails to link with MKL, reporting as follows:
The error message is long, so I only pasted the first few errors.
I dag into this error, and found it caused by the lost of  -Wl,--start-group and -Wl,--end-group pair. install_mkl.sh prepares the library string with -Wl,--start-group and -Wl,--end-group, so that MKL libraries can be linked in any order. But when configuring ELPA, it lost this pair somewhere. According to the config.log generated by ELPA, it kept -Wl,--start-group and -Wl,--end-group for the first few command, until configuring ac_cv_fc_libs.
I searched around the master branch and found this issues seems not be fixed yet.
I came across the same issue in the current development version. The group delimiters get somehow misplaced along the way.  Looking at it closer, I wonder if it is a deeper issue. In my case, the configure call reported in config.log is:
which contains the following env var:
That is unexpected to me, as it links to vanilla ScaLAPACK, as opposed to the one from MKL (-lmkl_scalapack_lp64) as seen in multiple arch files. Should I be calling the toolchain installer differently? My line was:
It looks like the issue with ScaLAPACK from Netlib vs MKL is a separate thing (#435), but the issue with ELPA and MKL remains.
I was able to solve the issue in a hackish way by following the instructions in the documentation:
https://gitlab.mpcdf.mpg.de/elpa/elpa/wikis/INSTALL
and setting SCALAPACK_LDFLAGS and  SCALAPACK_FCFLAGS as recommended, only replacing MKL_HOME with MKLROOT.
A proper solution would get these from the variables the toolkit determines, but it at least shows the direction to take.
Confusingly, I see a lot of warnings of the type:
even though it is configured with --enable-shared=no.
It looks like ELPA just does not like those static libraries and --start-group/--end-group tags. When I change install_mkl.sh so that MKL_LIBS gets dynamic libraries instead, ELPA builds fine. Also, the above not portable warnings go away. CP2K itself also builds, it is just dynamically linked against MKL - I don't know if the current toolchain intentionally avoids that.
It seems this should be resolved by 0d7f2f7, shall we close it?
Yes, this seems to have been fixed.
