This was originally an issue on the qiskit-ionq provider but it's really at core a terra issue.
produces the following stacktrace:
This is the ionq provider error that stems from expecting only a circuit in this method due to the ionq provider backend being pinned to BackendV1.
Here's the rest of the stacktrace:
(it actually iteratively produces a couple hundred of these terra job errors/traces as it runs the circuits, but they're all the same)
The helper methods pass circuits instead of qobjs to the job run method like the contract for BackendV1 implies, and this estimation runs successfully.
I don't have a ton of context on this part of the codebase or the plans for versioned backends/deprecation of qobj etc, but from my uninformed perspective, it looks like the run_circuits helper method needs to be refactored to support versioned backends. Not exactly a complete suggestion but hopefully a start and enough background for someone who has a bit more context.
Yeah, your suggested solution is the path forward here. This needs to be fixed as the current state means that run_circuits doesn't respect the backends interface. It was missed because all of the providers/backend objects used for testing (ibmq, aer, and basicaer) still support qobj (albeit with a deprecation warning or pending deprecation warning) for backwards compatibility. But, we need to fix this asap, because besides ionq other backends don't support qobj and the ones tested won't support qobj in the near future.
@mtreinish Not sure if this is the right ticket or if you would prefer a new one, but another issue that has cropped up out of this exploration--
https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/utils/run_circuits.py#L28 expects a Job to have the method queue_position, which appears to only exist on the IBMQ provider, and nowhere in the JobV1 class definition.
It's fine here, it's really the same bug and should be fixed as part of this too. It's basically the same bug, just in a different part of that code path. It's basically that QuantumInstance/run_circuits is hardcoded to assume it's either running with only aer, basicaer, or ibmq and doesn't take any other providers into account. That's why I labeled this as high priority because this basically prevents anyone from running an algorithm class on new backends. Hopefully we'll have fix up shortly and I think this warrants a terra 0.17.2 release as soon as it is up too.
As you say queue_position isn't part of the job api (it wasn't even part of the legacy BaseJob class either) because it doesn't make sense on every provider/backend (and even if it did the semantics would be different depending on how a job queue was implemented). So that shouldn't be in the general call path anywhere in terra.
Looks like this is getting addressed in the PR, but dropping this here for posterity-- https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/utils/run_circuits.py#L309
