Quoting the ARL contract (see also draft_sayma_metlino_procurement_20160805.pdf):
@jordens What's the status of this?
@jbqubit could you outline what exactly this modulation consists of, and what the purpose is?
This was funded 4/18/2017. The implementation detail is provided in the artiq-hardware writeup written with @jordens. L245 Here's a rendered version.

Modulation by RTIO has several use cases for systems with N SAWG channels. At UMD a 32-qubit system with individual addressing requires N = 32 SAWG channels. For randomized benchmarking assume gate depth D gates, M pre-calculated randomized sequences, number of knots per gate K and bits per spline-point is B [0]. Any given rep of the experiment will choose among M so all must be pre-loaded in DRAM. Total number of DRTIO events is NDMK and total number of bits to be pre-loaded is something like NDMK*B.
As a specific case consider benchmarking of single-qubit gates implemented using K = 3 spline points; frequency set once and amplitude set three times. Total number of bits is BK = 48+3*(164+16) = 288 bits (with no DRTIO overhead). Assume, N=32, D=2000, M=500. So the total number of pre-loaded DRTIO events is NDMK = 96e6 and total number of bits is NDMBK = 912e6 bytes. Assuming a DMA data rate of R = 0.5e9 bit/s the time to load is NDMBK/R = 14 s. Benchmark experiment run time may be 30 minutes.
During experiment run time parameters may drift such as magnetic field, magnetic field gradient, laser beam intensity, secular frequencies. Interleaved with the benchmarking experiment are calibration experiments that measure drift. Modulation by RTIO permits parametric update of waveform f, p, a without recomputing and reloading all the waveforms by DMA.
One variety of two-qubit gate involve waveforms with K = 2(N+1) knots where each knot point modifies one frequency coefficient. There are order N(N-1) such gates for arbitrary pair-wise gates on an N-ion chain. Number of bits per knot point is then B = 16+482 = 112. For a randomized benchmarking experiment, N=32, D=200, M=500, K=2(32+1)=65. The total number of DRTIO events loaded into DMA is NDMK = 208e6 and total number of bits is NDMBK = 3e9 bytes. Real benchmarking would involve both one and two-qubit gates. The present Modulation by RTIO is a decent way of addressing the problem without resorting to gate-sequence-specific optimizations in gateware.
With ADCs and digital signal processing (ie PID) on Sayma a path called "Modulation by local DSP" is envisioned for real-time feedback similar to Modulation by RTIO. The many-channel case was envisioned for gates and it also could be used for stabilization of laser amplitude and frequency. Modulation by local DSP is not funded.
[0] Based on waveform parameterization in L159 the maximum number of bits per knot point is 16+1643+4823+1613+2 = 546.
The following paper offers a high-level discussion and sample algorithms using a multi-channel AOM for N-wise single-ion addressing. This is the basis of two-qubit gates pursued by UMD and other groups. Also see Appendix "Native single- and two-qubit rotations."
http://arxiv.org/abs/1603.04512
The following paper details the bi-chromatic gates on ion chains. It explains why N SAWG channels are needed for N ions.
http://iontrap.umd.edu/wp-content/uploads/2012/12/PhysRevLett.112.190502.pdf
The underlying theory of using a spin-dependent force for 2-qubit gates using transverse modes is here. The meat of bi-chromatic gates is in section "Arbitrary-speed TP gates through minimal control of the laser beams."
http://arxiv.org/abs/quant-ph/0601159
@jbqubit thanks for the clarification (particularly, for the clarification on the intended use-cases for this feature).
Since the current SAWG design suffers from being overly resource intensive, I think we should probably aim for the minimal complexity solution that meets our needs (lest over-designing one part of the SAWG causes serious problems elsewhere). So, some questions:
@jordens do you have any other questions about this feature/suggestions for simplifying it?
Am I right in thinking that "coherent phase mode" is just housekeeping done on the coredevice in software? i.e. it's a convenience feature that doesn't need any gateware?
@hartytp Thanks for the suggestions. Some input:
External modulation The FM input is critical for UMD. We frequency modulate the sideband frequencies in our MS gate (as done in the paper by Debnath, et al., cited above) and need to be able to choose the sign of the feedback for each of the two tones.
Neither the PM nor the AM inputs have an immediate application for us. We currently noise-eat with a separate AOM.
Amplitude modulation Common-mode modulation is enough if the tones are close relative to the AOM bandwidth. Is this a good assumption for you? Ideally, you'd want different gains to correct for the frequency-dependent AOM response.
RTIO channel count Agreed, a single RTIO channel can serve the FM inputs (and a separate one can serve the AM inputs) for the channels on one card.  (I prefer this, in fact.)
Coherent phase mode This is a useful housekeeping function, especially for implementing a branching logical diagram. It doesn't have to be implemented in gateware unless, by doing so, we improve performance. Would you expect additional jitter using absolute phase mode as if it were coherent phase mode? (In other words, would (t'_master-t'_sayma)*f' always be zero?)
@k-beck thanks for the feedback.
Neither the PM nor the AM inputs have an immediate application for us. We currently noise-eat with a separate AOM.
Okay, shall we cut those out of this proposal then to simplify things? We can always add them later as extensions but, given the issues we currently have with Sayma, it probably makes most sense to begin with the bare essentials and extend as necessary.
AM is important but AFAICT, the main use case for it will be closed-loop applications such as servos, rather than a direct modulation via RTIO. So, it makes most sense to leave that to a separate Sayma servo issue.
RTIO channel count Agreed, a single RTIO channel can serve the FM inputs (and a separate one can serve the AM inputs) for the channels on one card. (I prefer this, in fact.)
üëç
Out of curiosity though, @jordens how bad is the penalty (FPGA resources, compile time, timing closure, etc) for adding extra RTIO channels now that we have SED?
Coherent phase mode This is a useful housekeeping function, especially for implementing a branching logical diagram.
My understanding is that this is something that would only ever be implemented in software (see the top post) in any case, so it has no overhead apart from the time taken by the Kernel CPU to do the required maths.
Out of curiosity though, @jordens how bad is the penalty (FPGA resources, compile time, timing closure, etc) for adding extra RTIO channels now that we have SED?
i.e. while we're at it, would it be worth considering a more general simplification/overhaul to the SAWG RTIO interface?
External modulation The FM input is critical for UMD. We frequency modulate the sideband frequencies in our MS gate (as done in the paper by Debnath, et al., cited above) and need to be able to choose the sign of the feedback for each of the two tones.
@k-beck To be clear here: you mean that you want to have a way of compensating for things like drifting motional frequencies/light shifts/magnetic fields without recomputing your gate sequence. Is that right?
What's your expected pulse duration (single- and two-qubit)? Is the time that a pulse sequence takes to complete short compared with the time taken to recompute the pulse sequence? If not, does this feature really help you?
In the Debnath paper, it quotes a 2-quibt gate time of 235us. That's a lot of time compared with the time taken to submit an RTIO event, so unless you're going to start doing gates faster than that, recomputing pulse sequences on the fly should work fine, shouldn't it?
Anyway, I don't object to this feature at all -- although, it would be useful to hear from @jordens about how much work/resource consumption/etc it involves. But, I wonder if it might be a better overall strategy to focus on getting the sustained RTIO event rate up rather than trying to add lots of knobs that allow one to tweak fixed pulse sequences.
Another strategy that might work well would by to check that the SAWG parameterization is really optimal for the standard use-cases in the lab. e.g. is it currently parameterized in a way that requires more RTIO events to produce a pulse than are really necessary? If we tweaked the parameterisation a bit, we might be able to make it much faster. Could you post a simple RBM experiment using Sayma that we can look at?
To be clear here: you mean that you want to have a way of compensating for things like drifting motional frequencies/light shifts/magnetic fields without recomputing your gate sequence. Is that right?
@hartytp This is actually to feed-forward frequency noise from the laser we use for our 2-qubit gates. We're correcting for acoustical noise in the laser cavity (dominant noise peaks are a few hundred Hz), not slow drifts (like the ones you mention) that we intend to address by recomputing.
(And, yes, our two-qubit gate times will be similar to those in the Debnath paper)
I'd like to hear from other users before cutting AM/PM, but it's fine from my vantage point especially if it makes resource counts go from 'more than we have' to 'workable'.
I'd like to hear from other users before cutting AM/PM, but it's fine from my vantage point especially if it makes resource counts go from 'more than we have' to 'workable'.
Agreed! Input from more potential users of Sayma would be great. Otherwise, I tend to adopt the rule of thumb that if no one can be bothered to advocate for a feature then it's probably not important.
In any case, if we are designing/specifying features such as AM/PM without guidance from the people who will use them -- or even a clear picture of who those people might be -- then we're unlikely to do a good job of designing something that fits the use-case well.
NB however: the suggestion isn't necessarily to "cut" AM/PM completely, but rather to drop them from this particular proposal, which relates to modulation via (D)RTIO. e.g. AM will be essential for a noise-eater, which is a high-priority for us, but it makes sense to discuss that in a separate Sayma servo proposal.
@hartytp This is actually to feed-forward frequency noise from the laser we use for our 2-qubit gates. We're correcting for acoustical noise in the laser cavity (dominant noise peaks are a few hundred Hz), not slow drifts (like the ones you mention) that we intend to address by recomputing.
Okay, thanks for the clarification. That's quite a different application to the one that Joe posted above.
Can you give me a more precise reference to how you do this at the moment, please as I don't have a clear picture of your planned use-case for this yet?
Is your plan something like to digitize a beat-note (DC or some AC signal?) and feed-forwards on the RF frequency produced by each Sayma channel to correct for fluctuations?
This issue is specifically about modulation via (D)RTIO. Does that mean that your plan is to do the feed-forwards maths on the CPU (currently a soft-CPU with no FPU) and then to program the SAWG FM input over DRTIO? What update rate + channel count are you expecting?
Is there a reason you either can't do this in gateware on Sayma (i.e. using a SAWG FM input but not DRTIO) or add an extra AOM to perform the frequency shift? An extra AOM could easily be controlled via a modified form of the SU-servo, which seems like a much cleaner way of doing things (separating house-keeping from coherent control).
@hartytp
The current work calls for 9 additional 0th order spline RTIO channels per SAWG channel that are then added/multiplied onto the f/p/a/u streams after spline interpolation. Addition saturation is not foreseen.
Yes. Coherent phase updates are just a f*T offset on absolute phase mode in software.
Simplifying the specification for SAWG including its RTIO interface would likely help. This is why I suggested revisiting the specifications for Sayma 2 and it's what my suggestions and proposals elsewhere are about. When there is funding for Sayma 2 I can imagine several opportunities to improve and simplify SAWG (different DUC scheme as suggested elsewhere, improving and shrinking the spline coefficient representation/serialization, transaction-based SAWG RTIO events which would cut down the number of RTIO channels, raw sample channels, revisiting phase and frequency resolution, study required bit depth/resource usage...).
Canceled from the ARL contract.
