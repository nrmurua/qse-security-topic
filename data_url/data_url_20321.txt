Following approach on nist-branch.
Also, should we worry that the _sign function in master branch has a different connotation than _sign in nist-branch? _sign in master outputs just the digest, _sign in nist-branch outputs the message and digest combined. It's true that the verification functions are named differently (_verify in master, _sign_open in nist-branch), but the signing functions have the same name. Perhaps we should rename one of them so they are distinct (maybe call nist-branch _sign_combined?).
Perhaps instead call the master branch version _sign_digest and leave nist branch as _sign?
You are not forced to sign a digest with this API, so this could be confusing.
This issue needs more work than simply changing the algid enum to a string. If the goal is more harmonization with the nist-branch, then we should as well: change the directory structure (/src/sig__ALG_ to /src/sig/ALG), change the scheme constructors (from one handler functions to individual OQS_SIG__ALG__new functions wrapped with ifdef OQS_ENABLE_SIG__ALG_).
I'll plan to do all that in this issue.
I might be able to find some time to work on this over the weekend.  Are you in the middle of this?
Yes, I'm almost done with a big refactoring; essentially migrating a lot of code from the nist-branch. I still have some finishing touches to complete. I'm dealing with a sick kid today, so I'll be delayed a bit, but I'm hoping to work on this tonight and over the weekend. Depending on how it's going, I might hand off the baton to you if you have free time over the weekend...
Okay, if you have something in a state to hand off then please feel free. But I know that getting to a hand-off state can sometimes be more work, so don't feel obliged, and don't interrupt family time to do that, it can also wait to next week.
Ready in PR #391
Resolved by #391.
