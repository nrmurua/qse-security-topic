Is your feature request related to a use case or problem? Please describe.
The core data classes of cirq are based on a mutable OO class hierarchy. This feature request offers to replace or augment these with an immutable variant.
A number of the issues we come across in cirq are, I don't want to say "caused by mutable / OO inheritance structure", but at least less likely to occur or simpler to solve in a more functional framework. Some examples:
Additionally, several of the feature requests and roadmap items in the pipeline are features that map well to functional programming:
Describe the solution you'd like
The advantage here is that once this is finished, the core data classes will all be simple, self-contained, and we'll likely rarely have to touch them again. All "logic" can be extracted to functions external to the core classes. This reduces the need to worry about whether you may have broken something that the class or some child class depends on.
[optional] Describe alternatives/workarounds you've considered
None of the above requires immutability. We can fine-tune our class hierarchies and possibly get rid of most of the problems.
Concerns are numerous:
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle.
Discussed at cirq cync; most things are already immutable(ish). @daxfohl to go through and find specific stragglers
I'm closing this. The scope is too broad, and, as mentioned, most stuff is already immutable. There may be some targeted things we can do like creating "mutator" functions for the frozen circuit. But those can be raised as needed on their own.
