Make Gate Methods in the QuantumCircuit class return self for chain operations. Sorry if that isn't very clear; Here's an example: The cx, x, and h gates should return self (the QuantumCircuit instance they are a member of) so that this is possible: qc = QuantumCircuit(3,3).x(0).x(1).h(0).cx(0,1).x(2).cx(1,2) This functionality can also be seen in python's built in classes, such as the string class, allowing for chain operations such as print("string".upper()[::-1].capitalize()).
Hey @RvveSplit, can I have a look at this?
Hey @RvveSplit, can I have a look at this?
I did replace the return values with self for the gates defined in existing_gate_names in line 1337 of quantumcircuit.py instead of modifying the InstructionSet class for returning a QuantumCircuit instance. Is that the right way to do it?
I thought that changing InstructionSet altogether to return a QuantumCircuit may break some other code present in the modules.
The gate methods return InstructionSet, because sometimes you need to modify the instruction after it's created, such as by adding a classical condition onto it:
The chained examples given in the first post are actually an example of something different; in this case, they're not mutating any state at all, but are returning a different object.  It's a common in Python for mutating methods to return None or auxiliary data, to indicate that they mutated the underlying object.  For example, numpy.sort(arr) (doesn't mutate) returns a copy, but arr.sort() (mutates in-place) returns None.
At any rate, this would be a very breaking change of the API for little benefit, so as things stand right now, it's not something we'd consider accepting a PR for.
