I think some of the motivation for verbatim syntax #224 is driven by the ambiguity of how we currently link defcal and gate definitions by matching on name. This has a couple of implications, in particular there's no obvious way to specify multiple implementations of the same logical gate, for example with a slow and fast cnot implementation cnot_slow and cnot_fast would have to both be defined as gates equivalent to cx, with two corresponding defcals and controlling when it is ok for the compiler to replace one with the other, vs manually forcing a choice can become a matter of convention.
I'm not attached to the details of implements clause but something equivalent is fine.
More complex examples with parameters:
One could imagine allowing multiple instructions and/or arithmetic in the implements clause, but I suggest that this is a case where gate should be used, and implements should be a single instruction with the same number of free parameters as the defcal:
See also #243 from @taalexander where the acual {...} implementation of the defcal is left opaque/external.
This idea makes a lot of sense to me.
We can even take one step further and tell the compiler if we want certain defcal to be self adjoint and what are the gates it commute. Basically also overwrite the algorithm-level semantics of gates with hardware-level semantics of gates for circuit optimization (e.g. a cx pulse implementation might not be self adjoint).
Thinking about this further I think I prefer that the defcal signature and the gate signature must be identical, so the implements line can be:
and to take @shiyunon suggestion, maybe implements is only one of several tags that can give information to the compiler about the pulse implementation, so maybe a list of tags can be attached to a defcal:
Things I can imagine you might want to be able to say about defcals:
There's probably a few more other such properties, and while it's unlikely that every compiler can take full advantage of all of them, if they are specified so that they only add information for the compiler if present, then when a compiler doesn't understand a particular tag it can safely ignore it without producing incorrect results, but if it does understand then maybe it can  optimize further. This is much like gcc function attributes:
which is why I put double-paren delimiters above....
Maybe we can  make (some/all of) the "box-level pragmas" be of exactly this form, overriding the set of defcal attribs locally within the box.
I think other defcal properties are interesting and useful, however, could we focus on the bare minimum defcal $rx(angle[20] phi) $0 ((implements rc;)) {...} to start? This wouldn't preclude choosing syntax that is extensible since we have this in mind.
