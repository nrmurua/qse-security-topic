When debugging the new instrument server I find that restarting the notebook does not allow me to reconnect to all instruments.
Restarting my notebook and running the initialization gives me the following error pyvisa.errors.VisaIOError: ('VI_ERROR_RSRC_BUSY (-1073807246): The resource is valid, but VISA cannot currently access it.', (see below for full log).
This is consistent with another connection still being open. Killing the entire Jupyter process and restarting solves the problem. However this is not the way to do it for two reasons.
I think this can be fixed by adding a __del__ method to the instruments that properly closes the connection.
@guenp I think the issue is not with what is in the  __del__ but rather that it is not called when the notebook is restarted because the server process persists when the notebook is restarted. I think that adding a function that can kill a server process should already do the job, it would be best if this get's called automatically when the notebook is restarted. @alexcjohnson Do you think something like this would be feasible?
Also it is super inconvenient to have to restart the notebook server + notebook everytime we make a small change to a single instrument. This really hampers the workflow.
I totally agree with @AdriaanRol s comments, I see myself restarting the notebook, or the whole jupyther process many, many times. Especially TCP connections don't get closed, or not closed properly, locally I added the __del__ and let it call self.close() but as @AdriaanRol mentions, this is not at all handled when restarting the notebook.
It is actually really annoying to kill the notebook as you loose a lot of stuff. And I dont see any reason for this. Actually, I am rather confused that the notebook process has all the power, just a single mistake somewhere forces me to restart the notebook / the jupyther process.
Another reason to move to #123
Yes! It would make sense if the ipython notebook is not the main process but acts as a user interface to the measurement server. This way, users can also choose to use any other kind of GUI they prefer (as noted in qdev-dk-archive#33).
A separate process is a good concept, but we should have good control over it.
Right now after using qcodes for some time I am left with many open plot windows which are no longer connected to my session (spyder or an ipython  notebook). I cannot close the windows any more (not using commands since I have no connection to the process, and not using the GUI since the windows have become unresponsive). The only way to close these is to look manually in the system task manager and kill any job with python in the name...
So if control over the process is good +1, otherwise keep everything local (at least by default).
@peendebak good point, we need some kind of process manager that lists open/running processes and closes them when they are no longer needed (or allows users to do so). In which cases do the plotting processes become unresponsive?
Usually I am working in Spyder and have opened a single plotting window (QtPlot most of the time). Then I kill the ipython console embedded in spyder to restart my session. (this can be because qcodes crashed, or because I want to be certain to reload all modules). The plot window then stays open and often cannot be closed with the GUI controls. This is under unix. If I have some more tools (e.g. a process manager) I can provide more info.
@alexcjohnson I assume this is something related to processes being gently orphaned somewhere, most likely same issue with sockets ?
Wonder how this issue got lost in may.
