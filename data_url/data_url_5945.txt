In order to use the MPS simulation_method, @gadial requested a snapshot that returns a single amplitude of the statevector, without computing the entire statevector.
This functionality is useful for MPS, because it saves computing the entire statevector, if not needed.
Question: Is this useful for other simulation_methods?
The interface can look something like:
circ.snapshot_amplitude("my amp", ["010001"])
I've been meaning to add this functionality for the statevector simulator for awhile, so it should be added for statevector, statevector_gpu, and MPS.
I would make it specify a list of amplitudes (as either as strings or ints) and then return the array of complex numbers for all specified amplitudes. If the params is the full range [0, ..., n-1] then the output should be identical to the statevector snapshot.
It could also be convenient to allow a qubits argument, so that the strings/ints are the values for that qubit mask, with all other qubits assumed to be the 0-state for the full amplitude.
@chriseclectic , a few questions:
A new snapshot. Something like
And it should assemble to a qobj instruction
where params are stored as ints rather than bitstrings.
From python side we could also allow bit-string inputs for params and convert them to ints when constructing the python object.
The qubits argument is another way of specifying masks. Ie the input params are applied to the specified qubit positions and all other qubits in zero (though you could set a custom value other than zero to be more general like in your example). ie if you had (["00", "01", "10", "11"], qubits=[1, 3]) would be equivalent to (["0000", "0010", "1000", "1010"]) for a 4-qubit statevector.
Any fancy masking could be done on the python side too and converted to list of int params so I don't think we need to worry about it for the first iteration.
