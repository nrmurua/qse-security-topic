Currently, we do not support a defcal for reset.
options
add three gates, reset measurement
or
can we get it all under one defcal
Just to expand upon what Jay wrote a bit. The central issue here is: what is an acceptable target for a defcal? Right now it is gates + measure as a special case. However, that leaves open the question of how to handle reset, which definitely is problematic because we have typically said that defcals shouldnâ€™t contain control flow, because that breaks the single-threaded control model that is implicit in OpenQASM3.
So, a couple options that were discussed:
As we discuss I initially preferred 3 but now like 2 as we can add operations to qasm and then define them to be used like gates. For instance I could envision that we may want to add D_phase(gamma) where we do a dephasing channel which could be implements by a defcal which could be done by adding white noise to a parameter that sets the qubit frequency or entangles with a second qubit and measures it there by doing this operation back on the qubit of interest.
I think we should start going this way (not sure of why for applications yet - maybe there is some bath engineering examples that could be interesting) but for studying noise effects could be interesting and as such I would add operation to qasm which is a bigger than a gate but less than a subroutine but it can not support conditional operations.
In (2) there could also be additional measure-like operations that return level 0 or level 1 data, rather than a `bit.
In (2) there could also be additional measure-like operations that return level 0 or level 1 data, rather than a `bit.
This could add significant complexity - two potential use-cases:
To flesh out Blake's suggestion (2):
we could allow defcal to also target a new thing more general than unitary gate. Call it "foo" for now because choosing the correct name may be tricky. Just as
defines a unitary gate in order to teach the compiler what the meaning of mygate is, lets have
to define teach the compiler what myfoo does, where the parameters and output cbit part of the syntax can be skipped if unused.
For both a foo or a gate we can bind it to a concrete pulse-level implementation with a defcal instruction, which would have to have extended syntax for the cbits (already this is already defined in the spec as a special case for defcal measure)
Remaining questions:
What is allowed in the body of a foo? Consensus seems currently to be for keeping it quite restricted: straight line qasm with no loops, conditionals, qbit/cbit allocation
If this foo concept is added to cover reset then we still have to decide what actually goes in the body of the defcal reset, do we special case allow for an if statement as long as it has a well-defined time?
do we special case allow for an if statement as long as it has a well-defined time?
I supposse control-flow only matters to the circuit compiler/scheduler insofar as the qubit instruction POVM can be reasoned about and the duration reported respectively. We might consider the circuit-level scheduling optional as well.
