Hello,
First, this is not a bug or issue. However, I was not sure where to ask the question so I wanted to ask here.
I want to simulate surface code in the absence of error. It is simply I will initialize my data qubits in zero states and I will use x and z stabilizer. I will measure the stabilizers and I will see the result. For example, when I measure the X stabilizer, they will commute with Z stabilizer etc.. In that case, I am not sure what should change in toric code to make it surface code. It seemed to me that, toric_code_x_stabilisers (https://pymatching.readthedocs.io/en/latest/toric-code-example.html#) can stay same. Do we have a small example for surface code?
Another point, I wanted to create a zero matrix since my all data qubits will be initialize in 0 states. For distance 4, I will have 16 data qubits. Since I do not want to simulate with noise, my noise array is a zero array.  I wrote the following script:
`Hz = np.array([
[0,0,0,0],
[0,0,0,0],
[0,0,0,0],
[0,0,0,0]
])
m = Matching(Hz)
noise = np.array([0,0,0,0])
z = Hz@noise % 2
print(z)
m.draw()
c = m.decode(z)
print("c: {}, of type {}".format(c, type(c)))`
I am having this error: IndexError: index 0 is out of bounds for axis 0 with size 0
P.S if you think github is not the best place to ask this kind of question, I can ask via quantum stack exchange.
Could you help me for building a trivial example as I have just described above
Thank you very much
Best
Hi @apassenger, thanks for the questions.
In the absence of error there's no need for a decoder, as you already know that no error has occurred, so there is nothing to correct, and the syndrome will also be all-zeros. If you did want to simulate this e.g. for the toric code, it's just a special case of the example already in the toric-code-example.ipynb notebook, but for p=0. E.g. we could have the error probabilities ps start at 0:
So in the example you gave, you are correct that noise = np.array([0,0,0,0]) is all-zeros, but the check matrix Hz should be unchanged relative to the case that data qubit errors are non-zero. It shouldn't be set to zero, since the Z check matrix Hz defines the Z stabilisers (rather than their measurement outcomes), and these are unchanged. The syndrome/ stabiliser measurements Hz@noise % 2 will be all-zero. The reason for the exception is that you had (all) empty columns in the check matrix. However, the exception raised by pymatching there isn't very helpful, and is also unnecessary. I've fixed this so that empty columns are just ignored (no edge added to the graph), and don't raise an exception. This fix will be in the next release (v2.0). Though as I say, your check matrix columns shouldn't be empty for what you're trying to do here.
As to adding a surface code example: that's a small modification to the code in the notebook (it basically involves changing the boundaries in the repetition code method), however if you're not familiar with the hypergraph product construction then this isn't the most intuitive way of constructing them. I'd recommend instead looking at the getting started notebook in Stim to construct surface codes and decode them with pymatching (e.g. also see the stim.Circuit.generated). You can specify the noise model, and the resultant stim circuits can be used to configure the pymatching decoder to decode.
I might also switch from the toric code to the surface code in the notebook since I imagine most people are more interested in that, but if you want more realistic noise (e.g. circuit-level noise) then best to use stim.
Happy to answer these questions here, though you might get more responses to the conceptual/theory questions on the quantum computing stack exchange (maybe tagging error-correction).
Hope this helps!
Hello,
Thanks for the answer :)
Here is the diagram for L=3 toric code:

2)I also tried to do something with parity check matrix  directly. I wanted to make distance = 4 surface code parity check matrix. I also want to not to put any errors. So I created a diagonal 4*4 matrix However, I am a bit confused because in the documentation it was written that every rows corresponds a Z stablizer and every columns corresponds an error. According to this explanation, my stabilizers and my errors on the same qubit??:
Here is my code:
Here is the result of the code:

Many thanks
Cheers,
