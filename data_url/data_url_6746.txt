Hello,
First thanks for this promising package. I'm trying to implement an interactive circuit, in which the user can say in real time the operations to do depending on the previous measurements outcome (NB: it's different from conditional gate as it is really interactive):
I tried to use the measure operation to implement a basic measurement of a bell pair (expect 00 or 11 outcome), but does not work as I expect (always 00 outcome, no 11), so I guess I missed something. Is it a bug, or did I missed something?
I saw that there is the measure gate, but I'm affraid by the warning Measurement gate will reset qubit to measured value only if there are gates with classical control, as here, I really want to collapse the state after the first measurement, otherwise I'll get inconsistent measurements.
@tobiasBora you need to put circuit.run() before first measurement. addGate realy only adds gate to the circuit, doesn't execute the gate.
P.S. you can use measureAllMultishot(shots) as well:
One more thing: when you do measure() for the first time (after .run()) it internally calls measureAll() which caches measurement results. Any call to measure() after that will give you the same result (if you don't run() circuit again). That is actually also how real device behaves - measurement destroys the superposition, any subsequent measurement will return the same result unless you execute the program again.
If circuit is big (many qubits) then .run() takes a lot of time. In that case you can reset cache by executing mesureAll(true) before your measure(qubit) operations.
Example:
Thanks for your answer, however it does not really solve my need. Indeed, by "adaptive measurements", I mean that I'd like to be able to perform new gates after the measurement done by Alice (I really want a real user to say what measurement he want to do, and I can't know the measurement in advance). I tried the following (that just add a X on Bob's qubit), but I get wrong results (like 11 which is supposed to be impossible, the only outcomes behing 01 and 10).
When you add a gate, state is not changed. Remember: addGate adds a gate to the circuit but doesn't execute a gate.
You need to do run() after modifying circuit (but that will destroy measurement cache).
Let's see... maybe instead addGate(...) you can do:
But that will also reset measurement cache.
Hum... the best would be to run circuit with circuit.run(null, { strictMode: true }) that will destroy superposition after measurement (like real device), and then use applyGate (instead addGate) for additional gates (added on the fly)
Note:
strictMode: true is not properly tested, so be careful.
Your code would look something like:
I just tested - this will not work. Sorry, what you are trying to do is not implemented (adding gates on the fly while preserving state)
However, why you don't do this:

Or in javascript:
That will set classical registers to 01 or 10.
There is also onGate callback in options to run:
Ok, thanks for the answer, too bad it's not implemented. Let me know if there is any plan for that.
And concerning your last proposition I'm not sure to understand, how does it help to apply gates on the fly?
