Is your feature request related to a problem? Please describe.
I would like to use a qutip.Qobj as a key for a functools.lru_cache, but since the qutip.Qobj is not hashable, I can't do this.
Describe the solution you'd like
A clear and concise description of what you want to happen.
I can implement qutip.Qobj.__hash__, which would hash the dims and the data of the qutip.Qobj.
Describe alternatives you've considered
A clear and concise description of any alternative solutions or features you've considered.
Additional context
Add any other context or screenshots about the feature request here.
We can't implement __hash__ for Qobj, sorry - it's just not possible while following the Python data model.  The two principle points that a hash function must follow from there are
Unfortunately we fail on both points.  Qobj.__eq__ is a rounding match, because it gives a total True or False based on a floating point tolerance, not on exact equality.  I'm not aware of any hash function which can handle this.  Second, the data attribute of a Qobj is mutable in-place, and so hashing based on the data in the object is not valid.  This is the same reason that list and np.ndarray are also not hashable types.
If your cache is just for memoisation over a small number of Qobj where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time.  I mean something like
This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want.  Also note that this is not infallible: the floating-point tolerance used in __eq__ means that Qobj does not satisfy transitive equality (i.e. a == b and b == c does not imply a == c).  The primary consequence of this is that the cache will simply be a little under-zealous, and sometimes it will calculate the value twice for three similar Qobj.
Apropos of nothing else, I think this might be worth a look:
https://github.com/pixelogik/NearPy
Thank you so much for the follow-up. I'll use the decorator.
