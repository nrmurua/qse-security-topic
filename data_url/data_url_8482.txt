Is there any performance reason why we should not compile the extensions using C++ ?
We are having issues with the conda forge packages:
conda-forge/qutip-feedstock#16
I am sure than this problem would not occur if we were compiling using MS compilers.
We are receiving lots of support requests on the Google group for help installing on Windows
We do not have a solution for python>=3.5 on Windows.
I posted a question on the Cython help group asking about accessing complex functions on Windows. One suggestion was to try C++, importing functions from complex rather than complex.h. I made a small test project that imported conj and it compiled using MS compilers and worked on Windows 10 with both Python 2.7 and 3.5.
We only have one small C source file. I guess it could be rewritten in C++ quite easily.
I can do further tests to check performance if we consider C++ compilation is an option for qutip.
I dont think that there would be a performance issue. If everything buildsâ€‹ fine, then that is what we should do.
It seems that most of what we need is predefined in cython libcpp
Ok, great news. I think we have a solution.
It's only really the spmv.c file that I am not exactly sure what to do about, as I have little or no actual C/C++ experience.
It is actually a bit more complicated than that, but I will look into it. Many extern statements will likely need changing.
Yes, I could not get the functions in libcpp.complex to work with something simple like:
however this did work:
Might be something to do with the type conversion mentioned in:
http://stackoverflow.com/questions/36732779/complex-conversion-to-python-complex
Try for example:
Should work.
There is an incompatibility between OSX clang and gcc libstdc++ binaries.  As such, we could not do parallel spmv on OSX if we move to C++ and use homebrew's GCC.  I will try to see if the homebrew llvm will work.
I assume that parallel spmv does not work on Windows anyway?
I could look into making the compile language conditional, i.e. use C++ on Windows, otherwise C
It does if we use mingwpy!
My suggestion is to leave this as it is, at least for now.  Best to get paper stuff done first.
Ok, sure. We will park this for now
I think that this is the correct solution though, so big bonus points for hunting this down!  At work, we have no use for OSX, and would love py3 on win, so I can fiddle around to get something working.  Having two separate sources may be the route we need to go.  It wouldn't be the end of the world, but should be avoided unless absolutely necessary.
Yes, I agree, it would be much better to avoid separate sources. It is just the spmv.c that does the parallel spmv work is it?
Actually, it seems that the sparse_struct stuff segfaults when run under cpp mode.  Compiles fine, but crashes.  So cpp seems like a no go.
Nevermind, still got it to work.  Seems like we are still in business.
I think i got everything to work.  Even on osx.
Will get a pull for this tonight or tomorrow.
This is done.
