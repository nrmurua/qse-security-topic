In Cirq, we have validation checks as part of constructors for a majority of fundamental classes. For example:

A simple benchmark that constructs n moments, each with n single qubit operations acting on a different line qubit shows a performance difference of ~25% when the validations are turned on vs turned off. For example, the following code can be used as a benchmark. Note that we explicitly do not measure the time taken for constructing operations here since we reuse the same set of operations across all moments.

This implies that as we construct circuits larger and larger number of moments, turning off the validations can lead us to a significant performance improvment.
Whenever one constructs an a new operation by applying a gate on qubits, we validate that the qubits passed to the gate are have the correct shape and number. This is done via the _validate_qid_shape method.

Since this scales with number of operations in our circuits, it becomes a major bottleneck for a majority of common benchmarks and workflows. We already have a hacky solution to disable this validation check via a context manager but it lives in cirq.contrib and should be better supported:

In order to boost performance in production code, we should provide users with a way to turn off such validation checks in constructors of objects across Cirq (moments, operations, gates etc.) There are two potential ways I can think of doing this:
Python has a built-in constant __debug__ which is set to True by default for regular development mode (i.e. whenever you run python main.py). Whenever python is run in production mode; i.e. python -O main.py, this built-in constant is set to False. See https://docs.python.org/3/library/constants.html#debug__ for more details.
We should consider refactoring all the validation checks in constructors of objects (and other factory methods like Moment.with_operations etc.) to conditionally perform a validation only when __debug__ is True. This will provide users with a straightforward way to run a "faster" version of their code whenever they care about performance and are done with development and testing. This is also how python handles assert statements, which conditionally raise assertions only when ___debug__ is True.
If we wish to make this behavior decoupled from rest of python and something specific to Cirq, we can consider providing users with a similar __cirq_debug__ global constant which is set to True by default and all validation checks in Cirq are conditioned on this constant. Users can set the constant to False in their main scripts manually and that should disable all validation checks and thus result in a performance boost.
I believe both the proposed approaches would be backwards compatible and would not lead to any significant changes in the API. They are also fairly easy to implement since we don't need to modify any APIs or pass in flags around the codebase. Since improving performance is one of our main focus areas going forward, I'd like to kick off a discussion soon and try to arrive at a consensus so we can start implementing this change.
cc @dabacon @maffoo @dstrain115
This seems like a nice thing to do. I think way 2 or something like it would be better because I think we want to be able to turn validations on and off dynamically and only for certain parts of the code or in certain threads. Also, since people often use cirq interactively in ipython or colabs, I don't think we want to require restarting the runtime with different flags in order to enable or disable validations.
I'm interested in working on this.
@sanuj, the infrastructure for disabling validations was implemented in #6000, but something you could work on would be to add __cirq_debug__ checks in more places where appropriate.
