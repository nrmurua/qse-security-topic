#1218 brought to light that we're currently doing CI builds on msys2 on Windows, but there are failures.  After discussion, none of the core team is making use of msys2. So the proposal is to drop msys2 from the CI builds. Please speak up here if you object, otherwise we'll do so around June 22.
msys2 is the only toolchain (in my experience), which allows testing SIKE primitives as a shared library under Windows. Mingw64/MSVC builds only expose SIDH interface in DLL exports (along all other non-isogenious primitives). There's no SIKE. Is it a bug?
I just tried on a Windows VM and SIKE appears (and operates) like any other algorithm when compiled into a DLL (cmake parameter BUILD_SHARED_LIB ) using MSVC. So can you please elaborate a bit more what you mean by the above?
Sure, just compiled on Visual Studio Community 2022, using
cmake .. -G Ninja -DBUILD_SHARED_LIBS=ON
ninja
There are OQS_KEM_sidh_* exports in the resulting DLL, no sike.
(Now) understood (and confirmed: dumpbin /exports oqs.dll reports no SIKE, but indeed SIDH symbols). As I have no real experience with the Windows toolchain (and so far thought both algorithm families are handled identically in liboqs), this is to ask @christianpaquin for help.
As stated above, both algorithms are enabled:
so there must be some "symbol visibility" directive involved that I couldn't find and that does not affect Linux: In a shared lib/.so, both SIDH and SIKE symbols do appear.
Was able to solve the issue by adding set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON) directive to the main CMakeLists.txt file.
Though, it's quite intriguing why SIKE symbols remain hidden by default.
Thanks for the update: Intriguing indeed. Would you want to contribute this via PR?
For the avoidance of doubt, @mcoret you're now also OK with removing msys2 support given the (possible) use of CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS in other toolchains?
Yes, I am fine with that.
