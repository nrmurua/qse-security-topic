The Dataset Context Manager.ipynb notebook randomly fails on Windows when executed from the command line.
The notebook should execute and the above command should exit with return code 0.
When running the following script on my local Windows machine:
I get the following error roughly 1 out of 11 times:
Note: the same is seen with a simple batch file running a loop that executes the notebook over and over. Running the same python code on a mac seems to always succeed. Nope, it fails on my mac too, just only 2 out of 100 times. Same error.
On AppVeyor, we sometimes (I don't have a good number, perhaps 1 in 5 times?) get another error from the same notebook execution:
Windows
master
0c3cd4c
@QCoDeS/core
One step closer to a solution: the non-AppVeyor failing is due to #1059.
Sometimes the scipy optimizer starts out in such a poor position that it remains stuck and thus produces identical setpoints.
I think the problem is that the subscriber is generated with an id which is hash_from_parts(str(time.time())) I suspect that in tests this this may be called too fast after each other since we have two subscribers, and we thus get two subscribers with the same id. I suggest adding some random numbers to the time or use the uuid module
Specifically
From The std lib docs
Note that even though the time is always returned as a floating point number, not all systems
provide time with a better precision than 1 second. While this function normally returns non-
decreasing values, it can return a lower value than a previous call if the system clock has been set
back between the two calls.
The output of the following on appveyor could be interesting:
On my mac
on the test setup
@jenshnielsen, yes, we should probably look into timings on appveyor. Here is another timing problem https://ci.appveyor.com/project/WilliamHPNielsen/qcodes/build/1.0.68
Pushed #1063 to get some insight. Once we can require python 3.7 we should use time.monotonic_ns() https://docs.python.org/3.7/library/time.html#time.monotonic_ns but that is a way off That does not help anything it's not really any better just returning ints instead of floats
This https://msdn.microsoft.com/en-us/library/windows/desktop/dn553408(v=vs.85).aspx also states that the perf counter is monotonic on windows
Python monotonic cloc uses this for some reason
Reopening this since #1065 is needed as well to fully alleviate the problems.
