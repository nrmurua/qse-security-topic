Following the advice from this SE post, I have been trying to install QuTiP in a fresh environment along with the BLAS accelerate libraries specific to the Apple M1/M2 chips, in order to get a speedup by using a BLAS library designed for my laptop.
In a blank environment, I first ran conda install numpy "libblas=*=*accelerate", followed by conda install qutip and got the following error message:
This is odd given that I am using numpy 1.26.2 and Mac OS 13.4, which appear to satisfy the requirements.  Instead, I tried using pip install qutip which circumvented this error, but results in incorrect behavior as described below.
[[-0.70710678+0.j  0.70710678+0.j] [ 0.70710678+0.j  0.70710678+0.j]]
I am just comparing the behavior between two environments.  The first one correctly diagonalizes the Pauli X operator with a Hadamard, and the second does not.  The "correct" environment uses a standard numpy 1.26.2 install, with qutip installed with conda.  The "incorrect" environment uses the accelerate numpy install, and qutip installed with pip.  Each environment has the same qutip.about() return string.
In reality, my use case is more complex than this, but I managed to boil down the error to faulty matrix diagonlization.  I also want to add that I do indeed get a factor of ~4 speedup in pure numpy examples (like those linked in the SE post), so it's only when integrating with QuTiP that something goes awry.  It might be the case that there really is some compatibility issue, and using pip doesn't really fix anything.  I'm mainly wondering whether this behavior is expected, or if there is a correct way of getting QuTiP and the accelerate BLAS to work together that I am missing.
You could try your simulation to run with qutip.setting.eigh_unsafe = True.
This will tell qutip to use eig instead of eigh and to the ortho-normalization manually.
There are bugs with eigh on mac, see numpy/numpy#24640, #1288...
Thanks for the heads-up, I didn't know there were issues with eigh on Mac.  Where in QuTiP is the qutip.setting.eigh_unsafe attribute defined?  A quick search of the repo didn't turn up anything.  Also, I just came across an example where eigh succeeds on a complex Hermitian matrix, but eig fails, so now I'm pretty confused.
In the release version qutip-4.7.X, it is set in qutip/__init__.py
On master it is at 
Qutip's sparse eig is not safe for matrices with degenerate real part of the eigen value (#1998), but I have not seen issues with the dense one (calling lapack through numpy).
