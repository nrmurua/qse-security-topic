CentOS 8, GCC-8.3.1, current master (or rather, source directories taken and placed into the source tree of my project).
Basically, linker fails, complaining about invntt.S.o requiring -fPIC flag, despite that this flag was given. Here's the error:
Here you can see that the source file in question indeed was compiled with -fPIC flag, which did not help:
Help is appreciated.
In case the complete log helps, here it is: dilithium-out.txt
I have the same problem on Ubuntu-20.04.1.
It looks like on MacOS X this file compiles OK because Clang-10 can properly parse it and process assembly commands. On Linux, GCC fails on assembly stuff, and YASM (that could process assembly) gets hung up on cdecl() macro, which it can't deal with.
I don't know, but I suspect that the difference between what I'm doing and what your CI does is that I'm adding your code to a shared library, and your CI and tests seem to be only building static libs, not validating that it integrates fine into dynamic libs.
Ping?
This is a bad one, pretty much preventing us from using optimized Dilithium...
I've not got time to look into this; but I wonder why OQS would not be having trouble — they also use CMake and I think they also use shared libraries.
If you have suggestions for improving CI we could review them, but unfortunately I also can't put in time at the moment to look into those things.
I wonder why OQS would not be having trouble — they also use CMake and I think they also use shared libraries.
Interesting. I rather doubt CMake is a factor here. I did build liboqs successfully as a shared library (had to switch to static because OpenSSL tests consistently failed to locate that dynamic library!).
Will investigate that.
If you have suggestions for improving CI we could review them, but unfortunately I also can't put in time at the moment to look into those things
CI is not my strong point, but I'll take a look a bit later.
OQS pulls dilithium directly from upstream (despite the pqclean_ folder name). See open-quantum-safe/liboqs#794. This bug will be fixed by incorporating the new dilithium code into PQClean. If I have some free time I'll write a packaging script, but this is low priority as we're waiting for upstream to release the round 3 code.
This bug will be fixed by incorporating the new dilithium code into PQClean . . .
Thanks!
. . .we're waiting for upstream to release the round 3 code. . .
Could you share any ballpark-level "when"? Thanks!
@mouse07410
Round 3 Dilithium is now available (commit 4f86c39).
