The processor knows about jobs and such and returns the new (#5152) EngineResult result subtype. If you just get sampler, it doesn't. cc @dstrain115
If you use EngineProcessor, both code paths return an EngineResult.
EngineProcessor gives you a QuantumEngineSampler whereas the SimulatedLocalProcessor gives you a normal cirq.Sampler (albeit wrapped in validation logic).
Can we have SimulatedLocalProcessor.get_sampler() also return a QuantumEngineSampler? In that case it would be backed by a simulated local engine instead of a real engine.
there is no simulated local engine. there is, but it's None in my simulatedlocalprocessor. If I make a simulatedlocalengine, it doesn't have any of the methods needed by QuantumEngineSampler since AbstractEngine doesn't have any running methods.
Can we modify QuantumEngineSampler to be backed by an [Abstract]Processor instead of an engine? and then it can be shared with SimulatedLocalProcessor and EngineProcessor?
QuantumEngineSampler wants to defer to engine methods so it can dispatch to one of many processor_ids specified as a list (which I never liked: #2075)
See #5361 for a sampler that works with SimulatedLocal and real Engine processors
