Last updated: 2020-08-12
This is an issue for tracking and publicising the development status of a separated data layer.  This is a major breaking change to be introduced in QuTiP 5, and will change how library functions and users access the underlying data structures of Qobj.  This document and issue will change over time.
Development is taking place on the dev.major branch in qutip/qutip.  Pull requests implementing new features:
We are writing a new "developers' guide" to explain the logic behind the design decisions, and help new QuTiP developers work on the code.  You can follow initial development hosted as a repo in my user account until we decide how this will be added to the main documentation.  You can view a rendered version of the documentation at https://jakelishman.github.io/qutip-devguide.
Some design documents:
New design elements under consideration:
Major breaking changes to QuTiP:
Non-breaking changes:
Discussions about the implementation of multiple-dispatch methods are on-going in the repository jakelishman/qutip-dispatch.  See in particular some discussion in jakelishman/qutip-dispatch#1.
Other discussions are also at the data-layer-devs discussion board.
Thanks @jakelishman. Can we add "Qobj" in the title? Just to make very visible. Thanks!
New on 2020-06-12:
Added a new design draft about data structure implementation choices.
Added initial implementation of multiple-dispatch methods in a separate repository, which includes some discussion in jakelishman/qutip-dispatch#1.
New on 2020-06-22
Pull request #1296 containing the same dispatcher as mentioned previously, and base implementations of a Dense and CSR type, with existing QuTiP code ported to them.
New on 2020-06-27
You can follow the development of the QuTiP developers' guide in my repo: https://github.com/jakelishman/qutip-devguide, or more usefully see the rendered version on that repo's GH page: https://jakelishman.github.io/qutip-devguide.
New on 2020-07-13
Work has begun on porting the Qobj internals to use the new data structures.  As part of this, I am particularly concerned with speeding up Qobj instantiation in the base mathematical operations.  A lot of the slowdown comes from internal handling of the dims and type parameters, and there are some suggestions for how these can be improved in #1320.
