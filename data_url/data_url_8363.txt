Currently, trying to convert a Qobj to a numpy array with np.array(qobj) does not work the way I would expect:
What it does is it handles A like it would a scalar.
I generally think of a Qobj as "array-like", and thus I would expect np.array(A) to be equivalent to np.array(A.full()) (or just A.full() directly)
The reason why I'd want np.array(A) to work is that it makes it much easier to write code that works for any array-like types (see https://stackoverflow.com/questions/40378427/numpy-formal-definition-of-array-like-objects). I'm thinking of routines like this:
https://github.com/qucontrol/weylchamber/blob/9a7607363901034da5aca3abb1c4fae7b15db940/src/weylchamber/cartan_decomposition.py#L11 that are intended to accept quantum gates in a wide range of formats.  For now, I have to catch Qobj explicitly:
https://github.com/qucontrol/weylchamber/blob/9a7607363901034da5aca3abb1c4fae7b15db940/src/weylchamber/cartan_decomposition.py#L41
If I'm not mistaken, the only thing required is to define an __array__ method on Qobj that returns self.full(). I thought that the idea would probably have come up when full() was implemented, so I'm wondering if there was a conscious design decision not to implement an array interface, and what the reasoning was (if any).
The array interface is now working for qutip master, but I don't know when it will be made in a release.
overlap between operator is also added.
