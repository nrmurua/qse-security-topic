jupyter, nbformat and matplotlib are listed as dependencies of OpenFermion in requirements.txt which seen to be only used for examples and the effect of this is that users of this library have a lot of additional dependencies that they may not need.
As a demonstration here is a tree of the dependencies of this project from a fresh clone using the latest versions available:
I would suggest that there are 3 directions in which this change could be made:
I would be willing to submit a patch for any of these changes if deemed appropriate.
I’m interested in rendering a similar dependency tree. How did you generate it, with johnnydep?
[by the way, my absolutely non-expert opinion, also I’m not a dev here: It looks like the requirements.txt as it now is required to make the My Binder interactive Jupyter notebooks work properly (badge in the Readme file). It may work also under /examples but I’m not sure. Probably the setup.py file could point to required dependencies, independently on the requirements.txt file, with install_requiresand extras_require. I think Python libraries packaging best practices are being debated in general (setup.py vs pip / conda install, or setuptools vs distutils).]
I’m interested in rendering a similar dependency tree. How did you generate it, with johnnydep?
This was actually done with poetry, I copied over the dependencies by hand and then ran poetry show -t.
[by the way, my absolutely non-expert opinion, also I’m not a dev here: It looks like the requirements.txt as it now is required to make the My Binder interactive Jupyter notebooks work properly (badge in the Readme file). It may work also under /examples but I’m not sure.
Oh that's very interesting, I did not notice that but that may well be the case. It looks like you can specify a sub-directory but I can't say I know enough about pip to know whether it would work.
Probably the setup.py file could point to required dependencies, independently on the requirements.txt file, with install_requiresand extras_require. I think Python libraries packaging best practices are being debated in general (setup.py vs pip / conda install, or setuptools vs distutils).]
Yes I think it's quite contestable and confusing sometimes, which I suppose is the advantage of just having a single file managed by pip. That's why I tried to give a few different options to try and suit taste :)
edit: oh looking at the binder link it seems a subdirectory is specified, I wonder if it recurses up through the directories to find requirements.txt, in which case putting it in the subdirectory might be enough.
It looks like splitting out the file into two copies works:
johnchildren@e2f3b71
The notebook is able to import openfermion correctly, despite it being in the folder above:
https://mybinder.org/v2/gh/johnchildren/OpenFermion/master
If this change is acceptable I can make it into a PR.
I like this idea. However, @johnchildren in your mybinder link, the notebook openfermion_tutorial.ipynb fails to execute because matplotlib was not installed. I'll need to think more about the best solution.
Oh sorry that link in my comment is wrong, try: https://mybinder.org/v2/gh/quantumlib/OpenFermion/master?filepath=examples
It needs the query in the url that is already in the README.
For example you can click on the badge here: https://github.com/johnchildren/OpenFermion/blob/master/README.rst
Matplotlib does then seem to be installed correctly and restarting and running the notebook yields graphs.
