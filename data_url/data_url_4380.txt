When adding state callbacks to the adiabatic evolution function the resulting state object has repeated states for each state.
To reproduce one can follow the code depicted in the images which also shows the issue.


Im using the latest qibo package (v 0.1.14) . I would expect both lengths to match or in this case to differ by 1 if counting the initial state when t=0 which it does.
It seems to me the state object is casted twice, once when the evolutionary step is executed and once when we call the apply method if State is a callback. In fact, by removing this line the final results list is correct.
I am wondering if the apply method is necessary for the State(Callback) class. What do you think about it @stavros11?
Thanks for checking @MatteoRobbiati. I think you are right, we should do the append in one place only.
I think the motivation of having it inside the apply method was that it will also work when the callback is used on its own, not as part of an evolution. Also I think it is used when the callback is used as part of circuits, where there is no second append done by the circuit. So maybe it makes more sense to remove the append from the evolution instead?
It would also be good to follow the same approach for all callbacks. For example now the entanglement entropy seems to be similar (it has append in apply), while the other callbacks don’t, so I am assuming they won’t work with circuits.
