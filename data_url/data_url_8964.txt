The list of files in cmake is large enough that it's unwieldy to verify it's correct. Might as well automate it.
So we can run a tool to make the cmake file so it can run to make the make file so it can run to make the binaries. Argh.
The joys of maintaining two separate build systems ðŸ˜…. I do think it is worth it in this case. Bazel is just easy to use, but cmake is better integrated with the LLVM infrastructure (especially clangd).
Here is a proof of concept with a bazel target to export the file lists to files, which can be directly read in by cmake: #337
This isn't perfect, but doesn't involve introducing new tools. Main issue i can see is that the file lists now contain headers, but cmake doesn't seem to care. Seems like it is smart enough to not try and compile them
Do clion's and cmake's caching work correctly when the files are listed outside the CMakeLists.txt file? Because the only reason I use the explicit list instead of basically-grep inside of CMakeLists.txt is that they don't understand they need to regen when I do that.
ahhh i see. Adding the property MAKE_CONFIGURE_DEPENDS to the file list files triggers a reconfigure when any of the file lists are changed (at least for me, the same thing that happens when modifying CMakeLists.txt). I updated the PR. Not clear to me if this would work for clion though (e.g they might be doing their own parsing of the CMakeLists.txt).
Broadly speaking I can see three possible approaches:
option 1. makes the CmakeLists.txt unwieldy and 3. requires manually reconfiguring if you add new files, which is annoying if you are configuring with a bunch of command line options. So from the perspective of someone who configures and builds from a terminal, 2. seems like the best option, but that is no good if it isn't gonna work for clion
MAKE_CONFIGURE_DEPENDS sounds like it solves the issue I was worried about.
fix in #338
