Description
A clear and concise description of the bug.
When compiling for [Linux, win, osx] PyPy3.8 the process fails with dimod/binary/cybqm/base.cpp:2110:1: error: too many initializers for 'PyTypeObject' {aka '_typeobject'} 
Steps To Reproduce
Build the package using python -m pip install . -vv
Expected Behavior
A clear and concise description of what you expected to happen.
Build succeeds
Environment
Additional Context
Add any other background information about the problem.
This is for the conda-forge distribution. I understand that supporting PyPy3.8 is maybe not in your scope so please feel free to close this issue if that's the case.
PR: conda-forge/dimod-feedstock#5
Logs: https://dev.azure.com/conda-forge/feedstock-builds/_build/results?buildId=489981&view=logs&j=517fe804-fa30-5dc2-1413-330699242c05&t=c10fa5f2-fdf6-5338-3bdb-c4bea7c23412&l=434
Hi @BastianZim, we do not officially support PyPy, though I can look a bit more into this to see if there is a simple fix here to unblock you.
Awesome, thank you @arcondello
3.9 is working so no problem for me to just restrict it to that, in case it's a lot of work for you.
Hi @BastianZim, no luck. I think for now our official answer will have to be that we still don't support PyPy. If you want to add unofficial support for 3.9 that's fine with us ðŸ˜„
Though I do see NumPy supports PyPy3.8. I cannot really find an official support policy other than a few issues (e.g. numpy/numpy#20528).
If they had an official policy, we could consider following them. I just don't want to have to be checking every month to see what wheels they do and don't build.
I also don't have any benchmarks for dimod in PyPy to know if it's even worth doing.
Let's keep this issue open for now though, and we can revisit in a few months maybe.
Ok, was able to fix it, all you need to do is update Cython (see scipy/scipy#15429). I'll update the Cython version in requirements.txt and pyproject.toml
Update: I am getting unittest failures in pypy. Working on it
Update on the update: fixed by #1174. Neat the pypy was able to catch that
For what it's worth, I don't think dimod in pypy is a great idea. Running the last example in the recently adding scaling guide (#1172) gives an almost 10x slowdown. There are of course cases that pypy also performs well.
Hi @arcondello thanks for investigating this and sorry for the late reply, I was on holiday. Great, then I'll enable this once the new version is released.
For what it's worth, I don't think dimod in pypy is a great idea.
Agreed. Conda-forge just compiles every package to pypy as well just to offer it but I don't recommend using it.
