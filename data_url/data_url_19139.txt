Like #3, but using density matrices, and spontaneous decay from level 2. This should yield solutions similar to analytical StiRAP.
At a technical level, this illustrates the use of density matrices.
Prerequisite for #13
So do you want to use the notebook from #22 for this issue? As far as I'm concerned, the example doesn't have to be the Lambda system, as long as density matrices are used.
It would be good to have an example where the objectives contain Lindblad c_ops (instead of a Lindbladian in the H attribute of the objective), just to make sure that works. I could do that in #12, though.
Yes and as far as I remember from our discussion, this was also the initial idea. I can't remember to be involved in any Lambda system example.
Now, the only issue left with this example is that we have to pass to the optimization objectives as target a state that is defined on the bipartite system of qubit and TLS. However, our target in the optimization is a reduced state of the qubit only (see explanation in the example notebook), while our initial state is defined on the bipartite system.
Passing initial_state and target_state with different shapes, i.e., that are defined on different parts of Hilbert/Liouville space, is not possible in the current version. Otherwise we can not compute the overlap of forward propagated state and target state. Since I consider having this feature not crucial right now, though it might possibly be handy, I consider this example closed.
I’m not sure I understand. Can you elaborate on what you mean by initial state and final state being in different Hilbert spaces? Isn’t this just a matter of the functional/the chis? I’m fine with the example as is, obviously, but I’d like to understand what capability we might need to extend in the future.
For instance in the current example we have a two qubit system with the initial state being defined on the joint system, i.e., it is a 4x4 matrix, and the target state is defined on the reduced space of one qubit, i.e., it is a 2x2 matrix. If we now want to compute the overlap of the forward propagated state with the target state, which is always done in the current implementation, that is given the troubles right now. Therefore, I have to pass a dummy target state that is only need for these overlaps.
I see what you mean, and I think this points to a design problem with the objectives that I have some thoughts about. I'll get back to you on this sometime later this week, probably in a new issue.
@Basilewitsch I opened #24 to discuss this further
