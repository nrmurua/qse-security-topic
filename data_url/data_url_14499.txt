When running a PauliTrotterEvolution with odd order greater than 1 on an EvolvedOp operator that has a PauliOp or PauliSumOp primitive, the code ignores the parameters binded to it.
When running the following example:
where the order is 2 (or an even number) we get the following circuit:

If we repeat the above code with an order of 3 (or an odd number greater than 2) we will get the following circuit:

As you notice, the parameters are not being binded when the order is an odd number greater than 2.
The expected outcome is when there should be a parameter binded to the circuit for odd orders
(As a disclaimer, I am still familiarizing myself with the subject and codebase).
I came to the realization that regardless of what the trotter_mode is in PauliTrotterEvolution, if the operator is an EvolvedOP and if its primitive is a PauliOp or PauliSumOp, we will use the predefined trotter in the class where its SuzukiTrotter when the order is greater than 1 and LieTrotter when the order is 1 (regardless of what the user defines it to be). This SuzukiTrotter used in the class has a different implementation than qiskit.opflow.evolutions.trotterizations.suzuki.py.
When we look into the implementation of SuzukiTrotter: https://github.com/Qiskit/qiskit-terra/blob/e148f97b9afe869511fe82dc6a0e83b7b33dd217/qiskit/synthesis/evolution/suzuki_trotter.py#L129-L146
we notice when order==1 we return a pauli_list without multiplying it with time. This begs the question, what do we mean by order here? Is an order of n the same as 2k of the implemented paper or an order of n the same as k?
If the answer is the prior, then we need to have an assertion such that the order, n, can not be an odd number as k is always an integer greater than 1.
If its the later, then we must return the following [(op, coeff * time) for op, coeff in pauli_list] when order==1.
I am looking at order == 1 because we recursively will go back to it when the order is an odd number greater than 2: https://github.com/Qiskit/qiskit-terra/blob/e148f97b9afe869511fe82dc6a0e83b7b33dd217/qiskit/synthesis/evolution/suzuki_trotter.py#L139-L146.
One more thing to do is compare these two codes (SuzukiTrotter and  qiskit.opflow.evolutions.trotterizations.suzuki.py ). In one implementation time is taken in consideration and in the other time is not.
The bound parameter values may not show up in your circuit diagram as being bound, but they are ðŸ™‚ Here's your example with 3 repetitions (odd and larger than 2):
but if we call .decompose() on the circuit and have a look inside we see the values are actually bound:
By the way, you might want to consider using the qiskit.circuit.library.PauliEvolutionGate for these evolutions as it's the most up to date implementation ðŸ™‚
^^ In the above example, the values that we set are not bounded. If you see, I am trying to bind the number 0.33, but we are still not seeing its impact.

I will try using qiskit.circuit.library.PauliEvolutionGate and will get back to you on it.
It seems like qiskit.circuit.library.PauliEvolutionGate does not allow the operators that have coefficients of type Parameter. It throws an error. I may be using it incorrectly. This is what I have done:
to get the following error:
It does support it as time parameter ðŸ™‚
Ah now I understand your comment above: the parameters are bound, but to the wrong values!
The Suzuki-Trotter expansion formula should not support odd orders larger than 1, you will find that the PauliEvolutionGate throws a warning if you try that and in the future it will throw an error. That's because, as you also pointed out above, the paper on the Suzuki-Trotter expansion only describes even orders.
Ahh. I am glad you will throw an error in the future. Just an fyi, I do not see a warning with PauliEvolutionGate with the synthesizer as SuzukiTrotter.
leads to the following output again without any warning:

Further, it seems like the time input can take in one parameter (theta). If I wanted alphaX+betaY (or the coefficient of X to be alpha and coefficient of Y to be beta), I would not be able to use PauliEvolutionGate. What would I do then?
Ah, the warning will only come with the dev version and the 0.20 release of Terra ðŸ™‚
Further, it seems like the time input can take in one parameter (theta). If I wanted alphaX+betaY (or the coefficient of X to be alpha and coefficient of Y to be beta), I would not be able to use PauliEvolutionGate. What would I do then?
That's currently not supported you're right. That would require SparsePauliOps with coefficients of type ParameterExpressions -- luckily this is coming with #7215. After that's merged we should be able to cover your use case.
