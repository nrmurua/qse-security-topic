This is based on  https://docs.google.com/document/d/1n4EdeRrI8fka8sErzccOy6YK6pq-pF2JbopjQJmV6ZQ/edit?usp=sharing
Add a new factory called ShotFactory which is similar to BatchedFactory but, instead of taking only the iterator scales_factors as an input, it also takes the number of shots for each scale factor, and overrides the way in which the executor is called.
If we are convinced that this is the way to go, I could take care of implementing this.
Quick note on ideas for design. This could be implemented by:
Both options are worth considering. [B] could be appealing, however allowing structureless tuples is likely not a good idea. Instead [C] is likely the cleanest conceptually since then everything needed for each ZNE step is in the instack list. It will require some refactoring so that parts of the code like reduce pull out the .scale_factor Once the refactoring for [C] is done, it will be more trivial to add in other parameters that could be adaptive.
What do you think @andreamari ?
I think it is good to keep the current distinction between initialization parameters  (scale_factors and shot_list) which is likely  good to make private and the actually measured parameters contained in instack and outstack. So I am in favor of combining option [A] + [C].
About the object InParams I have two questions:
Do we prefer parameters to be grouped and accessible with respect to individual measurements (as @willzeng suggested with InParams), or with respect to the kind of parameters? In the latter case, one could set/get the measured scale factors with something like  instack.scale_factors and all the measured shot numbers with instack.shot_list.
For both options of question 1., we need to define a new class: either InParams or Instack. Is it necessary (or better) to use a class or maybe it is enough to use a dictionary?
Agreed on combining [A]+[C] as you suggest.
Likely best is to group them by step in the Factory. That way it stores the link between input params and the output expectation value. This is IMO the most critical conceptual link and then the user can reshuffle the params how they like if they want.
This strikes me as a good use case for a named tuple. https://docs.python.org/3/library/collections.html#collections.namedtuple The disadvantage of a dictionary is that it can't validate the keys and values. You can just add any kind of string in there. A NamedTuple is a lightweight class that means you use the attributes rather than string type keys.
(secretly Python objects are just dictionaries at the bottom I think, but using the class attributes indicates the desired use)
Superseded by #248.
