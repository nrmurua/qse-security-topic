I don't really understand the difference between opconversions and repconversions as it stands (and especially not between the opconversions.conversions and repconversions.conversions). In particular, currently opconversions contains all functions that map between SymbolicOperator / PolynomialTensor classes that do not formally change the operator being represented (e.g. an operator after a fermion-to-qubit transform is still fundamentally the same thing) --- except for functions that take a SymbolicOperator in and spit out a PolynomialTensor.
By contrast, repconversions currently contains some functions that transform an operator to a strictly new operator, and the aforementioned maps from SymbolicOperators to PolynomialTensors.
I guess I can see the difference between a transform between a FermionOperator and an InteractionOperator and a transform between a FermionOperator and a QubitOperator --- we have various forms of the latter, and if you pass yourself back and forwards between them you'll wind up with a very different operator to what you started with (ok well, unitarily equivalent). However, something that really sticks in the middle for me is a transformation from FermionOperator to MajoranaOperator, as it's not so well-defined in the literature whether one should map c_i -> 0.5*(gamma_i+gamma_{i+N}) or 0.5*(gamma_{2i} + gamma_{2i+1}), so it somehow sticks in between.
@ncrubin - what is the distinction going on in your head? And how can you fit the above example in here?
I attempted to make opconversions a module that contained transforms of SymbolicOps.   repconversions transforms representations to and from eachother.  For example, get_interaction_operator can take in many "containers" and returns a new object that is formally a compact representation of a large number of SymbolicOps.   Because we have developed lots of ways to interconvert between these objects repconversions ended up catching things that inter convert between things that extend SymbolicOps and "containers".
InteractionOperators are containers for the tensor coefficients related to an algebra element--like a Hamiltonian.
Documentation of these distinctions are coming soon so hopefully a little more exposition will either solidify this structure or point us in a new direction of organization clarity and perfection.
Does get_fermion_operator belong in opconversions under this logic? It takes in PolynomialTensors as well as SymbolicOps, so it doesn't completely fit the above schema.
Yeah there are a couple of these that aren't nicely fitting in the scheme because they transform SymbolicOps and PolynomialTensors.  I kinda figured these scenarios might pop up since sometimes we use the containers as algebra elements--i.e. things that behave like SymbolicOps.  One thing we could do is separate the get_fermion_operator into fermion_op_from(*) which would let us have all the transformations in the appropriate place.  It will also probably be easier for debugging.  In the transforms top level dir we could even have a mux file that has the same logic as get_fermion_operator but then dispatches to the appropriate transform based on the input type.
I think that "transforms" should refer to "fermionic transforms," i.e., functions that map between the space of fermionic ladder operators (or Majorana operators) and the space of Pauli matrices. This includes, for example, Jordan-Wigner, and Bravyi-Kitaev. And this should be true regardless, for example, of whether the transformed operators are FermionOperators or InteractionOperators. On the other hand, "conversions" should refer to "type-conversions," i.e., functions that only change the underlying data representation (i.e., converting a FermionOperator to an InteractionOperator). I think that the "transforms" module should contain transforms as I've defined it, while all the conversions can be put into a single file and placed in utils. As for the stuff that is neither a transform or a conversion, it should go somewhere else (maybe utils for now).
I'd rather not shift code back into utils - the functionality in there often gets missed by users, which is why I'm pretty keen on making the module as small as possible.
To me a transform is 'something that takes in an operator and spits out an operator' - as opposed to a functional which 'takes in an operator and spits out a number'. So I think both 'conversions' and what you describe as 'transforms' belong in the transforms directory, alongside things that actually adjust the operator.
But, I think you make a really good point here; I'm pretty sure that the JW and BK transforms are some of the main reasons why people use openfermion, so this maybe deserves some separation. I'd be very happy with a module for fermion-to-qubit transforms. The name is a bit of a mouthful though - any idea what to shorten it to?
I think we've settled this a bit.  @obriente are you okay with this issue being closed?
If I remember rightly we'd talked about renaming operators -> symbolic and representations -> tensor but we never got around to implementing it. If we still want to do that then maybe we need to rename 'opconversions' -> 'symconversions' and 'repconversions' -> 'tconversions' or something?
(Specifically, we talked about this in #649 and I think you were ok with the change as well?)
Given that I'm fine with the way it is. I'd like to assign the change to someone or close the issue.
If you're ok with the suggested changes I'm happy to have it assigned to me.
Maybe 'symbolic_conversion' and 'tensor_transformations' instead of opconversions and repconversions?
SGTM
resolved on our reorg.
