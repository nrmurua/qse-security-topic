Hence I expect a measurements at power = 1,2,3,4 (although I also think it's worth a discussion over whether this is a bit misleading and it should include 5 but I realise that's a deliberate data acquisition decision). The plot should reflect this and have each measurement 'sweep/point' centred on the corresponding power at which it was measured.
Data acquisition is fine and plots fine in QtPlot but MatPlot shifts the data so that the centre of my power=1 data is at 1.5 etc and then my power=4 data is thrown away. In other words the plot shows data from power = 1-4 but am actually plotting data from 1=3 and shifting it all up by half so on the power axis what is shown between 1 and 2 is my data from my measurment at power=1 and so on.
Here's my actual case:

T5 Windows (sorry haven't checked version)
ZNB20_2 branch (merged master 8th July morning)
This is because of the way matplotlib's pcolor works (http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.pcolor) where the x and y arguments are interpreted as the corner coordinates of the quadrilaterals, not the centers. One way to go about this might be to add an option to MatPlot to generate the proper coordinates using the spacing between the datapoints.
This is what I have done in my own plotting program (https://github.com/Rubenknex/qtplot) which can also plot irregularly spaced data. I might look into adding this to qcodes if others also think it's a good idea.
Ahhh I see, thanks @Rubenknex . I've never used MatPlot before and that was really not what I was expecting (and I think @alexcjohnson was also surprised). Seems to me like it would be great to have that in qcodes.
@nataliejpg  could you post the data (zip or something ) ? <3
@giulioungaretti  I'm away this week so not until next week sorry. I think there might just be a MatPlot option I can add to correct (I'll check it out when I'm back). If so this would be a quick fix at least for me but should either be default or at least flagged up that it's not and that it works as @Rubenknex  describes IMO.
This is a fairly common issue, the way we work around it is the same way that @Rubenknex works around it, by extracting center points based on the gridpoints.
@Rubenknex I would be very interested if you could port over your irregularly spaced data to qcodes. Do you use linear interpolation or something like that?
@AdriaanRol I construct the coordinates of the quads based on the distance to the datapoint below, above, left, and right of it. This works well if the datapoints (with measured values as coordinates) still lie in the original grid that they were recorded in (example: the screenshot here https://github.com/Rubenknex/qtplot).
This qtplot is used pretty heavily by some people and they would like this (and other) functionality of the program to be available when using qcodes in ipython. I think some stuff, like looking at linetraces of 2d data, and performing various operations on data (derivatives, histogramming, any mathematical function) is something that would be nice to have integrated in qcodes. Although this requires quite some thinking to make it work nicely and not be a hack I think. Anyway it could be something to discuss at the meeting.
@jenshnielsen we did not fix this, right ?
Not sure it's a bug, rather a design flaw :P
