Hello all,
One of the goals during the transition to 1.0 is a reorganization of the module structure that will make development more extensible and simpler.  The following is the proposal for the new structure.  Basically we are splitting up utils into more reasonable components and cleaning up transforms.  The reorganization will yield 9 modules (sans third_party)  with clearer purpose.  You'll still be able to import openfermion.* where * is whatever routine or module you want.
PR to follow shortly.  Feel free to comment here with suggestions, improvements, criticism, cheers, etc and we can edit this original post to reflect the change.  Hat tip to @obriente for kicking off this brainstorm!
This module should contain objects that describe the algebra of various operators and representations which can be thought of as abstract instances that serve as storage of the operators.  The abstract instance objects derive from the PolynomialTensor.  Here we differentiate between generic storage objects and particular instantiations.
Description: operators derived from SymbolicOperator
openfermion.ops._boson_operator
openfermion.ops._fermion_operator
openfermion.ops._ising_operator
openfermion.ops._majorana_operator
openfermion.ops._quad_operator
openfermion.ops._qubit_operator
openfermion.ops._symbolic_operator
Description: operators derived from PolynomialTensor
openfermion.ops._interaction_operator
openfermion.ops._interaction_rdm
openfermion.ops._polynomial_tensor
openfermion.ops._diagonal_coulomb_hamiltonian
openfermion.ops._quadratic_hamiltonian
Description: API for generating particular instantiations of operators
openfermion.hamiltonians._general_hubbard
openfermion.hamiltonians._hubbard
openfermion.hamiltonians._jellium
openfermion.hamiltonians._mean_field_dwave
openfermion.hamiltonians._plane_wave_hamiltonian
openfermion.utils._special_operators
Methods related to storage of relevant chemistry quantities.  This becomes its own module to allow for expanding classical preprocessing capabilities as simulations of users scale beyond the supremacy regime.
openfermion.hamiltonians._chemical_series
openfermion.utils._pubchem
Openfermion.hamiltonians._molecular_data
openfermion.utils._reduced_hamiltonian
Description: linear algebra methods that are useful for quantum research. This module implements common tools required for working with fermionic marginals or pre/post-processing of data
Openfermion.utils._wedge
Openfermion.utils_davidson
Openfermion.utils_linear_qubit_operator
Openfermion.ops_givens_rotate
Openfermion.transforms._conversions.get_sparse_operator
Openfermion.transforms._conversions.get_number_conserving_sparse_operator
Openfermion.utils._erpa
Openfermion.utils._sparse_tools
Description: Global utility functions such as indexing and saving/pickling of objects
openfermion.ops._indexing
openfermion.utils._grid
openfermion.utils._commutators
openfermion.utils._commutator_diagonal_coulomb_operator
openfermion.utils._lattice
Description: utilities used in testing
Openfermion.utils._testing_utils
Move random generator components into linalg
Description: code and utilities to process data from experiments
Openfermion.transforms._conversions.get_interaction_rdm
Openfermion.measurements._prony
Openfermion.measurements._equality_constraint_projection
openfermion.measurements._qubit_partitioning
Description: functions that transform an object, or transform between representations
Description: functions that transform between object representations
openfermion.ops._binary_code
openfermion.ops._binary_polynomial
openfermion.transforms._binary_code_transform
openfermion.transforms._binary_codes
openfermion.transforms._bravyi_kitaev
openfermion.transforms._bravyi_kitaev_tree
openfermion.transforms._fenwick_tree
openfermion.transforms._jordan_wigner
openfermion.transforms._remove_symmetry_qubits
openfermion.transforms._reverse_jordan_wigner
Openfermion.transforms._verstraete_cirac
Openfermion.transforms._conversions._get_fermion_opertor
Openfermion.transforms._conversions._get_majorana_operator
Openfermion.transforms._converrsions._get_quad_operator
Openfermion.transforms._conversions._get_boson_operator
openfermion.utils._low_rank
Description: transformations that act on SymbolicOperator instances
openfermion.transforms._conversions.get_interaction_operator
openfermion.transforms._conversions.get_quadratic_hamiltonian
openfermion.transforms._conversions.get_diagonal_coulomb_hamitonian
openfermion.transforms._conversions.get_molecular_data
openfermion.transforms._qubit_operator_transforms
openfermion.transforms._weyl_ordering
Openfermion.utils._qubit_tapering_from_stabilizer
Description: transformations that don’t fit into the above
openfermion.utils._bch_expansion
openfermion.utils._sparse_tools
Refactored into transforms and linalg.
Description: code for generating abstract circuits from other abstract objects
openfermion.utils._lcu_util
openfermion.utils._slater_determinants
openfermion.utils._trotter_exp_to_qgates
openfermion.utils._unitary_cc
openfermioncirq.primitives.bogoliubov_transform
openfermioncirq.primitives.ffft (refactor gates into the gates subfolder)
openfermioncirq.primitives.optimal_givens_decomposition
openfermioncirq.primitives.state_preparation
openfermioncirq.primitives.swap_network
openfermioncirq.gates.*
Need to remove depreciated gates in three_qubit_gates
openfermioncirq.primitives.*
openfermioncirq.trotter.*
openfermion.utils._diagonal_coulomb_trotter_error
openfermion.utils._hubbard_trotter_error
openfermion.utils._low_depth_trotter_error
openfermion.utils._trotter_error
Openfermion.data (This should be renamed to tutorial data or explicitly moved into tutorial)
Openfermion.utils._channel_state Delete (Cirq’s density matrix simulator and noise models supersede this function)
This is closed by #620
