I know that this is due to the monkey patching but it is annoying me that it always prints the output of the circuit object.

it's not the circuit object, but the instruction instances. Allows to do things like circuit.gate().inverse() and circuit.gate().c.if()...
Use semicolon at end to suppress.
I know semicolon works (but I dont want that) and I agree its the instruction -- I know it is related to the  way we add gates.
the circuit.gate().inverse() already does not work anymore. So we just need to deprecate circuit.gate().c_if() and then there's no longer any need to return the instructionset.
I think is possible to have a dummy _ipython_display_ to avoid displaying something in jupyter
I suspect that as part of handling the more expressive OpenQASM 3 control flow operations, we'll likely add something like context managers for handling if, while, and friends, and we can remove c_if after suitable deprecation if this is still wanted.  That said, c_if is a very convenient way of making a simple controlled gate out of anything, and deprecating it entirely in favour of a context manager is far more verbose and will likely annoy users more than this unnecessary output.
It's fairly easy to hide the output in graphical Jupyter (Luciano's def _ipython_display_(*_): pass will work fine), but in the CPython or IPython terminal interpreters, it's harder to suppress; as far as I'm aware, they only way to get them to not print anything (including the blank line) is if the output of the last command is exactly None.
Let's take the def _ipython_display_(*_): pass direction until c_if gets deprecated.
Or close this one as wontfix.
I'm okey with any.
I'll close this for now - realistically, the only place we can suppress the output is in graphical Jupyter notebooks and JupyterLab, and even if we do, it's rather misleading if you're ever actually trying to work with the InstructionSet class.  I think in the time since the issue was opened, it's become more of a Jupyter idiom to suppress output with a semicolon, and more of a Qiskit idiom to stick qc.draw() on the bottom of your cells (in our tutorials, at least).
