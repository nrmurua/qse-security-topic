Cirq will decompose gate during transpile
It shouldn't transpile if its framework support gate
or we can create a passes can create custom gate
No response
@ryanhill1 To solve this issue and #59, I am thinking trying to add qasm custom operation support to the qasm parser, so we can deprecate the decomposition you mention in #162 (comment) and adding more circuit support between framework by using the custom circuit function like cirq_example from the framework, to implement this we can take reference from qiskit and pytket qasm parsers.
what do you think about this idea?
@junliangtan1 Works for me. I agree that adding support for custom qasm gates / the ability to process gate definitions in the cirq parser would be a great improvement. Compared to the original cirq _parser.py, our version has added support for crx, cs, ccz, csdg, crz, cry, csx, c3sx, u, cu, cu1, cu3, p, cp, iswap, and rzz gates. But there are still a good handful from the qiskit qasm qelib1.inc that are not covered. Not all of the above mentioned gates are supported by cirq, so there's already a small collection of custom cirq gates that we've defined in custom_gates.py that we import into the qasm parser for the conversion to avoid further unnecessary decompositions. But there are obviously many gates that are still not accounted for, so perhaps modeling after the more sophisticated qiskit and/or pytket qasm parsers could be a good direction. Alternatively, we could also keep our own copy of the qelib1.inc and stdgates.inc files and use them to perform a gate synthesis on the other end. But this may end up being more complicated. Happy to talk more about this.
