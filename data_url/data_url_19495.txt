The main bottleneck of the multi-GPU implementation is swapping the global qubits. In some circuits the number of swaps required can be reduced by rearranging commuting gates. It would be useful to implement an algorithm that does this automatically to the extend that this is possible. I don't know if there is a general algorithm that can find the optimal gate arrangement for any circuit.
Thank you for the comment. Is there any reference that describes this idea in more detail? I searched for old papers with Rom√°n but could not find anything related. It is very likely that this can help because the multi-GPU problem is very similar to the quantum hardware case where people use SWAPs due to nearest neighbor constraints, etc.
In distributed implementations (like the multi-GPU) we use some qubits (the so-called "global") to split the state vector in pieces for each device, with number of global qubits = log2(number of devices). Applying gates to these qubits requires communication between devices. In my implementation I change the global qubits with local ones to apply gates to them. This should be equivalent with introducing SWAP gates in the circuit. The goal is to select the global qubits and rearrange the gates in such a way so that the least SWAPs are required.
Variational circuits are among worst cases because they have gates in all qubits so one SWAP per layer is certainly required. Other circuits can be optimized. For example QFT with one global qubit can be done with one swap only.
