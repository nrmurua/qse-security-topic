Doing copy.deepcopy(provider.backends.ibmq_almaden.configuration()) fails with the error:
TypeError: init() missing 10 required positional arguments: 'n_uchannels', 'u_channel_lo', 'meas_levels', 'qubit_lo_range', 'meas_lo_range', 'dt', 'dtm', 'rep_times', 'meas_kernels', and 'discriminators'
Non-pulse enabled backends work fine. e.g.
QasmBackendConfiguration(backend_name='ibmq_vigo', backend_version='1.0.2', basis_gates=['u1', 'u2', 'u3', 'cx', 'id'], conditional=False, coupling_map=[[0, 1], [1, 0], [1, 2], [1, 3], [2, 1], [3, 1], [3, 4], [4, 3]], gates=[GateConfig(id, [], gate id q { U(0,0,0) q; }, [[0], [1], [2], [3], [4]]), GateConfig(u1, ['lambda'], gate u1(lambda) q { U(0,0,lambda) q; }, [[0], [1], [2], [3], [4]]), GateConfig(u2, ['phi', 'lambda'], gate u2(phi,lambda) q { U(pi/2,phi,lambda) q; }, [[0], [1], [2], [3], [4]]), GateConfig(u3, ['theta', 'phi', 'lambda'], gate u3(theta,phi,lambda) q { U(theta,phi,lambda) q; }, [[0], [1], [2], [3], [4]]), GateConfig(cx, [], gate cx q1,q2 { CX q1,q2; }, [[0, 1], [1, 0], [1, 2], [1, 3], [2, 1], [3, 1], [3, 4], [4, 3]])], local=False, max_shots=8192, memory=True, n_qubits=5, open_pulse=False, simulator=False)
It looks like PulseBackendConfiguration is missing a __reduce__ method so pickle is trying to call it with the function signature from QasmBackendConfiguration which isn't correct because there are more arguments for the pulse backend configuration's init.
One thing that is tricky to get with the pickling/deepcopy is extra non-named parameters. This is because these both subclass SimpleNamespace which defines it's own custom reduce function. When I encountered this on the result class I had to abandon the use of SimpleNamespace because it was losing kwargs. For QasmBackendConfiguration can you confirm that all the fields are there after a deepcopy? Or are all the fields in the backends from ibmq in: https://github.com/Qiskit/qiskit-terra/blob/master/qiskit/providers/models/backendconfiguration.py#L310-L314
It looks like the QASM fields are all there:
I can get around it with a config.to_dict() and back to the object so not the end of the world but we had also just fixed this issue earlier.
