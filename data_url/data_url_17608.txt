The following does show a plot:
A plot should be output.
The issue here is that we had to close the figure instance before returning it, otherwise it would be rendered twice in the notebook.  However, in doing so, it is not straightforward to reconstitute the figure, as its gui manager is destroyed.  The following is a workaround:
show_figure(plot_histogram(sim_result.get_counts(qc)))
If the example is run in a script, it works fine.  I am currently not sure how to handle all the use cases simultaneously.
Another workaround:
When running the above example from Spyder (graphics backend set to Qt5) the plot is not shown in a matplotlib window (as it should), but in the console window.
The actual solution needs to be to not close the figure. All plt.close() parts in the code would need to be removed.
Then, one can think about another way of approaching whatever problem the use of plt.close() wanted to solve. I'm uncertain about which exact problem that is, but feel free to explain it and I (as a matplotlib team member) might be able to help.
The actual solution needs to be to not close the figure. All plt.close() parts in the code would need to be removed.
Then, one can think about another way of approaching whatever problem the use of plt.close() wanted to solve. I'm uncertain about which exact problem that is, but feel free to explain it and I (as a matplotlib team member) might be able to help.
@ImportanceOfBeingErnest The reason we added the figure close() calls came from running visualization functions in Jupyter notebooks. When we changed the visualization functions to return  Figure objects it resulted in duplicate images being displayed in jupyter (which is where a large portion of users use the visualizations).
IIRC it was because jupyter/ipython would render the image once when plot() was called inside the function and then it would render it again because a returned Figure object was open (probably because it has a __repr_html_ defined). The only workaround we were able to come up with in time for the pending release was to close the figures before retuning them so the returned figure wouldn't also be displayed.
It was a pretty hacky workaround and I'd really like to come up with an alternative. Closing the returned figures also causes a bunch of problems for users outside of jupyter.
Maybe just tell your jupyter users to use a semicolon after the plotting function?

Also, turning interactive mode off temporarily would work I guess,

But that would again interfere with people who do not want to use interactive mode at all. Though at least they would be able to turn it off again in user space.
I would prefer just allowing users to pass in an axes. I actually thought we did this but it looks like we didnt get around to it
From matplotlib's point of view that would be the ideal case. You let the user specify onto which axes to plot.

Hi @nonhermitian , just checking out how this is going, I wanted to give this a shot, but wanted to check with you before doing so.
So the work around is to just allow passing axes instances to the plotting routines. This has already been implemented. If you think you have a better way than this we would love for you to take a shot at it.
Is this issue assign to anyone ?
If not i would like to take a look
The correct way to do this is to use display() instead of plt.show():
which shows a figure and works with loops.
I think the @frankharkins comment solved this issue. Please @nonhermitian feel free to reopen it otherwise.
