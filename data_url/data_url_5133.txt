It looks like the upcoming sbcl 2.0.1 release includes changes to move certain symbols out of cl:*features* and into sb-impl:+internal-features+ [1].  IIUC, any "non-public" features will continue to work (for now), but issue a warning [2].
I haven't tested it, but it looks like we use at least one such soon-to-be-deprecated feature, namely avx2. We should figure out what to do about our usage of any "internal" features.
Options include:
Update: sbcl 2.0.1 removed the avx2 feature flag.
The main issue this brings up is that the if-feature flag in the asdf file cannot tell that we have avx enabled. Maybe there is some other way of conditionalizing loading the files.
The AVX2 flag seems to be alive and kicking in 2.0.3 (see sbcl/sbcl@b01dce7 for instance).
It was moved out of cl:*features* and into sb-impl:+internal-features+, and sb-int:featurep was changed to warn and return nil for internal features. Maybe whatever is checking local-target-features in the sbcl build knows to include +internal-features+?
In the original issue description, I incorrectly assumed that SBCL would still respect sb-impl:+internal-features+ for feature expressions, but apparently it just issues the warning.
Yeah, I've been looking at featurep too. This is a nuisance indeed. I've seen a couple of instances in the code where they do a union of *features* and +internal-features+ (during bootstrap). Perhaps we could do that or we could redefine sharp-plus-minus in src/code/sharpm.lisp.
