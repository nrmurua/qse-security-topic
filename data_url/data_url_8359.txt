Hi,
Sometimes I want to simulate the exact behavior of my quantum circuit, i.e. work out the time-dependent Hamiltonian for a specific gate sequence and Hamiltonian of each gate. Then solve the Lindblad master equation with some collapse operator. Is there an easy way to generate the time-dependent Hamiltonian?
Dear @Coxious, thanks for opening the issue. At the moment, I can see only a method to return the propagators for a given quantum circuit in qutip.qip.circuit. I am guessing that you would be interested in implementing something there to return the full time dependent Hamiltonian for the circuit and then use mesolve to simulate this Hamiltonian with some collapse operators?
If you have any prototype code, please do share and we can discuss more. @nwlambert  and @ajgpitch  are on board with this too and this seems very relevant.
I also come across these questions on time-dependent evolutions where the time-dependent part of the Hamiltonian does not look like what QuTiP asks, i.e., A f(t), where A is an operator and f(t) some time-dependent function giving the coefficients. In those cases, I suggest directly moving to a superoperator picture and solving the equation,
dp/dt = L(t) p where L(t) now contains the superoperator representation of the full Hamiltonian.
@nonhermitian could you please comment if the QuTiP TD stuff was made only for Hamiltonians which can be written in this A f(t) form only?
It is. But what is the use case where that cannot be done?
What if for different time slices, A itself changes as A(t)? i.e., one would like to explicitly define the time-dependent part as a function which returns an operator and not just some constant A with the coefficients changing as f(t).
Which is equivalent to setting a term to zero after some time, and making a new one nonzero. All can be done with be done by setting the coefficient. However, there is room for improvement in this scenario
Yes, perhaps there is room for making this easier and more efficient.
I see that in the non-markovian methods like qutip.nonmarkov.heom, this is possible by constructing a superoperator L(t) and then using the standard ODE solver. Do you think we can tweak mesolve somehow to do this?
Just to add, the rhs_generate already seems to be doing this for TD Hamiltonians.
There is nothing in the heom ode solve that is not in the mesolve. mesolve can take superop L, that is solve dp/dt = L(t) p, just so long as L(t) = f1(t)L1 + f2(t)L2 ...
I have given some thought to how we can have a more general L(t), in the context of the heom, where for instance we might want to have time-dependent Matsubara terms. These would then occur many times in elements of the L, and so could potentially be solved efficiently. I'll add it to my list of things to discuss with @Ericgig when we meet in a few weeks. The new QobjEvo may perhaps have gone some way in this direction already.
@PZJuly I have posted an answer to your question on
https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4
I agree the docs http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html do not seem to include an example using rhs_with_state
@PZJuly sorry, I missed the vital word not from my comment above. I have updated it now.
Hopefully my reply on the Google group will be sufficient to help you for now.
This looks like it is handled by the new noise module of #1065.
