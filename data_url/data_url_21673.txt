Calling set_att() for one AD9910 channel overwrites the attenuator settings of all other channels that were made in previous experiments.
Run AttTest1 , then AttTest2 from the following snippet:
The first experiment turns on ch0 with the attenuator set to 10 dB. The second experiment does the same for ch1, leaving ch0 unaffected.
The second experiment resets the attenuator of ch0 to its maximum setting (31.5 dB).
This seems to be caused by the following line:

self.att_reg is set to 0x00000000 in the constructor of the CPLD object and is not overwritten with the actual hardware settings by default.
A workaround seems to be calling self.urukul0_cpld.get_att_mu() before changing the attenuator settings in the experiments. If this is intended behaviour, it has to be documented in the docstrings of the set_att family of functions. Currently, nothing in the documentation suggests that these function may affect other channels.
No. att_reg is not set to 0 but to the value in the device database.
The behavior is extensively documented:


But feel free to propose a PR to add that sentence to set_att() as well.
Future versions of Urukul can access the attenuators individually. There is no gateware and coredevice driver support funding yet.
sinara-hw/Urukul#30
quartiq/urukul#7
I have to disagree. This behavior being mentioned in the docstring of a different function in a different class is not proper documentation.
Also note that the docstring of CPLD.set_att_mu() does not explain which settings will be written to the other channels, and the one of CPLD.get_att_mu() does not mention that the result is buffered in a member variable and will be used in future calls of set_att_mu(). Sure, one can somehow guess this behavior from careful reading of the class docstring, but reading documentation should not be guesswork.
I will propose a PR to address these issues, but I think that the underlying issue is that there is no theory of operation section for any of the EEMs. Auto-generated documentation may by convenient, but it cannot replace a proper high-level manual.
Sure. It would be great if someone could invest time/money into improved EEM documentation.
Thanks for updating the docs @schmidf !
