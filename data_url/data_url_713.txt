I think the example has a minor issue. The qpp convention is that the q0 is the most significant bit, but the example uses it as the least significant bit.
The developer may be given the freedom to interpret the endianness in his own way as long as he arranges the code subsequently to treat q0 as the least significant bit. But, that may confuse some users down the road, since the examples serve the purpose of documentation.
The example qpe.cpp shows how the low-level API could be used to do the job. I suggest you add another phase estimation example to showcase the power of the high-level qpp API. Something like this:
@DevelopDaily Nice, thanks! Was thinking of adding a QCircuit example, thanks for writing it. I'll add/modify soon.
@DevelopDaily I made it a bit more generic (one can increase the precision etc.) How does this look?
@DevelopDaily Done. See https://github.com/softwareQinc/qpp/blob/devel/examples/qpe.cpp and https://github.com/softwareQinc/qpp/blob/devel/examples/circuits/quantum_phase_estimation.cpp Both are now unified and use the same conditions.
Very nice!
Just a suggestion on this:
cmat U(2, 2); // initialize a unitary operator
Could you please use a higher dimension unitary, say, for 2 or 3 qubits? That would be even more generic and educational. Qiskit people and most professors like to use the single qubit T gate as an example. If your example has a few more qubits, that would be a breath of fresh air.
@DevelopDaily Thanks, that's a good suggestion. Here it is for a 2-qubit target (although can be at once extended to more) https://github.com/softwareQinc/qpp/blob/main/examples/circuits/quantum_phase_estimation.cpp
@DevelopDaily Any remaining issues with it?
Just a friendly reminder. Have you forgotten something:-)? Here is the lilne:
    double theta = 0.25;
I just noticed you hardcoded the two T gates when you changed the circuit to a 2-qubit one. The theta is a dangling variable now.
I think your original code regarding the U initialization is better. I mean, you could do something like this, based on your original intent:
Ohhh yeah, ugly... I'll get rid of that
Done, thanks for the careful code review :)
Perfect. Thanks!
