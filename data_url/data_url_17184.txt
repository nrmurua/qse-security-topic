Currently the Result class stores statevectors and unitary matrices as lists and nested list of complex numbers, respectively.  This however makes little sense as simulators use NumPy arrays, or c-aligned vectors that can directly be instantiated from NumPy arrays, internally.  Thus the one starts with aligned data, makes a copy to lists in Result and then makes another copy of the data when doing get_statevector() or get_unitary() that returns a NumPy array.  Why not just store the data as NumPy arrays in the Results to begin with?
This is not as straightforward as I had originally assumed because of marshmallow. The internal representation of the statevector and unitary in result is done with marshmallow magic and getting it to keep that as a numpy array is tricky. I'll keep fighting the library to figure out if we can coerce it to store things as numpy arrays internally.
This is just another example of where using marshmallow as a base for our serialization objects is not a good choice. It abstracts away the actual object from us and hides it behind too many layers. It makes this all way more complex than it needs to be and for no real benefit.
