It would be useful to have the option to set the seed for the PYBIND_SHARED_RNG to a deterministic value in Python instead of using std::random_device
I think this is a good idea. There are some questions about the details.
What kind of stability guarantees did you have in mind for the seed? For example, sometimes I change how randomness is computed (e.g. currently PAULI_CHANNEL_2 is 10x slower than DEPOLARIZE2 so in the future I may optimize the former). Correspondingly, I wouldn't expect seeds to have replicable effects across versions. In fact, based on that worry, I would probably enforce this by intentionally perturbing it every version.
Do you think it would be better to inject the seed when compiling a sampler, or when sampling from a sampler? Somewhere else?
This might also speak to the fact that, currently, there's no way to "debug the errors" with stim. For example, suppose that your decoder is giving the wrong result for a given seed. Which errors are actually being applied by that seed? Did you take a trillion samples before seeing the error, and the only way to see the exact situation again is to redo the trillion samples? You're probably also focused on issues like whether the decoding error be preserved while simplifying the physical errors, e.g. removing individual error mechanisms. Stim doesn't just not help with this process, several of the design choices actively hinder it (e.g. the REPEAT block makes it hard to edit individual errors by editing the circuit).
I had in mind keeping the default behaviour (using std::random_device) the same as it is currently, but with the option for the user to re-initialise the seed using Python bindings for PYBIND_SHARED_RNG().seed(user_chosen_seed) e.g. with a separate function like stim.set_rng_seed. Having a separate seed/RNG for each sampler would be more flexible though I'm not sure whether or not it would be preferable. I think it's ok if it's not stable across versions, as reproducibility is still ensured provided the version is logged along with the chosen seed.
I had separately wondered whether you had plans to allow errors to be inspected/debugged? Just having access to the weight of an error would be useful e.g. for estimating distances.
