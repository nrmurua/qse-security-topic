Current liboqs uses some AES code instead of using OpenSSL implementation (probably, using a special compile-time option). Is it a deficiency of OpenSSL implementation?
The question is related to potential using this code in production - as OpenSSL provides some FIPS-certified AES implementations and also chooses the fastest one looking on a particular HW capabilities in run-time, it would be nice to be able to reuse its implementation.
Thanks!
Is it a deficiency of OpenSSL implementation?
No, that was not the reason for supporting OQS_USE_AES_OPENSSL=OFF -- we simply wanted to be able to build liboqs independent from OpenSSL.
In general, this looks like a mirror-issue to #1426 (the same wrt SHA3), right?
it would be nice to be able to reuse its implementation.
Understandable. Can you point to places where OpenSSL's AES is not used when setting "OQS_USE_AES_OPENSSL=ON"?
Right, it's sort of mirror of #1426.
I added -DOQS_USE_AES_OPENSSL=ON (BTW, the build log doesn't show OQS_USE_AES_OPENSSL=OFF with or without it, as it does with SHA3) and see the following lines:
[6/226] /usr/bin/gcc -DOQS_HAVE_ALIGNED_ALLOC -DOQS_HAVE_EXPLICIT_BZERO -DOQS_HAVE_MEMALIGN -DOQS_HAVE_POSIX_MEMALIGN -I/home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/redhat-linux-build/include -O2  -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -m64  -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -g -std=gnu11 -fPIC -fvisibility=hidden -Wa,--noexecstack -Wstrict-overflow -ggdb3 -Wbad-function-cast -MD -MT src/common/CMakeFiles/common.dir/aes/aes.c.o -MF src/common/CMakeFiles/common.dir/aes/aes.c.o.d -o src/common/CMakeFiles/common.dir/aes/aes.c.o -c /home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/src/common/aes/aes.c [7/226] /usr/bin/gcc -DOQS_HAVE_ALIGNED_ALLOC -DOQS_HAVE_EXPLICIT_BZERO -DOQS_HAVE_MEMALIGN -DOQS_HAVE_POSIX_MEMALIGN -I/home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/redhat-linux-build/include -O2  -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -m64  -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -g -std=gnu11 -fPIC -fvisibility=hidden -Wa,--noexecstack -Wstrict-overflow -ggdb3 -Wbad-function-cast -maes -MD -MT src/common/CMakeFiles/common.dir/aes/aes128_ni.c.o -MF src/common/CMakeFiles/common.dir/aes/aes128_ni.c.o.d -o src/common/CMakeFiles/common.dir/aes/aes128_ni.c.o -c /home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/src/common/aes/aes128_ni.c [13/226] /usr/bin/gcc -DOQS_HAVE_ALIGNED_ALLOC -DOQS_HAVE_EXPLICIT_BZERO -DOQS_HAVE_MEMALIGN -DOQS_HAVE_POSIX_MEMALIGN -I/home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/redhat-linux-build/include -O2  -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -m64  -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -g -std=gnu11 -fPIC -fvisibility=hidden -Wa,--noexecstack -Wstrict-overflow -ggdb3 -Wbad-function-cast -maes -mssse3 -MD -MT src/common/CMakeFiles/common.dir/aes/aes256_ni.c.o -MF src/common/CMakeFiles/common.dir/aes/aes256_ni.c.o.d -o src/common/CMakeFiles/common.dir/aes/aes256_ni.c.o -c /home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/src/common/aes/aes256_ni.c [23/226] /usr/bin/gcc -DOQS_HAVE_ALIGNED_ALLOC -DOQS_HAVE_EXPLICIT_BZERO -DOQS_HAVE_MEMALIGN -DOQS_HAVE_POSIX_MEMALIGN -I/home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/redhat-linux-build/include -O2  -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -m64  -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -g -std=gnu11 -fPIC -fvisibility=hidden -Wa,--noexecstack -Wstrict-overflow -ggdb3 -Wbad-function-cast -MD -MT src/common/CMakeFiles/common.dir/aes/aes_c.c.o -MF src/common/CMakeFiles/common.dir/aes/aes_c.c.o.d -o src/common/CMakeFiles/common.dir/aes/aes_c.c.o -c /home/dbelyavs/rpmbuild/BUILD/liboqs-0.8.0-dev/src/common/aes/aes_c.c
Here's something definitely fishy: Regardless of the setting of "OQS_USE_AES_OPENSSL" when running cmake it's always off after running cmake... :-( Thanks to the heads-up, @beldmit !
Ah, now I remember: We built in a "configuration safety guard" against using OpenSSL's AES as it was way too slow for many operations liboqs uses (something on the order of 10-20x). Compare results from my laptop:
If you absolutely want to use OpenSSL's AES, you can do with these build options:
-DOQS_USE_AES_INSTRUCTIONS=OFF is the difference, right?
-DOQS_USE_AES_INSTRUCTIONS=OFF is the difference, right?
That and -DOQS_DIST_BUILD=OFF (although I don't quite understand the rationale for the latter):

Yes, it looks like it does the trick. Thanks! Could it be documented somewhere?
BTW, it looks like you use the same antipattern for AES ciphers - you fetch them multiple time via EVP_aes_*
Yes, it looks like it does the trick. Thanks! Could it be documented somewhere?
Well, to my (our :) great embarassment, it already is: https://github.com/open-quantum-safe/liboqs/blob/main/CONFIGURE.md#oqs_use_openssl :
By default, OQS_USE_AES_OPENSSL is ON (on x86-64 only if OQS_DIST_BUILD and OQS_USE_AES_INSTRUCTIONS are not set)
#1429 to make things clearer / stand out some more.
BTW, it looks like you use the same antipattern for AES ciphers - you fetch them multiple time via EVP_aes_*
"Antipattern" as of OpenSSL3, right? Added to #1427.
Thanks! Sorry for being inattentive :(
Thanks! Sorry for being inattentive :(
NP. Sorry in turn for not remembering that quicker myself. Closing as remaining issue covered by #1427.
