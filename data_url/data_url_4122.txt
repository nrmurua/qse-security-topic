It is possible today in Perceval to work with complex input state by manually constructing it with pcvl.StateVector - for instance to work with Bell state: 1/sqrt(2)(|01>+|10>) in dual rail encoding, we would do something like that:
This is used for instance in a simulation as follow:
A conversion from logical state |01> => |1,0,0,1> already exists through the concept of Processor port:
We would like to have simpler generators of simple and complex states - for a given encoding:
These generators would be available in a StateGenerator class initialized with an encoding (Encoding.RAW (=logical state), Encoding.DUAL_RAIL, and Encoding.POLARIZATION) to be supported
Example code:
Hi, I would like to give this a shot as part of the unitary hack event.
Hello @JMaterne, Thanks for your interest - let us know if you need help or guidance !
Hello, you can find a first version of the StateGenerator class here: https://github.com/JMaterne/Perceval/tree/StateGenerators
Maybe you can take a look if it is what you intended and give guidance what needs to be changed.
I used the same naming convention as in your example code so something like this should work:
One thing I noted when testing is that the Polarization Encoding is not yet working with the generator functions.
The problem is that the annotations will be discarded when I take a BasicState with annotations to the power:
But on the other hand:
This results e.g. in this behaviour:
Thanks for your help!
Hello, I had a quick look, and it looks good ! I created #210 for the issue you found out - can you take a look at the same time since it is in the same file?
Can you also create some test units?
The simplest for further exchanges on the code is that you create a PR.
Thanks
This issue was completed by @JMaterne
