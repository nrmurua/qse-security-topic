This is requested by Antonio.
In p_bfgs https://github.com/Qiskit/qiskit-acqua/blob/master/qiskit_acqua/utils/optimizers/p_bfgs.py, we run multiple optimizers in parallel (embarassing parallelism).
It turns out we can parallelize the internal of the optimizer, which would lead to much better performance.  At each point x, the optimizer needs to evaluate f(x') at a neighbor x' and compute the gradient (f(x')-f(x))/(x'-x). In general, the optimizer needs to evaluate 2N neighbors where N stands for the dimension. The evaluation of the 2N neighbors can be parallelized since they do not depend on each other.
In theory, this leads to 2N times speedup. In practice, this leads to C speedup, where C stands for the number of cores.
In terms of the implementation, we should choose the simplest optimizer.
And we simply follow the parallelism style in p_bfgs because it is simple and allows the parallelization of both the compiling and the execution.
If instead we follow the qiskit interface for multiple circuits, it will complicate the coding since we will have to modify the eval() function to merge multiple circuits into one job.  Besides, this does not support the parallelization of compiling for now.
will create a PR soon
