Currently DAGCircuit assumes that classical and quantum registers must have a string identifier. It is not necessary for the identifier to be a string as long as the Hashable interface and __eq__ are implemented correctly, any key could work for a register name. (Basically any proper dict key would work.)
When using a key of type T as register name that implements the appropriate interfaces for a dictionary key properly, it should be able to be used as creq or qreg name.
Keys are rejected if they are not iterable or cannot be cast to a string.
Specifically _check_wiremap_registers line 486 in _dagcircuit.py raises an exception if the preconditions do not hold.
An example with integer named registers:
k here is 0 of type int.
Do not assume that keys are iterable and strings. Make clear the preconditions on the keys, preferably through type annotations.
Note that adding an integer key as qreg was accepted in my case, but it throws an error once I called compose_back. Therefore the preconditions are not checked internally in DAGCircuit correctly. (An exception should have been raised by add_qreg).
Hopefully the issue is clear from the above, it is not so easy to construct a meaningful DAGCircuit for compose_back.
I am trying to transform a DAGCircuit for the QISKit developer challenge to conform to a given hardware architecture. I internally have integer node identifiers for the architecture graph and this caused an issue with DAGCircuit.
This bug highlights two bigger issues:
In the meanwhile, this is the patch for your particular issue: https://github.com/1ucian0/qiskit-sdk-py/commit/8f9a5930d60fec4c3842e88688826b90d3d94eea It could be that this fix is not enough. Can you test it and let me know?
I've provided some usecases. I also tried installing your patch but there is no setup.py in the project root so pip & I don't know how to install it, nor are there instructions for it in the readme (that don't involve using pip).
The fix is in #308 and, if accepted, will be delivered with the next version of QISKit. If you are in a hurry, I can provide instructions to patch your current version or you can lambda x: 'i%i' % x your keys before passing them QISKit.
PS: thanks for the usecases in #305 !
I will leave my workaround in for now until qiskit itself is patched. It's more effort to monkey-patch it :)
I'm rolling this back. Non-string ids ended up being a not so good idea. See #395 (comment)
