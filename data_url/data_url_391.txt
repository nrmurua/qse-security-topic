Most of the support for C++'s break, continue, and return statements is already present in the compiler, but it is not complete. The first two statements can appear in C++ iterative statements. The last, return, can appear in a function.
Support for the statements is complete to the point that there are high-level operations in the CC dialect, there is a pass (lower-unwind) to convert these operations to the correct control-flow, and that control-flow will contain paths that may deallocate, deconstruct, uncompute both classical and quantum data. These paths currently only automatically create quantum deallocations.
Passes other than lower-unwind will not rewrite the high-level CC global control flow operations into more primitive control-flow in the function even as a copy-paste of functionality from the lower-unwind pass. It is unnecessary and poor compiler design.
At present the pass to deallocate quantum allocations is naive. It assumes that a quantum kernel is straight-line code. It finds all quantum allocations and inserts deallocations for them at the end of the function. This is incorrect and will not work with the control-flow graph rewrite of the global control-flow statements mentioned above.
It is therefore a requirement that the deallocation pass be able to find only those cases where deallocations are needed and insert the deallocations only where needed.
The documentation should be updated such that it says the compiler does support break, continue, and return statements.
It is unknown if the Quake to QTX pass correctly handles complex CFGs with deallocations.
Once the deallocation pass is rewritten, the lower-unwind pass needs to be added to the pipeline(s) in the various tools.
End-to-end tests, particularly those that test the new deallocation pass, must be written.
This ought to be complete. See unwind lowering pass. Double check and make sure the pass is fully integrated.
