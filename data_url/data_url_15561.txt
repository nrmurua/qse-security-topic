fake_melbourne.py and fake_poughkeepsie isn't structured the same way as other fake backends
just navigate to https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/test/mock/backends/melbourne/fake_melbourne.py
and https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/test/mock/backends/poughkeepsie/fake_poughkeepsie.py and then compare with any other fake backend python file.
they should be consistent.
I'm trying to build some code on another project that checks for some params of the fakebackend by using the python file to retrieve the json and parse it.
No response
You should not rely on the presence of the JSON files - the fact that some of the backends store their information like this is an implementation detail, and not part of the public interface.  The only supported way to access the features of the backends is via the configuration and properties attributes.
The number of qubits should be available in all these backends by len(backend.properties().qubits).
Dear @jakelishman I totally understand your point.
In any case, I do believe it would be nice to have consistency in the code structure.
I was never intending to change any part of the public interface - something that would require adding some relnotes to the PR.
Again, my intent was really just to have the code structure a bit more consistent. This is especially important since, for example, if you want to learn about fake backends right now, you have to dive into qiskit source code here - there is no easy way to find it in the reference documentation, and yes, I tried noting that here.
Thank you for your attention.
Yeah, our documentation is very much not perfect, and I understand the frustration.  I promise that we are working on it - we've recently started a much larger push internally to increase the quality and scope of the documentation, and hopefully you'll start seeing improvements there in the near future.  Part of that also comes by limiting the scope of what we'll accept in PR requests, so we can streamline our interfaces, and focus only on stuff we really can commit to supporting.
On the public interface stuff - for sure, I never thought you'd be trying to break stuff or anything like that; it's just one of the reasons we have review with code maintainers, who are more involved.
Thank you for your understanding and for sharing this additional information @jakelishman .
