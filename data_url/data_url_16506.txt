This proposes an implementation of the new framework of the pulse drawer. The new framework is designed to solve unittest issue (currently we don't have effective code test for visualization) and to extend a way of visualization to improve an efficiency of pulse coding.
The detailed design is discussed here:
https://github.com/Qiskit/rfcs/blob/fe1bfa58c6a0167d67dd019ba06480d8819ba49c/0013-scalable-pulse-drawer.md
The key change is the introduction of drawing IRs. Those IRs are the pure python object that is a collection of visualization data and coordinate. Thus, the drawer will be separated into two layers. (1) pulse program -> drawing IR, (2) drawing IR -> image generation.
Since at (1) there is no dependency on matplotlib figure nor another image file, we can perform unittest for those IRs. This is important to prevent unintentional crash due to changes on instruction set. In addition, at (2) we have some flexibility to choose actual plotter. Matplotlib will still be a primary output format, but we can have some options to use interactive drawing software based on javascript. With such software, we may be able to tell users the detail of pulse program (i.e. frame, max pulse height, duration, etc...) with a hover window. Thus, we no longer need to hack the pulse program to know the detail of complex schedule, like DD.
New drawer will live in parallel with the conventional drawer during the beginning, and gradually shift to the new drawer after sufficient time of usability testing.
The implementation will be separated into some stages.
This is related to #4127
