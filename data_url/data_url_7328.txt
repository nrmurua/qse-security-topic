Briefly, calling QO functions within the user's functions returns an error unless the user's functions are preceded by a generic call of a QO function.
The description probably makes a little sense, therefore, reproducing examples are in order.
Running the following script
returns an error
$ julia mini1.jl
ERROR: LoadError: UndefVarError: T not defined
Stacktrace:
[1] FockBasis(::T) where T<:Int64 at /home/misha/.julia/packages/QuantumOpticsBase/dHhct/src/fock.jl:14
[2] Model(::Dict{Any,Any}) at /home/misha/tmp/mini3.jl:11
[3] top-level scope at /home/misha/tmp/mini3.jl:18
in expression starting at /home/misha/tmp/mini3.jl:18
If, however, there is a generic call before my functions, there are no problems. So, this script
works as intended
$ julia mini2.jl
Fock(cutoff=25)
I am an occasional Julia user and am not sure whether this is a QO's issue or an issue at all. However, this did break a previously working library, which luckily was fixed by inserting a "generic call".
In any case, thanks for your work!
I stumbled upon the same issue before. Actually, it's not really a QO issue, but with Julia itself. You can reproduce the same error with the following code, which does not use any external packages.
This fails with the error you're seeing, i.e. UndefVarError: T not defined. Unfortunately, the definition of FockBasis is exactly like above. This is a really weird error, I'll try to look into it.
In the meantime I'll implement a workaround, which is to relax the type constraint to T<:Integer. Then everything works fine, but I have no idea why.
I released a fix in QuantumOpticsBase using the workaround. Updating should fix your issue. Let me know if it doesn't.
Yep, it fixed it. Thanks a bunch!
