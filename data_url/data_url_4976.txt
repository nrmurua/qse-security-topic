Hi, I saw other problems (#221 ), but the solution you gave did not solve the problem.
I ran the unit tests you gave and passed all the tests (GPU is V100, GPU_COMPUTE_CAPABILITY=70).
Also changed float to qreal, but running the following code using a GPU will still get an incorrect answer.
The correct output is 0.5, but 1.0 when running on the GPU. And run this code on the CPU to get the correct answer. Can you help me? Thanks a lot.
Hi there,
Oh you're quite right, this does seem a GPU bug. I see that it effects only 1-qubit registers.
Not exactly an emergency, but an interesting edge-case.
I'll look in to this, thanks very much for the report!
You should cmake using option -GPU_COMPUTE_CAPABILITY=70
Hi Victor,
Actually with the correct compute capability, this is a bug.
It's due to this reduction loop, and copySharedReduceBlock never being called (even when the while is changed to numValuesToReduce >= 1 as opposed to > 1).
The fix is to add a simple edge-case for when the user is reducing one-qubit quregs (a 16 byte register). This is a painfully low priority, but easily done.
Hi Victor,
Actually with the correct compute capability, this is a bug.
It's due to this reduction loop, and copySharedReduceBlock never being called (even when the while is changed to numValuesToReduce >= 1 as opposed to > 1).
The fix is to add a simple edge-case for when the user is reducing one-qubit quregs (a 16 byte register). This is a painfully low priority, but easily done.
Er……"The fix is to add a simple edge-case for when the user is reducing one-qubit quregs",I can't understand this sentence,could you explain more specifically？
@Thewillman apologies for missing this response!
The bug described applies only when you ask QuEST to calculate a probability of a 1-qubit register.
A 1-qubit register is represented by two floating-point complex numbers. The probabilities of the two possible classical states are just the state-vector amplitudes, abs squared; there is practically no calculation to be done.
Simply put, a 1-qubit register is a pointless structure, so a bug in a GPU function is very low priority.
I've added an edge-case to GPU calcProbOfOutcome anyway
