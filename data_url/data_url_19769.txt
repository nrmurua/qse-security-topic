Consider a QV circuit defined by the following set of qubits: qubit_lists = [[48,49]].  This will result in an output circuit that is padded to the size max(qubit_lists)+1.  Thus you will get a 50 qubit circuit that you cannot run through the Aer noise simulator, even though the circuit itself is a trivial 2x2 QV circuit.
We can fix this, but I view it more of an aer problem. I wasn't 100% sure, but I thought newer versions of aer did fix address this (i.e. only run on qubits with gates)?
'qiskit-aer': '0.2.1'
I would also say that if one did circuit.width() you would get the full padded width which is in general not the width of the QV circuit generated.
There was an issue for this in Aer (Qiskit/qiskit-aer#147), and I thought it got fixed. If not, we need to open another Aer issue.
The issue of expanding circuit width seems to be a recurring one, and I think we need to agree on a path forward. When you send an experiment to a 50-qubit processor, to me that is a 50-qubit experiment, not a 2 qubit. For example the idle qubits always get measured. There could be cross talk between the idle and active qubits. Etc.
Obviously, Aer should not simulate a huge statevector in the ideal case. But what if you wanted to insert a noise model on all 50 qubits? Then it should I think.
That's why the transpiler has a so-called "embedding" stage which embeds the circuit onto the coupling graph. This embedding allocates extra qubits. I agree that the user should have the option of limiting which qubits get actively used (i.e. not all 50 qubits should be available to the swapper, if i'm interested in targeting the top-right corner of the chip). But what gets sent to the backend is a different story in my opinion.
Comments are welcome here.
