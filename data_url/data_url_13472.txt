The current fold_global function:
Proposal for new changes:
Between (2) and (3) I would prefer (2) for its conceptual simplicity, but (3) is fine.
Option (2) SGTM.
This issue had no activity for 2 months, and will be closed in one week unless there is new activity. Cheers!
I am reopening this since it is something worth doing, even if not urgent.
This issue had no activity for 2 months, and will be closed in one week unless there is new activity. Cheers!
Based on above discussion, I am going to work on option 2.
always try to keep the moment structure
@andreamari Do you mind clarifying this a bit more ? I am confused between the following :
Using this example in the tests, the input circuit was created with 3 moments and with scale_factor=3, how many moments do you expect in the output circuit ?
Hi @purva-thakre,
I think your second option is correct.
In the example that you linked the input circuit has 3 moments and the the expected results should have 9 moments as it indeed happens know.  However this example is too simple since there are no "holes" in the circuit.
Below I give an example which shows how the current fold global destroy the moment structure of the input circuit by squashing the gates. The idea of this issue is to avoid this effect.
As you can see the "desired" results are equivalent to fold_global results but preserve the moment structure i.e. the "temporal shape" of the input circuit.
I also attach the code that generated the circuits above (not sure if useful):
qreg = LineQubit.range(4)
circuit_H = Circuit(H(qreg[0]))
circuit_Z = Circuit(Z(qreg[1]))
circuit_S = Circuit(S(qreg[2]))
circuit_T = Circuit(T(qreg[3]))
circuit = circuit_H + circuit_Z + circuit_S + circuit_T
print("Input circuit:", circuit, sep="\n")
print("\n\nExample with scale_factor=3")
folded_current = zne.scaling.fold_global(circuit, 3)
print("\nFolded circuit with current fold_global function:", folded_current, sep="\n")
folded_expected =  circuit + inverse(circuit) + circuit
print("\nFolded circuit desired result:", folded_expected, sep="\n")
assert len(folded_expected) == 3 * len(circuit)
print("\n\nExample with scale_factor=2")
folded_current = zne.scaling.fold_global(circuit, 2)
print("\nFolded circuit with current fold_global function:", folded_current, sep="\n")
folded_expected =  circuit + inverse(circuit[2:]) + circuit[2:]
print("\nFolded circuit desired result:", folded_expected, sep="\n")
assert len(folded_expected) == 2 * len(circuit)
This issue had no activity for 2 months, and will be closed in one week unless there is new activity. Cheers!
