Parsing this code
raises a QASM3ParsingError exception after catching a ParseCancellationException from ANTLR.
Raise a more helpful exception, or else accept the code so that it can be validated at a later stage.
openqasm 7c98e1b
Python 3.11.0
This is going to be true of any grammatically invalid program, not just this case. It's not easy to build a parser that gives good error messages, and here ANTLR can't build the parse tree.
Right now, I wouldn't want to devote manpower to trying to add that functionality in. Doing it right is a really big job, and it's kind of a secondary priority; first we could do with having all the happy-path things succeed, before we spend time improving the UX for failures.
(It's also easier to be more lenient in parsing in order to recover/produce good error messages with handwritten parsers, and this package is meant to use the reference ANTLR grammar.)
Though just to be clear: I do think we could and should do better on error reporting in the long run.
I agree that applying a bandaid is not the correct response. I mainly opened this issue to document a specific undesirable feature, and as you point out, the more general issue. Furthermore, I agree that the cost/benefit ratio of implementing something robust to get better diagnostics is rather high at the moment.
One thing that might incidentally take care of this problem is to recognize \$[\d]+ as an ordinary identifier; that is, don't distinguish physical qubits in the ANTLR lexer an parser. But I wouldn't make such a big change just to solve this particular problem. Also IIUC, the main reason for using ANTLR is to document the grammar in a testable way. Changing this to adapt to a practical use of OC3, namely importing into Qiskit, doesn't necessarily serve that goal. It might be better for the pure-Python importer to use a different parser. In fact given your interest in a hand-made parser, I wonder what you think of this opinion, Jake:
It seems a parse tree doesn't help to meaningfully reduce effort to build AST compared to just rolling out a hand-made recursive descent parser
Also IIUC, the main reason for using ANTLR is to document the grammar in a testable way. Changing this to adapt to a practical use of OC3, namely importing into Qiskit, doesn't necessarily serve that goal.
I agree with this - this package is serving two masters at the moment, and it's part of the reason I've been more on the side of using a different parser for our needs in Qiskit (my quick-and-dirty qiskit-qasm3-import notwithstanding).
One thing that might incidentally take care of this problem is to recognize \$[\d]+ as an ordinary identifier; that is, don't distinguish physical qubits in the ANTLR lexer an parser.
I think you're correct here, and if/when #417 does merge I'd vote to change the ANTLR grammar to reflect this view.
On the last opinion: I don't think I have the experience needed to have a properly informed opinion on it, but I've definitely started tending that way after having written my own recursive-descent parsers.  I'm most interested in that link to the Terence Parr (ANTLR author) comment that AST generation is a non-goal of ANTLR 4 - I didn't know he'd said that, and it helps me understand more of ANTLR's exposed public API.
