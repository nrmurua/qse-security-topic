When simulating quantum trajectories via mcwf (or similar), is there a recommended way using the API to access 1) the times at which a jump occurs, and 2) which jump operator caused the jump? (That is, the equivalent of Result.col_times and Result.col_which in QuTiP, respectively.)
I imagine it might be possible to obtain the jump times by passing fout(t,psi) = t and then using display_beforeevent=true, but would there be any ambiguity to doing the same thing but with display_afterevent=true? Additionally, I still don't see a way to obtain which operator caused the jump without diving a little deeper into the DiffEq backend.
Any tips or workarounds would be appreciated.
then tout[2:end-1] contains the times of the jumps. psi[2:end-1] will contain the states just before a jump occurs.
Now tout will contain the times of the jumps twice. Additionally, you have the states just before and after the jumps. As it says in the documentation, the state after the jump is obtained by applying the jump operator and renormalizing. So applying each jump operator to the state before the jump gives the maximal overlap with the state after the jump if you have the correct jump operator. In code:
Note: Thanks to your issue, I actually noticed a bug with the event displaying. The state was saved before being updated with display_afterevent=true, so one actually got the state before the jump. The above workaround doesn't work with the current version due to this. So you'll have to wait until I merged the according patch here (which I'll do right after the tests pass).
Edit: The change is merged, so using the latest master branch should work with the above.
I'll leave this issue open until we add a nicer way to find the operators, e.g. a new kwarg like display_which or so.
I finally got around to doing this. One can now set the display_jumps=true kwarg like so:
to obtain a list of times t_jumps corresponding to the times at which the jumps occur. j_ind is then a list of indexes corresponding to the indexes of J, with which each jump occurred.
