Hi,
in QuTiP 5 I don' t have to compile QobjEvo manually. That's great!
Since the compile() function is removed in QuTiP 5, all code that was written in version 4 breaks.
Maybe, we could add an empty compile() function with a deprecation warning, to allow users to adapt before we completely remove it.
@Ericgig, what do you think?
I will put in a vote to not add .compile() to v5, but to instead write a nice porting HOWTO for the documentation. There will be changes to be made in v5 anyway, and this is an easy one to make.
No .compile()  in v5.
I don't think we need a porting guide either, compile is called internally in evolution but users very rarely call it themselves. 99.9% of users don't know it exist.
Where is it causing issues? I only remember using it in a developer notebook showing benchmarks. This notebook can be removed.
It was used in the QobjEvo notebook, which is also linked on the tutorials website. I removed the usage of compile() in the new version of the notebook in the qutip-tutorials repository.
I will vote for a deprecation warning being raised for a few versions of QuTiP with a compile() function that does nothing. The deprecation warning can briefly explain what changed and how to tackle it (in this case simply not use .compile()). It can also raise an error based on QuTiP's version such that our tests warn us about needing to remove it. Even if its a rarely used function and mostly employed internal, I still think that we should deprecate it appropriately as it will help making a smother transition to QuTiP 5.0.0. A HOW TO with some of the most significant porting changes is a also useful but I would prefer if it does not substitute deprecation warnings.
I wonder if deprecation is really worth it -- QuTiP 5 has so many changes that we probably can't guarantee that code will work. The principle we're trying to follow is "making upgrading as smooth as possible" and deprecation is one way to achieve that, but I don't think it's the right way for QuTiP 5.
I've been wondering what our general strategy for helping people transition to QuTiP 5 should be, but I don't have a great view yet. I'm hoping that @christian512's notebook project will give us some data on what the sticking points are, and I think it seems to be doing that quite nicely. Perhaps we need to wait a bit and gather all these porting issues together and then decide on our approach?
I'll try to keep track of all issues which I obtain from porting notebooks from QuTiP 4 to QuTiP 5.
In general, I agree with @hodgestar -- We can't guarantee that code will work. But I think to make the upgrading process smooth, we need to provide as much help as possible.
Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could
