What is the appropriate way to implement a colapse operator in mesolve that can not be expressed as time_dependent_function * constant_operator (for instance Op1 + Op2*f(t))?
Is it only possible through rewriting the equation to be solved?
I would write it as two separate collapse operators, just like you would do for a Hamiltonian with a constant and time-dependent term i.e.
c_ops=[Op1,[Op2,’f(t)’]]
See the docs here,
http://qutip.org/docs/3.0.1/guide/dynamics/dynamics-time.html
for more info.
Paul
On Sep 3, 2014, at 12:00 AM, Stefan Krastanov notifications@github.com wrote:
What is the appropriate way to implement a colapse operator in mesolve that can not be expressed as time_dependent_function * constant_operator (for instance Op1 + Op2*f(t))?
Is it only possible through rewriting the equation to be solved?
—
Reply to this email directly or view it on GitHub.
But that is not the same as they are not linear. It will result in op1*rho*op1+op2*rho*op2 instead of (op1+op2)*rho*(op1+op2).
Yes, it is not the same thing. You need to rewrite it manually so that each collapse operator contribute on standard lindblad form.
Related to this, the qutip User Guide mentions that the (function) "callback format" for input of time-dependent operators works for both Hamiltonians and jump operators (bottom of pg. 148). If I put a function into the Ham input, I am fine. But putting the same function into the list of jumps throws:
I guess the Note 2 on pg. 149 sort of implies this only works for Hams.
Yes, callback functions for c_ops is not supported, but it could probably be added. There is an issue for it here: #40. In the mean time we should fix the inconsistent docstring description. Thanks for pointing that out!
Is there any way to do this for mcsolve? Unlike mesolve just expanding and rewriting/reordering by hand does not work if one needs an operator of the form A+f(t)B.
@Krastanov I don't quite understand. Are you use the nested-list method? If so, can you tell me how you expanding and rewriting/reordering by hand of the c_ops so that you can list them one by one in the nested-list method? If you can rewriting/reordering them, why cannot you do the same thing for mcsolve?
@jrjohansson In the first reply you mentioned that
Yes, it is not the same thing. You need to rewrite it manually so that each collapse operator contribute on standard lindblad form.
May I ask how to rewrite it manually so that each collapse operator contribute on standard lindblad form so that I can implement complicated time-dependent collapse operator in the nested-list method?
Hi all, I have three questions.
Q1.
As mentioned in the API doc http://qutip.org/docs/3.1.0/apidoc/functions.html
Under the section of master equation solver
Time-dependent operators
For time-dependent problems, H and c_ops can be callback functions that takes two arguments, time and args, and returns the Hamiltonian or Liouvillian for the system at that point in time (callback format).
Alternatively, H and c_ops can be a specified in a nested-list format where each element in the list is a list of length 2, containing an operator (qutip.qobj) at the first element and where the second element is either a string (list string format), a callback function (list callback format) that evaluates to the time-dependent coefficient for the corresponding operator, or a NumPy array (list array format) which specifies the value of the coefficient to the corresponding operator for each value of t in twist.
It seems that in the version 3.1.0, c_ops can be implemented as a callback functions in mesolve. Is this true?
Q.2
As mentioned in https://groups.google.com/forum/#!topic/qutip/aIxxnbQ56W4, the callback function has not been developed for mesolve at the time of that post. But
you have a callback function that is called for each time step and which constructs the system Liouvillian  Here you are free to construct the collapse operators or Liouvillian in whichever way you want
From this, I think I can use the callback function to define the c_ops and integrate them in Liouvillian for mesolve. If I am interpreting it right, this can be done for c_ops with some complicated time dependence. Is that right?
(However it is mentioned in https://groups.google.com/forum/#!searchin/qutip/time$20dependent/qutip/S0IskSRy2M0/_2L6BzqAKTEJ that I can use a callback function for mesolve?)
Q.3
I know that I cannot use callback functions to define the c_ops directly in mcsolve. Can I use the callback functions to define the c_ops and integrate them in Liouvillian for mcsolve ?
Maybe this is addressed by 4.4.0, @Ericgig?
Yes, for the main solvers and stochastic solvers.
