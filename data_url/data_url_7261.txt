The hamiltonian construction currently assumes how the state is constructed.
e.g. to create a full state of the electronic & motional degree of motion you'd start by defining the states separately:
ψi_ion = dm(C["S-1/2"])
ψi_axial = thermalstate(axial,1)
and then do the tensor product to build the full hilbert space.
The hamiltonian function expects that you built the state with:
ψi = ψi_ion ⊗ ψi_axial;
but it's also valid to say:
ψi = ψi_axial ⊗ ψi_ion;
(but in that case the hamiltonian would be constructed differently).
There are two options:
(1) state this explicitly in the documentation (also have to have a explicit ordering of motional modes).
(2) modify the hamiltonian function to take a set of individual states, each with some information of what kind of state it is, and then the hamiltonian function makes both ψi and the hamiltonian.
I agree with you that it would be a nice feature to have the code be agnostic to the user's choice of ordering of the subspaces in the tensor product describing the composite basis. Because all tensor products are converted to 2D matrices, it does matter that this ordering be consistent everywhere and we must set some convention.
In principle, that convention could be enforced internally and the code could be made intelligent enough to recognize e.g. that the Hamiltonian is constructed in the order: ion ⊗ axial_mode ⊗ radial_mode but the initial state input to the solver is constructed in the order ion ⊗ radial_mode ⊗ axial_mode -- and then correct that on the fly. The correction could be implemented by reordering the Hamiltonian's description so that, provided the user's code was self-consistent, we would achieve the desired outcome.
However, to accomplish this we would need to wrap all of the QuantumOptics solver functions since these take the Hamiltonian and the initial state as separate inputs.
Since at some point we will probably move away from using QuantumOptics, I would vote that we put this on hold until then -- when the implementation will be much more natural.
In the meantime, I've updated the trap documentation and have added a note in the getting_started.ipynb notebook.
See 514b0f1 and let me know if you think the documentation is acceptable.
