So I have been trying to write wrapper for JAX to understand QuTiP's Qobj in order to be able for us to calculate gradient on Qobj . Consider this example:
Now, this throws the following error:
"type <class 'qutip.qobj.Qobj'> is not a valid JAX type"
since JAX only accepts standard Python containers as arguments to grad function.
One way to make JAX happy is to use jnp.asarray(Qobj.full()) and pass the JAX-compatible numpy arrays of the two kets in the fidelity function. This, however, is incompatible with the fidelity method since grad(fidelity) returns the gradient function that accepts exactly the same arguments as the original function. And the original fidelity function in QuTiP does not accept numpy array; it accepts Qobj.
So, passing on numpy array shall be fine with JAX, but not with QuTiP. And passing Qobj is fine with QuTiP but not JAX
This issue deals with a similar problem, but for jit. I could not get it to work with grad.
This issue can work. I am trying to inherit Qobj via namedtuple and extend it to a new class Qgrad_Qobj, but it seems that namedtuple can't extend on top of a base class (I may be wrong here).
Any ideas?
Please checkout #16 where I write a basic qgrad.qutip module and have a rot and fidelity function which are jax-aware from your definitions.
We need to move forward and perhaps as Nathan said, brute force and implement some of the QuTiP functionality bare-bones. Once we have a couple of more functions and examples, we can talk to @jakelishman and see how we can get his project aligned to what we need.
@quantshah this is what I implemented,  but I abandoned the idea since it is not sustainable. We would have to write our custom functions with JAX for every function in QuTiP that we want to take a derivative of.
What I was trying to accomplish in the past few days (which took quite a bit of time) was to make grad(Qobj(<array_perhaps>)) work. That is, to make JAX Qobj-aware since that would work for any QuTiP object. I don't mind writing custom functions, just that I think there must be a better solution as is there in the case of jax.jit. See here
I understand that trying to rewrite the entire QuTiP library is not what we should be going for and the wrapper idea is ultimately the most ideal case. But as you are experiencing, it is not very easy to have a custom class work with Jax so we must be prepared to take alternative paths. Also since the scope of the GSoC project is within a shorter timeline, we should have a backup plan ðŸ˜‰
Also, some QuTiP operations have optimised Cython routines which we might also have to look out.
Btw why did you try to make a qgrad(Qobj) function which internally unwraps the Qobj and makes it work with Jax grad?
Also check out #6 for some definitions of quantum gradients on hardware. Although autograd works directly on standard functions, we might need to define some of our own gradients in the future and see how to make them work the autodiff.
@quantshah Okay, thanks for the explanations
I was writing grad(Qobj), where grad is the standard jax.grad. The idea was to make JAX to be Qobj-aware. I still think that in the longer run we should be able to do it. I will see if I find time in the meanwhile and continue to hack it.
We have a light-weight QuTiP wrapper now on #22
