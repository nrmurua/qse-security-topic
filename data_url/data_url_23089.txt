c:\users\omq\documents\github\pyrpl\pyrpl\software_modules\lockbox\models\fabryperot.pyc in calibrate(self, trigger_signal, autosave)
274         curve1, curve2, times = trigger_signal.sweep_acquire_zoom(
275             threshold=trigger_signal.get_threshold(curve0),
--> 276             input2=self.signal())
277         curve1 -= trigger_signal.calibration_data._analog_offset
278         curve2 -= self.calibration_data._analog_offset
c:\users\omq\documents\github\pyrpl\pyrpl\software_modules\lockbox\models\fabryperot.pyc in sweep_acquire_zoom(self, threshold, input2)
207                 self.lockbox.sweep()  # start sweep only after arming the scope
208                 # give some extra (10x) timeout time in case the trigger is missed
--> 209                 curve1, curve2 = curves.await_result(timeout=10./self.lockbox.asg.frequency+scope.duration)
210                 times = scope.times
211                 self.calibration_data._asg_phase = self.lockbox.asg.scopetriggerphase
c:\users\omq\documents\github\pyrpl\pyrpl\async_utils.pyc in await_result(self, timeout)
200         """
201
--> 202         self._wait_for_done(timeout)
203         return self.result()
204
c:\users\omq\documents\github\pyrpl\pyrpl\async_utils.pyc in _wait_for_done(self, timeout)
158         """
159         if self.cancelled():
--> 160             raise CancelledError("Future was cancelled")
161         if not self.done():
162             self.timer_timeout = None
CancelledError: Future was cancelled
ok
