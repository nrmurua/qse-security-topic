Running a max-cut optimisation (with only 4 edges ) using a vqe based on the aqua tutorial. I tried it with a simple noise model and qasm simulator. I started logging and VQE needs many evaluation cycles. The result is what i expected on a qasm simulator without noise. However with noise the VQE doesn't converge. On a real backend i ran out of credit, so first on the simulator. But what is the best setting?
With the Nealer-Mead optimizer the algorithm gives a working solution.
max_cut_noise.zip
I would like to run this on a real backend. Is it possible to let VQE split the algorithm in seperate or spaced batches and combine the measurements at the end.
I am not sure I understand your question correctly if you are asking how to batch the circuits required by the optimizer, there is one flag you can use to batch the circuits needed for N evaluations within one iteration into one job (max_evals_grouped). You can set this number to the number of evaluations required by the optimizer in one iteration.
https://github.com/Qiskit/qiskit-aqua/blob/master/qiskit/aqua/algorithms/adaptive/vqe/vqe.py#L92
However, please note that Aqua might split your jobs depends on the limitation of the real device. E.g., if max_experiments of the backend is 75 and you have 100 circuits in total. Aqua will split your job into two jobs and combine the results later.
My goal would be to run a vqe algoritme  for a optimization problem like maxcut on a real backend. Could batch processing help considering the fact that vqe algoritme needs a lot of evaluation steps on a real noisy backend. Or are there other trips and tricks to work on a real backend. On the qasm simulator even with noise model it works fine, so it would be great if vqe runs on real hardware.
The batch process bundles more circuits into one job; in this case, you might submit fewer jobs. Then, fewer communications are needed between cloud and local machine.
The number of evaluation steps you need depends on the optimizer, the noise might affect different optimizers differently. I do not have a single answer.
On the other hand, the noise model in the simulator is not exactly the same to the real hardware (usually less noise as compared to the real hardware). There is no guarantee that if you get good results on noisy simulation and then you will get good results on real hardware.
When you run on real hardware, do you use readout error mitigation? It helps to get more accurate results.
I will point out that the notion of credits will soon disappear.
Credits have been removed. There is a job limit of 5 jobs which Aqua now respects so I am closing this issue as it is no longer relevant.
