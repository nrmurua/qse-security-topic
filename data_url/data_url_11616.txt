OptimizationResult contains the following information.
x is a list of variable values, but there is no information which value is corresponding to which variable of QuadraticProgram.
Users need to combine QuadraticProgram and OptimizationResult to obtain the mapping of variables and values as follows.
It would be nice if OptimizationResult is self-contained, e.g., by including variable names or variables in OptimizationResult.
I am working on it!
Thank you for having an interested on it. Let's discuss what kind of design of OptimziationResult is useful before implementation. We welcome your idea.
Hello @t-imamichi
I would add new argument ‘x_name’ to the constructor of OptimizationResult.
In most cases, it will take values of  ‘problem.variables’, as you suggest.
I do not have experience using optimisations, so I do not see what other properties could be added.
But the class OptimizationResult could use some other modifications, e.g. set the private attributes using properties.setter,
or removing the str and use only repr (with proper modification).
Hi @t-imamichi, @molar-volume,
I suggest to add __getitem__(self, i: Union[int, str]) to the OptimizationResult which returns the value of the variable either by index or name. To do so we need something like a dictionary variable name -> index, and we have it in QuadraticProgram. So, we can pass a problem instance to the result class as a required argument in the constructor. In this case we'll have everything we potentially need in the result from the problem.
What do you think?
Thank you for your comments @molar-volume and @adekusar-drl.
x_name, x_names, var_name, or variable_names as List[str] makes sense to me.
__getitem__(self, i: Union[int, str]) looks useful too.
I think we can realize it by adding _index: int class variable to Variable or adding _var2index: Dict[str, int] to QuadraticProgram.
@t-imamichi there is a line in QuadraticProgram already: self._variables_index = {}  # type: Dict[str, int], so we should make use of it.
Dear @t-imamichi and @adekusar-drl , thank you for your useful hints.
In my understanding, variable_names and x_names are the same thing, so I kept only x_names.
var_index is contained in variables (using enumerate(variables)), so I added only variables: List[Variable] argument to OptimizationResult.
Please, check the pull request for more details.
Thank you for making a PR. I will take a look at it.
