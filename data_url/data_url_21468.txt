Sequence error with strictly increasing RTIO timestamps.
The following experiment produces a sequence error on channel 15 (corresponding to ttl15) on a Kasli 2.0 system.
Removing either the line commented with "a" or the line commented with "b" eliminates the sequence error.
No error.
Sequence error notification in the dashboard log, and [  5210.218209s] ERROR(runtime::rtio_mgt): RTIO sequence error involving channel 15 in the core device log.
self.core.break_realtime() won't increase the time cursor position if it's already after (RTIO counter + margin). Since you added the large delay before, it's likely the RTIO counter hasn't caught up and all your ttl.off(), as well as self.ttl_out_chs[0].on(), are at the same time. Their timestamps would be equal and not strictly increasing. You can confirm that with the RTIO analyzer.
How did this code come about?
@sbourdeauducq thank you for the quick response! I forgot that break_realtime won't advance the timestamp if there is already enough slack.
This code was a minimal working example of an more complicated experiment (initialize the states of all DDSes and TTLs). Therefore the code looks strange and does not do anything useful.
