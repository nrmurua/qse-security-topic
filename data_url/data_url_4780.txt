When loading a blackbird script from file and converting it to a program, to_program uses the target attribute of the BlackbirdProgram object during a compilation step, but seems to ignore other options. Unfortunately, this is where the shots parameter lives, thus this information never makes it to the final program object. During execution with StarshipEngine, it is replaced by the default shots=1.
On it.
I've looked through the code, what is appears to be happening is this:
to_program correctly passes all target options as **kwargs to program.compile.
Unfortunately, program.compile ignores all **kwargs options not to do with compilation, so at this point shots gets lost.
What I can do is modify Program to store a list of run_options for the compiled program, which can then be accessed by the Engine.
This will work, I guess the question is, is this a good idea? Do we want the Program to be able to specify run_options for later execution?
I remember this came up previously, and we decided we did not want this option.
PR #130 should solve this issue, and now treats Program.run_options as the default run options when eng.run() is called, but still allows them to be overwritten.
Note: the equivalent change in LocalEngine.run() will also need to be made in StarshipEngine.run().
