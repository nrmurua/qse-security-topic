An issue that has come up for a few of us is that it is inconvenient to access the wavefunction in ProjectQ. I am aware that one can call .cheat() to get a dictionary mapping qubit indices in the stored wavefunction to the actual tensor factors in the state vector, together with an array of the amplitudes. From this information it is possible to reconstruct the wavefunction. But it is not intuitive and we don't want users calling a function called ".cheat()" for such important functionality.
I understand why it is unnatural for ProjectQ to provide the entire wavefunction. And I appreciate that you can never "peak" at the entire wavefunction like this when using an actual quantum computer so we are asking more of the ProjectQ simulator than we would ever ask of a real quantum device. But in practice people want to do this. I think it would be great to provide some simple function that gives the user the wavefunction vector in a convenient ordering. This should not be difficult to implement.
I have a function that does this - it could maybe be sped up a bit, but is pretty good and decently tested.
You should probably make a pull request then!
I also have a few functions written for this when I am doing my stuffs. I think maybe a useful set of functions to have would be
Something like eng.get_state_vector() which returns what cheat() function returns - a mapping between qubits and bit location, as well as the state vector;
If one only wants the amplitude of a specific computational basis state, maybe build something like eng.get_amplitude(bit_string). I find this necessary because sometimes the mapping between the qubits and the bit location corresponding to the qubit (the first entry of what cheat() returns) is very non-trivial, it would be nice to have a function that just takes into account this mapping and returns the correct amplitude.
I have functions for doing both things above and I would be happy to work with anyone for a pull request. idk3, maybe we can merge our efforts?
@yudongcao agreed about for getting specific amplitudes - this avoids the problem of it being very slow. @babbush I don't want to make a pull request yet because I'm not sure of the best place to put something like this + I'm trying to better comment first. Putting it with cheat seems pretty logical though.
Since there are different proposals here, perhaps it is best to wait until later tonight so that @damiansteiger and @thomashaener have had a chance to chime in.
I understand why it is unnatural for ProjectQ to provide the entire wavefunction
cheat() actually returns the entire wavefunction, though it is ordered according to the dictionary. The idea there was to return a reference so one could change values. Currently this only works for the Python simulator due to some issues with pybind...
I can add a simulator.get_ordered_wavefunction(all_qubits) which orders the state vector according to the list of qubits provided. Furthermore, I can implement a simulator.get_probability(qureg, list_of_boolean_values).
I would not add this to the MainEngine as this is something specific to the simulator, i.e., eng.get_state_vector() will not be possible.
To be clear, "is something specific to the simulate" just means you'd do eng.back.end.get_state_vector(), right? I have code which does this and is pretty fast - can copy it here if you want.
Yes, either you call it on a reference of the simulator or
eng.backend.get_state_vector()
It is much faster if we are doing it in C++ as there is a hidden copy in cheat due to the pybind stuff. And if you only want a probability, you don't want to get a copy of the full wavefunction via cheat.
Sounds good. My code is fairly vectorized/optimized (though Python ultimately) so it might still be of some use as a template, if you want. Otherwise I'll continue to use it until your new faster version is up ;)
There is now a function to get the probability of a measurement outcome:
Provide one or more qubits in a quantum register and a bit string with the same order as the quantum register and it returns the probability of measuring this bitstring
There is now also a function to get the probability amplitude:
Provide all qubits in a quantum register and a bit string with the same order as the quantum register and it returns the probability amplitude of this bitstring
Note: As always, you have to use eng.flush() before calling these methods on the backend:
Very nice, thanks!
