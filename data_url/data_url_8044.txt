Hello,
I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use.
However, when passing the function and its gradient to Qutips mesolve function, i get the error:
ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required.
I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.
I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make.
I would appreciate any and all insight into this problem, thank you.
I slightly edited the question to make the code easier to read.
You should probably consider using the array-based format https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#methods-for-writing-time-dependent-operators.
Precompute the q_0 and q_02 as NumPy arrays with respect to each t in the t_list using np.gradient. Then give them to the solver.
np.gradient compute the gradient of an array, not the gradient of a function at a certain point.
I would suggest to pre compute the gradient arrays or use a scipy spline interpolation method that support derivative such as CubicSpline.
Since this is not about an issue in qutip but a general usage question, I will close this issue. If you have more question, please ask them on the qutip help group.
