I wonder whether Mitiq can support circuit type <class 'pennylane.tape.tape.QuantumTape'> such as that used in this Pennylane example https://pennylane.ai/qml/demos/tutorial_quantum_transfer_learning.html?
I tried the error mitigation method https://pennylane.ai/blog/2021/11/error-mitigation-with-mitiq-and-pennylane/ on the circuit in the above link but got the error that "Circuit could not be converted to an internal Mitiq circuit. Provided circuit has type <class 'pennylane.tape.tape.QuantumTape'>". This seems a quite standard circuit, so it would be great if Mitiq can support error mitigation of it.
Hello @eegzheng, thank you for your interest in Mitiq!
If this is a bug report, please provide screenshots and/or minimum viable code to reproduce your issue, so we can do our best to help get it fixed. If you have any questions in the meantime, you can also ask us on the Unitary Fund Discord.
Hi @eegzheng, thanks for posting this!
The error message is a bit misleading. Mitiq is not able to convert some gates into its internal representation.  In particular Mitiq doesn't support gates with symbolic parameters.
This is probably the reason why Mitiq is not working in your example.
Variational circuits are ok but parameters must be real numbers not symbolic variables.  In principle, this is not a strong limitation since Mitiq is supposed to be applied at the end of the execution stack, where parameters are usually replaced by real numbers before going into the backend.
However, in practice, I understand that this can be a blocker if one wants to easily apply Mitiq to some code heavily based on symbolic parameters.
Dear Andreal, many thanks for your kind reply. I wanted to see whether Mitiq can be used for the transfer learning example you provided https://pennylane.ai/qml/demos/tutorial_quantum_transfer_learning.html, or if this is not possible for training, is it possible for inference at least? Are gate parameters in your transfer example symbolic variables? Thanks.
Yes, gate parameters are symbolic in the transfer learning example. Honestly I don't know if Mitiq can be applied in this kind of scenario. But I have some suggestions in the case you want to try:
Follow up: reproduce issue and possibly improve error message.
Hi @eegzheng,
I did some tests that may help better understand your issue.  From the test snippet attached below it seems that:
I didn't test the same with pytorch since I don't have it installed in my machine. But a tentative answer to your question is the following:
PRINTED OUTPUT:
Closing because, as noted above, Mitiq can be applied to the PL qnode as long as you don't need to evaluate gradients.
If you instead need to evaluate gradients, it is probably necessary to use built-in functions (fold_global, richardson_extrapolate) from pennylane.transforms.
Hi Andrea, thanks for investigating this further. It is true that the simple quantum circuit used in the transfer learning example is compatible with Mitiq and PL error mitigation; however, when you add the classical layers as that in the transfer learning, then the error I reported at the beginning will appear.
I managed to make error mitigation work for transfer learning only for inference, by separating the quantum circuit and the classical layers, e.g., in Pytorch, taking the output of middle layer/feed quantum output to classical layer. For training hybrid neural network, error mitigation still does not work.
Thanks @eegzheng, for the update! What you are reporting seems consistent with the mentioned impossibility of computing gradients when using Mitiq+PL. Maybe training could work when using the native error mitigation tools in pennylane.transforms instead of Mitiq, but I am not familiar with them.
