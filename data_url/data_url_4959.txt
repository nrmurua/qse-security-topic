The power-of-2 processes restriction makes a lot of sense given what QuEST is simulating, however it doesn't map well to hardware where power-of-2 cores rarely lines up with nodes.
I've had a look and I think it should be possible, but it would obviously require a lot of extra bookkeeping. I also can't say for certain that it won't destroy performance! I work at EPCC, University of Edinburgh. Would there be any objection to me offering the opportunity to try this as a dissertation project on our MSc in High Performance Computing? Obviously if it goes well, we'll contribute the code back upstream!
Hi Oliver,
The power-of-2 restriction is only for nodes, and is unrelated to the cores within a node, which should communicate with eachother by NUMA multithreading (not messaging passing). Hence, do not set the total number of MPI processes to #cores * #nodes. Instead, set it to strictly #nodes, and export OMP_NUM_THREADS=#cores.
Using MPI to communicate intra-node will involve lots of unnecessary memory duplication. I'm not sure trying to get around this is worthy of a dissertation, if I understand correctly.
The different concept of relaxing the power-of-2 nodes restriction would be extremely complicated, since some functions handle multiple differently-sized distributed datatypes at once (consider calcFidelity()). There being power-of-2 nodes creates preconditions which significantly simplify many functions.
Let me know if I understood you!
Thanks,
Tyson
Hi Tyson,
Thanks for getting back to me so quickly. I believe you have understood me!
I hadn't picked up that the expected use here is to run with hybrid-parallelism, but that's important, thanks for pointing it out to me. That does make this suggestion less important as one can take advantage of a larger machine with fewer processes. That said I think relaxing the power-of-2 nodes (or I expect, NUMA regions) requirement could still be beneficial in that it would allow one to more flexibly take advantage of additional memory from more nodes. Would you agree?
I agree that it's likely to be extremely complicated! In semester 2 we have a "Project Preparation" course, during which the students scope out the project and come up with a detailed workplan. I suspect that if I offer such a project during that phase the student might choose a subset of the functionality to prioritise working on.
Thanks again for your thoughts on the matter!
Oliver
Hi Oliver,
Sorry for the delay, things have been a bit hectic!
I'm actually not convinced that #non-power-of-2 nodes is useful, because RAM is typically a power of 2, and the memory to store a quantum state is also a power of 2. Hence using a non-power-of-2 number of nodes will likely present no memory benefit; the additional memory will be unused. It would provide additional parallelisation, but of course we can bound that by a factor of at most 2 (before we hit another power of 2), and it may be entirely eaten by the extra communication overhead (since the now unsymmetric communication may introduce new serial rounds of communication). I'm not sure that's worth the substantial change to QuEST's distributed architecture.
I'll spend some time thinking about ideas for HPC projects that could leverage QuEST, or even be intergated into QuEST. I'll keep you updated!
Hi Tyson,
No problem at all, I can well imagine!
I see what you mean, and I take your point -- you've convinced me. Thanks for taking the time to offer feedback, I really appreciate it!
If you do come up with anything, I'd be really happy to hear it. The deadline for students to choose their projects is 16th November, so we might not make the cut-off for this year, but there's always next year. I'll close this issue for now, to avoid cluttering up your repo, but if you'd like to discuss an idea for a project, you can reach me at o.brown@epcc.ed.ac.uk. Thanks again!
