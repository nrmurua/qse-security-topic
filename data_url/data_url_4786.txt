This one's a bit subtle, and not sure if it's even a common enough use-case that anyone has encountered it before.
The TensorFlow backend keeps all internal representation of quantum states using abstract (i.e., unevaluated) tensors. At the same time, whenever a measurement is performed, the remaining subsystems of the simulation are updated conditioned on the value of the measurement.
This can lead to possibly surprising behaviour under the following scenario:
Expected behaviour(?): The conditional state in the State object in 2a (or the conditional state used to determine measurement results from 2b) should be the same conditional state which would result from the earlier returned measurement result
Actual behaviour: The sampled measurement results do not influence the subsequent conditional state. Every time the conditional state is later evaluated (or measured, or some function computed), the measure_fock op appearing earlier in the computation is sampled anew. Thus, there is no strict dependence on the earlier returned measurement and later evaluations.
Fix: This can be fixed by reordering the code which evaluates tensors in the measurement ops to occur before the conditional state is computed. Then the subsequent conditional state will be in alignment with the observed measurement result.
Drawbacks: Given the complexity of the TF Backend, there might be some edge-cases we have to think about carefully before implementing
Note that this bug is not present in measure_homodyne, which implemented things in the way suggested in the fix above
fixed in #109
