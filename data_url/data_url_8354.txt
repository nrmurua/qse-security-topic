This is post for discussion over whether it might be beneficial to switch from nose to another unit testing software.
QuTiP is using nose for unit testing. A disclaimer on that project homepage warns that nose might not be maintained in the future.
nose2 is the successor to nose. It is actively maintained. There are some differences.
pytest is another open-source solution. By comparing nose2 and pytest activity it seems that the latter has grown and is actively updated.
I wonder whether it would make sense to migrate to a more popular (possibly more robust?) software and how much work this would mean. Other implications are not clear to me at this moment.
I think we should swap, but I don't think it's necassarily high priority.
My reckoning is that nose2 could be easier to switch to than pytest. I don't think that anything we do is particularly special. It might be a case of suck it and see.
I have been trying out pytest for the last couple of days and we can start by using it for the testing as it is now. We need to replace installation lines like this in the .travis.yml file to install pytest:
and then change the runner script to use pytest instead of nose by changing:
to
I have been trying out pytest for the last couple of days and we can start by using it for the testing as it is now. We need to replace installation lines like this in the .travis.yml file to install pytest:
and then change the runner script to use pytest instead of nose by changing:
to
I have submitted a pull request with these changes. Travis build fails with error "file not found: qutip". I suspect it is a problem with pytest, and I am investigating.
The problem has been fixed.
I've found pytest to be extremely nice to work with. One advantage is that pytest will also pick up and run nose tests, so there is no need to rewrite all of the existing tests. At the same time, new tests will be easier to write, as pytest has much less boilerplate code than nose.
In addition one could also use Hypothesis. It has tools to directly test numpy arrays and find out edge cases which fail.
Pinging @tehruhn for help on this.
Happy to close this, although the CircleCI thing may still be relevant.
