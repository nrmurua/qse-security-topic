From @zlatko-minev


From Thomas: So one potential 'built in' method is the pins. Pins can include 'gap' values (and by default it has the value be 0.6 that of the width of the pin). For the case of an 'open' termination when simulating sub-sections of the chip, the net_list / pin dictionary of the components could be used for determining the extra subtraction.
This would be perhaps the best way to approach it as we would likely want to be using pins for any internal ports for Z-analysis simulations, which would be practically the same approach (with the addition of an impedance value for said port).
From Zlatko:



@ThomasGM4 and @dwang429 what did we decide to do about this?
From Dennis: @zlatko-minev Notes from my last discussion with Thomas:
The user decides exactly how the design ought to look when the chip is manufactured and draws it that way the Metal GUI; this should look identical to the GDS rendering of the design. For simulation purposes, maybe only a subset of components need to be tested, in which case some connected pins in the design are actually open. This will be reflected in the Net ID list, whereby a pin is in use if and only if it's in the list.
The renderer needs to know how each pin is terminated during the simulation, and that info can be obtained via:
Providing an impedance value (0 for short, float('inf') for open) for each pin within its parent component's pin dictionary -> The user modifies this immediately before exporting to HFSS.
Having a table of 2 columns (pin name and pin impedance) in the HFSS renderer window -> The user fills out the 2nd column prior to each simulation.
Personally I'm more inclined towards the second option.
From Thomas: We can also have defaults depending on the analysis, and the user just has the option to change that if they really want to.
Prevent shorts
