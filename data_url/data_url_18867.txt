TLDR: Match defcal body with a token so that defcal grammars can use their own lexer rules.
Details: Currently, the defcal body is parsed with a parser rule rather than a lexer rule. Since most of modern parsers separates the lexing and parsing phases,  defcal body is tokenized by the OpenQASM lexer rules. To allow other defcal grammar to implement their own lexer rules, it is desirable to match the defcal body as a single token and pass the resulting string to the parser of the defcal grammar.
Currently, the def grammar is written as:
.*? inside LBRACE and RBRACE will match any OpenQASM tokens non-greedily; this mean the body cannot contain RBRACE unless it is enclosed in a string or comment. White space and comments are skipped due to the OpenQASM lexer rule.
To preserve the body of defcal for other parsers, consider introducing a special lexer rule such as
Then the defcal grammar would become:
A possible alternative to this is to use ANTLR's "island grammar" rules to swap the lexing mode when the defcal token is encountered.  We can then have the lexer emit an entirely different set of tokens when it encounters braces; we could potentially use a lexeme made of fragments, which will allow all text with balanced braces to occur.  We'd probably want some way to embed a literal unbalanced brace in the text, if not only for completeness (handle \{, \} and \\ as separate tokens?), and then restore them later during parse-tree simplification, before passing the body on to a separate lexer for defcal blocks.
Without the escape characters, this looks something approximately like:
The advantage to this is that we don't need to introduce a special lexeme into the OpenQASM grammar to stop the lexer from incorrectly consuming non-QASM tokens.  This could also be used in #pragma blocks as well, which conceivably won't necessarily consist of valid OpenQASM tokens.  The obvious disadvantage is that it's marginally more complicated in the definition file, but I think it more accurately represents the underlying grammar.
Island grammar is a good idea! According to Antlr doc, only lexer grammars can contain mode specifications. We will need to split our combined grammar into parser and lexer grammars. Is there any concerns before we do that?
Ah yes, I think you're right.  I hadn't noticed in the examples that it swapped from being the mixed-type parser/lexer in lexer grammar ...;.
I think the split should work cleanly, but I'm not dead certain.  The grammar file as it is doesn't use any of the abilities to insert host-language code into the lexing/parsing, so I don't think we can have accidentally created an unbreakable link between the two.  The output of antlr -Dlanguage=Python3 qasm3.g4 generates two separate files for the lexer and parser, which seems promising.  I'm certainly no expert, though.
The grammar file as it is doesn't use any of the abilities to insert host-language code into the lexing/parsing, so I don't think we can have accidentally created an unbreakable link between the two.
There has been some call for that, though. See #220
As I understand it, there's no problem in adding those features after a split. I was wondering if it were possible, had it been done while they were joined, that you could have tangled up the two states.
I did an experiment to split the lexer and parser grammar. Unlike combined grammar, Antlr does not allow implicit token in parser grammar. For example, the following is not allowed in the parser grammar:
We have to create tokens for INT, UNIT, FLOAT, ANGLE in the lexer grammar. Currently, we have 90 implicit tokens so we will be making a significant change to the grammar. Given the amount of changes, perhaps we want to discuss it in TSC first before doing it.
This was approved by the TSC and we would welcome a PR that splits the lexer and parser grammar.
I'll do this in two parts: first I'll split the lexer and parser grammars in one PR, keeping names as close as possible, then I'll make a second PR that adds the defcal handling, since I think there'll be more to discuss on the latter, and I don't want to block the AST implementation while we thrash it out.
