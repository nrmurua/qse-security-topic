I'd suggest that we restrict formatting conventions and pretty make target to indentation/alignment only for the following reasons:
However some useful features of legacy prettify will no longer be available, I don't see a way to make these features fypp compatible:
Can we use another tools to check for unneeded use statements?
I wonder whether we want to keep our doxify script that autogenerates doxygen headers because it is not compatible with fypp. In turn I'd suggest to remove empty doxygen headers since empty documentation is rather meaningless.
For DBCSR we have similar discussions: cp2k/dbcsr#95, cp2k/dbcsr#39
I also think we should switch to fpretty if only to get fypp compatibily. However, I believe we should keep tight formatting conventions. They reduce visual noise and thereby the cognitive load on the reader. And after all, now that you have developed such a nice tool, why not put it fully to use?
There should be no need to run make pretty before or after every single commit just to satisfy the formatting checker.
With Tiziano's pre-commit hooks this will happen auto-magically. Furthermore, formatting problems will also be caught by the CI prior to merging.
However some useful features of legacy prettify will no longer be available,
Identifying unneeded use statements can be approximated by simply searching for the imported symbol in the remaining file.
For the sorting you'd probably have to implement a second parsing sweep, but this is a feature I could live without.
I wonder whether we want to keep our doxify script that autogenerates doxygen headers
Again, I'm reluctant to remove the headers because they give visual guidance. And they do simplify writing documentation. How bad is the incompatibility between fypp and doxify? It seems that it works just fine for most files.
With Tiziano's pre-commit hooks this will happen auto-magically. Furthermore, formatting problems will also be caught by the CI prior to merging.
Great! Then we could indeed drop the --disable-whitespace restriction.
Identifying unneeded use statements can be approximated by simply searching for the imported symbol in the remaining file.
Yes this can be done easily but symbols may be inserted by a Fypp macro. So unless fprettify runs fypp first, there is no way of doing this with fprettify. But I agree that we could write a script for cp2k that just checks for unused symbols.
Again, I'm reluctant to remove the headers because they give visual guidance. And they do simplify writing documentation. How bad is the incompatibility between fypp and doxify? It seems that it works just fine for most files.
Again, subroutine/function names or arguments may be inserted by a fypp macro. I would not even try to make doxify fypp compatible. In my opinion the doxify script seems to rather hide the lack of documentation in cp2k than to support writing new documentation.
I wonder whether we want to keep our doxify script that autogenerates doxygen headers
Again, I'm reluctant to remove the headers because they give visual guidance. And they do simplify writing documentation. How bad is the incompatibility between fypp and doxify? It seems that it works just fine for most files.
At least for DBCSR there are now some numbers when it comes to the content of the documentation and the usefulness of the empty Doxygen headers:
Cleaning up empty and redundant information from Doxygen tags removes ~4700 lines. ~300 Doxygen blocks consist after that of only one lone \brief tag. This leaves ~600 functions (grep -rh '\\brief' src | sort -u | wc -l) with a unique and detailed description of a total of ~700 functions which contain more than a single \brief and a total of ~3000 lines (grep -rhP '\\\w+' src/ | wc -l) of Doxygen tags. So, 58% (4700/(4700+300)) of the existing "documentation" is no documentation.
Again, subroutine/function names or arguments may be inserted by a fypp macro.
Oh, I see when you write fypp compatiblity you really mean it ;-)
This is indeed not possible without tightly coupling fpretty and fypp (which would be a bad idea).
I would be more than happy if fpretty simply ignored fypp statements.
So, 58% (4700/(4700+300)) of the existing "documentation" is no documentation.
On the bright side this means 42% are useful comments (not bad). This number will likely go down without the templates. At least for myself these empty doxygen boxes reliably trigger my OCD. And again the visual guidance argument is pretty strong too, in my opinion.
Done via #565.
