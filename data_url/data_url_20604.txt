While working at adding hybrid KEMs to the OSSL3 provider, I ran into a few questions about the code points used for KEMs and hybrid KEMs in TLS. I open an issue here because it also affects interop with OSSL1.1.1.
Looking at the google sheets, some of the algorithm names still refer to round 2 variants:
https://docs.google.com/spreadsheets/d/12YarzaNv3XQNLnvDsWLlRKwtZFhRrDdWf36YlzwrPeg/edit#gid=0
In the meanwhile, the algorithms were updated to r3 while keeping the same code points.
I imagine that this can cause confusion, similar to open-quantum-safe/liboqs#909, when trying to interop between different libraries or between different versions of OQS.
Do we want to consider to update the code points after future algorithm updates?
I'm adding support for combining all OQS KEM with ECX and ECP curves in open-quantum-safe/oqs-provider#16. The generate.yml file currently only defines code points for ECP-hybrids. Looking at https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-01#section-3.1, the hybrid code points should fit in 0x2F00 .. 0x2FFF. An option is to add the ECX-hybrids with a 0x40 offset to 0x2F.. (except for those three hybrid algorithms already defined with X25519). For example, a field in generate.yml would look like this:
The OSSL3 provider currently imports generate.yml from the OSSL1.1.1 repository. If you agree, I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated). OSSL1.1.1 doesn't necessarily need to support the additional ECX-hybrid code points.
X448 with 224 bit security sits between NIST L3/L4 and L5. The initial attempt in open-quantum-safe/oqs-provider#16 is to match PQC L3-L5 with X448, being aware that this is not an "exact" match. Are there any thoughts about this and if/how we should support hybrids with X448?
I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated)
If I'm not entirely mistaken, the Google sheets are not maintained any more but generate.yml is the documentation (right, @xvzcf ?)
The OSSL3 provider currently imports generate.yml from the OSSL1.1.1 repository.
That was the easiest way to assure interop at the time. Before now moving logic that's only needed in oqsprovider into oqs-openssl, I'd ask the question whether we want to have those hybrids also in the OSSL111 fork? @dstebila @christianpaquin ? If not, wouldn't a patch-mechanism for generate.yml within oqsprovider only be more preferable (over moving this into oqs-openssl)?
I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated)
If I'm not entirely mistaken, the Google sheets are not maintained any more but generate.yml is the documentation (right, @xvzcf ?)
Indeed, @bhess the new tables can be found here (for KEMS) and here (for signatures). Once we have YAML summaries of all the algorithms in liboqs I can add more information to these tables.
Thanks @baentsch and @xvzcf.
Regarding the ECX-hybrid code points: Since this is so far only supported in OSSL3-provider, I'm adding a separate .yml file there (with the new code points only).
Regarding X448: As discussed, we don't combine it with L5, only with L3/L4.
