Scale blocks appear to be unsupported by the chainrules in YaoBlocks
A minimal example setting:
the above loss function computes effectively an expectation value equivalent to expect(C, psi_0 => U). Computing expect' is no problem, but when instead we use Zygote we find the following error:
However, if we instead put the scale factor in front of each Z instead of in front of the whole sum([chain[][) block, so
, expect' and zygote.gradient yield the same result [-2.0824961019501838, -1.2567915026183087], as expected.
The two methods are mathematically equivalent, but support for the former would be useful/clean!
Thanks for the issue, this is not because the Scale block is not supported, but the Add block is not supported for back-propagating the apply function since it is not reversible. If you do not want to get the gradients of the Hamiltonian, please use Zygote.@ignore to ignore it.
thanks that could work for most cases!
why is C = sum([chain(N, put(k=>2.1*Z)) for k=1:N]) working correctly do you think? that is also an Add block and I use apply on it without Zygote ignore, right?
Also, why is your gradient returned a factor 2 difference in both cases?
thanks that could work for most cases! why is C = sum([chain(N, put(k=>2.1*Z)) for k=1:N]) working correctly do you think? that is also an Add block and I use apply on it without Zygote ignore, right?
Also, why is your gradient returned a factor 2 difference in both cases?
If you are asking why expect’ returns the correct gradient, the it is because you are using Yao‘s built in AD engine.  Yao ignores it automatically. The reason why the gradients are different by two is probably related to the macro also ignores half of psi‘s gradient at the same time.
