As the size of Qiskit releases continues to grow, it's become harder to scan the published release notes to find changes which are relevant to each user (the 0.39.0 release, at least on my screen, was 36 pages long). I'd like to discuss a bit what we can do to keep the release notes organized and structured (both as we write and publish them) so that users can quickly scan and find the segment of changes that are relevant to them.
As reference, here are the release notes for a few large open source projects:
https://wiki.blender.org/wiki/Reference/Release_Notes/3.3
https://github.com/tensorflow/tensorflow/releases/tag/v2.10.0
https://github.com/pytorch/pytorch/releases/tag/v1.13.0
I agree with this, IMO what's really missing right now is just nested headings in our release notes. If we could aggregated notes into subheadings for each of the current category headings that would give us a lot of extra structure. For example if we had a structure like:
The other thing I've been thinking about is moving more details for headline features to the prelude. Basically if we moved the contents of the feature note for headline features to the prelude that might make it easier for people to see the highlights of the release so they're not lost in the other details.
Our workflow enables quite a bit more detail than most of those release notes but we have a very flat structure. Part of the large size of the release notes is that we're getting increasingly good at documenting all the changes we're making in a release. But when we have >250 commits in a release.  From a procedure PoV there really isn't any difference from writing and publishing because the reno files just get automatically aggregated into a ReStructuredText document for the release notes page.
Right now we're a bit limited by reno though because it only supports a flat headings structure. I have a feature request open about this and it's something I was planning to implement myself when I have a bit of free time: https://storyboard.openstack.org/#!/story/2010375 We can have configurable categories today, but all at the same heading level.
This was discussed at last week's terra meeting, and the agreement was that this would be nice to have.
@mtreinish Noted that it is currently possible to add custom sections to the release notes by adding keys to the reno config, but that these would all be at the top level. Following https://storyboard.openstack.org/#!/story/2010375 , we should be able to add keys which correspond to subheadings. @mtreinish Would it make sense to start using top-level sections now (to save pre-release work)? Is there documentation on how to add a reno section (and will it transition smoothly once the reno change is merged)?
@jakelishman Mentioned it should be possible in sphinx to generate deeplinks to specific release notes items (as opposed to sections). Can you add some notes here on what changes would be needed (in the metapackage or sphinx
theme) to put those in place?
For autolinks: right now, reno doesn't put the correct anchor points into the generated rST, but it actually includes textual comments that we can easily regex-replace into correct links.  The more complete solution would be to upgrade reno to generate the links itself, but in the meantime, we could add a post-processing step into our deployment procedures for the metapackage that involves running a simple Bash script to sed all the comments into links.  I could prototype that this afternoon, potentially, to see what the end result would look like.
FYI I'm working on https://storyboard.openstack.org/#!/story/2010375. I got it working yesterday and only need to write tests ðŸŽ‰
I'm happy to work on the other issue with linking, pending prioritization from @1ucian0
Sounds good, thanks Eric!  If you do look at the linking thing, note that at the moment reno puts out incorrect rST because its comments aren't indented correctly - they end each unordered list and start a new one, so the release-notes page ends up being a million different ul tags each with one li (except where a release note has more than one entry), rather than one ul per "heading" with many li.
