As a cornerstone of the transpiler principle, we have the notion that passes should "preserver semantics". But we never clarified what this semantic is.
In general, we have two meanings for semantics depending on what is the user observing as a result:
Let's call the the preservation of the first semantics weak semantics presevation (≃) and the state-vector-based, strong semantics presevation (≅).
Weak semantincs preservation:
Strong semantics preservation requieres to "put things back where they were":
Weak semantics preservation does not guarantee strong semantics preservation:
Considering this now he have the following options.
That means that, after the XSwap is run, the pass should "undo" the swaps by either applied them in reverse or by some sorting algorithm (that considers that the wires to swap are connected). For example, the following circuit should add a "swap back layer":
The last swap is undoing the first swap. Then, an optimization pass would remove the pass (modifing the measurments) resulting in:
Currently, the XSwap passes do not pass throw this intermediate state of transformations (step 0 to step 2 directly).
The positive aspect of this option is that the XSwap passes are agnostic that "the kind of output". The negative part is that, if the user is not asking for a state vector, the computation will be used in inserting the swap layer (in step1) at the end that it will be removed later (in step2). Additionally, the passes that are in the middle, like direction mappers, needs to deal with the extra swaps that are going to be removed.
Side note: We cannot demand all the passes to be strong preserving, since passes like TrivialLayout break it, as well as the optimization pass to remove the swaps.
When there are not measurements, we can assume a state vector will be asked as an output and a pass to restore the layout can be called. This essentially changes the order to step0 -> step1 -> step2. We can ask the XSwaps passes to save the output layout to facilitate the task of this pass.
The positive side is after the XSwap the transpiler works with a smaller DAG and will save operations. The negative side is that, if this pass is used, subsequence passes needs to be added to unfold the swaps.
If state vector measurement would be like yet another instruction (say smv), the situation solves quite naturally:
Since before the transformation is smv q0, q1 and smv q1,q0 after.
The problem with this approach is that we need to introduce a new instruction in the backends.
After some in-person discussions, here is the conclusion: We are going to with option 2.
Consider that:
