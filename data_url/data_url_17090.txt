To make a uniform API, as well as make actual circuit properties properties, the size, depth, width, num_connected_components, and num_unitary_factors of a circuit should all be properties.  Will have to leave the current methods there for compatibility.
What are other fields that are currently properties that this would make size, depth, etc. uniform with? Since there is a computation for finding these properties, I wouldn't think of them as properties.
n_qubits, 'qubits', 'clbits', 'parameters.  Plus they are literally circuit properties, and some of the most important ones.
The fact that they're the colloquial "property" doesn't mean they should be the programmatic property. Think e.g. a very expensive graph property such as the Hamiltonian cycle which is not necessarily a property field of a hypothetical Graph class. For efficiency reasons it does make sense to have these kinds of fields, perhaps, if we maintain them on every mutation.
I am not sure what you mean.  If an user wants an expensive property then they should be able to get it.  I am not saying that these values be automatically recomputed every time the circuit is modified.
Regardless, this is a breaking change without getting into the weeds so will just close.
