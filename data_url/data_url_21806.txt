Using 3.6 py_42+git3e7cdaa5 on Windows 7.
Despite the fact that the dataset test exists and is broadcasted, the experiment below triggers this exception:

Local datasets are found, i.e. the exception is not raised if the commented line is added.
I think the point is that you can't mutate a dataset that you have not created yourself. Allowing that would make the semantics of the dataset in the archive ambiguous. If that's not clear from the documentation it should be explained there.
Ok, thanks for clarifying. If there's a reason for this behavior, I guess I will work it around with something like
Not pretty, but it'll work.
I agree that it would be helpful to point out that mutate_dataset only works on datasets created within the same experiment, e.g. at http://m-labs.hk/artiq/manual-release-3/core_language_reference.html?highlight=mutate_dataset#artiq.language.environment.HasEnvironment.mutate_dataset .
Does that really work? It should suffer from the same semantics problem and I remember seeing a proper error for that. You can't both get and set a dataset in the same experiment.
I tested that code before posting it (and again just now to be safe) by doing the following:
Generate a dataset using
then run
The first entry of test will now show up as 1. in subsequent experiments. It also works if
is called in the same experiment, before the line
The method changes the persist and save attributes of the dataset as expected when those arguments are given. If the dataset doesn't exist, a KeyError exception is thrown.
That is exactly the behavior I wanted to achieve. Am I missing something?
should hit

It does, and the archived value is the one from before the mutate.
I see your ambiguity concern now, but while I don't know a good way around it, it's not worth giving up the ability to mutate broadcasted datasets at all (at least in my use case). And since the warning is triggered, the behavior is at least not unexpected.
Reproducibility and data provenience. The typical way to implement this is to have one experiment that evolves data with x=get_dataset("x_ref"); ...; {set,mutate}_dataset("x", ...) and another that "commits" by doing set_dataset("x_ref", get_dataset("x").
Can we close this?
Sure. Sorry - forgot that this was still open.
