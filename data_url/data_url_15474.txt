HHL algorithm takes epsilon parameter, which is the precision of solution vector, but in some cases the returned solution violates this error boundary.
In the following charts 'theoretical precision' is all_eps list, while 'practical precision' is precision list.


WARNING! Second chart main_diag = 1.5, off_diag = 2.5 was obtained with fixed TridiagonalToeplitz.eigs_bounds function. You can find an implementation of this fix here: #7968
Practical precision should always be not greater than theoretical, but it's not the case.
As far as I understand, in case of perfect right hand side simulation the algorithm has two sources of errors:
To deal with the first type of errors, algorithm has a trotter_steps value, which depends on eps precision. But it's the only epsilon usage in algorithm's current realization.
To deal with the second type of errors, one option is to increase QPE qubits count - nl parameter. Current definition:
nl = max(nb + 1, int(np.ceil(np.log2(kappa + 1)))) + neg_vals.
Personally, I don't understand why this value doesn't depend on epsilon parameter. Maybe something like log(kappa / epsilon) is more appropriate?
I suppose that the first chart is an example of eigenvalues discretization error. As for second chart, it looks like initial trotter_steps value is too small.
@anedumla Any thoughts/comment?
