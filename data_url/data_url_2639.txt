There is a lot of repetition in tests between gates. This leaves a lot of room for accidental omission. Some of this repetition could be reduced by having a standard set of tests that a gate must pass, such as "the decomposition is consistent with its unitary matrix".
Here's roughly what I was thinking:
This issue is to cover perhaps a few more cases, and to then incorporate this into the cirq.testing namespace
In your example why does val have type Any instead of cirq.Gate? Oh I see, none of this actually requires it to be a Gate. So we actually don't need to mention gates at all.
New test to include in the battery:  _eigen_shifts must be consistent with _eigen_components.
New test to include in the battery: _qasm_ must be consistent with _unitary_
New test to include, specific to EigenGate: check if there is a global_shift parameter in the constructor and, if so, vary it to a few values when performing the other tests.
What to do with gates for which QASM output just doesn't work (i.e. some ControlledGates)?
We should detect the not-implemented situation and default to 'vacuously correct'. This involves re-implementing some of the logic in QasmOutput, unfortunately.
Actually, assert_qasm_is_consistent_with_unitary should be using the line
instead of the current one,
This currently causes
which we need to fix.
However, the qubits[::-1] thing is quite confusing. Should we be changing the order of qubits in the _qasm_ methods?
