Hi,
I would like to propose the inclusion of echoed-resonance (ECR) gate into BQSKit. Reason being, I believe it will be useful when compiling to native gate sets of devices that have ECR gate as entangling gate, i.e: OQC Lucy. I've put together some code following the little-endian convention for qubit ordering similar to the implementation at here as following. I'm not super sure on the QASM string representation and I think the conversion to Qiskit fails due to the invalid QASM string.
Code for testing as below. Assuming opaque ecr is the QASM 2.0 representation for ECR gate. Conversion to Qiskit circuit fails though.
QASM Output
Looking forward to your response! ðŸ™‚
This is an awesome and welcome addition to BQSKit! If you put this up as a PR, we can get this merged in.
I am curious about the qasm issue. Looking at the qasm 2.0 grammar, it seems that this is valid qasm. What happens if you build a circuit in Qiskit with an ECR and print out its qasm?
Thank you for looking into my suggestion. ðŸ™‚ I built a circuit using ecr gate in qiskit as below:
Output:
It looks like Qiskit defines the decomposition of the ecr gate in the QASM file. I'm not sure whether this is the right approach when compiling for devices that natively support ecr gate.
Yeah, this concept is always tricky with qasm. We took the approach in bqskit to try and recognize every common qasm gate and even some uncommon ones without needed definitions. This being said, I would assume Qiskit/IBM to be a good authority on both the qasm and ECR gate. This gives us a few options: we can mimic their functionality, go with a simple ecr q[0], q[1], or an opaque ecr gate. As long as the qasm that BQSKit prints, it can read the same, I am happy.
If you read that qasm file back in, does Qiskit recognize it as a single, simple ecr gate?
When you put up your PR, you may want to add an appropriate line in the qasm visitor to decode the ecr gate from a qasm file.
