I was trying to implement the partial transpose and ran into some problems. It took me a while to realize that this was actually due to a convention used throughout the toolbox. Namely, the tensor product is defined in a way that is exactly opposite to what one is used to from standard notations, i.e.
even though
which is the usual way to write a tensor product. This is due the definition of the tensor function in the toolbox, as e.g. for states in 
Since this "switched" tensor product is consistent throughout the toolbox, no issues arise. Is there a reason, though, why it is defined like this? Shouldn't we use the more common convention in order to avoid confusions?
Ok so there is a reason for this convention and it is as follows: kron(a, b) basically returns data that is ordered by rows with respect to the a and b. However, due to Julia's way of storing arrays (column-major order), it is preferable for performance when stepping through the subspaces to have them column-ordered. This can be achieved by simply swapping a and b, which is the way the tensor product is implemented now.
Changing the tensor product to "normal" ordering has a direct impact on performance. For example, when changing the implementation of ptrace according to the "normal" ordering, we see that the speed of the function takes a hit.

Here, d8e9 is the latest master, whereas 17f2 features the "normal" ordering of the tensor product.
For reference: the implementation of ptrace can be changed by simply changing the operators_dense._strides function to
We should add a comment in the documentation on this.
A paragraph discussing the reason for this ordering is now included in the documentation. It also refers to the function implemented in #207 that allows changing the output.
