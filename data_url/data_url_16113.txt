i tried with this simple code to draw multicontrolled ry gate:
from qiskit import QuantumCircuit, QuantumRegister
qr = QuantumRegister(4)
control_qubits = qr[:3]
target_qubit = qr[3]
circuit = QuantumCircuit(qr)
circuit.mcry(0.12, control_qubits, target_qubit)
circuit.draw()
######################################################################################
i encountered this error:
TypeError: mcry() missing 1 required positional argument: 'q_ancillae'
TypeError                                 Traceback (most recent call last)
 in 
4 target_qubit = qr[3]
5 circuit = QuantumCircuit(qr)
----> 6 circuit.mcry(0.12, control_qubits, target_qubit)
7 circuit.draw()
TypeError: mcry() missing 1 required positional argument: 'q_ancillae'
Hi @sassan72, for the code above works, this is what I'm getting with the lastest version (master @ 4ebe4c4):
What version are you using? Could you try updating to master?
In the future, could you please use the provided template for bugs that includes your operating system and the Terra version that you're using? ðŸ™‚
i fixed it. i needed to add q_ancillae=None. do you know how i can decompose multicontrolled ry rotations? Actually, i have this kind of circuit:

but i can't use method of measure for it: circuit.measure(0, c).
but when i have this circuit which is only a combination of single ry, X, and control not gates i can use method of measure.

i need to decompose controlled ry rotations into ry and cnot gates, but i don't know how to do it?
Can you elaborate on what you mean by
but i can't use method of measure for it: circuit.measure(0, c).
you should be able to measure in any circuit.
You can decompose your circuit into RY and CX using this:
Note that RY and CX are not a universal basis gate set, so you cannot decompose every circuit into these two gates. You would also need to allow other gates, e.g. use ['ry', 'rz', 'sx', 'cx'] as basis gate set.
thanks for your useful answer. i am using the latest version of qiskit.
from qiskit.circuit.measure import measure
q       = QuantumRegister(4)
c       = ClassicalRegister(1)
circuit = QuantumCircuit(q,c)
ang = feature_train[3]
circuit = statepreparation(ang, circuit, [0,1,2,3])
circuit.measure(0, c)
circuit.draw('mpl')
###################################
here is the error:
CircuitError                              Traceback (most recent call last)
 in 
6 ang = feature_train[3]
7 circuit = statepreparation(ang, circuit, [0,1,2,3])
----> 8 circuit.measure(0, c)
9 circuit.draw('mpl')
10 #circuit.draw('mpl') #state preparation circuit.
~/anaconda3/lib/python3.7/site-packages/qiskit/circuit/measure.py in measure(self, qubit, cbit)
54             if cbit is not in this circuit or not creg.
55     """
---> 56     return self.append(Measure(), [qubit], [cbit])
57
58
~/anaconda3/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py in append(self, instruction, qargs, cargs)
839         instructions = InstructionSet()
840         for (qarg, carg) in instruction.broadcast_arguments(expanded_qargs, expanded_cargs):
--> 841             instructions.add(self._append(instruction, qarg, carg), qarg, carg)
842         return instructions
843
~/anaconda3/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py in _append(self, instruction, qargs, cargs)
864         self._check_dups(qargs)
865         self._check_qargs(qargs)
--> 866         self._check_cargs(cargs)
867
868         # add the instruction onto the given wires
~/anaconda3/lib/python3.7/site-packages/qiskit/circuit/quantumcircuit.py in _check_cargs(self, cargs)
955             raise CircuitError("carg is not a Clbit")
956         if not all(self.has_register(i.register) for i in cargs):
--> 957             raise CircuitError("register not in this circuit")
958
959     def to_instruction(self, parameter_map=None):
CircuitError: 'register not in this circuit'
i can send you the whole code, if you mind?
def statepreparation(angle, circuit, wire):
there is another error about implementing multi controlled gates with qiskit. if you look at def statepreparation and compare it with circuit, empty circle must be for control '0' and full circle for control '1'. But in qiskit it does it in reverse sometimes. for example:
control3 = RYGate(angle[11]).control(2, ctrl_state='11')
circuit.append(control3, [0, 1, 2])
circuit.barrier()
For controls '11' and '00', qiskit does them correctly. but for control '01' and '10', qiskit does it in reverse.
It's not in reverse, the bit order in Qiskit is little endian which means that the left bit in '01' corresponds to the bottom qubit.
thanks a lot for your answers. i posted another question regarding measurement gate. i will appreciate you, if you answer that one too.
Closing as it looks like the question in this issue has been addressed.
