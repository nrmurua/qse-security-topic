Reduce the number of test run when pushing to a PR by focusing on a reference environment (Python 3.5 + Linux) and add a cron task to perform all the checks once per day.
@diego-plan9 @mtreinish I know some of you have reservations about this and I think those are fair points. Would you mind to make them explicit here?
Just to be clear, my point is that, with the current configuration, we are running the same tests over and over, even thinking that the major part of our codebase is platform independent. I was hoping to catch platform-specific bugs in the daily task. But I know you both share the fear of those bugs being unattended and not fixed (for which I open this other issue). Perhaps it is a better idea to merge parallel testing first and throw money to AppVeyor and Travis before removing testing scenarios.
If you feel strongly against these changes, I'm OK. Feel free to close the issues.
I wouldn't call them reservations - rather, observations!! There are several topics around that might have been also touched in other issues or PRs, but for me it's clear that we have a non-ideal situation during day-to-day working in the repository and indeed we should place emphasis in finding ways of making it smoother.
But I think there is another important force: how confident we are that we are not introducing bugs at each stage, and how we keep that confidence as high as possible in order to catch them effectively. I tend to think of it as some sort of "numbers game". If we think that "passing all (including online and slow) the current tests, in all platforms and python versions", is a 100% confidence (which is not, of course) my concern is that we might end up reducing that % even more with subsequent changes. Which turns the problem into "setting up a worfklow for dealing with bugs caught not during a PR, but some time after it".
Actually, I'm positive that we can handle the setting of that workflow (even though master has been failing for three days without getting much attention lately), and that we can keep a reasonable % of confidence by being more smarts on which tests we run and where we run it - but an effort (more organizative than technical) needs to be done. On a side note, I think introducing the travis cron job would be good for some scenarios regardless of what is decided for the PR/master setup: for example, the running of slow_tests which is very much needed.
So basically I'm personally fine with whatever @delapuente and @mtreinish agree upon, as long as ultimately we end up being able to catch bugs and correct them effectively üêõ
I tend to agree with @diego-plan9 here. Things are less than ideal currently, but I'm worried about pushing back the needle too far here while trying to fix that. Specifically in #1074 I feel like that would be going too far. I still think we should cover at least all python versions we support on pull requests, because I have seen and been hit by incompatibilities between 3.5, 3.6, and 3.7 and the cost for those are very low.
As I see it the biggest issue we have currently in CI is a resource limitation on the non-linux environments. Specifically appveyor serializes all the jobs for all commits which ends up being a huge bottleneck. Especially when people rebase or push new revisions because appveyor doesn't ever remove anything from it's queue. So if someone pushes up 5 quick revisions to a PR it will end up queuing 15 jobs each of which typically take 10-15min. So we add up adding 150-225 minutes of time until someone else's patch gets to run tests on windows. (which is particularly annoying because we could just get away with running the last update since it's a branch and includes all earlier commits) This is also ignoring post-merge jobs which take long and sit on the same queue. As long as appveyor works like this it will always be the bottleneck and it's really where we should look at optimizing our usage.
The osx travis jobs are a problem to a more limited extent because they're are less nodes so we end up queuing for longer on them just waiting for a node to free up. Those jobs also have a higher rate of build failures before we even get to the testing (I have to manually restart jobs because of a failed node setup on osx at least daily).
I'm thinking if we want to improve the contributor experience with CI we should limit ourselves to a single appveyor job. Also, we should look at the appveyor config and see if there is a way for it to automatically remove outdated jobs from the queue. We should consider dropping one of the 2 osx jobs from running on PR just to make that a bit faster, but I don't think that will change the bottleneck.
AppVeyor has an option called "rolling build" which ensures only the latest commit to a PR branch is built. I just turned it on for this project, which will hopefully improve those Windows build times.
Nice!
Closing as we agreed on keeping the stages numerous during PRs.
