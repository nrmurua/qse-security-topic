This issue is to track development of the tensor network simulator (currently in MPS form). WIP PR will follow soon by @eladgoldman
 Fully interface with Qiskit - be a backend / provider
 Implement all relevant base functions for simulator
 Currently known bugs to fix: miscompares in special cases with Qasm simulator, some memory fails
 Test suites
 Runtime and memory performance profiling and optimizations
 Documentation in code, readme, and tutorials/notebooks
 Compilation files (make)
 Random circuits (including T's), parametrized by number of number of qubits, depth, and percentage of CXs
 Structured circuits
 Relevant benchmarks from the test library https://github.com/Qiskit/qiskit/tree/master/test/benchmarks
 Aqua usecases
 Find the qubit limit - currently we stopped at 23 for confidence reasons (needed to compare full statevectors to reference) but appears can go much higher when asking only for expectation values
 Native interface for input observable(s) to get their expectation value at output
 Native dealing with non-nearest-neighbors CX's (i.e., without hidden SWAPs). This is possible as long as no CX-cycles, so need to add SWAPs only when encountering cycles in input (today SWAPing on any non-nearest neighbor)
 Consider possibilities to use incrementally - taking advantage of previous results on sub-circuit
 Consider possibilities to parallelize (@hhorii we hope you could help here when the code matures)
Will add below some preliminary runtime results. All cases are random circuits with X,Y,Z,H,S,T,CX gates, CX percentage is 10%, all others are uniform. Each datapoint is an average of three runs. Time in all charts is in seconds. All datapoints are checked for correctness against the Aer Qasm simulator full statevector. Experiments were conducted mainly by @merav-aharoni
Full calculation of statevector at end of TN run:
TN vs. qasm benchmark_10.pdf
Without calculation of statevector at end of TN run (for use, e.g., for expectation value finding):
TN vs. qasm benchmark_10_no_statevector_expansion.pdf
Calculating expectation value of X on a single qubit:
TN vs. qasm benchmark_10_expectation_X.pdf
Here is a graph of running the tensor network simulator up to 128 qubits (without calculating the statevector).  Qasm ran up to 26 qubits.

Here is a graph of a benchmark for calculating expectation value on subset of qubits.
The matrix M is a tensor product of 5 random paulis on a subset of 5 following qubits.
Each point in the graph is an average of results of 5 circuits.
TN vs. qasm expectaition value of 5 qubits benchmark 10% CNOTS.pdf
Continued chart from Elad - runtime for getting expectation value of random Paulis on five consecutive qubits, for random circuits of depth 120 and up to 150 qubits

Runtime does increase substantially with depth. Will show rigorous results of that soon
@chriseclectic or @atilag , I don't think I have write permissions here, can you please assign @merav-aharoni for this Issue? She'll be responsible for checking the checkboxes above to make it aer-ready
(and of course do the work behind the checkboxes :-) )
with @eladgoldman
Here two graphs of a benchmark for calculating expectation value on subset of qubits.
First graph, for 16 qubits, changing depth (20:10:620):

Second graph, for depth 120, changing number of  qubits (10:5:700), Qasm is shown up to 23 qubits:

At some stage we will start benchmarking also on structured problems, in particular Aqua. For now we are mainly focused on infrastructure items and consistency, correctness, and extent of the algorithm. Hence the random benchmarks which in a sense provide the most simplest and straightforward results to analyze
Current status:
Tensor network simulator is implemented as a simulation method of qasm controller.
Supported  operations: gates, snapshots (statevector and expectation value pauli).
Next steps:
Testing, benchmarking - @eladgoldman
Complete missing interface functions, additional code improvements - Merav
Review - @chriseclectic , @atilag
It's been a while since we update this issue. I guess it was intended to be used as a "meta" or "epic" issue to track MPS simulator progress.
@yehuda-naveh Can we close this and create issues for each of the remaining tasks?
@atilag , you can close this issue.
