Hi I think there's something wrong with your QFT implementation. This is its corresponding unitary matrix acting on 2 quibits when I used Aer to check:
Circuit unitary:
[[ 0.5+0.j   0.5+0.j   0.5+0.j   0.5+0.j ]
[ 0.5+0.j  -0.5+0.j   0. +0.5j  0. -0.5j]
[ 0.5+0.j   0.5+0.j  -0.5+0.j  -0.5+0.j ]
[ 0.5+0.j  -0.5+0.j   0. -0.5j  0. +0.5j]]
This is the matrix given in wikipidea:

Hi @zyzhang1130 can you please point out the code you used to build your QFT circuit? Did you use Terra? Aqua? Something else?
I used online qiskit  from IBM Q experience Beta. Turns out you need an swap gate in front (for the 2-qubit case I used in above). My guess is in general you will need a swap gate but the specific implementation of the swap gate depends on how many qubits you are using.  Out of luck I fixed my 4-qubit implementation.
The definition I used is as follows:
def qft(circ, q, n):
"""n-qubit QFT on q in circ."""
for j in range(n):
for k in range(j):
circ.cu1(math.pi/float(2**(j-k)), q[j], q[k])
circ.h(q[j])
which is from https://github.com/Qiskit/qiskit-tutorials/blob/7bc40e964dec2a37ac5915c3b84c01af9c2ef754/community/terra/fourier_transform.ipynb
Hi @zyzhang1130
The QFT implementation requires you to remember to read out the results in reverse order, i.e.
for q' = QFT(q), the qubit order in q' is the reverse of the qubits in q. As a result, you need to remember to put swaps in.
For a detailed derivation of the QFT, please see this tutorial in IBM Quantum Experience beta and please let us know if you have any other questions.
HI, @aasfaw ,
It sounds like a similar issue I raised in IBMQ communitiy forum. Care to have a look? the post is titled 'problem with composer’
Thanks for the help.
By the way I compared with the result I obtained by applying IFFT(which is supposedly equivalent with QFT after appropriate scalling) on the same vector (states). It didn't look like just by reversing the read-off order will do the trick...
Hi @zyzhang1130
It sounds like a similar issue I raised in IBMQ communitiy forum. Care to have a look? the post is titled 'problem with composer’
Thanks for the help.
The two are not related. In your community forum post, it looks like you are referring to phases incorrectly. Let's keep this discussion focused on your original post, as I have replied to your question in the community forum there.
By the way I compared with the result I obtained by applying IFFT(which is supposedly equivalent with QFT after appropriate scalling) on the same vector (states). It didn't look like just by reversing the read-off order will do the trick...
It would be useful if you could share your code here so that we can make sure we're doing the same things.
B = [1/sqrt(8);1/sqrt(8);1/sqrt(8);1/sqrt(8);1/sqrt(8);1/sqrt(8);1/sqrt(8);1/sqrt(8);0;0;0;0;0;0;0;0];
a=dftmtx(16)/4;
b = inv(a);
Y=a*B
imagesc(abs(Y))
b is normalized hence should be equivalent as QFT on 4 quibits. B is a normalized state. This is matlab code but should be able to easily implemented in python as well.
