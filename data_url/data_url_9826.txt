Currently for quadratic models, each neighborhood is encoded whether or not it's empty. Each neighborhood uses 8 bytes to encode its magic string and the length of the section, and then is padded to be 64 bytes. This is, of course, very inefficient for linear models.
Some alternatives:
I think (3) ends up being best, but unfortunately requires a backwards incompatible bump in the serialization format version. Whereas (1) and (2) can be done in a backwards compatible way.
Another option:
I don't really like this option because it breaks the hierarchy and complicates the CQM's serialization. But worth mentioning for completeness.
And of course there is
I don't see how any of these options is backwards compatible, except that (1) and (2) can be made so that we on server-side can relatively easy disambiguate between "old format" and "new format" used by older/newer client-side dimod, right?
Can't the best solution (3) be implemented as a new format (with new version), and then we add support for it server-side, in addition to old formats? We'll have to support a range of input formats (versions) anyway.
You're right. I mean to say that for e.g. (1) we can easily interpret the lack of flag as falsy thereby making it a minor version bump. Whereas for (3) we need to significantly change the reading to switch based on version number, which IMO means going to serialization 2.0. Of course we could stretch the definition such that (3) can be version 1.1, but that would be a mess.
Incrementing to 2.0 sounds fine, but why can't we support 1.x and 2.x? Should be technically feasible. I mean, we support(ed) different serialization formats/versions in dimod.
Of course we can, and would. But the first change is only a few lines and the latter is more invasive. Wasn't saying more than that.
Ok, makes sense to do something simple but useful in short term, and "the right thing" later.
To be clear, I am inclined to (3). But want to think about it a bit more and try an implementation or two.
