While we can have parameters that can set and get a list of values, we can currently not sweep from one point to another in that parameter dimension.
i.e. go from thing[a,b,c,d] to thing[e,f,g,h] in n points.
This is somewhat related to the combined parameters (#111 )
Not sure if this is useful but in the MeasurementControl that we made we work with specifying sweep_points for multiple parameters separately, the 2D grid way of doing this is only used if we explicitly call 2D.
To give an example (psuedo code)
This allows doing any arbitrary way of setting sweep points, only if we explicitly say sweep_points 2D will it do the equivalent of a Loop.loop.
Doing things like this simplifies things from a datasaving standpoint (all tuples (par1, par2, meas_val)) and allows easy extensibility to adaptive functions without requiring custom syntax.
We could expand this concept to the loop by doing something like
This will then loop over par1 and par2 while setting a value from arr0 and arr1 for each data point.
I believe the explicitly setting sweep points (and bypassing the slicing interface) is already supported in qcodes but don't know the exact command by heart.
I think it makes sense to expand this because being able to do things like this easily is a very powerful concept (allows setting combined pars on the fly without predifining combined parameters (as in #111) )
The discussed syntax for this was something like:
Where the list of setpoints may be a generator.
Isn't this kind of tricky with the data_array data structures we have now ?
Aside from the fact that currently it would simply not work,  how would such an array look ?
In the case of combining 2 pars; array of tuples (2*n array) or 2 separate data arrays.
I'm not sure if I understand the problem you are seeing @giulioungaretti
ok, say you  do
Loop(combine(par1,par2), ((x0,y0), (x1,y1),...)).each(I, Q )
then for every step you have:
How you make an efficient  array out of this ?
You have 4 arrays (1 corresponding to each "parameter") , where for each entry n you resize (not efficient) and append 1 value.
The setpoints for I (and Q) refer to arrays x and y
Another (similar) use case @damazter and I have been discussing from the input side - I want to sweep my vector magnet over an arbitrary vector [x1,y1,z1]->[xn,yn,zn] in a particular coordinate system (the magnet takes in cartesian, spherical and cylindrical coordinates), so in fact, the magnetic field parameter at any time is defined by the tuple (x,y,z,coordinate_system). How can we implement this sweep in the loop structure?
@majacassidy  can you say a bit more about that?
I'd say this should be the way:
where X,Y,Z order matters and it's up to user to know that.
