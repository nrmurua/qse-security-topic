The current contract is that the object passed in must be Iterable.  But it might also be useful to include iterators themselves.   So that
circuit = cirq.circuits.Circuit() circuit.append(iter([q0, q1, q2])) 
works.
One use case is if there are portions of a circuit that you want to build where a generator pattern would work, but you also need some state to report on what you constructed (for example if it involves randomness in the construction), then you'd want to make a full iterator.
I'm not sure I understand the use case here. How is the existing code failing? Doesn't calling __iter__ on an iterator return self, and so the existing loop will just naturally consume the iterator?
This was just me being an idiot: see I was passing in qubits to the append.  The following does work because Iterators are subclasses of Iterables.
q0 = cirq.google.XmonQubit(0,0)
q1 = cirq.google.XmonQubit(1,0)
q2 = cirq.google.XmonQubit(2,0)
H = cirq.ops.H
circuit = cirq.Circuit()
circuit.append(iter([H.on(q0), H.on(q1), H.on(q2)]))
Excellent, the type checker was doing its job.
