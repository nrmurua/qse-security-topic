Currently, SequencePulseTemplate can only be constructed using its constructor (duh!). Allowing to add more subtemplates and external parameters after object constructions as done in TablePulseTemplate is more convenient to users.
Patrick stated, that this would not be required and thus no effort should be made towards the realization of this issue.
Having used the SequencePulseTemplate a bit in examples, I'd find it much easier if I could add to them using an add method as for the TablePulseTemplate.
Additionally, the following two features would be very convenient:
I still dislike the addition of an add method. The verification leeds to a lot of spaghetti code like in TablePulseTemplate.add_entry and requires an enormous amount of unit tests.
There is now a working implementation of an identify mapping class now in the identity_mapping branch. While writing tests for it, I noticed that implicit mappings are indeed not very useful without implicit external parameters.
I still wonder whether the implicit behaviour is incredibly useful in a real-life use case. I guess most of the time one wants to have either transformations in the parameters or maybe use generic parameter names like "up", "down", "voltage_high", etc. in the most generic pulse templates, which are very prone to collide with each other.
I wonder if add methods could be combined with a slimmer syntax like overloading '*'. It is not obvious how to handle parameters that way. They would either have to be defined by lower levels or later passed from a higher level. The motivation is to be able to write algorithms as clearly as possible.
I removed the parameter duplication check for the @ operator in #170 and consider this issue resolved.
