Currently problem graph check is naively implemented and relatively slow.
OTOH, large chunk of time is taken by BQM traversal/conversion. With:
We get:
Comparing that to a fast superset check:
looks like there's not much we can gain here.
To add a tiny bit more context. First, and this was probably obvious, it's the quadratic that's dominating the time
Second, about 50% of the overhead is coming from the abstractions of the quadratic view.
I can take a look at the quadratic view to see what can be done to speed that up a bit.
Though worth noting that the check_problem() function ends up using .items()

Useful observation about the quadratic view overhead, I haven't checked that.
Ultimately, shouldn't matter here, as we actually only need set(keys), but good to know.
On that note, going forward, to enable performance improvements, we'll need to make sure native/low-level bqm can be used (and is used) end-to-end. Right now we do too many bqm conversions along the way.
