I think there are currently two problems with the way SIRIUS reads pseudo potentials:
SIRIUS uses a custom json format while UPF files are commonly distributed in the XML format. For the conversion users have to run the upf_to_json.py tool, which is an unnecessary burden.
SIRIUS handles the parsing all by itself, which leaves the CP2K datastructures uninitialized, including e.g. pot%zion. We once parsed the json file twice, which was just a brittle workaround.
In my opinion, the clean solution is to use CP2K's UPF parser and then pass the values on to SIRIUS. While CP2K's parser is probably not yet up to the task, we can look at Quantum ESPRESSO's implementation for inspiration.
I also agree with you.
This was a choice at the beginning. SIRIUS has absolutely everything to pass information about pseudo-potentials in the interface. It is done that way in QE for instance. However it was decided to postpone this. Note that we still need the mechanism of passing the potential file for the full-potential case because there is no standard at all.
I remember looking at the UPF parser and found how that it is incomplete. PAW potentials are ignored, etc...
@toxa81, gentle ping :-)
I still think this would really help with on-boarding new users.
We have all the functionality to load UPF files (set radial grid, beta projectors, augmentation operator, wave-functions, D_ion) programmaticaly. If you have UPF parser, this is a good simplification. We will start looking at it after NY. I wil put a cross-reference issue on our page.
It is not that simple to use the cp2k upf parser. The parser is only implementing half of the information we need in SIRIUS which makes it unusable in practice.
Unless someone knows a library that conveniently parses all UPF files and supports more than one language then it could be considered as a valid solution. Any other option would be a time consuming process as no UPF standard exist.
Probably the easiest solution is to extend CP2K's parser. As you said, it's already half way there ;-)
But seriously, your current parser is only 400 lines of Python code. So, it shouldn't be that much effort, right?
An alternative would be to use QE's upflib, but that is most likely more work.
