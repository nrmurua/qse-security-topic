In the language specification the include statement is prefixed with #:
In all examples and in the grammar this # is missing.
@ajavadia we need to clear this up. I thought we decided to remove the # from the live document.
I removed it in this PR #72
@jaygambetta we had added the # to the spec because it is a compiler directive and not a "language statement".
I know we keep going back and forths and I'm good at adding '#' but we need to add it to all the examples as well and the readme.
Option one as we have now no '#'
Option two change all -- this would be my vote (but I thought I recalled discussions removing it) but it means changing all and @ismaelfaro first got it all the same :-).
@jaygambetta we had added the # to the spec because it is a compiler directive and not a "language statement".
@blakejohnson in that case OPENQASM 3.0 would be the same, I mean it is going to be read by the preprocessor to take care the instruction set to be applied/used in the rest of the file.
From my point of view the both are keywords, and if we take modern languages, they use plain keywords "import/use/require/package".
I agree with @ismaelfaro we want to explicitly support this within the language. This is our simplistic packaging model.
ok
'#' @blakejohnson
include @taalexander @ismaelfaro
good either way as we have bigger problems @jaygambetta
@delapuente @awcross1 @levbishop @ajavadia thoughts?
I think it is a matter of semantics*. If it is a preprocessor instruction, copy & paster file content before the parser starts, then include the #; if it has its own semantics and has implications in the AST, drop the #.
As @taalexander pointed, I think in our case it is the first case.
Regardless of the syntax, what I would expect from a modern language is basic library management tallowing me to do things like:
Do you think we can start a discussion to add basic library management? @ismaelfaro @jaygambetta @blakejohnson @taalexander
The first (non-comment) line of an OpenQASM program may optionally be OPENQASM M.m; indicating a major version M and minor version m.
While, I like the idea of having library management. I think this is a very nuanced issue, and likely out of scope at this early stage. Implementation details would be important.
I think this is relatively inconsequential and, because including the # would break QASM 2, I'd be in favor of not including it.
Lets just go with  not including and make all things consistent and we can change if need be later.
