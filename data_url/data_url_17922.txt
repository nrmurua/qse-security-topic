While experimenting with a quantum ripple-carry adder, the order of registers returned by get_counts was observed to be inconsistent from run to run. For example, in a scenario where register A containing 4 qubits was programmatically declared before register B containing 3 qubits, get_counts was observed to return either {'010 0110': 1} or {'0110 010': 1} depending on the run.
Request a bug report to investigate whether this is the intended behavior.
It is not clear how to reproduce this. A code example is needed.
In particular, a ripple-carry adder is supposed to take 2 registers a and b, and return a register c with the result.
Why is the result split into 2 classical registers in the example reported here? ('010 0110')
But I do agree we need to document the splitting of the register by order in the circuit.
Letâ€™s put this on hold but make it part of the results object redo in version 0.7 @delapuente do you agree. I want the get counts redone and in it documented how the data is converted by hex to counts.
Moving to the 0.7 milestone. We'll create an epic for results when planning 0.7.
This is defined in 0.7 and ordering is clear.
