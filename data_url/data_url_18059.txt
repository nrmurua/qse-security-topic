Result.get_ran_qasm() seem to be broken due to PR #501. That's because the Result datastructure no longer has a copy of the qobj json inside it. We should see how/if this can be fixed with the recent introduction of Qobj class.
When we move to qobj why do we still want this option. This should be the output of the transpiler before qobj. Or are you thinking we make a qobj to qasm file
Well, while implementing I realize two cases:
If you use the wrapper shortcut execute(), you receive a BaseJob instance which does not expose the compiled QASM. The solution would be exposing the Qobj as a read-only property. Thoughts?
Is it guaranteed that the backend will always execute the QASM sent in the Qobj? If not, you need the backend to return the actual QASM it ran.
This seems related to #680, where running compile returns a Qobj with an incorrect qasm string, and then fails to run on the device.
@delapuente I raised this bug mainly because the method is exposed in our API, but not working correctly at the moment.
Going forward, QASM will not be included in Qobj at all (it is only included now because devices run QASM, and can't run Qobj directly).
But even after we work with pure Qobj, it will still be very useful to see what Qobj was run after the run finished. For this, I think there should be a method BaseJob#get_ran_qobj() which returns the Qobj that was run in that Job.
Then we need two converter methods for converting from Qobj -> QASM and Qobj -> QuantumCircuit.
Does that make sense?
Agree. I would simplify the method name, say get_qobj() or a qobj property but that's all.
