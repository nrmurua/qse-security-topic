job.result().get_counts() should return a list of all the counts available when there are multiple circuits in a job.
This allows, for example, doing:
verses having to explicitly write out the counts indexing by hand, or in a loop using len(job.result().results) and appending to a new list.
Hello, I am quite new to qiskit but I wanted to face this issue. May you be more precise on how to reproduce the problem ?
If i understood correctly you execute a job with multiple circuits and then you wanted to plot the results of all the circuits with the single method plot_histogram.
I looked into result.py and I think that trying to do:
plot_histogram(job.result().get_counts())
would raise the error:
You have to select a circuit or schedule when there is more than one available
Is this the enhancement needed ?
The enhancement is that result.get_counts() should return a list of dict containing counts for all the experiments in the result. You are correct that it currently errors.
Ok I would like to get into it then.
Changing the get_counts() method to always return a list of dict would need many updates over the other classes using this method ? In this way in the case of a single experiment we will have a list of a single element.
If you think that this solution works I can start dealing with it.
The single circuit case should not change
This would be much simpler if a result had an attribute counts and then instead of:
But isn't a method needed also to possibly specify the experiment?
The method in fact is defined as:
get_counts(self, experiment=None)
You are right, for this reason I was thinking that maybe it is better to keep it.
I did a pull request #3737 that fixes this issue, if you could check, it would be great as the enhancement will be achieved!
How about the case wherein some of the experiments failed? Does result.get_counts() raise or does it still return a dictionary with failed experiment value be None? Like {'0': 123, '1': None}.
I would say raise as it is essentially replacing a loop over all experiments that would also raise an exception in this case.
Yes if it raises in that case I'd say raise too, but if you could give me an example of a failing circuit I can try to test it.
Moreover Do you think it would be better to raise or return the counts with  None for the failing experiment?
