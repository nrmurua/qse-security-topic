By executing the transpilation of a circuit using the ibmq_athens device, I noticed that the transpiled circuit with the lowest depth has optimization_level different from the allowed maximum value (3). All Qiskit customers want to find the shortest-depth circuit with the least computational effort, if that is possible. I think that the transpiler should return the circuit more shallow (with respect to the basis gates of a given hardware device) with the lightest optimization.
The following code transpiles the given quantum circuit by looping on all the optimization levels and on all the permutations of the given layout. Even if we are using several layouts for transpilation, it's possible to see that there are shallow circuits with the default layout when the optimization level is less than 3.
The optimization level could be used as a reference of the computational effort the customer wants to use at most.
I think that the transpiler should return the circuit more shallow (with respect to the basis gates of a given hardware device) with the lightest optimization.
Hi @AlessandroCarbone , thanks for opening this issue. Your point above is in general true, but practically difficult to achieve in all cases. It's expected that higher optimization levels are more computationally expensive and should generally return shorter circuits (though depth is not the only metric for which we optimize), but it is not guaranteed in all cases, and so some experimentation with the transpile flags will be necessary to get the shortest possible depth for any given circuit . There is an open PR ( #3018 ) for allowing the transpiler to explore several possible transpilation strategies and choose the best (at the cost of longer transpile times) that will enable automating some of this search at higher optimization levels.
