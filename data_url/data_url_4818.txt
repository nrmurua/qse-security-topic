It would be nice to specify 'sampling' as well as the number of shots to sample - if this is specified, the simulation should then sample the results of the measurement operators.
The fastest way to do this is to 'cheat' and simply run the circuit once without the measurement operators (as these reset the modes to the vacuum state), and then sample the Fock state probabilities/quadrature probabilities of the qumodes that are to be measured.
This feature should also ideally be supported in Blackbird in a way that doesn't require the user to modify the engine queue to remove existing measurement gates. Perhaps as a keyword argument when running the engine?
eng.run(n_subsystems=3, backend=b, sampling=50)
In this case, the frontend would:
What if one wanted to perturb the initial state before the transformation?
Hi @ziofil, can you clarify what you mean/what operation you would like?
Yeah sorry, I was very unclear. I seem to understand that the sampling you are proposing could work because you can turn the output into a probability distribution to sample from. What I was considering is that this would not work if one wanted to sample a few initial states, apply a transformation (say, a channel) and then use the final results.
I would love this feature, to run a few optimizations with different initial conditions in parallel.
Hi @ziofil,
What you're describing -- unless I'm misunderstanding -- can be done with the current features of Strawberry Fields. You could combine a set of different input states into a batch, then apply a circuit to this batch of input vectors. This effectively carries out the same circuit on each input state in parallel (rather than in successive runs). Your output would then be a vector of output states -- one for each input state fed to the circuit.
This feature is currently available in the tensorflow backend.
A particular restricted solution for this is implemented in #100.
