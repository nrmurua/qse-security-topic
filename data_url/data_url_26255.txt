Given either a vector or matrix provided as an np.ndarray object as input, compute the S(k) norm of this object.
For a matrix X, the S(k) operator norm is defined as shown in
#45 (comment)
Further information about the S(k) norm is provided in arXiv:1207.1479.
The S(k) norm is used as a subroutine to determine if an operator is block-positive which is useful in determining various separability results as was done so in arXiv:1408.6981.
An implementation of the S(k) vector norm and S(k) matrix norm can be found in the QETLAB package here and here, respectively.
For toqito, the S(k) norm should operate on either input as a matrix or a vector. This feature should be included under matrix_props/sk_norm.py.
Continuing my work from #45, here is a "cheat sheet" i've prepared to help with computing the S(k) operator norm (this norm is necessary for computing k-block positivity).
Given the following input to the norm (X, k, n, and m):

The following holds and is computable:

In the last three inequalities, X = P where P is a projection. Only if X is a projection do these last three inequalities hold.
QETLAB's S(k) operator norm implementation also uses a random iterative method to bound the result, along with some other small tricks, but they are difficult to implement in themselves, so I've ignored them for now.
A convex optimization method can be used to further bound the norm. Consider the following (pseudo) python:
The output of prob.solve() needs to be processed into upper/lower bounds, so some further work needs to be done to figure that out. This is my progress in the past week or so!
Hi @vezwork.
Wonderful work so far, it really looks like you're making a lot of great progress here. I sincerely appreciate you taking the time to write this up and share it. If I can offer some assistance, do let me know, but it really seems like you're much more of an expert on this particular problem than I am, which is wonderful.
Great work, and please do continue to keep me posted on your progress. Looking forward to seeing what you come up with!
