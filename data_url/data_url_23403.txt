Not sure it's by design (@alexcjohnson ?):
This will fail :
(does not fail in the tests somehow)
This does not fail:
If gc.collect() has an effect, then this certainly isn't by design...
The error is:
Which is definitely something we want to fail on... the question is
a) do we want del a to result in the complete removal of the instrument, or should it still be present in DummyInstrument.instances() until you call a.close()?
b) why does it matter if you explicitly collect garbage right now? I guess there's still a circular ref somewhere?
I stumbled over this again when working on the instrument tests (simplified):
Assuming that test_something_else runs before test_something both will fail because the instrument is not closed probably in tearDown and a new one cannot be created in the second run of setUp.
If the first test passed successfully __del__ is called as expected. I suspect this happens because unittest keeps a reference to self.instrument(2) around when the test fails.
Some debugging confirms that __del__ is not actually called until all the tests have run if the test happens to fail.
For reference the behaviour of  del is documented in https://docs.python.org/3/reference/datamodel.html#object.__del__
del a will merely decrease the ref counter to a and a.__del__ will be invoked when ever the gc runs so it seems likely that there is still a reference cycle involving a
