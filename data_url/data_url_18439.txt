We use a non-standard :HASH-FUNCTION argument to MAKE-HASH-TABLE in a handful of places.
Ideally, we'd like to do something portable instead.
This came up in the PR comments for #211 (comment)
I'm sympathetic to this, but custom hash functions is really a killer feature, since the otherwise available tests do not allow sufficiently fine-grained behavior. So what options are there? One is to use a compatibility layer like cl-custom-hash-table which is also nonstandard but at least aspires to be portable (although full functionality is only supported for a subset of lisp implementations...).
I also went googling for compatibility layers and didn't find much besides cl-custom-hash-table.
According to the cl-custom-hash-table github README, all of LispWorks, Allegro, SBCL, and CCL support custom hash functions natively. ECL is probably the most likely implementation we'd like to support that doesn't have them.
There are also some mildly annoying warts to cl-custom-hash-table (based on a 2-minute skim of the README), like requiring all hash-table accesses to be wrapped in a WITH-CUSTOM-HASH-TABLE and not being able to use LOOP for hash table iteration on lisps that use the fallback implementation.
Can we write our own hash table implementation?
It's a moderately-sized yak to shave, but I suppose nothing is stopping us. My initial reaction is that it would be fun to write, but ultimately a maintenance nightmare. Though probably not any worse than using some random third-party hash-table compatibility layer.
