Consider the following situation:

When transpiled at level 3, the swap gates are optimized out

Let's add a gate at the end:

When transpiled at level 3, the swap gates are not being optimized out:

In the first example, the swap gates are actually optimized by OptimizeSwapBeforeMeasure (hint: try with just one swap, it'll still be removed) while in the second example, placing an HGate at the end, prevents the transpiler from applying this optimization.
Notice though that if you specify a basis gate set, the transpiler will collect and resynthesize the swap gates + hadamard and the output circuit will not have any 2q gate.  Nevertheless, it might be beneficial to add InverseCancellation pass in the preset passmanagers.
I agree that this issue might get fixed if InverseCancellation gets into the preset passmanagers (did not test it tho).
if you do transpile(circuit, basis_gates=['h', 'cx']) then the circuit gets simplified.
most of the passes are based on synthesis and synthesis over swap is not supported (since it's not entangling). But if you give any other basis it will work. (cx or cz or whatever)
