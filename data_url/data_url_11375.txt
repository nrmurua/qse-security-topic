Before raising this feature request, I made sure:
The class Hamiltonian in OpenQAOA defined in src/openqaoa-src/openqaoa/qaoa_components/ansatz_constructor/operators.py is responsible for constructing the Cost and Mixer Hamiltonians in QAOA. It fundamentally describes the Hamiltonian object via list of PauliOps defined on a set of qubits and a corresponding list of their coefficients. Implicitly, the definition of the Hamiltonian is then assumed as follows: $$H = \sum_i \alpha_{i} P_i + \sum_{ij} J_{ij} P_{ij},$$ where $\ P_i, P_{ij}$ are one-qubit and two-qubit PauliOps respectively.
Implement a method in this class that returns the matrix representation of the Hamiltonian object. This will be a $2^n x 2^n$ dimensional sum over all Pauli entries as shown above.
Hello @vishal-ph! I am new to OpenQAOA and woud like to implement this functionality. Could you please assign it to me and if possible show any relavant literature to show matrix rep?
@manulpatel, thanks for taking the initiative!
In OpenQAOA, the Hamiltonian object is a sum over the terms of the Pauli and Identity operators set tensored over n-qubits. The goal is to represent the sum of these terms in a matrix form. To get started, you may want to start looking at the matrix representation of the Pauli operators here https://en.wikipedia.org/wiki/Pauli_matrices and think about their tensor products.
@AlexisRalli, thanks for your contribution to OpenQAOA and helping close this issue!
@AlexisRalli congrats on the nice hack! Don't forget to comment here on this issue so that you can be assigned to the issue!
Thanks for integrating the code!
