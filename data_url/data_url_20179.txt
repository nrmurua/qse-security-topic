On SPHINCS+-Haraka-256f-robust, SPHINCS+-Haraka-256f-simple, SPHINCS+-Haraka-256s-robust, SPHINCS+-Haraka-256s-simple,  and SPHINCS+-Haraka-256f-robust, some address sanitizer errors occur of the flavor:
@thomwiggers @joostrijneveld any thoughts?
Hmm, at first glance it seems like haraka.c is loading from input pointers that are not necessarily aligned (not just in haraka_S_absorb, but in many of the functions handling input pointers). A quick fix to verify whether that's the cause would be to change the LOAD macro (e.g., as seen on this line) to use _mm_loadu_si128, i.e.:
Note that the STORE macro (one line below) does use the unaligned version of the _mm_store intrinsic.
Just blatantly switching to unaligned loads everywhere may come at a (small?) performance cost, but I'm not sure if there's a reasonable way to avoid that. Maybe @thomwiggers (or @kste ?) has further thoughts on that.
@claucece could you change the LOAD macro in the respective haraka.c files for variants relying on AESNI in your local copy, and see if you still run into the same errors?
Just blatantly switching to unaligned loads everywhere may come at a (small?) performance cost, but I'm not sure if there's a reasonable way to avoid that. Maybe @thomwiggers (or @kste ?) has further thoughts on that.
Intel's documentation does not report a performance difference for _mm_loadu_si128 versus _mm_load_si128.
@claucece could you change the LOAD macro in the respective haraka.c files for variants relying on AESNI in your local copy, and see if you still run into the same errors?
I'll do this over the weekend, and investigate a little further to see if I find the root of the problem.
So, @joostrijneveld changing the macro to the unaligned load fix it everywhere. Not sure what performance impact it gives, though. I can try to look at other alternatives; but, if not, I can send the PR with the changes. Another things that happens is that some tests fail (with or without the change).. should I report them as well?
Sounds good! I was under the impression there would be a performance hit, but it appears that isn't the case anymore for recent CPUs.
Different failing tests sound like a separate issue; I'm sure reporting those will also be appreciated üëç.
In any case, I'll fix this to the SPHINCS+ repository as well. Thanks!
Since we pull SPHINCS+ from PQClean, rather than merging the PR directly into liboqs, the preferred approach would be make the change in PQClean, and then liboqs will pull that from PQClean on our next sync.
Oh, right. I'll open it there then ;)
For reference: there's a PR containing this change at the SPHINCS+ repository
There's also a PR on PQClean now PQClean/PQClean#315
Thanks Thom. I'll pull it in once it lands.
Thank you, @thomwiggers , for that. I guess this can be closed now?
Let's leave this open until #817 lands to make sure it resolves it.
Resolved.
