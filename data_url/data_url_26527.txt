I'm contemplating to remove GCC from our Toolchain. It takes 10 minutes to build in the CI and adds 655MB to our Docker images.
When GCC was originally added to the Toolchain we were still suffering from numerous compiler bugs around modern Fortran. Furthermore, we were experimenting with Thread Sanitizer. Both is not the case anymore.
So, it seems nowadays we could just always use the GCC provided by the Linux distribution.
That could a premature action. The generic version on our cluster is still gcc 4.8.5 (RedHat 7.9). Due to my experience, the toolchain build of gcc (if requested) does not trouble too much. Most resources are consumed by the libint build.
I believe it is a good idea in particular since 4.8.x phases out by already lost support for RHEL/CentOS 7 bits. We should instead check if the toolchain picks up CXX, CC, and FC (or maybe related MPI flavors) correctly.
Though, we never completed the "latest GCC" effort by building GNU Binutils as well. I especially vote for it since we seem to build GCC in two phases ("bootstrap"), which is the default. The latter is expected to likely double the compile-time for GCC, or in turn we could bring it down to 5 minutes if we wanted to keep this option.
The generic version on our cluster is still gcc 4.8.5 (RedHat 7.9).
RedHat 7.9 will be end of life in June 2024, which suggests we should wait two more years.
On the other hand, GCC 7 came out 5 years ago and most clusters should have it by now.
So it's a trade-off between taking the hit on the CI time and Docker images or degrading support for the long tail.
I especially vote for it since we seem to build GCC in two phases ("bootstrap")
No, we actually disable bootstraping.
Most resources are consumed by the libint build.
Yes, you are right. Libint takes 12.5 minutes while GCC takes only 8.4 minutes. Unfortunately, at the moment there is nothing we can do about libint.
No, we actually disable bootstraping.
Thanks! I've overlooked it.
So we have one vote in favor and one leaning towards opposition. Any other opinions?
For testing we build the Toolchain with --install-all, which includes GCC. While we could throw in --with-gcc=system, that would leave the feature untested, which IMHO would be worse than just keeping it for two more years.
You are right, we can add a dedicated test for it. That's a good compromise.
