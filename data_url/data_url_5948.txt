Many of the methods for the various simulation methods are identical or nearly identical. The purpose of this issue is to place these methods in a common location and avoid code duplication.
Comments and questions:
•	For methods such as apply_op, if a particular simulation method doesn’t support a particular operation, we can implement the functionality to return an error message (or to do nothing), instead of having different versions.
•	Why are the classes derived from State implemented using a template + a namespace and not simply by inheritance? Should we change this?
Option 1
Add method implementations to State class.
Advantage: no need to change the existing class structure.
Disadvantage: if we only one part of the simulation methods to inherit from the common implementation.
Option 2
Add intermediary class that will inherit from State and from which will inherit the methods with common implementations, such as Statevector, MPS.
Advantage: no need to change State class, some simulation methods could still inherit directly from State (if they don’t use the common implementations)
Disadvantage: add complication to the State class and derivatives
This is low priority. I believe our priorities have shifted to other areas that need more attention.
