I am running to following error while running barren_plateaus notebook. seeing something similar for mnist.
n_qubits = [2 * i for i in range(2, 7)
]  # Ranges studied in paper are between 2 and 24.
depth = 50  # Ranges studied in paper are between 50 and 500.
n_circuits = 4
theta_var = []
for n in n_qubits:
# Generate the random circuits and observable for the given n.
qubits = cirq.GridQubit.rect(1, n)
symbol = sympy.Symbol('theta')
circuits = [
generate_random_qnn(qubits, symbol, depth) for _ in range(n_circuits)
]
op = cirq.Z(qubits[0]) * cirq.Z(qubits[1])
theta_var.append(process_batch(circuits, symbol, op))
plt.semilogy(n_qubits, theta_var)
plt.title('Gradient Variance in QNNs')
plt.xlabel('n_qubits')
plt.ylabel('$\partial \theta$ variance')
plt.show()
Error Message
InvalidArgumentError                      Traceback (most recent call last)
 in 
13     ]
14     op = cirq.Z(qubits[0]) * cirq.Z(qubits[1])
---> 15     theta_var.append(process_batch(circuits, symbol, op))
16 # display(n_qubits)
17 plt.semilogy(n_qubits, theta_var)
 in process_batch(circuits, symbol, op)
18                               operators=op,
19                               symbol_names=[symbol],
---> 20                               symbol_values=values_tensor)
21
22     # Return variance of gradients across all circuits.
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py in call(self, inputs, *args, **kwargs)
889           with base_layer_utils.autocast_context_manager(
890               self._compute_dtype):
--> 891             outputs = self.call(cast_inputs, *args, **kwargs)
892           self._handle_activity_regularization(inputs, outputs)
893           self._set_mask_metadata(inputs, outputs, input_masks)
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/tensorflow_quantum/python/layers/circuit_executors/expectation.py in call(self, inputs, symbol_names, symbol_values, operators, initializer)
289
290         return self._expectation_op(inputs, symbol_names, symbol_values,
--> 291                                     operators)
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/tensorflow_core/python/ops/custom_gradient.py in decorated(*args, **kwargs)
164     """Decorated function with custom gradient."""
165     if context.executing_eagerly():
--> 166       return _eager_mode_decorator(f, *args, **kwargs)
167     else:
168       return _graph_mode_decorator(f, *args, **kwargs)
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/tensorflow_core/python/ops/custom_gradient.py in _eager_mode_decorator(f, *args, **kwargs)
313   """Implement custom gradient decorator for eager mode."""
314   with backprop.GradientTape() as tape:
--> 315     result, grad_fn = f(*args, **kwargs)
316   all_inputs = list(args) + list(kwargs.values())
317   # The variables that grad_fn needs to return gradients for are the set of
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/tensorflow_quantum/python/differentiators/differentiator.py in op_wrapper_analytic(programs, symbol_names, symbol_values, pauli_sums)
126                                 pauli_sums):
127             forward_pass_vals = analytic_op(programs, symbol_names,
--> 128                                             symbol_values, pauli_sums)
129
130             def gradient(grad):
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/tensorflow_quantum/core/ops/tfq_simulate_ops.py in tfq_simulate_expectation(programs, symbol_names, symbol_values, pauli_sums)
43     """
44     return SIM_OP_MODULE.tfq_simulate_expectation(
---> 45         programs, symbol_names, tf.cast(symbol_values, tf.float32), pauli_sums)
46
47
 in tfq_simulate_expectation(programs, symbol_names, symbol_values, pauli_sums, name)
/opt/miniconda3/envs/google-env/lib/python3.7/site-packages/six.py in raise_from(value, from_value)
InvalidArgumentError: Expected 4 inputs, got -2077607056 inputs. [Op:TfqSimulateExpectation]
Thanks for raising the issue. This looks like an incompatibility between TensorFlow's C++ ABI and our C++ ABI. I see in your error message that the path you are on is /opt/miniconda3/envs/google-env/...., Anaconda uses different source builds of TensorFlow that give a different C++ ABI than the official pip version of TensorFlow. We build against the pip version of TensorFlow and do not provide any guarantees on compatibility with anaconda builds. Would you be able to try the pip version of TF and the pip version of TFQ and see if that fixes things ?
Thanks @MichaelBroughton. You are right. I was using older version of Tensorflow. Uninstall and reinstall worked.
