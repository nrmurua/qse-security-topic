when I used Zygote.hessian to compute the hessian matrix of a circuit, i.e Zygote.hessian(f, params), where params are parameters of a variational circuit and f(params) is a real number, I got a MethodError whose message is below.

It seems that when ForwardDiff use Dual to compute the jacobian matrix, the Dual type is not supported by RotationGate in this circuit. So how can I compute hessian of my real-value function f?
(just for example: f(params) = operator_fidelity(target_unitary, dispatch!(circuit, params)) )
Thanks for the issue.
Yao is not compatible with Zygote. You may want to combine Yao's built-in AD engine and Dual numbers to obtain hessians.
Ah, the operator fidelity does not work. But it will be fixed in this PR: QuantumBFS/YaoBlocks.jl#150
Please try
Thanks for the issue.
Yao is not compatible with Zygote. You may want to combine Yao's built-in AD engine and Dual numbers to obtain hessians.
thanks for the timely reply, I tried your sample code and it runs well.
However, I encountered some problems and still cannot figure out.
again, thanks for your timely reply and hope for next helpful advice.
Ah, I should mention the higher level API of ForwardDiff, here is an example of computing the hessian
The jacobian is  a function to compute the jacobian matrix using ForwardDiff.
The functions with prime (') compute parameters gradients. Where parameters in a circuit can be obtained with parameters(c).
About you questions
expect returns the expectation value, expect' (with prime) returns a pair of gradients (d[expectation value]/d[register] => d[expectation value]/d[circuit parameters]). So they are very different.
Nice catch. It should be a bug of ForwardDiff, in the above example, we overwrite the pow function in base in order to make it work. I filed an issue here: Complex valued pow gives stackoverflow errorÂ JuliaDiff/ForwardDiff.jl#486
This is in fact a question about Dual numbers, it computes d[multiple output]/d[single input], rather than returning gradients. To obtain the hessian, you need to enumerate over inputs, or simply using the above jacobian function (recommended). FYI: check this arxiv paper: https://arxiv.org/abs/1607.07892
Ah, I should mention the higher level API of ForwardDiff, here is an example of computing the hessian
The jacobian is a function to compute the jacobian matrix using ForwardDiff.
The functions with prime (') compute parameters gradients. Where parameters in a circuit can be obtained with parameters(c).
About you questions
thanks for your careful explanation. I am afraid of that I might not figure everything out yet.
firstly, I understand that 1) function with prime means its differentiation and 2) Dual number has two fields, i.e. value and partials (as mentioned in arxiv paper you showed ). So as for expect and expect' (with prime) I mentioned before, from my comprehension, the first field of the output of expect with Dual input is the expectation of this circuit which should be the same as the output of expect with normal complex input, and the second field is the differentiation which should be the same as the output of expect'(with prime) with normal complex input. but actually, as showed in my last reply, I found the value field of the output of expect with dual input is the double of expect with normal complex input and similar for the partial field.
thanks for that issue and I will follow that.
I run your sample code, but it gives me some error message which looks like I use Zygote.hessian to compute the hessian of a circuit.
thanks again for your kind reply!
It is true that the gradient obtained in Yao and ForwardDiff are different by a factor of 2. This is because they are following different convensions for complex valued gradients. Yao only differentiate either ket or bra. The overall factor is not important in gradient based training.
You need to show this part :D
(message omitted)
BTW: you need to use the master branch of YaoBlocks, otherwise you will see the above error.
(message omitted)
BTW: you need to use the master branch of YaoBlocks, otherwise you will see the above error.
Ah, sorry for forgetting to update. Now sample code works well for me.
Thanks again. I believe this actually solves my problem. Means a lot!
(message omitted)
BTW: you need to use the master branch of YaoBlocks, otherwise you will see the above error.
Sorry to bother again. Actually I can accomplish my project via discussion above. However, I found a subtle problem based on your sample code and I think this might be some features of Yao package. In order to figure out all details I decide to bother you again.
I noticed that, in your sample code, circuit is defined in function compute_gradient and it works well. For a more general usage, I modified this code and define circuit out of this function. Then I got a MethodError just like I use Zygote.hessian to compute hessian before. Is there anything I did not understand correctly?
ForwardDiff can only handle generic code, because it tries to replace numbers with dual types for computing gradients. f2 is not generic.
