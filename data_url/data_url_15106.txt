Right now in the basis translator we spend a large portion of time (roughly 1/3rd of the typical runtime) converting back and forth between QuantumCircuit and DAGCircuit. This is mostly of this is to support calling assign_parameters() which only exists on a circuit, but the transpiler only works with DAGCircuit. This ends up being fairly high overhead because we deepcopy instructions multiple times as we go back and forth
We should be able to avoid all this overhead by doing parameter assignment directly in the DAGCircuit  which would probably require porting the equivalent of ParameterTable and the matching assignment functions to DAGCircuit (or potentially bypassing the traditional parameter assignment mechanisms as we don't need the full flexibility for this).
Some thoughts, copied from #10275:
I'm not certain that giving DAGCircuit the ability to assign parameters is going to be the cleanest way forwards to improving this.  The way QuantumCircuit manages its ParameterTable is only realistically possible because QuantumCircuit is (nearly) an additive-only interface with a single call point that's allowed to add instructions to a circuit (QuantumCircuit._append, give or take).  DAGCircuit has many many methods to add potentially parametrised instructions, but further, it's got a lot of methods that can replace operations with arbitrary other blocks that would also need updating.  The root of the issue is that ParameterTable+QuantumCircuit has a strong requirement on data coherence in a way that it'll be very tricky and bug-prone to do in DAGCircuit.
