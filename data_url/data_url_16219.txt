Converting the attached diagonal gate to a circuit and then applying the control method does not produce expected result.
The code example is given in form of 3 separate version of the same problem. First two, i.e. VER-I ands VER-II, are giving the same correct results, while in case of VER-III, where controlled diagonal gate is used, output is incorrect.
For the VER-I and VER-II correct statevector is obtained,
while in case of the VER-III wrong results are being produced, i.e.
How are CIRC_1A and CIRC_1B initialized? Are they empty circuits? Could you maybe post a smaller minimal-working example, then it would be a little easier to understand where exactly things are going wrong ðŸ™‚
@Cryoris  Thanks for the help. I simplified the test code in which only identity as diagonal gate is applied. Even for this simple case controlled method of the diagonal gate produces wrong results.
@ljubabu If you look carefully, the two statevectors are equivalent up to a global phase pi / 4.  So there must be a global phase that is not tracked somewhere in the transpilation process. My guess is that if you execute your circuit with optimization_level=0 or basis_gates=['u', 'cx'] the vectors will be the same.
@Cryoris Sorry for late response. Thanks for the help. You are right regarding the global phase and for the introducing the optimization level in execution method remark. However, when I change the diagonal parameters to slightly complicated form
in order to check whether proposed method is working, again wrong results are obtained. For the VER I and II correct statevector is obtained,
while in case of the VER-III wrong results are being produced, i.e.
In both cases following statement for the execute is used:
CIRC_job1 = execute(CIRC, backend1,optimization_level=0).result().get_statevector(CIRC)
Thank you.
@ljubabu You are right. Diagonal gate constructs a circuit that is equivalent up to a global phase (and does not track it) but this becomes a relative phase when you add control.
