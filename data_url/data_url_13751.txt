I'm working on different frontend/backend combination examples and ran into the following important consideration. Consider the simple example:
This raises an error of course as folding methods are defined for cirq.Circuits. However, it would be very convenient to be able to run this code. If we could run this code, all of the conversions could be handled in the folding methods, and very little changes, if any, would be needed elsewhere to handle conversions.
However, I don't see a way to do this without requiring Qiskit/pyQuil/etc. in the main mitiq library. This is simply because we need to check what type the circuit is in order to convert it properly.
This fixes the issue, but is rather inelegant.
Check what type the circuit is without requiring all dependencies, then call the appropriate conversion code. This seems like magic to me, but if it could be done that would be amazing. (Can it be done with typing._ForwardRef? I don't think so, but I'm looking into it now.)
One way to do this which avoids requiring Qiskit/pyQuil/etc. in the main mitiq library is to define folding functions in mitiq/qiskit, mitiq/pyquil, mitiq/etc. These folding functions would do the conversions then call the internal folding functions using Cirq circuits. So the example above would be modified to
This is a bit clunky, and I still think mitiq would have to depend on Qiskit/pyQuil/etc. in order to run functions in zne.py properly.
I'm still trying to think of the best way to handle this. Any feedback is welcome, specifically on Option 2 as this would be very nice if its possible. Additional ideas welcome.
This is a great point. It also comes up in the defaults which currently does do type checking. I also agree that Option 2 would be best.
One approach could be to branch off of the string name of the class e.g.
Likely it would be best to wrap this in a is_qiskit(qc) -> bool function that we can use modularly and change if there need to be a different method. For example if some other library decides to call their base program object "QuantumCircuit".
Do you think this will work @rmlarose ?
A related issue, though not necessarily an urgent one, is how to do type signatures when we don't want to explicitly import the libraries. Also in the docs the Union stuff looks pretty ugly.
I'll open a discussion issue on this at #84
Not sure if it is useful but with:
qc.__module__
you can get the parent module if necessary: `'qiskit.circuit.quantumcircuit' .
Excellent suggestion @andreamari That's definitely the way to go.
Thanks a bunch @willzeng and @andreamari for the suggestions. I will try to get Option 2 working with these ideas.
