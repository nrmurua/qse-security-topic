I just merged QCoDeS master into our fork of QCoDeS and found that it breaks our live plotting.
I'll try to go to 0.1.7 now so that I have recent changes that I require.
Digging a bit deeper it seems that this is related to a change introduced by 35400a6
I have attached the relevant part of my traceback pointing to the problem.
I'll also add the relevant lines of codes with a bit more context below.
This is the method that hits the offending line when adding a plot.
For reference self.main_QtPlot is below. from qcodes.plots.pyqtgraph import QtPlot
It's hard for us to have visibility on how you are using qcodes in your fork but in this case I guess we should just replace that line with a get and skip the rescaling if no unit is set
Hi @jenshnielsen it may be a bit hard to see but the error is actually raised on the line where I am most definitely setting units (block slightly lower in the snippet I pasted). So I'm not sure what causes this. AFAIK I'm using the default API of the Qt_Plot object so I would expect this to work but it broke somehow. If your proposed solution solves the problem I'd be quite happy with it, I think not rescaling if it is not SI would make a lot of sense (and the other changes that were introduced).
Also I just merged 0.1.7 and the speed increase (#712 ) when setting up a plot is very noticable, I would not have found that! üëç .
I think #770 will do the trick can you test that
Is your version online somewhere so I can test it. The issue behind #712 is really odd I have not had the time to dive into pyqt/qt to understand what happens
@jenshnielsen Let me try #770 . Our version is online at https://github.com/DiCarloLab-Delft/Qcodes.
I'll be going to a talk in 5 mins but let me try before that.
Also I think this behaviour is testable quite easy. I have Travis compatible tests set up for a lot of things involving the live plotting, if you want I can show you how we do it.
So far as I understand from the discussion, PR #805 fixed this, and it's merged, so I am closing this issue.
