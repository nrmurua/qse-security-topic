I've run a couple of circuits on the 'ibmqx5' backend but realised that the optimisation of the circuit is probably making it give out the wrong amplitudes. I've attempted to fix this by adding a few barriers and ran it again but (3 times in a row) an error message came up and I narrowed it down to being solely due to the get_counts() method. Here's the error message:
Traceback (most recent call last):
File "mbqc-simulation.py", line 232, in
plot_histogram(result.get_counts('MBQC'))
File "/Users/TheProtonCat/anaconda/lib/python3.5/site-packages/qiskit/_quantumprogram.py", line 1300, in get_counts
return self.get_data(name)['counts']
File "/Users/TheProtonCat/anaconda/lib/python3.5/site-packages/qiskit/_quantumprogram.py", line 1282, in get_data
return self.__result['result'][index]["data"]
TypeError: string indices must be integers
Since the method worked fine before I wonder if it might be the barriers that are inducing the error. I need to run this simulation for a project so any quick fix would be very much appreciated! (note that the method fails when I use it in different ways, like extracting my own values, not just when trying to plot the histogram).
Note: the get_data() method seems to fail for the same reason:
Traceback (most recent call last):
File "mbqc-simulation.py", line 194, in
counts = result.get_data('MBQC')
File "/Users/TheProtonCat/anaconda/lib/python3.5/site-packages/qiskit/_quantumprogram.py", line 1282, in get_data
return self.__result['result'][index]["data"]
TypeError: string indices must be integers
Yeah, we have improved a lot this part of the code in the current development branch... anyway, my bet is that you are getting an error from the backend, and this is why get_counts() is not working.
Could you check first that there's no error in the first place? ... something like:
So the error I got was "Time Out" and I hadn't realised that the executing the circuit without specifying my own timeout value would make the default 60. Seems to be alright now, thanks!
So the error I got was "Time Out" and I hadn't realised that the executing the circuit without specifying my own timeout value would make the default 60. Seems to be alright now, thanks!
