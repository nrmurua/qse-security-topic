When a measurement is controlled by a classical bit, e.g. circuit.measure(q, c2).c_if(c1, 1), the measurement seems to be made regardless of the value of the control bit. This problem occurs with Aer, but BasicAer has the expected behaviour.
This example shows the difference between Aer and BasicAer:
Output:
In the above example, c is initialized to 0 and q is initialized to |1âŸ©. Then q is measured into o if c == 1. Theoretically, the measurement should not be performed because c == 0, but it is.
Classically controlled measurements are allowed by the OpenQASM standard (if(c==1) measure q[0] -> o[0];), but seem not to be supported by IBMQ yet (ibmqx2 did give results in agreement with Aer: {'1 0': 947, '0 0': 77}). If the goal is to be completely compatible with present-day IBMQ, this should not be fixed. But since controlled measurements are currently useless anyway, I think supporting them would be a good idea.
Sampling works unexpectedly in qasm simulator.
Current qasm simulator applies sampling optimization if all the measure operations are in the tail of a circuit. However, it should apply this optimization only if all the measure operations are non-conditional and in the tail.
https://github.com/Qiskit/qiskit-aer/blob/0.2.1/src/simulators/qasm/qasm_controller.hpp#L576-L581
I will fix it soon.
@eliasrg thanks for pointing this out. We don't technically support conditional measurement, though the issue is we don't raise an error if one is there either, it's just silently treated as a non-conditional instruction.
The qobj document only specifies that gates can be conditional, not general instructions. If the spec changes though we could add support for conditional non-gate instructions like measure and reset.
@chriseclectic Thank you, I wasn't aware of that document. So there seems to be an inconsistency between the Qobj specification and the OpenQASM specification (v2.0), which explicitly allows conditional measurements (at the bottom of page 7 as well as in the grammar in appendix A).
As I have a circuit with conditional measurements that I'd like to test with a noise model, I might try to use @hhorii's pull request even if it doesn't get merged.
@eliasrg No problem. If you want to try out conditional measurements you can check out PR #271 and edit the operations.hpp to allow for conditional measure instructions (change Allowed::No to Allowed::Yes in json_to_op_measure), then they should be loaded correctly and (hopefully) work as expected.
@hhorii  PR fixes the sampling check to not be applied when there are conditional instructions, but it doesn't change how measure instructions are loaded to get the conditional fields.
Can you help me, please? I want to add the package  Bell-diagonal states to my path, how can do it?
