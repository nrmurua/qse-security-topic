I am trying to write a kernel function that repeatedly calls another kernel function received as an argument - my code, below, fails to compile.
If I comment out the kernel decorator for funcSample() the code runs as expected, but is of course very slow.
Is this a compiler bug, or am I doing something silly?
It is a bug. The function should be converted to a method.
@cjbe Do you really need function pointers?
(Unrelated: if you intend to merge any code into ARTIQ, please style it according to PEP8, e.g. func_sample instead of funcSample).
I think function pointers are necessary for some common experiment patterns, where one wants to pass an 'experiment' kernel function into some library machinery.
An example is a function that implements a one dimensional scan, where each scan point consists of N repeats of an experiment. It would be nice to package up all the boiler-plate for this scan into a library function which takes a vector of points and a kernel function pointer.
Would mixin classes/inheritance not work just fine?
@jordens That doesn't currently work either.
Sure. But is has a different and maybe easier implementation and it can make experiment code more readable.
that one is harder to implement, which is why we pushed it to 2.0
As a temporary workaround, the run function can be marked as @kernel (or the relevant parts extracted into one).
