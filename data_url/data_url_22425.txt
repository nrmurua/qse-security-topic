I'd like to generate a random number in the kernel.  I'm trying the following code:
It spits out an error when random is called in the kernel (but not in build):
Of course, I could pre-generate all the random numbers I need in the build method, but that would be inconvenient.  Is there a way to do it in the kernel?
More generally, what all is available in the kernel?  Is this spelled out somewhere in the documentation?
The error probably has something to do with #366 and #260.
Note that this would not generate random numbers on the device, but RPC the randint function for execution on the host. If you want to actually generate on the device, e.g. for speed reasons, you have to implement your own PRNG that uses kernel or portable functions.
@dleibrandt actually, does the RPC work if you use randint like this:
Yes, modules are not currently supported since they do not fit well into the type system.
Can they be easily supported without integrating them into the type system (i.e. any module reference must be in the global namespace; putting modules in local variables, function arguments, etc. is not supported)
No, that's actually harder than doing it properly.
(Where by "properly" I mean faking an unique type for every instance of the module, instead of using the type(module) like it would normally happen.)
In this particular case, there will also be the problem of resolving the RPC at compile time.
I don't understand. It works if you import randint directly. It will also work if you do something like:
which is what modules would effectively translate into under my propsal.
Ah wait, module functions don't receive self. That's more problematic then.
Okay, if the problem is understood and RPC works with the alternative import, we can defer this to 2.0 and say modules shall not be referenced in kernels.
@sbourdeauducq - Your alternative import statement also generates an error, but a different one:
Oh yeah, I remember now why I didn't implement embedding modules in the first place--it is not very useful as most of the time you have to add annotations.
@dleibrandt
then use annotated_randint in kernels.
@whitequark can you add documentation for all these things?
Moved to #410 and #408.
