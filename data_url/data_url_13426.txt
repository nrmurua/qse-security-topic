[ ✓ ] I am running the latest version of mitiq
[ ✓ ] I checked to make sure that this bug has not already been reported
I was using the execute_with_zne function with qiskit's circuit. However, the execute_with_zne() fails to execute when a QuantumCircuit with some unused registers is provided. The same problem arises for the same reason when I try to use it with a circuit transpiled for a certain backend. For example, the following code results in an Error. I guess, it is expecting a circuit where all the quantum registers are used.
70 unmitigated = qiskit_executor(circ)
---> 71 mitigated = execute_with_zne(circ, qiskit_executor)
72
73 print(mitigated)
~/anaconda3/lib/python3.8/site-packages/mitiq/zne/zne.py in execute_with_zne(qp, executor, factory, scale_noise, num_to_average)
60         raise ValueError("Argument num_to_average must be a positive int.")
61
---> 62     return factory.run(qp, executor, scale_noise, int(num_to_average)).reduce()
63
64
~/anaconda3/lib/python3.8/site-packages/mitiq/zne/inference.py in run(self, qp, executor, scale_noise, num_to_average)
520
521         # Get all noise-scaled circuits to run
--> 522         to_run = self._generate_circuits(qp, scale_noise, num_to_average)
523
524         if len(qp) < 5:
~/anaconda3/lib/python3.8/site-packages/mitiq/zne/inference.py in _generate_circuits(self, circuit, scale_noise, num_to_average)
589         for scale_factor in self.get_scale_factors():
590             for _ in range(num_to_average):
--> 591                 to_run.append(scale_noise(circuit, scale_factor))
592         return to_run
593
~/anaconda3/lib/python3.8/site-packages/mitiq/interface/conversions.py in new_scaling_function(circuit, *args, **kwargs)
231
232             scaled_circuit.remove_final_measurements()
--> 233             _transform_registers(
234                 scaled_circuit, new_qregs=circuit.qregs,
235             )
~/anaconda3/lib/python3.8/site-packages/mitiq/interface/mitiq_qiskit/conversions.py in _transform_registers(circuit, new_qregs)
180
181     if len(qreg_sizes) and sum(qreg_sizes) != nqubits_in_circuit:
--> 182         raise ValueError(
183             f"The circuit has {nqubits_in_circuit} qubits, but the provided "
184             f"quantum registers have {sum(qreg_sizes)} qubits."
ValueError: The circuit has 2 qubits, but the provided quantum registers have 5 qubits.
Mitiq: A Python toolkit for implementing error mitigation on quantum computers
Authored by: Mitiq team, 2020 & later (https://github.com/unitaryfund/mitiq)
Mitiq Version:	0.9.1
Cirq Version:	0.10.0
NumPy Version:	1.20.1
SciPy Version:	1.4.1
PyQuil Version:	Not installed
Qiskit Version:	0.26.2
Braket Version:	Not installed
Python Version:	3.8.8
Platform Info:	Darwin (x86_64)
Hello @Eyuel-E, thank you for your interest in Mitiq!
If this is a bug report, please provide screenshots and/or minimum viable code to reproduce your issue, so we can do our best to help get it fixed. If you have any questions in the meantime, you can also ask us on the Unitary Fund Discord.
Thanks @Eyuel-E for reporting, this is indeed a bug on our end. I opened #803 to fix it and we should have a patch release soon (probably next week) allowing you to run this example.
Note unrelated to bug: When you call qiskit.transpile, you probably want to set optimization_level=0. If you print out the circuit in your example after calling qiskit.transpile, it only has the measurements.
Thank you for the reply @rmlarose .
Yes, that's right. Actually, I just provide the basic example, as the operation is identity it makes sense that it only has measurement when optimized. I was using different circuit initially.  Anyway thanks I didn't notice that at first.
