Problem: PointOptimizer is one of the main workhorses for writing an optimizer, but it can be hard to use as the semantics of the mutation pattern is not easy to understand.  The goal of this feature would be to better define the basic compiling and optimizing patterns to lead to the easier construction of compilation steps. This could potentially be aided by Subcircuit features, and the methods that are accessible are tied to the complexity of the mutation methods as described in Circuit construction.
Rough requirements:
Another aspect of this is whether the compiler/transformer is topology aware or not, i.e whether it respects adjacency constraints for devices or not. For example cirq.ThreeQubitDiagonalGate._decompose_ checks for adjacency on the gridqubits, while for example cirq.three_qubit_matrix_to_operations is not. It would be great to have clarity around this dimension as well.
RFC for Circuit Transformer API: https://tinyurl.com/cirq-circuit-transformers-api
Closing in favour of more specific transformer related issues
New primitives have been added and current optimizers have been migrated to use the new primitives. Migration of optimizers in vendor packages is being tracked in another open issue, so I'll close this now.
