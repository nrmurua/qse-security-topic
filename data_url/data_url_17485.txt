The qiskit.compiler.transpile() function is to be decoupled from a monolithic backend, in favor of transpiling for some TranspileConfig options (basis_gates, coupling_map, initial_layout, optimization_level, etc.)
Still, we need a convenience function that makes it easy to get these TranspileConfig options from a backend.
this would populate a transpile_config = TranspileConfig(basis_gates, coupling_map), and the user still has the option to add more fields like transpile_config.seed_mapper = 10.
@jaygambetta in your PR you wrote this function as:
but what does it mean to return a run_config? if there's not an overwhelming usecase for this I'd rather keep the function returning a single output for ease of use.
In my opinion this idea of throwing everything into a config object just makes our software harder to use.  The user has to learn yet another object.  There is some benefit for having less used options in a config, but things like coupling_map and basis_gates should not be in the config class.  The compile should probably look more like:
where everything else is in the config.  Then the backend instance should allow for doing backend.coupling_map and backend.basis_gates since they are fundamentally the key things you want.  Then, in the simplest case you can do:
@ajavadia, Is a RunConfig not something like the number of shots, rep_times, etc.? It can be used to guarantee that two different compiles will create Qobjs that run with the exact same runtime settings?
@nonhermitian, I think promoting specific configuration variables too first level could set a dangerous precedent for future variables.
PR #2166 closes this issue "by making it moot".
