It is often of interest to compute several properties of a quantum circuit after compiling to a given device.  For example, # of gates, # of cx-gates, depth, and # of swap gates added, are all properties of interest.  However, only some of these values (# gates, and cx gates) can actually be extracted from the qasm in a qobj, others require going qobj -> circuit -> DAG.  Some, like # of swaps added, cannot be gathered from the given information. These values should be reported in the qobj experiment headers.
Related to #1083: make the compiled circuit still look like a circuit, so it's easy to analyze.
@1ucian0 is proposing that we combine the QuantumCircuit class and the DAGCircuit class, because already whatever we want to do on QuantumCircuit we almost always use DAGCircuit. So we make the QuantumCircuit richer, by making the underlying datastructure a graph. and at the time of construction, the ops get appended to a graph (rather than a useless list).
I already have an issue for that. #1070.
Should these properties live in the transpiler property set? or in the circuit itself and be recalculated in every pass?
The properties are properties of the DAG, and properties obtained from running some of the transpiler passes.  However, we are going to go from circuits to circuits in the compile process, and therefore things like swaps added need to be attached to the circuit itself.
After #1173 is done, transpile() will consume a circuit and return a circuit. So in order for that to be useful, we need to take up this issue (i.e. return common metrics of a circuit object).
I suggest we just do a trivial thing now.
In _quantumcircuit.py:
This would mean that you can easily visualize and get circuit resource usage before/after transpilation.
This back-and-forth between QuantumCircuit and DAGCircuit will be resolved later with #1163.
