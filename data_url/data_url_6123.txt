On certain runs of the pulse_simulator, a Segmentation fault: 11 and immediately halts the program. No result is returned. This does not occur every time, however I have been able to reproduce it every few runs using the below code (used in #379 to test frame changes).
Run the following code:
Counts should be {'0': shots}. This occurs sometimes, however other times a segmentation fault results as documented above.
Segmentation faults tend to arise from C code so I think the best idea would be a thorough read through of the Cython code in the simulator to see if any memory is not being allocated properly.
I take this
The example circuit is not running, there are dependencies that are not  met, like:
Found the crash, it's here: 
Sounds good thanks @atilag!
FYI, I am encountering a similar issue. I'm running the latest commit with the openpulse-sim branch (system info: macOS Mojave 10.14.6, running Python 3.7.3, so basically same setup as @zachschoenfeld33).
The segfault behavior is sporadic. I can run the pulse_sim.ipynb. BUT, if I change schedule += cr_rabi_pulse(system.controls[0]) to schedule += cr_rabi_pulse(system.controls[0]) (so that it's trying to drive cross resonance on a different channel, then it fails.

Full stacktrace below if helpful. Happy to re-run things or try things to help debug too.
This is saying that the underlying ODE solver needed to take more steps than max_steps.  However, max_steps is set 100x higher than the default so that the user need not have to change this is general: 
So, this is saying that the input is not quite correct, or perhaps that there a non-smooth or discontinuous function change that is causing this.
As a general rule, all these errors can be found here:
http://www.netlib.org/ode/zvode.f
Likely fixed by #451
