When using the InstructionScheduleMap returned from a Target object's (specifically from a FakeBackend object, but I think this occurs generally) .instruction_schedule_map() method the .has_custom_gate() method is always returning True. This wasn't the case pre-0.23.0 (and I expect means this is related to #8885 ). This leads to a transpiler performance regression because the transpiler thinks we need to evaluate pulse gates despite not having a custom calibration set.
The above code snippet should not raise an assertion error because no custom gates are defined in the instruction schedule map.
I think this is being caused by a type mismatch and differing expectations between the Target/BackendV2 path and the InstructionScheduleMap class. I originally thought this was just a case of a differing type being used in the target path post-#8885 to represent the default calibration from the defaults file now that we're lazy loading it. But looking at it a bit more closely the InstructionScheduleMap's entries from the fake backend are all ScheduleDef which would be the same as a manually created Schedule object. I"m not sure the best way to resolve this though.
