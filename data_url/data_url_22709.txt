Here, testrepo is cloned from a local repository I setup on my machine. I can launch artiq_master and see the experiments in artiq_gui (labeled by git commit ID). OK. Baseline working fine.
Check if artiq_gui experiment is automatically updated if I edit, commit and push arguments_demo.py
Expecting gui to use version a5f72d. OK it is so. However, the experiment Log is still reporting that default for NoScan is 666 instead of 313313. It looks like the GUI didn't get regenerated. I was able to add an additional print() in run() method of arguments_demo.py and see that it gets printed in the Log. So it looks like this is just a GUI issue.
I think this is the desired default behavior. We often tweak experiment recipes and want to re-run them using a particular set of run-time parameters that might be non-default attr_arguments(). However, there needs to be a way of forcing the GUI to reload new defaults or to regenerate itself in case, say, a new attr_argument() gets added. This might be a button in the GUI.
Anyway, let's try adding a new attr_arguments().
Start master
Looks like artiq_master is now not processing arguments_demo.py. Roll back to an earlier commit prior to when arguments_demo.py (and pdb.pyon) were edited.
Restart master.
Summary:
You are using it incorrectly. You need to:
When doing that, GUI elements are properly added and removed on push.
There is no function to remove the default values stored in the GUI state and use those from the experiment instead, is that really needed?
You are using it incorrectly. You need to:
OK. This is helpful to know. I was indeed using it wrong. It would be
helpful to flesh out the instructions a bit more to emphasize these
points. I'll repeat my git test in the next couple days.
There is no function to remove the default values stored in the GUI state and use those from the experiment instead, is that really needed?
It's rather helpful to be able to force reloading (or not) of default
values. Here's an example. When conducting an experiment to measure
the center of a resonance the sweep range depends on the pi-time t_pi
and last known f0. The default value for the sweep range is then a
function of Ion Property t_pi and last known Ion Property f0. The
sweep range might be manually set to something other than default as a
diagnostic. The sweep range may also reflect outdated values for f0
and t_pi.
It's helpful if the user can choose whether or not to reload (and
recompute) the default sweep range. A checkbox
would work. But there needs to be a way of telling the GUI about this choice.
Please link to the following page in the ARTIQ documentation. I didn't
appreciate the difference between git init and git init --bare.
http://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/
On Thu, Aug 13, 2015 at 4:51 PM, Joe Britton joe.britton@gmail.com wrote:
You are using it incorrectly. You need to:
OK. This is helpful to know. I was indeed using it wrong. It would be
helpful to flesh out the instructions a bit more to emphasize these
points. I'll repeat my git test in the next couple days.
There is no function to remove the default values stored in the GUI state and use those from the experiment instead, is that really needed?
It's rather helpful to be able to force reloading (or not) of default
values. Here's an example. When conducting an experiment to measure
the center of a resonance the sweep range depends on the pi-time t_pi
and last known f0. The default value for the sweep range is then a
function of Ion Property t_pi and last known Ion Property f0. The
sweep range might be manually set to something other than default as a
diagnostic. The sweep range may also reflect outdated values for f0
and t_pi.
It's helpful if the user can choose whether or not to reload (and
recompute) the default sweep range. A checkbox
would work. But there needs to be a way of telling the GUI about this choice.
"The ARTIQ master fetches the last (atomically) completed commit at the
time of experiment submission and checks it out in a new temporary
folder. This solves the problem of concurrent access." Is also helpful for users to know.
GUI updates are still broken. For example, if I add two Scannables to flopping_f_simulation.py
To update the GUI I have to stop artiq_master, delete artiq_gui.pyon, restart artiq_master and restart artiq_gui.
My error. GUI updates are no longer broken.
I'm running into a similar issue now where I can't get the GUI to update despite the experiment updating.
I created new master repository, ~/artiq_master/repository, run git init -bare in the repository folder, and add the artiq_client scan-repository --async hook. Then I create new work repo, ~/artiq_work, then git init in ~/artiq_work and create the appropriate remote into the master repo. I add gui.py to the repo, commit it, push to master.
The contents of gui.py:
This gives me a GUI in the dashboard with a defaulting to True, b defaulting to False, prints a and then whether b is True or False
Now I modify the experiment to include a new variable c under a menu and also print the word "updated":
I commit this and push, the dashboard updates. Reopen the experiment, there is no dropdown labeled Fast and no c variable to set, but running the experiment prints "updated" along with everything else.
I now copy the experiment to new file named gui2.py but otherwise everything is unchanged. Add, commit and push, open the new experiment in Dashboard, c is present and located under the expected dropdown menu, and submitting the experiment prints everything as expected while the gui.py experiment GUI remains unchanged.
I made sure that I'm pointing artiq-master to a bare repository, I'm pushing from a separate non-bare repository, and I verified that the post-receive hook is working.
Click 'Recompute all arguments' in the panel that appears after you open the experiment. NB, this is a different issue.
