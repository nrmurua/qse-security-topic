Is your feature request related to a use case or problem? Please describe.
#6101 was created to update cirq.unitary and cirq.apply_unitaries protocols to support the case when gates allocate their own ancillas. This was achieved in #6112, however the fix assumes the decomposition is correct. a consistency check is need to check that. This is the fourth task on #6101 (comment).
The consistency check should check that the result is
1. Indeed a unitary
2. CleanQubits are restored to the $\ket{0}$ state.
3. Borrowable Qubits are restored to their original state.
Describe the solution you'd like
for the correctness checks we need a cirq.testing.assert_consistent_unitary that does the checks listed above.
What is the urgency from your perspective for this issue? Is it blocking important work?
for the first task
P1 - I need this no later than the next release (end of quarter)
for the second and third tasks
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
@NoureldinYosri Thanks for breaking this down. I got my dev environment working and can start testing and adding code.
I know you said you'd work on task 1 in #6112, but I'd be happy to work on it if you've got other task to get to. It's seems like a good first issue and time sensitive for unblocking?
Also happy to keep making progress on task 2, which file would be effected?
@shef4 the first task is the more tracktable of them. feel free tow work on it. the method should live in cirq-core/cirq/testing under consistent_unitary.py. you should create consistent_unitary.py since it doesn't  exists and consistent_unitary_test.py for its tests.
the other tasks are not suitable as first issues. even the first is a bit too much so feel free to drop it if you feel that, but let me know if you do drop it.
Cirq-sync: accepted .. AI for myself I will refactor the description so that this issue would refer to only the first task and create new issues for the open ended problems
Hey @NoureldinYosri  I was wondering if I could get some feedback on my conssitent_unitary function.
These are the assumptions I'm trying to look into to complete the function:
I'm gonna look more into channel of operations and gates to see if I can find information on 2
@shef4 I started explaining how it should work but then found that it would be easier if I implement it. If you check #6196 you will find that the implementation mimics how #6112 updated cirq.unitary
@NoureldinYosri Okay, will do. Thanks for the guidance through the feature request, I learned a lot about the process though wish I could have been of more help haha. Will look for a "Good First Issue" to tryout
completed in #6196
