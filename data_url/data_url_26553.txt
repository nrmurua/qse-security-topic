For the RI and LRI method, there is the regular need to collocate and integrate a single Gaussian. Potentially, the implementation of this feature accelerates these kind of operations.
It is about the following files:
qs_integrate_potential_single.F (all routines)
mp2_eri_gpw.F (most routines)
qs_collocate_density.F (most routines)
Right now, there are implemented as an collocation/integration operation of a single Gaussian with one (exponent set to 1) or of a single Gaussian with itself (exponent is half of the actual one).
What kind of boundary conditions does RI/LRI require?
If they are periodic, then you could use the routines in the grid package.
If you don't need periodicity, then your application would be very similar to GEEP from QM/MM.
While the grid package is already GPU accelerated, there is a tentative plan to accelerate GEEP sometime later this year.
I can't tell for LRI. But RI has to work for periodic and non-periodic systems (periodic systems are the actual system, non-periodic systems for certain applications and testing). An improvement is desired because all of these routines take a decent amount of computation time for small- to medium-sized systems with MP2 and RPA (energies+forces). JÃ¼rg told me once that LRI could also benefit from these ideas. Non-periodic systems require the densities to be zero at the boundary, non-periodic systems apropriate periodicity conditions (in case of RI-MP2 and RI-RPA the maximum number of unit cells to include is given).
Non-periodic systems require the densities to be zero at the boundary, non-periodic systems apropriate periodicity conditions
Then you should use the grid package. I'd suggest that you first rewrite the code to call integrate_pgf_product() in a loop. Once you got that working, it will be very easy to switch to the batch API using grid_create_task_list() and grid_integrate_task_list(), which is GPU accelerated.
While the Fortran API is in grid_api.F the documentation is spread across the C header files, e.g.grid_ref_integrate.h, grid_ref_collocate.h, and grid_task_list.h.
I'm going to close this now because I think the question has been answered. Feel free to re-open if you want to continue the discussion.
