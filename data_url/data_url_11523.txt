I've been using Qiskit 0.19 for quite some time until I recently upgraded to 0.23. Then I realized my QAOA is not working correctly. I'm not sure whether the problem is related to Aqua or not, but I hope someone can fix this.
The QAOA class in Aqua takes in an initial_point parameter. According to the Qiskit docs, a random initial point should be generated when initial_point=None, which is None by default. However, after I upgraded to Qiskit 0.23, the QAOA.optimal_params always returns an array of 0, which is strange. The results is also incorrect.
When initial_point=None is passed into the QAOA class, the QAOA.optimal_params always return an array of 0. Apparently, the initial_point=[0., 0.] is passed into QAOA instead of a random array.
Results on Qiskit 0.19:
Results on Qiskit 0.23:
The QAOA.optimal_params should return a non-zero floating point array for most of the time, just as shown above in Qiskit 0.19.
My current workout is to downgrade back to 0.19. However, one can also manually pass a random angle into initial_point to make the QAOA work correctly again.
Sorry, just realized it was a duplicate issue. #1315 #1316
Your issue is certainly related but is a bit different. QAOA var form always indicated a preferred_init_points of 0's, which is still the case.
One thing which did change after 0.19 was released is that we changed the random number generation in Qiskit to use the newer numpy function for the random number generation. This no longer generates the same random numbers for the same seed, but I do not know if this is impacting your sample or not. Its something that needs investigating for sure so thanks for bringing this to our attention and providing your code sample.
Pretty sure I only seeded for the simulator and the transpiler. Does this affect the random initial points?
VQE (and QAOA) take an initial_point which defaults to None if not supplied. So if you supply one it uses it. Otherwise with the default it first checks the variational form to see if it has a preferred initial point and if not will compute a random one. Now the QAOA var form has a preferred initial point of all zeros - it always has had this. Hence QAOA should not be computing a random initial point. But of course throughout qiskit, the random number is now generated a different way, which will affect the transpiler and simulator and hence the same seed will now have a different behavior. I would have hoped the random sampling from the distribution would not have affected things where perhaps it gets stuck. It always worked with NELDER_MEAD I guess - did you try COBYLA. Anyway we will look into what is happening.
I've tried with a few configurations. Not seeding the quantum instance seems to solve the problem for COBYLA, but will cause NELDER_MEAD to exceed the max function evaluation (I think that's the reason I seeded the quantum instance at the first place). However, in 0.19, even if the quantum instance is seeded, it still gives different values every run, which is not the case in 0.23.
The results are shown below.
