I would like to create a basis set with the following 5 functions and unique sets of parameters alpha, beta, gamma, and position a.
Where GTO are Gaussian Type Orbitals and alpha/beta/gamma are the GTO parameters and "a" is the delocalization.
You can write the following code to realize your goals. I took some liberty to assume some information about the basis functions while constructing the basis set, as you didn't provide enough information to completely describe them. For example, I wasn't sure how you specifically define alpha, beta, and gamma in terms of the coefficients of GTOs, so I assumed they are exponent coefficients. You can modify the code to meet your specific configuration.
Hi @JamesB-1qbit! Thank you for opening the issue! If you don't have further questions, I'll close this issue soon.
Thank you for the help. However, it appears that Quiqbox does not appear to like mixing floats and ParamBox in general so I had to do something like.
When you use a Number instead of a ParamBox, either directly or indirectly (by encapsulating it into an array/tuple) as the input argument to construct any parameterized container, what the constructor function (e.g., genBasisFunc) does is constructing a ParamBox on the fly with it as the input value and itself as the mapping function.
Thus, in my example, all the 0. in the center coordinates of 2p orbitals became independent parameters with their input value being 0.
When you replace them with the same ParamBox, z, genBasisFunc assumes you want to maintain the reference to the original z when using it as multiple basis function parameters at the same time. This is how you reduce the overall number of basis set parameters, and it is one of the ways to correlate GTO parameters.
To make a simplified analogy of what happened under the hood, you can think of the parameters of a basis function as a Vector{Array{T, 0}} that holds all the "ParamBox" as if they are Array{T, 0} (T is a concrete subtype of Number). There are two methods of a parameter generator genPar for the input argument:
such that
The difference between using a Number and a "ParamBox" is then similar to:
Overall, this is a design choice to give the user the freedom to control the balance between flexibility and efficiency of tuning basis set parameters.
Thank you for the explanation of your theory. It makes sense. I suppose what I meant to say is that the code you provide threw argument type errors.
Adding in GaussFunc to the arguments fixed this one. i.e. changing line 26 to
Then the combination of ParamBox with a float was not a valid argument for genSpatialPoint threw an error on line 28.
Have you updated Quiqbox to version 0.5.6? Mixing the use of Number and ParamBox in arguments is a new syntax sugar added in 0.5.6.
I updated and it now works. Thanks!
