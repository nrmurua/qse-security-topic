Flipping the order of CXCancellation and 1QGateOptimization in the default transpiler flow allows for the possibility of single-qubit gates in between cx gates to add up to identity, which in turn allows the cx gates to collected by the cx gate cancellation.  The current ordering does not allow for this, and is thus not as efficient at reducing depth.

Ideally one would want to do 1Q optim then cx cancellation in a loop until the depth reaches a fixed point.
Actually I take this back, it is not so clear which one to choose.
Actually it is more efficient, provided you are going to call each once, as is currently the case.
The passmanager supports that. I can have a look.
I would also argue that cx cancellation should be before cx direction swap otherwise you cannot collection cx that have their directions swapped.  It also makes the cx cancellation pass more efficient as it is not swapping directions for cx gates that could be canceled.
So the new order should be 1Q optim, cx cancel, cx direction.
The worst case scenario in this modification (assuming everything is run once) is two leftover U3 gates, where as keeping things the same gives a worse case of 2 cx gates.  Since cx gates are 10x more costly, minimizing their count is the way to go.
we should do this in a loop until depth reaches fixed point.
PR #2086 fixes this.
