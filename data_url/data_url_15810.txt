When I am trying to run VQE calculations in parallel using multiprocessing package in python, there is no output if I use aer_simulator as the backend. The program, however, runs fine if I use statevector_simulator.
In Windows 10, there is no problem with multiprocessing.
The following code illustrates the problem.
The returned result is just empty list "[ ]"
Expected result should be list of expectation values like [(-1.8572750286519004+0j), (-1.8572750233347164+0j)]. If the backend in the code is changed to
backend = Aer.get_backend('statevector_simulator'),
one can see the correct output.
I tested the same code in Windows 10 and no issue there.
Qiskit in general will already try to take advantage of multiprocessing where it can, and I believe this can lead to issues when attempting to add another layer of multiprocesing on top (e.g. the issues described in #3426 ). A possible solution might be to disable Qiskit's internal parallelization (setting os.environ['QISKIT_IN_PARALLEL'] = 'TRUE' ) in your application.
Presumably there is some exception being thrown by Aer, which is why the callback function is not getting run in these situations.  To dig down and work out what the full problem is, we'd need to see the exception being thrown.  You can check if the result of an apply_async call was successful by doing async_result = pool.apply_async(...), and then async_result.successful() (after joining).  If it was unsuccessful, then doing async_result.get() should re-raise the exception that caused the failure.
Algorithms now use primitive and the older VQE here, that was based on QuantumInstance is deprecated and will soon be removed. I am going to close this as no longer relevant,
