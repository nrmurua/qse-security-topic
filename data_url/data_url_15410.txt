I am trying to compute the expectation $\langle 0^{\otimes n} |e^{iA} H e^{-iB}|0^{\otimes n} \rangle$, where matrix $A$ and $B$ are different, as following.
The code works fine but I notice that the CircuitSampler only cache 1 circuit by checking sampler._circuit_ops_cache.values(), which is the circuit for init_state

Does this implies the whole computation is basically classical? I notice that once I change $A$ and $B$ to single Pauli term, such as
the cache sampler._circuit_ops_cache.values() will contain 4 circuits. I suppose in this case PauliExpectation() is grouping the Pauli terms of  the matrix $e^{iA} H e^{-iB}$. Are there any way to apply qubit-wise commutatiy to the computation of $\langle 0^{\otimes n} |e^{iA} H e^{-iB}|0^{\otimes n} \rangle$ when $A$ and $B$ have multiple Pauli terms?
These are good questions @Firepanda415! First, to their answers:
Does this implies the whole computation is basically classical?
Yes ðŸ™‚
I notice that once I change A and B  to single Pauli term, such as [...]
the cache sampler._circuit_ops_cache.values() will contain 4 circuits
This is more a coincidence than the general case, since Qiskit recognizes it can directly replace exp(-iB) by a Ry gate on the first qubit ðŸ™‚
While you wrote down a valid mathematical expression, this is not quite how qiskit.opflow behaves. The PauliTrotterEvolution only applies to states not to operators. So while something like
applies trotterization on A, it doesn't work if you put A.exp_i() on the Hamiltonian.
That's because the Trotterization acts only as a decomposition into a circuit, but the Hamiltonian which we measure in qiskit.opflow will remain an operator, not a circuit.
Another comment to what you're trying to measure: with a standard expectation value computations on a quantum compture we can only evaluate expressions of the form $\langle\psi|H|\psi\rangle$, but not of the form $\langle\psi|H|\phi\rangle$. That means that you can't evaluate $(\langle 0| e^{iA}) H (e^{-iB}|0\rangle)$ with circuit measurements. However you can still use Qiskit to evaluate that with statevector evaluations as
If you actually want to measure your quantity as expectation value, you'll either need the same states on the left and right of the Hamiltonian, or exactly compute $e^{iA}He^{-iB}$ as sums of Paulis. I hope this clarifies things a bit!
@Cryoris Thanks for your confirmation and detailed answer! Your explanation is exactly what I need and I believe I understand what is going on here.  I will close this issue.
