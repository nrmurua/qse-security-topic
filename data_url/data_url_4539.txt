Dear authors,
When playing around with the example reuploading_classifier for another project, I realized that if the file saved_parameters.pkl does not exist yet the code complains and crashes.
I believe it means just simply changing the line checking the file. That would be nice to see this changed, so that if the file does not exist yet the classifier creates it on the fly.
Best
Julien
@jubaglio thanks for reporting this issue. @AdrianPerezSalinas could you please take care?
I have a very un-optimized solution, though, in the file main.py. After the line
ql = single_qubit_classifier(dataset, layers)  # Define classifier
I've written
Hi @jubaglio , thank you very much or pointing this out. I have not seen the issue yet, hopefully I can do it tomorrow, but I will take you advice into account.
Let me understand what happens. If the file does not exist, it just crashes, isn't it? On the other hand, if it exists but the problem has never been solved, it works properly. So what we should do is just to avoid this crash?
Hi @AdrianPerezSalinas,
If there is no file, I get this:
Traceback (most recent call last):
File "./main.py", line 47, in 
main(**args)
File "./main.py", line 23, in main
with open('saved_parameters.pkl', 'rb') as f:
FileNotFoundError: [Errno 2] No such file or directory: 'saved_parameters.pkl'
Now if a file is there, but empty (as if I do a touch to create it):
Traceback (most recent call last):
File "./main.py", line 47, in 
main(**args)
File "./main.py", line 25, in main
data = pickle.load(f)
EOFError: Ran out of input
That's why my solution is simply to create the file the first time the program is called in case the file does not exist yet, and dump the data structure into it.
Hi @jubaglio , I have opened a PR #401 with the changes you suggest. I did it in a much simpler way, with just a pair of lines. Let me know if it works for you!
Hi @AdrianPerezSalinas ,
It still fails:
Traceback (most recent call last):
File "./main.py", line 29, in main
parameters = data[dataset][layers]
KeyError: 'tricrown'
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "./main.py", line 49, in 
main(**args)
File "./main.py", line 36, in main
data[dataset][layers] = parameters
KeyError: 'tricrown'
I believe we should also initialize the dataset blocks in data (after the line data = {}), as:
With this added to your fix, it works and is indeed much simpler than my solution!
Best
Julien
Hi @AdrianPerezSalinas
It works, thnaks!
Implemented in #401.
