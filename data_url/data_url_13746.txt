An example of something a user might expect (or at least I expected) was that I could do something like the following:
The purpose of this is to test different settings against the same factory type.
It turns out that this does not work since the same factory object accumulates more state each time you run execute_zne. This can be solved by redefining the factory in the inner loop, however I believe this is unexpected and unintuitive behavior.
We should consider a workflow that allows factories to have the same type but have their in and out stacks reset when they are reduced. This would be one way to solve the issue.
Do others have suggestions on other ways to solve this? @andreamari @nathanshammah @rmlarose
I'll take this one on as I think I have an idea on how to go about it by having the default behavior for execute_zne to reset the factory when reduce is called. In cases where one does not want to reset after reduce (which is for a different kind of testing) this can be an optional flag.
Thanks @willzeng! I would suggest a small change but I am ok also with your proposal.
My idea is to reset the factory inside execute_with_zne  (link) before using it.
In practice, replacing the line qrun_factory(fac, qp, executor, scale_noise) with:
The reasons for this suggestion are:
Great point. I agree. Will proceed that way.
