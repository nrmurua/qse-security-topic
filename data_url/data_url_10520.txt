DWave_NetworkX uses will often generate a graph from real-world data for solution via DNX.  The QUBO that's created inside DNX will sometimes be a high-value target for solver developers wanting to evolve their solvers to deliver better performance for real-world problems.  But currently there's no straightforward way to save the QUBO for later execution.  (In my view, it's unrealistic to expect that DNX users will ship all their data into Github so the full workflow can be recreated.  E.g., for one DNX-MIS use case, the full data is ~150GB, with complicated pre-processing scripts.)
One way to address this would be to have an argument on each algorithm signifying that the QUBO(s) should be saved in a file (or directory if multiple), possibly with the name of the file (directory) also specified.
Serialization of QUBO/Ising is out of scope for dnx.
The current serialization method in Ocean is to use BinaryQuadraticModel.to_coo() (docs) or BinaryQuadraticModel.to_serializable (docs).
We serialize the bqm object so that we do not need to reuse code. The flow would be
For large QUBOs like you're describing, they are probably better off using .from_serializable(use_bytes=True) and bson encoding or similar.
I'm not understanding.  I'm a DNX user, so I only think about graphs.  I don't ever see the QUBO that's created inside the DNX kernel, because it's sent to a solver and the results are handled inside DNX.  How do I put your suggested code inside the DNX kernel?
networkx, and by extension dwave-networkx is not really designed for this use case. However, we know that advanced users might have other needs, to that end we provide the qubo generating functions for most of the graph algorithms. For instance
can be done equivalently with
Therefore, to your question, they can do the above in two steps, saving in between with
While this is obviously more complicated than having a bespoke API, I consider any user who knows enough to know they want to save the QUBO in a file to be qualified to understand serialzing BQMs.
It is also worth noting the networkx has its own serialization. So assuming the user has a weighted graph and are ok with saving that rather than the QUBO itself, they can use any of the methods available here to save G. Then simply use indep_nodes = dnx.maximum_independent_set(G, sampler)
Probably this one: https://networkx.github.io/documentation/stable/reference/readwrite/generated/networkx.readwrite.json_graph.adjacency_data.html#networkx.readwrite.json_graph.adjacency_data
Re: "I consider any user who knows enough to know they want to save the QUBO in a file ..." :
If nx's serialization is sufficient then I believe we can consider this issue closed. The latter point is a design question beyond the scope of this issue
