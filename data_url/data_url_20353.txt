I've been working on integrating GeMSS to nist-branch. GeMSS' implementations contain a C++ source file chooseRootHFE.cpp, within which NTL is called; all other source files are written in C. The Makefile provided by the submission authors compiles all implementations with g++.
This requires globally renaming the following symbols:
After spending quite some time getting everything to compile, the KAT responses generated by scripts/check_kats.sh differ from those I generated with GeMSS' PQCgenKAT_sign. I suspect renaming symbols plays a role here. All libraries in use are being linked properly, so this is not the underlying issue.
Unless #298 is merged quickly, I will submit a PR to @christianpaquin's cp-nist-branch-add-sig as soon as I finish writing a gf2x build script (which GeMSS uses). This will be more useful than the description above.
Anyhow, submissions using C++ for NTL is something we need to deal with -- hence me opening this issue --. @dstebila @christianpaquin, I would like to have your input on this, please.
Hi Maxime, in terms of KAT responses differing: Is there a randombytes function in the GeMSS upstream code that is being built for liboqs?  If so, it should be removed.  liboqs provides an implementation of randombytes which properly provides random numbers when run in test_kem or test_sig other normal applications, but uses the NIST deterministic procedure when run in kat_kem or kat_sig.
Oops -- you are spot on, @dstebila.
GeMSS indeed includes NIST's rng.c file which implements the deterministic RNG. After removing it from the compilation process and renaming the mangled C++ symbol for randombytes to the C symbol randombytes, KAT checks pass as expected.
You're not the first person to have this problem.  I've added a "Troubleshooting" section at the end of CONTRIBUTING.md to highlight this information.
