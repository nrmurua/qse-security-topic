This issue to capture what we discussed today (also for the benefit of @christianpaquin):
@dstebila @xvzcf are working on this.
Here is a draft of a YML file showing the information to be collected about an algorithm and its implementations.
Thanks for this first cut. First questions:
The concrete requirement here was "have we observed it crashing in multi-threaded tests in the language wrappers"?
Not systematically, just inspired by.
This was intended to keep track that we've updated to the Round 3 version.
Tagging @xvzcf @christianpaquin @crockeea @jschanck @bhess @vsoftco @baentsch to invite any feedback.
Beyond the already answered questions above, do we safely assume that each algorithm is using common RAND? Should we have a test to validate that?
Looking at other common code, is it correct that Frodo unlike other algorithms doesn't use SHA3 (incl. SHA3x4)? Last question: Do we agree that the common_crypto tag also addresses/resolves #849?
If so, I'd support using/filling this template for all algorithms (and release 0.5 when all algs have the nist_round tagged 3).
Looks very good.
Is the goal to use these files also for a direct upstream-import of the implementations? If so it can make sense to unify some of the structure and naming (e.g. "implementations" vs. "supported_configurations", the way to encode the supported platforms). Compare for example here: https://github.com/pq-crystals/dilithium/blob/master/Dilithium2_META.yml
Additional information that can be useful:
Is it x86 or x86_64?
Similar here, do we want to detail the ARM architecture (aarch64, armhf, armel, ..)?
Beyond the already answered questions above, do we safely assume that each algorithm is using common RAND? Should we have a test to validate that?
I hadn't thought to check if people are using something other than common RAND.  I'm not aware of anyone doing that in the algorithms we have.  Not sure how we'd validate that automatically though.
Looking at other common code, is it correct that Frodo unlike other algorithms doesn't use SHA3 (incl. SHA3x4)? Last question: Do we agree that the common_crypto tag also addresses/resolves #849?
Oops, all Frodo variants do use SHA3, not SHA2; the -SHAKE variants just use it more.  Will have to fix.  And yes, hopefully this will resolve #849.
Is the goal to use these files also for a direct upstream-import of the implementations?
The initial goal was to provide an organized summary of the implementations characteristics, for people to understand what we have and to generate relevant documentation/tables.  It was not an immediate goal to tie in with the copy-from-upstream mechanism; I was worried that expanding the scope too far would mean it never gets done.
Additional information that can be useful:
Okay if we imagine this to be used for automatically connecting with code; less necessary if we imagine this is oriented around documentation (since those KATs are already present in the same commit elsewhere in the liboqs repo).
Specifically?
To me that's more of an output characteristic, something that would e.g. be measured using profiling, rather than reported on a specification document like this one.
Is it x86 or x86_64?
Similar here, do we want to detail the ARM architecture (aarch64, armhf, armel, ..)?
Yes, that is a good point.
To me that's more of an output characteristic, something that would e.g. be measured using profiling, rather than reported on a specification document like this one.
+1. Also, such properties are compiler&platform dependent. @bhess If you're not aware of it, you may want to head over to https://openquantumsafe.org/benchmarking/visualization/mem_sig_series.html (where you can --among many other options-- toggle between maxHeap and maxStack usage comparisons) to take a look at what we already have. Suggestions for improvements always welcome. Oh, and
Compile options used, if any
are also captured there.
Thanks @dstebila @baentsch for the details. Makes a lot of sense for documentation. Having the output characteristics and used settings available in the profiling page is better than putting them in static docs.
What about changing the supported_configurations key to build_configurations and having it be defined something like:
That seems fine to me, @xvzcf.
Last remaining issue before releasing 0.6, right? Would it be an idea to complete a release of liboqs and all subprojects before the end of May/PQC workshop? For 0.5 it took us a month to move from RC on liboqs until final release of all subprojects... Thus, what about focusing on/closing this now and having a liboqs-0.6 RC by the end of April?
Greed. @xvzcf have you made any progress on generating documentation from the sample YML file?
Greed. @xvzcf have you made any progress on generating documentation from the sample YML file?
No, will look at it today.
Here's the slightly reworked YAML:
and the associated documentation markdown:
Link to memory consumption benchmark:  https://openquantumsafe.org/benchmarking/visualization/mem_kem.html#refselector=Performance&familyselector=Frodo
@open-quantum-safe/core thoughts?
Looks basically OK to me. Suggestions for improvement: What about putting this link behind the truth value concerning "Large stack usage": https://openquantumsafe.org/benchmarking/visualization/mem_kem.html ? May avoid discussions what constitutes "large" with clear figures. Also, would it be reasonable to add "in optimized implementation" behind the "CPU Extensions Used" heading (or a footnote -- to document there's both optimized and reference code available; the latter of which arguably always is portable).
I'd be more inclined to put the link in the explanation section (unless there's a link to display numbers only for a specific implementation of choice on that page)
For the latter, I'll edit my comment above to add an implementation-type key to the YAML, and the resulting generated markdown will have this:
unless there's a link to display numbers only for a specific implementation of choice on that page
That's a good feature idea for profiling visualization. Now so implemented: If open-quantum-safe/profiling#54 is landed you can direct link to specific algorithms and implementations, e.g. https://openquantumsafe.org/benchmarking/visualization/mem_kem.html#refselector=Performance&familyselector=Frodo
@xvzcf Linking to specific profiling pages/algs now works as advertised above. Could we now finalize this (and put the resultant docs into 0.6.0)?
@xvzcf Linking to specific profiling pages/algs now works as advertised above. Could we now finalize this (and put the resultant docs into 0.6.0)?
I've updated the markdown to include a link to the benchmark (under the parameter set summary section).
I've put the example YML file for FrodoKEM in a new-datasheets branch in the docs/algorithms/kem folder.  It's ready for other people to adapt for other schemes.  As promised, here are the assignments.  Please try to do this within the next week, you can push directly to the new-datasheets branch.  If you have any problems / questions, please ask on here.
KEMs:
Signatures:
OK for me to take on HQC and Rainbow.
Question(s) on FrodoKEM: Is that really complete/correct?

Finally, am I assuming correct that we don't explicitly/separately list reference implementation(s) -- unless no optimized variant is available?
Additional question regarding secret dependent branching: Do I assume correct that we shall state false on no-secret-dependent-branching-claimed if we have a suppression file (e.g., for HQC) -- as well as true on no-secret-dependent-branching-checked-by-valgrind?
One could argue that the claim to this property is made by the authors, though, as the NIST submission states "Our optimized AVX2 implementation is now constant time and avoids secret dependent memory access" (in my eyes code branches are --code-- memory accesses). Given this, these bits now confuse me a bit: Could @xvzcf @jschanck @dstebila please provide guidance/a link as to how to set these truth values?
Question(s) on FrodoKEM: Is that really complete/correct?

You're right, fixed; thanks.
That's just so you all can see the syntax, will be removed for Frodo eventually since Frodo doesn't need them.
Finally, am I assuming correct that we don't explicitly/separately list reference implementation(s) -- unless no optimized variant is available?
Yes.
Additional question regarding secret dependent branching: Do I assume correct that we shall state false on no-secret-dependent-branching-claimed if we have a suppression file (e.g., for HQC) -- as well as true on no-secret-dependent-branching-checked-by-valgrind?
One could argue that the claim to this property is made by the authors, though, as the NIST submission states "Our optimized AVX2 implementation is now constant time and avoids secret dependent memory access" (in my eyes code branches are --code-- memory accesses). Given this, these bits now confuse me a bit: Could @xvzcf @jschanck @dstebila please provide guidance/a link as to how to set these truth values?
I'd say we should put a link to the suppression file indicating the exceptions.
I'd say we should put a link to the suppression file indicating the exceptions.
How/where? Also, please note that in the case of HQC it's 3 files. Until that's clear, I'll consider HQC done: Please take a look. If you'd want me to extend the YAML->MD converter, please let me know where that code is (@xvzcf ? Didn't find it in scripts or doc).
Regarding HQC: How about I open an issue describing the non-constant time behaviour that is documented in the suppression files, and then we link to the issue.
Added a yml file for Dilithium.
A few minor comments:
For implementation_type, there are at the moment values for "Plain C" (Rainbow) and "optimized" (Dilithium, HQC, Frodo).
The NIST submissions contain "reference", "optimized" and "additional" implementations, where both "reference" and "optimized" implementations need to be plain portable C. Additional implementations can be assembly-optimized. Would it be clearer to have "reference (plain C)", "optimized (plain C)" and "assembly-optimized" as possible values for implementation_type?
The Frodo yml lists macOS and Windows as target platforms for armel and armhf. Isn't it just Linux (or perhaps macOS because of M1)?

The Frodo yml lists "armel" as not portable. Is this correct?

I'd say we should put a link to the suppression file indicating the exceptions.
For SIKE, I believe that the issues were resolved after #914. @christianpaquin @jschanck Could the two SIKE-related files be removed from here? https://github.com/open-quantum-safe/liboqs/tree/main/tests/constant_time/kem/issues.
If you'd want me to extend the YAML->MD converter, please let me know where that code is (@xvzcf ? Didn't find it in scripts or doc).
There is some code to partially generate the .md files after copy_from_upstream: https://github.com/open-quantum-safe/liboqs/tree/main/scripts/copy_from_upstream/docs/algorithms. This should be obsolete after completing this here, but it could serve as a template for generating .md files from the new yml-files.
For implementation_type, there are at the moment values for "Plain C" (Rainbow) and "optimized" (Dilithium, HQC, Frodo).
The NIST submissions contain "reference", "optimized" and "additional" implementations, where both "reference" and "optimized" implementations need to be plain portable C. Additional implementations can be assembly-optimized. Would it be clearer to have "reference (plain C)", "optimized (plain C)" and "assembly-optimized" as possible values for implementation_type?
My aim here was that these would just be (possibly opaque) identifiers that just make it possible to look up what "flavor" we pulled from the upstream code (if the upstream has three implementations X, Y, and Z, we'd also just note down X or Y or Z in the YAML file). In combination with the implementation-chain key this should make it possible to precisely determine what code was used.
The Frodo yml lists macOS and Windows as target platforms for armel and armhf. Isn't it just Linux (or perhaps macOS because of M1)?


The Frodo yml lists "armel" as not portable. Is this correct?
I did not check whether the values were correct, just copy-pasted to hash out what the general YAML file would look like.
If you'd want me to extend the YAML->MD converter, please let me know where that code is (@xvzcf ? Didn't find it in scripts or doc).
There is some code to partially generate the .md files after copy_from_upstream: https://github.com/open-quantum-safe/liboqs/tree/main/scripts/copy_from_upstream/docs/algorithms. This should be obsolete after completing this here, but it could serve as a template for generating .md files from the new yml-files.
I'll paste the quick-and-dirty script I wrote to generate the markdown files in a separate comment. I think we'll have to ensure consistency between the information in these new YAML files and, for example, copy_from_upstream.yml (such as making sure the pretty_name_fulls line up); we could automatically populate some of the fields in the new files using copy_from_upstream.yml and whatever else is there (the suppression files?), but this is probably best set aside for a future issue/PR.
The python script I used:
Since we are pushing 0.6, I took the liberty of delaying my assigned algs to next week, to address urgent deadlines this week. Hoping to get to this before our next meeting.
How are we supposed to answer questions fields that vary depending on platform support. For example, for SIKE, some optimizations are available on Linux and Darwin, but the build will revert to the portable version on Windows. Should I duplicate the arch entry:
or should I combined both:
There are already 4 (params) x 2 (SIDH/SIKE) x 2 (compressed or not) = 16 variants for SIKE, each with 4 archs, so I'm weary of adding another split.
Go with duplicating for now, that way you can describe which combinations of arch/platform have which properties more precisely.
I added NTRU and Kyber. Some questions:
What is the top-level "implementation type" field for? This feels like it should be under parameter-sets/implementations, if it's necessary at all.

Does "portable" mean the implementation can be selected at runtime? If so, maybe change the name of the field to something like "dynamic-dispatch".

I've used "arch: any" / "platforms: any" for plain C. Is this OK?

Resolved for KEMs by #1030. Equivalent PR for signatures will close this issue.
Closed by #1053
