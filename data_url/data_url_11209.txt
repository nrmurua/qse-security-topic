Ho can I calculate ground state energy of Bose Hubbard Hamiltonian with openfermion? I obtained the Hamiltonian matrix. then I followed an example of openfermion. use these two command to calculate ground state energy:
sparse_hamiltonian = get_sparse_operator(hubbard_model)
energy, state = get_ground_state(sparse_hamiltonian)
I have Hubbard_model matrix.
I also added these libraries:
import numpy as np
from openfermion.hamiltonians import bose_hubbard
from openfermion.transforms import get_sparse_operator, jordan_wigner
from openfermion.utils import get_ground_state
import scipy
import scipy.linalg
but I got this error.
TypeError: '<' not supported between instances of 'NoneType' and 'int'
I think the answer to #606 solves this problem as well?
Hi Obriente. I run the example again after applying your changes. I got another error.ValueError                                Traceback (most recent call last)
 in 
22 trunc=1
23     # Get scipy.sparse.csc representation.
---> 24 sparse_operator = get_sparse_operator(hubbard_model, trunc)
25 #print('')
26 #print(sparse_operator)
~/OpenFermion/src/openfermion/transforms/_conversion.py in get_sparse_operator(operator, n_qubits, trunc, hbar)
65         return qubit_operator_sparse(operator, n_qubits)
66     elif isinstance(operator, (BosonOperator, QuadOperator)):
---> 67         return boson_operator_sparse(operator, trunc, hbar)
68     else:
69         raise TypeError('Failed to convert a {} to a sparse matrix.'.format(
~/OpenFermion/src/openfermion/utils/_sparse_tools.py in boson_operator_sparse(operator, trunc, hbar)
1269     if not isinstance(trunc, int) or trunc < 1:
1270          raise ValueError(
-> 1271              "Fock space truncation (trunc) must be a positive integer.")
1272
1273     # count the number of modes
ValueError: Fock space truncation (trunc) must be a positive integer.
You need to define trunc explicitly - i.e.
trunc = 1
sparse_operator = get_sparse_operator(hubbard_model, trunc=trunc)
Currently your call will set num_qubits=1, and keep trunc=0.
thanks, it works.
I have written a simple input to calculate ground energy of Bose Hubbard Hamiltonian with Openfermion. the problem is this the ground state and energy of ground state are n't a single output in reality. the ground state is calculated by diagonalizing Hamiltonian which is a sequence of number and the number is equal to dimensionality of our Hilbert space. Actually, ground state is a many body wavefunction. I have done the Bose Hubbard project for 2D periodic lattice. how can I get all ground state wave function?
from openfermion.hamiltonians import bose_hubbard
from openfermion.transforms import get_sparse_operator
from openfermion.utils import get_ground_state
import math
#import scipy.linalg as nlin
#import scipy.sparse as sp
#import scipy.sparse.linalg as lin
x_dimension = 10
y_dimension = 10
tunneling = 2.
coulomb = 1.
#magnetic_field = 0.5
chemical_potential = 0.25
periodic = 1
spinless = 1
hubbard_model = bose_hubbard(
x_dimension, y_dimension, tunneling, coulomb, chemical_potential, periodic, spinless)
#print(hubbard_model)
trunc = 1
sparse_operator = get_sparse_operator(hubbard_model, trunc=trunc)
Hh = sparse_operator.toarray()
#print(Hh)
# Get scipy.sparse.csc representation.
#sparse_operator = get_sparse_operator(hubbard_model)
#energy, state = lin.eigs(sparse_operator.toarray())
#energy, state = get_ground_state(sparse_operator.toarray())
energy, state = get_ground_state(Hh)
print(state)
the output is always [1.+0.j], no matter what are the value of x_dimension = 10
y_dimension = 10?
Looking through the code, it seems that the truncation occurs of all occupations >= trunc, instead of all occupations > trunc. This means you need to set trunc>=2 in order to get non-trivial results. (I also that you might want to set trunc >= 3 (possibly even like trunc=10 or something, I'm not an expert in this model) in order to see the full Bose-Hubbard model effects. At least, setting trunc >=2 only allows one excitation per site, which means that the onsite interaction terms don't occur.
(Note, if you set trunc = 2, I think you'll have trouble with more than about a 4x4 lattice on a laptop, and this will get worse as you make trunc larger. A 10x10 lattice will definitely run over your memory.)
@sassan72 it seems like @obriente addressed the issue you raised.
