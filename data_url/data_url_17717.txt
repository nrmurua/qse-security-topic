Simply calling an interactive visualization, or interacting with them, more often than not leads to a crash/freeze in the underlying JS code, causing the cpu usage to become 100%.
@filemaster
I tried to run a 5qbit simulator and generate some graphs and it didn't require a lot of CPU.
The picture is a snapshot of my laptop screen running Jupyter and showing a hinton and a cities plot. As you can see Jupyter uses less than 15% of the CPU.

We need an example to catch the error.
Here is what I got when writing my reply to #1352.  The interactive JS is the 111% at the top.  In general, such behavior occurs on mouse over, or when trying to manipulate a figure

@nonhermitian, any task could use more than 100% of CPU without freeze the computer, because it can be using more than one CPU cores. The problem you show in the snapshot is not related with the CPU usage amout, it is related with the bug #1353. We are fixing that.
For 2D graphs we are using Plotly. When you try to assign a small area for the graphical representation, Plotly tries to adapt to the defined area internally, but as the components are bigger than the defined area, the real representation will be as smaller than posible but it always be bigger than the definition. The problem appears when you move the mouse over the figure and it tries to show the legend. Plotly is not able to draw the legend in a 5x5 pixels area and crash internally. As I said it is our fault and we are fixing it.
While we work in the fix, you could try to change the iplot line for something like:
iplot_histogram(counts, figsize=(800, 500))
and try again.
Visualization library has been updated just now, with next changes:
Note: all the image dimensions are still defined in pixels because it has no sense to use inches, millimeters or other unit of length to define the image size on the screen.
This is looking good now.  Thanks!
