I wanted to follow the full steps of encoding an adjacency matrix of a graph into an interferometric setup and single mode squeezed states for Gaussian boson sampling experiment. To do this, I first used thewalrus library to decompose the adjacency matrix using Takagi decomposition. After I have decomposed the matrix, I have then used rectangular_phase_end from the strawberry fields library to convert my unitary gate into a set of beam splitters. Finally, I have used the Fock backend of the local simulator engine and fed in the squeezing parameters and Beam splitter setup I have generated to get the photo count result corresponding to my specific adjacency matrix.
I expected the photocount pattern of [111100] to appear for the largest number of times since that pattern corresponds to the 4 dimensional subgraph choice of maximum Hafnium value to my 6 dimensional adjacency matrix. (Hafnium value of 3, Hafnium squared value of 9 whereas other choices such as [110011] only has single perfect matching) I have tested my graph  using hafnium_sample_graph from thewalrus library as well, and I got 231 samples of [111100] among 10000 samples, which is quite desirable.
What I got after postselecting only those with ones and zeros (subspace used for the estimation of hafnian) was something like this,
[1 1 1 0 0 1]
[1 0 0 1 1 1]
[1 0 1 0 1 1]
[0 1 1 1 0 1]
[1 1 0 1 1 0]
[1 1 1 0 1 0]
[0 0 1 1 1 1]
[1 1 1 0 0 1]
only 8 cases out of 1000 samples and I could not see the answer case,i.e, [111100] ,to the maximum hafnian problem at all.
What's more, mean photon number at the output was around 0.97 whereas I aimed it at 4 to best see the 4 dimensional subgraph among my 6 dimensional adjacency matrix.
Reproduces nearly every time.
No response
Hey @minseok1999! Apologies for the delayed response. Can you distill your code down to something minimal that still reproduces the behaviour? It would help me greatly ðŸ˜„
Hey @minseok1999! Apologies for the delayed response. Can you distill your code down to something minimal that still reproduces the behaviour? It would help me greatly ðŸ˜„
Thank you for considering my issue again! I have edited with the distilled source code as you requested.
@minseok1999 can you surround your code with three backticks? It will render it like this, which github will let me copy-paste.
You can also get rid of the notebook block stuff (e.g., In[1]).
@minseok1999 can you surround your code with three backticks? It will render it like this, which github will let me copy-paste.
You can also get rid of the notebook block stuff (e.g., In[1]).
I have removed notebook blocks and wrapped my code using backticks as you requested!
Awesome thanks!
It might be something to do with eng = sf.Engine("fock", backend_options={"cutoff_dim": 4}) â€” if the cutoff dimension is 4, then each Fock representation of the components has a cutoff of 4 (i.e., it supports only up to 3 photons). If throughout the process a mode needs to populate more than 3 photons, it canâ€™t. Let us know if that helps!
Awesome thanks!
It might be something to do with eng = sf.Engine("fock", backend_options={"cutoff_dim": 4}) â€” if the cutoff dimension is 4, then each Fock representation of the components has a cutoff of 4 (i.e., it supports only up to 3 photons). If throughout the process a mode needs to populate more than 3 photons, it canâ€™t. Let us know if that helps!
I have raised the cutoff dimension up to 5 and 6 and it clearly gave higher photon 'mean_count' (average photon number at the output port out of 1000 samples) as 1.46 and 1.54. This is better but clearly not good enough cause I have aimed my mean photon number at 4 when I decomposed my graph into experimental setup of beam splitters and single mode squeezed states. But the problem is, I cannot raise this cutoff dimension above 7 because of memory deficiency of my MacBook Air. Is there a way to reliably simulate 6 mode Gaussian Boson Sampling experiment without this memory issue other than the local Fock basis simulator? I know hafnian_sample_graph gives gaussian boson sampling pattern but what I want is to simulate this from the experimental setup of beam splitters so that I can simulate in the future how this sampling pattern is affected upon attaching some other components.
Is there a way to reliably simulate 6 mode Gaussian Boson Sampling experiment  ...
These demos are worth checking out:
Let us know if those help you get anywhere!
Is there a way to reliably simulate 6 mode Gaussian Boson Sampling experiment  ...
These demos are worth checking out:
Let us know if those help you get anywhere!
The first link you provided helped me with postselection stage after getting all the samples(tidier code than the one I wrote myself) but it didn't have much to do with full path optical simulation of Gaussian boson sampling(simulation done by writing out components manually and can be varied by attaching components myself) I am intending. And for the second one, I didn't scrutinize all the details yet but it looked like it was about some more sophisticated Gaussian boson sampling scheme of training the machine real time, which I don't need much at this stage.
I appreciate your advice though! If there is no such reliable simulator provided that is fit for me then I think I should build one myself or consider buying some gpu for more local kernel memoryðŸ™‚
It would definitely be worth it to see if raising the cutoff higher and higher helps you achieve the desired result. We can leave this issue open until the solution is determined ðŸ˜„
