Improving LinearFunction synthesis.
Currently, it may happen that after the synthesis one gets a circuit with more CX gates than before the synthesis.
Here is an example:
outputs:
Here are the suggestions to handle this problem and improve LinearFunction synthesis:
The transpiler pass of LinearFunctionsSynthesis should not return a circuit if it has more CX gates and/or worse depth than the original circuit.
Let A=LinearFunction(qc).linear.
Try to decompose the following 4 options and choose the best one (with optimal CX count and/or depth):
A, inverse(A), transpose(A) and inverse(transpose(A)).
(take the reverse circuit and/or reverse the ctrl and trgt of the CX gate accordingly).
Transfer qiskit.transpiler.synthesis.graysynth to qiskit.synthesis.graysynth and add further synthesis algorithms of reversible linear circuits.
@ShellyGarion , @mtreinish, how would LinearFunctionsSynthesis know if it's supposed to improve gate-count or depth? I might be wrong, but I don't recall seeing the optimization criteria as part of the options to transpile.
