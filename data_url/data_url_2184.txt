It is important for users to know if their sympy-parametrized circuits will be protobuf serializable, either through more verbose error messages or more thorough documentation on which sympy features are supported.
xref #2122
Once #5050 lands, a circuit can then be validated against a device before serialization by using the device's gateset: engine.get_processor('processor').get_device().metadata.gateset.validate(circuit).
Printing the gateset will also show the full supported gateset of the device.
@verult, note that the question was about what sympy features are supported by serialization. We only support a very limited set of sympy expressions such as addition, multiplication, and exponentiation, not arbitrary sympy expressions. This probably doesn't need to be part of gateset, though, but rather should be part of the other validate we do before sending to QCS.
Gotcha. I will update the documentation on this limitation (maybe here) and look into adding validation.
Documentation is added in #5472.
With the new CircuitSerializer, which is the default and eventually the only serializer, the OpSerializer path will no longer be executed IIUC. CircuitSerializer will error if an unsupported Sympy expression is used, but I'll send a PR to make the message more clear.

This validation happens right before serialization. To improve on this, the invalid expression could be detected via cg.GridDevice.validate_circuit(circuit) prior to running the circuit, but doing this is tricky. Although there are protocol functions to find symbols in any arbitrary operation (cirq.parameter_symbols()), there isn't one for finding sympy expressions. So we either add a new protocol method to every gate for extracting expressions (a lot of effort), or identify the fields for each gate that GridDevice supports, similar to how it's handled inside CircuitSerializer (extra logic to add for each new gate).
I'm leaning towards only having validation prior to serialization for simplicity.
