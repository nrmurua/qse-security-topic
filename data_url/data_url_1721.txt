Is your design idea/issue related to a use case or problem? Please describe.
With @ybc1991  we are working on the "decomposable" N-qubit diagonal gate #3866. Here, it would be nice to be able to add the global phase of the operation stemming from the first angle. cirq.ThreeQubitDiagonalGate gets around this by adding in the global phase to the rotation gates as a shift. If we use cirq.GlobalPhaseOperation the problem is that cirq.ControlledGate(cirq.DiagonalGate)) won't work out of the box - because cirq.ControlledOperation(cirq.GlobalPhaseOperation) does not behave well.
Describe your design idea/issue
The main issue is that GlobalPhaseOperation is qubitless. This is technically correct...a global phase exp(2 pi i theta) has ambiguity in its representation: it could be represented with a scalar (current solution), or a diagonal gate with exp(2 pi i theta) in all diagonal elements spanning any subset of the qubits.
The design issue here is that Operations in Cirq meant to be reused in local contexts - that's when issues arise:
example 2 looks like a bug, the global phase should be propagated from inside a subcircuit. I don't see much of an issue with example 1. When the controlling qubit is |1>, the controlled operation is being applied. What is the expected output?
array([[ -1,  0], [ 0, -1]])? Should the phase stay global even when controlled?
a.) You are totally right that this might actually be correct :) I guess I was expecting some kind of error. But you are right the Phase (Z) operation can be thought of a controlled operation (if 1 then phase). No, the phase should not stay global when controlled - it should be applied only to the controlled subspace.
b.) We also ran into some kind of qubit_order issue that I couldn't reproduce...if we run into it again, I'll add it here. (I think it was the ValueError("Don't know how to interpret <{}> as a Basis.".format(val)) with C(0,-1) when we were trying to call cirq.unitary but I just can't reproduce it!)
2. I agree that this is a bug - we should think about it more carefully!
The qubit order error can be reproduced like this:
You will encounter
Interesting. I'm not getting the above error. I am getting the array that Balint noted in the original comment. Maybe the typo cirq->circ in the print statement is the issue above? Though I don't know how that happened unless some other (maybe older cirq) import has been aliases as circ
It is because of the typo! Now it makes sense. In the case circ is defined, circ.unitary(op) will think op passed as the qubit_order argument. Of course, it cannot interpret it and report this error.  (circ and cirq is so easy to mistyped :/ )
Nice job digging out the issue @ybc1991  (I couldn't find it in the colab history, though I did not look hard) and identifying the typo @smitsanghavi üëç . Mystery solved!!!
I can take this up
