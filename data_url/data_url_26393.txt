As we are using cp2k for high-throughput calculation more and more often, it would be extremely helpful to print the computed results  in some 'standard' format. I am not talking about removal of the cp2k output file, but rather adding another output that can be parsed in an automated way (my personal preference is JSON).
The reason why I am rising this question is because:
I think this is an important topic as high-throughput science will only become more common.
However, I'm not sure if one unified json file is the best approach, because it would require global coordination across the whole code base. So, I'd instead propose to have many smaller json files written independently by different parts of the code. A workflow framework like AiiDA could still scoop up all *.json files and process them in an oblivious manner.
Furthermore, we should consider to extend our regtest framework to ensure that all files get written as promised.
we have multiple challenges:
My initial idea was to have a context/stack-aware formatting/printer object and an overloaded operator, such that something like the following would be possible:
since that would most likely require the help of a preprocessor and the fact that we now run Fypp on everything, one could also think of a combination of Fypp + Modern Fortran to generate an easier interface.
The reason why I would have used operator overloading is that unlimited polymorphism (which would have to be used when using a function call with optional parameters) was still buggy when I last tried it and would require explicit runtime type handling. On the other hand, the extra datatype (the ctx%out in the example above) could tie perfectly into the Fortran 2003 User-defined derived-type Input/Output.
As for the format: since we have some hierarchical data, I was looking at OpenPMD at some point (there was a poster about it at PASC17). The advantage being that they would provide a schema on how to output the data, while the actual backend could be JSON, HDF5, ADIOS or netCDF.
A unified output framework would of course be nice. However, as you pointed out, there a plenty of challenges. Furthermore, somebody would have to spend a year on the actual migration. So, maybe we have to aim a little lower.
All the workflows I've come across did not really need the full hierarchy of output. They actually only cared about a few values from the last iteration of the outer-most algorithm.
Another aspect is that this machine-readable output should first and foremost be stable. This might be more difficult to achieve if it's tightly coupled to the human-readable output.
If it would be only a couple of numbers, people can continue to simply parse it from the output file, it has been stable enough so far. They may have to come up with either line-based/context-aware parsing or a bit more advanced regexes, but it is doable.
The problem with mentioning things twice in a slightly different way is that it tends to diverge. Furthermore it requires additional steps by the developers ("cognitive load"?).
