Hello, I found a performance issue in the definition of  test_expectation_simple_tf_train, tensorflow_quantum/python/layers/circuit_executors/expectation_test.py, tf.square and tf.reduce_sum will be calculated repeatedly during program execution. I think it will reduce efficiency if number of cycles greater than 10. I think it should be created before the loop in test_expectation_simple_tf_train.
The same issue also exists here
Looking forward to your reply. Btw, I am very glad to create a PR to fix it if you are too busy.
If you move it outside the loop, then won't the test fail self.assertAllClose(mse.numpy(), 0, atol=1e-3) because the mse won't change thus preventing learning? That is the loss function being differentiated with respect to, so every iteration it should be updated, unless I am missing something.
Maybe the time could be improved if the inside of the for loop is extracted into a tf.function, which is defined inside the test.  But, we would need to know if the tracing ends up taking longer than we gain from the faster inner loop.  Is the speed of this test a large chunk of the CI time?
Thanks @DLPerf for raising this issue, good catch. This is definitly an oversight when we were writing tests, would be happy to review any PRs to fix this along with some short timing snippets :)
I was sorry for that I didn't see layer will update here. Thus, mse can't be created before the loop.
