Please add a comment to this issue to report any build that do not work properly. To ease debugging, would it be possible to also copy/paste the cmake output.
The CMake build system is coming along nicely. So, below I've tried to list all the configurations that we'll need to migrate:
I am not sure to understand why we need a generate_cmake_commands.sh since it boils down to setting up the environment and adding or removing options like -DCP2K_USE_LIBXSMM=ON, OFF etc.... there is really nothing else to give to cmake to make it work. a dry-run of the toolchain could perfectly fit the bill.
while we are making a list I will add this bullet point :
already present
the rest
dear Developers,
can you have a page for CMAKE options when compiling CP2K?
I encounter this error:
It seemly that we lack of the file "FindDBCSR.cmake". Doesn't it?
What cmake is saying is that dbcsr could not be found anywhere. DBCSR is treated as external dependency and should be built before building cp2k, that's why you have this error. There is nothing missing in the cmake configuration itself. The README_cmake.md also says that dbcsr is hard dependency but I should write it more explicitly.
I will write a page on the cp2k website as well.
I am not sure to understand why we need a generate_cmake_commands.sh since it boils down to setting up the environment and adding or removing options like -DCP2K_USE_LIBXSMM=ON, OFF etc....
Yes, those scripts will be quite simple. Nevertheless, we need to generate these cmake commandlines somewhere. I think, the Toolchain is the best place because it already has all the necessary information. Furthermore, it will allow us to keep the Dockerfiles mostly unchanged - the cmake scripts will simply replace the ARCH files. And finally, we can also print a nice message at the end of the Toolchain to advertise CMake to the user.
Create a separate directory for builds that supports cpu and GPU. we do that for cosma with cosma-cpu and cosma-gpu. We should extend this to the others dependencies.
Yes, it would be good to come up with a naming convention for build directories - essentially a replacement for what we currently have in cp2k/exe/....
spack package. This is critical actually.
If you like I can setup a new CI/Dashboard test for Spack, just like we have it for other distributions like e.g. Fedora.
Windows, macos,...fpga
We have recently become more serious about supporting macOS. Windows and FPGAs are low-priority. I mostly listed them for completeness sake.
I would be grateful if you could make a placeholder for the spack docker. It is not urgent though. We can fill the blanks on our side (as we are already testing cp2k builds with spack).
The first step would be to build all deps with spack (simple cpu version) and build cp2k with the cmake build system. we could build the full stack with spack but the spack recipe needs to be updated. We are working on it.
my main concern with the actual toolchain setup is the fact that the dependencies versioning is incomplete. For instance SIRIUS cpu and gpu are installed in the same directory while the installation prefix should reflect the fact that it is cpu or gpu. For instance
we do it for cosma but I do not remember why I implemented it differently with SIRIUS.
I still do not know how to solve this problem in a clean way except generating a separate setup file for cpu, gpu-nvidia and gpu-amd and then generate the arch files and the toolchain cmake message accordingly.
If I just follow the instructions in README_cmake.md, I get immediately the error
CMake 3.22 or higher is required.  You are running version 3.20.4
Is CMake v3.22 really required?
Is there a mechanism to install in advance the latest CMake version like with the toolchain?
If I just follow the instructions in README_cmake.md, I get immediately the error
CMake 3.22 or higher is required. You are running version 3.20.4
Is CMake v3.22 really required? Is there a mechanism to install in advance the latest CMake version like with the toolchain?
CMake v3.22 is required because of HIP language support and few minors others things. You could try with 3.20 by changing the version number in CMakeLists.txt you can find at the root of the source tree though.
No. You can use the toolchain for this if you are working on intel/amd platforms. An other alternative is to go here
https://cmake.org/download/
and download the precompiled versions.
I see that the cmake version does not install the .sopt and .popt symlinks.  Is this expected?
If I remember correctly these two versions imply turning off openmp. It is possible to turn openmp off but the flag is not present in the current cmake build system. I even think it was decided that cp2k should at least support some degree of parallelism taking the form of openmp.
I can add the flag in the cmake build system but it will never be the default option and only offered as a developer option. Unless there is a very good reason for us to have the equivalent of sopt and popt I am not keen to add this at all.
From the Makefile:
So it seems like people can simply set that variable.  I don't know of any particular demand for these version, just checking that the removal is intentional.
I think it was intentional because the dev had too many version to support. The second reason is that openmp was enforced one way or the other not so long ago. Only MPI can be turned off in the cmake build.
And in practice all users will run the full mpi+openmp version anyway. Only developers may have some interest for having openmp and mpi off.
We dropped support for non-OpenMP builds a while ago (#729). For backwards compatibility I've added the following:

