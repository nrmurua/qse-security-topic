A circuit composed of Clifford operations should be simulated on CliffordSimulator by default. Before running the actual circuit, we need to verify that all the operations are efficiently simulatable on the above. Currently, to determine this we rely on is_supported_operation method in CliffordSimulator which is based on some heuristics which might be brittle and are slightly expensive.
It would be much more pythonic to be able to efficiently just ask the individual operations if they support acting on the required state representations (StabilizerStateChForm and CliffordTableau in this case). But this information currently resides in some if condition inside the gate/operation's _act_on_ implementation.
We should break the _act_on_ methods into different _act_on_SPECIFIC_STATE_REP_ methods and have the act_on protocol use them directly by asking the supplied "Args" what method it needs (e.g. ActOnCliffordTableauArgs will ask for the _act_on_clifford_tableau_ method). In addition to this, this will allow us to declare specific SupportsActOnCliffordTableau(Protocol)-type classes instead of the current generic SupportsActOn(Protocol) class. This solves the original problem as well, we just check for SupportsActOnCliffordTableau and SupportsActOnStabilizerChForm and then (optionally) fallback to the current single-qubit decomposition which is slightly expensive. Any new gate that adds support for _act_on_clifford_tableau_ and _act_on_stabilizer_ch_form_ would automatically get supported on CliffordSimulator without having to double-check or update the heuristics (e.g. SWAP)
[optional] Describe alternatives/workarounds you've considered
Alternative approach would be to keep the _act_on_ method around and not change the act_on protocol. Just delegate the implementation of _act_on_ to the appropriate _act_on_* method based on the arg type. This can also be an intermediate step to make the PRs smaller for easier code reviews.
What is the urgency from your perspective for this issue? Is it blocking important work?
P2 - we should do it in the next couple of quarters
Discussed on Cirq Cynq: sounds like a reasonable idea to have a can_act_on protocol that would return whether an operation can act on a object or not.
@95-martin-orion Decide whether this is pre/post 1.0
I have a strong feeling that @daxfohl has already accomplished this, but pinging him just to be certain.
Marked post-1.0 as it is non-breaking.
This is unnecessary now, anything specialized now happens in the _act_on_fallback_. _act_on_ is reserved for things that aren't simulator-specific (like CircuitOp and ClassicallyControlledOp). Most of that work was in https://github.com/quantumlib/Cirq/pull/4748/files. I'd say this can be closed.
