I am experimenting with tuning the number of threads (or workers), with a goal of making something somewhat reliable.
Here is a branch: https://github.com/jlapeyre/qvm/tree/expt/tunenumthreads. The new code is here: https://github.com/jlapeyre/qvm/tree/expt/tunenumthreads/tune-threads
The following tables show some preliminary results. Sweeping some details under the rug, we are doing the following: The quil program is fixed. We scan over the number of qubits simulated. We run the task repeatedly varying the number of threads used. We return a list of the normalized times required to complete the task, with the minumum time (corresponding to the optimal number of threads) normalized to 1.0.
Here are two tables, one for a laptop and one for a 24 core machine. The first column is the number of qubits. The second column is the optimal number of threads. The third column is the list of times indexed by number of threads.
First table: a laptop with four cores (no hyperthreading)
Second table: a 24-core machine with lots of RAM. (EDIT:  I increased the time limit to get less jitter from noise.) Note that the marginal value of adding or removing a thread is small near the optimal number of threads. Also remember that the results will depend on the load on the machine, which is what we want.
Should this be a pull request?
Yes, it probably should be a pull request... WIP.
