Benchmark of this example:https://docs.qojulia.org/examples/particle-in-harmonic-trap/#Particle-in-harmonic-trap-potential
[0:0.1:pi;]
[0:0.05:0.5pi;]
tout, Ψt = timeevolution.schroedinger(T, Ψ0, H,save_on=false)
After specify save_on=false Still save all results
Reduce save points:
Alloc is still high
When it comes to my model, the  GC time is  around 10%.
After specify saveat=[], save_on=false start to work.
But alloc is still high.
This is not a bug. We already set save_everystep = false, save_start = false, and save_end = false. Setting save_on = false will probably not have any effect.
For saving we use a SavingCallback with timepoints specified by the list of times you pass in. If you want to reduce that, just pass in less timepoints, e.g. T = [0.0, pi] will only store two points.
Also, make sure to interpolate global variables when benchmarking to avoid measuring false allocations, e.g. @benchmark timeevolution.schroedinger($T, $Ψ0, $H)
Dear @david-pl , thanks for your helpful reply,
I tried to benchmark again with your tip.
Alloc is still high. Notice that I run it on another machine.
Should we reopen the issue?
Checked the mul!() of LazyProduct
The high alloc is resulted from tmp1 and tmp2.
