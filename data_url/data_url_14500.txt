When CircuitSampler is used sample circuits (gradient circuits in my case) and circuit parameters are lists, e.g. a single parameter has a list of values the output has unexpected shape. This problem initially arose in machine learning where batch gradient computations are required.
@Cryoris This is for your attention, please :)
I have a simple circuit with two parameters p and w as a toy example. Just to be in the context of the problem, in my case p is a feature and w is a weight in QNNs. In real life these are vectors, but here scalar parameters are good enough.
Then, I have a list of values for p and I want to compute gradient wrt to p for all values of p. This list is a list of samples in a dataset. In real setup, for each value of p I have the same value for w, but in the example I have different values for w, just to have different outputs.
Here is a setup:
I have two versions: a batched version and a row by row one.
In the batched version  grad_param is a circuit parameter to compute gradient wrt. grad_param_values is a dict of values for grad_param. other_values contains values for other parameters in the circuit. For the example above I want a gradient wrt p for a pair of values of {p: 1, w: 4} and {p: 4, w: 4.56} only as I have only 2 samples in my toy dataset.
In the row by row version I compute gradient for one set of parameters in one go. This leads to a large number of jobs, that's why this is inefficient. grad_param is the same, a circuit parameter to compute gradient wrt. param_values contains p + w parameter values as a dict.
The output of the batched version:
There are more number than I expect to see. Looks like CircuitSampler samples circuits for a cross product of the parameters and this is unexpected. I suspect it is a bug.
The output of the row by row version:
This is correct.
The batched version as outlined above should produce the same results as the row by row version.
No response
