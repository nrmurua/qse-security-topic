This function is very convenient.
QCircuit qpp::qasm::read_from_file(const std::string& fname)
Intuitively, however, one would expect its counterpart function -- something like this:
void qpp::qasm::write_to_file(const std::string& fname, QCircuit qc) 
or
std::string QCircuit::to_QASM()
After all, it has already got a to_JSON(). Translation from JSON to QASM looks easy, but it is not trivial to get it done thoroughly. Would you please take the issue into consideration in the future releases?
One of my use cases is to have a distributed graphical interface to edit and test many QCircuit objects and save them to a QASM file when the testing is done. Then, I could run the QASM file in a physical quantum computer such as the IBM Q Experience.
As long as I can get the QASM, I can use this tool to translate it to pyQuil and run it on Rigetti Quantum Cloud too.
Thanks for the feedback, I thought about this as well. The main issue is that QCircuit can do much more than QASM (e.g., higher dimensional systems (qudits), classical-quantum controls, shifted controls etc.) For this reason it's easy to do QASM -> QCircuit, but the other way around has a lot of particular cases and will make the whole implementation process tedious, as there is no 1-to-1 mapping between the two. Moreover, I don't intend to have QCircuit as a "universal language", but only use it inside the simulator.
When I get a large chunk of free time :) I'll think about implementing it
That sounds reasonable. Thanks.
