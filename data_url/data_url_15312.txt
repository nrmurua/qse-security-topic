Appending an operation to a circuit fails if the qubits aren't already contained in the circuit. This makes circuit construction needlessly complicated because it forces the user to always add qubits before operating on them, when in principle these could be done in a single step. I propose that instead, the qubits should automatically be added to the circuit.
I'm opposed to modifying append on the grounds of error checking: I think with the append interface, it's generally indicative of a programmer error to do this.  For example, if the circuit has 4 bits, and somebody does qc.append(HGate(), [10], []), should we silently expand the circuit (which may make it invalid for their hardware), and if so, to 11 bits or to 5 bits that aren't sequentially indexed?
I do think the concept is very useful (and something very similar is done in the control-flow builder interfaces), I'd just rather we instituted it as part of a higher-level construction API, rather than raising the low-level APIs up to a "medium" level, in order to maintain better separation of concerns through the execution stack.
edit: we do have plans for such an interface (I don't mean to sound like I'm dismissing this with "would that it were"), especially as more and more dynamic-circuits capabilities are added, it's just a secondary priority after the initial implementation of other new features.
For example, if the circuit has 4 bits, and somebody does qc.append(HGate(), [10], []), should we silently expand the circuit (which may make it invalid for their hardware), and if so, to 11 bits or to 5 bits that aren't sequentially indexed?
I hadn't thought about the case of passing integers instead of Qubits. In my opinion, that ideally would not even be allowed. If it must be allowed, I would say that your example should only add one qubit. As for the hardware mapping, typically hardware mapping is done at a later stage after the abstract circuit has been constructed, so I disagree that the behavior I advocate indicates a programmer error.
I think the intended use-case for this gained its own constructor in #9006, so I'll close this issue now as "not planned", since we don't have any plans to change the append interface itself.
