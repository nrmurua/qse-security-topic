The code
incorrectly yields
(the correct behavior, if we want to allow such expressions, is to yield Y(a)). Indeed, the code will yield -X(a) no matter what the Z exponent is:
always yields
The exponent is being ignored. The issue has to do with type(cirq.Z(q)**theta) being cirq.ops.pauli_string.SingleQubitPauliStringGateOperation, when maybe it shouldn't.
Oh I didn't even notice this when I wrote that :(
The bug seems to be in line 108 of pauli_string.py:
since phased_pauli_product does not take exponents into account. This leads to the question of whether we should allow PauliStrings to be initialized with exponentiated Paulis, since this leads to the related buggy behavior
returning
The first issue above is caused by the fact that raising a cirq.Pauli (such as cirq.X) to a power (fractional or not) returns another instance of cirq.Pauli. In turn, cirq.Pauli.on() produces a cirq.SingleQubitPauliStringGateOperation. The latter pretends that multiplication is supported, but in fact implements an algorithm for Pauli strings only.
The fix is to ensure that raising cirq.Pauli returns a respective ?PowGate (for ?=X, Y, Z). This will raise an exception which is appropriate given that the underlying algorithm doesn't support non-Pauli gates.
The second issue where cirq.PauliString accepts a dictionary with non-Pauli values is a straightforward case of argument validation.
Will send a fix.
