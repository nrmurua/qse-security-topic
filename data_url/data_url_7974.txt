I used qutip to do the evolution of a Time-dependent Hamiltonian on a three-ion system, calling the package mesolve. I found something strange, the same Hamiltonian gives different results when I write the coefficient O[N-1-j][n] in a python function or in qobj , respectively. can anyone explain this? is it related to mesolve's feature?
Here are the two codes, which differ only in the position of O[N-1-j][n].
In the python function:
`H_globallight=[]
def parameter_carrer3(t, args):
parameter = 0
for i in range(num_tones):
parameter += r[i] * np.cos(w[i] * t + phi)
return parameter  * J
for j in range(N):
oper_list2 = [identity(numberofphon) for k in range(N)]
oper_list2[j] = a
oper_list3 = [identity(numberofphon) for k in range(N)]
oper_list3[j] = adag
oper_list4 = [identity(numberofphon) for k in range(N)]
for n in range(N):
def parameter_jn1(t, args):
parameter = 0
for i in range(num_tones):
parameter += r[i] * np.sin(w[i] * t + phi)
return parameter * eta[j] * np.exp(-1j * v[j] * t) * J* O[N-1-j][n]
def parameter_jn2(t, args):
parameter = 0
for i in range(num_tones):
parameter += r[i] * np.sin(w[i] * t + phi)
return parameter * eta[j] * np.exp(1j * v[j] * t)* J* O[N-1-j][n]
oper_list1 = [identity(2) for k in range(N)]
oper_list1[n] = sx
H_globallight.append([tensor(oper_list2+oper_list1),parameter_jn1])
H_globallight.append([tensor(oper_list3+oper_list1),parameter_jn2])
oper_list1 = [identity(2) for k in range(N)]
oper_list1[j] = sx
H_globallight.append([tensor(oper_list4 + oper_list1), parameter_carrer3])
`
In the qobj:
`H_globallight=[]
def parameter_carrer3(t, args):
parameter = 0
for i in range(num_tones):
parameter += r[i] * np.cos(w[i] * t + phi)
return parameter  * J
for j in range(N):
oper_list2 = [identity(numberofphon) for k in range(N)]
oper_list2[j] = a
oper_list3 = [identity(numberofphon) for k in range(N)]
oper_list3[j] = adag
oper_list4 = [identity(numberofphon) for k in range(N)]
for n in range(N):
def parameter_jn1(t, args):
parameter = 0
for i in range(num_tones):
parameter += r[i] * np.sin(w[i] * t + phi)
return parameter * eta[j] * np.exp(-1j * v[j] * t) * J
def parameter_jn2(t, args):
parameter = 0
for i in range(num_tones):
parameter += r[i] * np.sin(w[i] * t + phi)
return parameter * eta[j] * np.exp(1j * v[j] * t)* J
oper_list1 = [identity(2) for k in range(N)]
oper_list1[n] = sx * O[N-1-j][n]
H_globallight.append([tensor(oper_list2+oper_list1),parameter_jn1])
H_globallight.append([tensor(oper_list3+oper_list1),parameter_jn2])
oper_list1 = [identity(2) for k in range(N)]
oper_list1[j] = sx
H_globallight.append([tensor(oper_list4 + oper_list1), parameter_carrer3])
`
The issue is when the O[N-1-j][n] is evaluated. In the second case, it is evaluated when the object is created, but the first case, it is evaluated when the function is used, using the latest n and j.
If you did n=None between creating H_globallight and calling mesolve, the first case will raise an error, but the second will work.
Since this is an issue with python, not qutip, I will close the issue.
