When using the transpile function, different gates get transpiled into Instructions with different parameter types. I am not sure if this is a bug or intended.
Some gates, such as Hadamard gate, transpile into an instruction with float as parameter.
Others, for example the S gate, transpile into an instruction with ParameterExpression as parameter.
Both Hadamard and S gates should transpile into instructions of same type, preferably float.
No response
In theory, ParameterExpression that contains only floats should behave purely as a float.  Unfortunately, we know that's not always the case (which is where the bug, if any here, lies).  The reason it sometimes appears is to do with how the basis translation is done - if the path through the graph defined by the EquivalenceLibrary only goes through non-parametrized gates until the end it will never involve ParameterExpression, but if it does, it will.
In this case, the path for h is directly "h -> [ry, rx]", which never uses ParameterExpression, but the path for s is "s -> u1 -> u3 -> [rz, sx] -> [...] -> [ry, rx]", and the conversion rules for u1 and u3 both use general ParameterExpressions.
In general, if you need things to be float, you can just call float on all the parameters and the ParameterExpression bit will disappear.  I thought we had an open issue about it, but #6812 is the closest I could quickly find, which isn't exactly the same.
(Also: hello from the other side!)
Hey @jakelishman! Thanks for your answer, I now have a better idea of what happens here. Our issues comes specifically from not being able to compare a ParameterExpression to a float. I could try to take a look and implement it if you think it makes sense.
