In reading through the specification today, some items stood out as benefiting from clarification or editing. Sharing here.
Separately, is the intention of this specification to introduce "program qubits" as a standard terminology into the circuit compilation lexicon? If so, then it's all the more important to call it out explicitly.
The page introduces the idea of "quantum instruction" without definition. The Built in quantum instructions page also doesn't really define them. Would there be a straightforward explanation that could be added?
The example for a CX gate uses \oplus, not \otimes. Is that intentional? Separately, this example also introduces a different bit ordering than is commonly used; it should be called out more clearly.
It's unclear to me why the example below (taken from the page) is the case. In particular, it seems qr0 is a 1-qubit register, while qr2 and qr3 are 2-qubit, and qr2 is 3-qubit. So wouldn't both applications of g be incorrect?
and
Finally, there isn't a page talking about the compilation of OpenQASM 3.0 programs. Given the fact the specification calls out program vs. physical qubits, having some kind of documentation explaining how the compilation happens would be helpful.
Thank you for your feedback @Travis-S-IBM. I agree with much of the clarity highlights, would it be to much to ask you to clone and fix these to be more clear? We accept all contributions ðŸ˜„ . Below I've included some more specific responses.
The example for a CX gate uses \oplus, not \otimes. Is that intentional? Separately, this example also introduces a different bit ordering than is commonly used; it should be called out more clearly.
This is an error.
The declaration of the classical bits in the example below is incorrect, no? Shouldn't it be bits bit[10]?
No, this is currently c-style syntax for declaration. However, there is inconsistent usage of this, see #117.
In the example below, the loop goes over every even integer, no?
No, it goes in intervals of 2.
A couple of times on this page, constants are defined without assigning them values. Is that permissible?
This for example only. It is not executable. If you have ideas how to rewrite these to be valid we would appreciate updates.
This page doesn't make clear whether a defcal of a given gate can itself be parameterized. I should think this would be a common use case (for example, tuning up gates). Is that use case covered by the specification? If so, an example would bbe nice.
The defcal receives the same parameters of the gate and is free to use them to tune up the gate, eg., by defining a gate rabi(amp). Otherwise, such parameters should be in an outerloop of OpenQasm executions.
@taalexander Ok. Will do.
One small point: this index set ([0:2:20]) should output 0, 2, 4, 6, ..., 18 -- correct? If so, then that is every even number from 2 to 18, plus 0.
Thank you ðŸ˜Š.
One small point: this index set ([0:2:20]) should output 0, 2, 4, 6, ..., 18 -- correct? If so, then that is every even number from 2 to 18, plus 0.
Yes, it is zero inclusive. My apologies, in your initial comment my eyes missed the word "even".
@Travis-S this issue appears to be stale--can we close it and then open specific issues if any particular concerns need to be addressed?
Yes
