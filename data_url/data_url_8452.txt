Hi,
I was writing a simple code for a time dependent driving of a two level atom with the excited state decay and encountered the following problem: If I evolve the system using mesolve for particular time dependence of my driving field, namely if the evolution time is set to be from t = 0 to t = 3.5 in the units of 1/(Rabi frequency) and the driving is only present between t = pi/2 and t = pi, I get expected results if I do not include any collapse operators (using []), however as soon as I use the usual collapse operator corresponding to the excited state decay it gives me for all the time the initial values of the quantities. It happens even if I set the decay rate to zero! Also, mcsolve works fine in both cases.
Here is the code that I use:
And here is the information about the packages that I'm using
Another funny fact that I noticed is that changing the elif condition to t >= 1.4 gives nice results but changing it to t >= 1.5 will again deliver only the initial values.
My guess is it is a side effect of using the step function time-dependence.  Instead, try a tanh, or other continuous and differentiable approximation, and see if that works.
That was my first thought as well and it worked for the above example. However, it seems that this issue somehow depends on the dimensionality of the system, since what I actually need is a system of two three level atoms which can be driven independently. So if I modify the code to
I again get only the initial values. With that being said, the same time dependence function works fine for two two level atoms. So it's still puzzling to me. And again if I put [] for the c_ops it works! After looking into mesolve source code I noticed that in that case other solver function is used sesolve, which uses the states without converting them to density matrices and hence has lower dimensionality.
Did you try decreasing Gamma?
Yes! I played with Gamma as well as with the number of time steps. Nothing helped. As I already mentioned in the previous post even setting Gamma to zero doesn't help. What I noticed though if I change the factor within the tanh function from 100 to 90 it works again. It's really weird, since it worked with factor 100 in the case of two two level atoms but not for two three level atoms even after increasing the number of time steps by a factor of 20. I really don't know what's going on.
After setting atol=1e-9 it works now for 500 time steps. But increasing the number of time steps to 550 causes the program to fail again. It also doesn't help to decrease atol further, I went up to 1e-15, neither does decreasing the relative tolerance rtol. Shouldn't actually increasing the number of time steps improve the precision? Also, why does it depend on the dimension of the dm? I'm just curious now.
There is also an rtol value to play with.  However, when the pulse is off, your Hamiltonian is a zero operator.  Shouldn't you have the bare terms that give the energies of your states?
As mentioned in the previous post I also played with rtol value, but it didn't help. Concerning your question, yes when the pulse is off, I have a zero Hamiltonian and the system stays in the initial state, which is fine, the weird thing however is that apparently the system stays in the initial state even when the pulse is on. Basically, I get as a result that the system stays in the initial state for all times. Did you try to run the code on your machine? Maybe it's the issue of my packages configuration?
I have not run the latest incarnation of your code.  However, I am pretty sure it is not a QuTiP issue, but something to do with your implementation.  Again, the use of a zero Hamiltonian is suspect.  It also doesn't make sense with the rest of your code where you assume ground, excited, and an 's' state, but your Hamiltonian is degenerate.  Since you are free to add a constant to any Hamiltonian, I would at least not use a zero operator.
Adding a constant Hamiltonian did also not help. In my most recent code I even removed all the atomic states degeneracies and it still won't work. I post my code below. Could you run it on your machine and let me know, whether you get more than constant lines as an output.
Again changing the number of time steps in tspan to 500 gives the right result.
I do not have much time to look into this until Monday.  However, attached is a time-dependent three-level system, driven by a cavity , that works just fine.  Maybe some clues can be found there.
Thanks. It's not that urgent. I'm just curious what the reason for that behavior might be. It's puzzling
why does it apparently depend on the dimensions of dm as well as on the number of time steps.
I am thinking that it could be that the solver is stepping over your pulse.  Try setting the max_step parameter in options to something a fraction of the pulse width.
Your suspicion turned out to be right and setting the max_step parameter as you suggested solved the problem. Now it even works with a step pulse. Thank you for helping me and for all your effort!
