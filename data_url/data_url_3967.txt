It is currently possible to specify certain hardware constraints in the config files. It is unclear how these are interpreted and taken into account. It is quite important to understand how these affect scheduling. This should be documented.
Apart from proper documentation, it is proposed to add descriptions of the hardware constraints into the .json config files. The following excerpt describes the topology and constraints for s7 cclight. Please note that scheduler support for the detuned_qubits constraint is new and not yet available in the master branch.
"topology" :
{
"description": "A qubit grid is rectangular. The coordinates in the X direction are 0 to x_size-1. In the Y direction they are 0 to y_size-1. In the grid real qubits are placed. Each qubit has an id (its index, used below in the resource descriptions, and used further below as operands to gates), an x and a y coordinate. Qubits are connected in directed pairs, called edges. Each edge has an id (its index, used below in the resource descriptions), a source qubit and a destination qubit.",
"x_size": 5,
"y_size": 3,
"qubits":
[
{ "id": 0,  "x": 1, "y": 2 },
{ "id": 1,  "x": 3, "y": 2 },
{ "id": 2,  "x": 0, "y": 1 },
{ "id": 3,  "x": 2, "y": 1 },
{ "id": 4,  "x": 4, "y": 1 },
{ "id": 5,  "x": 1, "y": 0 },
{ "id": 6,  "x": 3, "y": 0 }
],
"edges":
[
{ "id": 0,  "src": 2, "dst": 0 },
{ "id": 1,  "src": 0, "dst": 3 },
{ "id": 2,  "src": 3, "dst": 1 },
{ "id": 3,  "src": 1, "dst": 4 },
{ "id": 4,  "src": 2, "dst": 5 },
{ "id": 5,  "src": 5, "dst": 3 },
{ "id": 6,  "src": 3, "dst": 6 },
{ "id": 7,  "src": 6, "dst": 4 },
{ "id": 8,  "src": 0, "dst": 2 },
{ "id": 9,  "src": 3, "dst": 0 },
{ "id": 10,  "src": 1, "dst": 3 },
{ "id": 11,  "src": 4, "dst": 1 },
{ "id": 12,  "src": 5, "dst": 2 },
{ "id": 13,  "src": 3, "dst": 5 },
{ "id": 14,  "src": 6, "dst": 3 },
{ "id": 15,  "src": 4, "dst": 6 }
},
"resources":
{
"qubits":
{
"description": "Each qubit can be used by only one gate at a time. There are 'count' qubits.",
"count": 7
},
"qwgs" :
{
"description": "Single-qubit rotation gates (instructions of 'mw' type) are controlled by qwgs.  Each qwg controls a private set of qubits.  A qwg can control multiple qubits at the same time, but only when they perform the same gate and started at the same time. There are 'count' qwgs. For each qwg it is described which set of qubits it controls.",
"count": 3,
"connection_map":
{
"0" : [0, 1],
"1" : [2, 3, 4],
"2" : [5, 6]
}
},
"meas_units" :
{
"description": "Single-qubit measurements (instructions of 'readout' type) are controlled by measurement units.  Each one controls a private set of qubits.  A measurement unit can control multiple qubits at the same time, but only when they started at the same time. There are 'count' measurement units. For each measurement unit it is described which set of qubits it controls.",
"count": 2,
"connection_map":
{
"0" : [0, 2, 3, 5, 6],
"1" : [1, 4]
}
},
"edges":
{
"description": "Two-qubit flux gates (instructions of 'flux' type) are controlled by qubit-selective frequency detuning.  Frequency-detuning may cause neighbor qubits (qubits connected by an edge) to inadvertently engage in a two-qubit flux gate as well. This happens when two connected qubits are both executing a two-qubit flux gate. Therefore, for each edge executing a two-qubit gate, certain other edges should not execute a two-qubit gate. There are 'count' edges. For each edge it is described which set of other edges cannot execute a two-qubit gate in parallel.",
"count": 16,
"connection_map":
{
"0": [2, 10],
"1": [3, 11],
"2": [0, 8],
"3": [1, 9],
"4": [6, 14],
"5": [7, 15],
"6": [4, 12],
"7": [5, 13],
"8": [2, 10],
"9": [3, 11],
"10": [0, 8],
"11": [1, 9],
"12": [6, 14],
"13": [7, 15],
"14": [4, 12],
"15": [5, 13]
}
},
"detuned_qubits":
{
"description": "A two-qubit flux gate lowers the frequency of its source qubit to get near the frequency of its target qubit.  Any two qubits which have near frequencies execute a two-qubit flux gate.  To prevent any neighbor qubit of the source qubit that has the same frequency as the target qubit to interact as well, those neighbors must have their frequency detuned (lowered out of the way).  A detuned qubit cannot execute a single-qubit rotation (an instruction of 'mw' type).  An edge is a pair of qubits which can execute a two-qubit flux gate.  There are 'count' qubits. For each edge it is described, when executing a two-qubit gate for it, which set of qubits it detunes.",
"count": 7,
"connection_map":
{
"0": [3],
"1": [2],
"2": [4],
"3": [3],
"4": [],
"5": [6],
"6": [5],
"7": [],
"8": [3],
"9": [2],
"10": [4],
"11": [3],
"12": [],
"13": [6],
"14": [5],
"15": []
}
}
},
@jvansomeren , I think this description does not belong in the config file but rather in the documentation or the definition of such a configuration file. The reason is that it is possible to change this description or omit it (in the case of code generated configs like we use) and it introduces a plethora of DRY related problems, especially if the textual description is not actually being used by the code.
I think a larger discussion is needed to make these descriptions (and implementations) are completely accurate and correct. For the record, I think what is written above is mostly correct but I wan't to make sure there is no misunderstanding about some details.
Except that I don't understand what "a plethora of DRY related problems" means, I basicly agree with @AdriaanRol .
The discussion about the content of the configuration file is about the details. It is the discussion. However, we should have the meta-discussion at first to clarify, e.g.:
After we have all this in mind, we can then define the exact content/format of this configuration file.
Except that I don't understand what "a plethora of DRY related problems" means, I basicly agree with
Fair point, for the sake of the discussion, let me clarify. DRY (as you most likely know) stands for Don't Repeat Yourself. The (DRY) problem introduced by putting this information in the config file is that it is possible to have an inconsistency because this information is specified at multiple places. Once on the compiler side, implicitly, in how it interprets the data and once in the config file, where it is ignored.
In my opinion, the documentation belongs here until it has been properly documented elsewhere.
The intention of my comment that showed the .json file for cclight s7 with all resource constraints that define the cclight resource constrained scheduler for s7 was to solicit for comment on its content.
So please read it and check the topology and collection of constraints especially for completeness: i.e. these are all constraints that define whether two gates can be executed in parallel (in parallel means here: of which the execution may overlap in time, i.e. at any point in time any pair of gates in the collection of gates/measurements that is executing, should match those constraints).
The effect of this is that the resource constrained scheduler will take care that during execution of the code that it generates those constraints are obeyed.
In my opinion this documentation should be part of the existing configuration file documentation available in doc/configuration_specification.md. This will avoid duplication. The worst case of this will be that it will be part of all the configuration files and if we have to update this documentation, we will have to update each config file, which is cumbersome and error prone.
I believe @wvlothuizen comment on issue #274 (regarding CCL hardware configuration) should be taken into account here as well since it pertains to how the configuration file should be structured not only for CCL but in general. The comment also presents several good examples of things that should be restructured in this file, to make it more readable and clear.
I quote the original post:
file 'doc/configuration_specification_cc.md' contains CC specifics on configuration, but also comments on the generic part of OpenQL specifications that I learned when working on the source, e.g. parameters that occur in many JSON files but are not actually implemented.
In addition to documenting what's there, I would also like to make a case for restructuring the JSON file in a way that clarifies which parts are used by which feature, and makes unused parts optional.
As an example, keys 'resources' and 'topology' are both used by the resource constrained scheduler only, but still need to be present if that is not used. As a second example, a 'matrix' must always be provided, event though it is only used in particular cases (never in DiCarlo lab), also see #123
IMHO we should deal with restructuring separately and not here. First step is to document what is there. then comes the discussion separte issue/PR dealing with making things optional.
