Description
I see chain_break_fraction defined as vectors['chain_break_fraction'] = broken_chains(target_sampleset, chains).mean(axis=1)[idxs] where broken_chains is an array of T/F, so my expectation is that if a sample has n chains that chain_break_fraction can have values of [i/n for i in range(n+1)].
In the example below I have 5 chains, so I'd understand values [0.0, 0.2, 0.4, 0.6, 0.8, 1.0] , but where does 0.09090909 come from?
To Reproduce
Expected behavior
values [0.0, 0.2, 0.4, 0.6, 0.8, 1.0] or a clearer explanation of chain_break_fraction.
Environment:
Additional context
Add any other context about the problem here.
Cycling home I realized that 0.09090909 comes from the broken_chains() treating single qubits as chains, so the calculation should have been [i/num_vars for i in range(num_vars+1)], and in this case 1/11.
I'm not sure this is the best approach. If I have 8 single-qubit variables and two chains, one broken, my response to 0.1 will be different in terms of say pumping up chain_strength amplitude versus 0.5.
