When you assign qubit measurements to variables (auto r0 = mz(qubits[0])) and compiled with --emulate (and subsequently run your program), the compiler generates additional registerName attributes in the MLIR. These additional attributes seem to be causing downstream issues primarily because user code often expects to find results answers in a __global__ register. I think the compiler should still populate the __global__ register even when the user saves the results into variables in the __qpu__ kernels.
Normally one can run the sudoku_2x2 test program like this:
But if you modify the sudoku_2x2.cpp program as follows, recompile, and re-run, the program will segfault.
Note that this program will produce nearly identical LLVM IR as the original program. However, if you compile and re-run, here are the results.
The program should not segfault, and ideally the program behavior should be identical, especially since the generated LLVM IR is nearly identical.
Not a regression
I think the __global__ register should be synthesized from the measurements regardless of whether or not the individual measurements were saved into variables in the QPU kernel. I will submit a PR with a suggested solution.
