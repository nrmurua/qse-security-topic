Is your feature request related to a use case or problem? Please describe.
The recently added run_calibrations on cirq.google.Engine is forcing the use the cirq.google.Engine itself when using the characterization and calibration features. This is especially problematic during simulations since Engine is not an interface but a class that handles connections to Google hardware. This causes problem for example while working with cirq.google.calibration.PhasedFSimEngineSimulator since it can't be easily substituted for Engine. There are already methods which takes both Engine or PhasedFSimEngineSimulator and choose different code paths to simulate  run_calibrations.
Describe the solution you'd like
Introduce a cirq.Sampler-like abstraction that allows for easy use of calibrations framework and seamless switching between real Engine and simulation.
What is the urgency from your perspective for this issue? Is it blocking important work?
P2/P3
We can wait and see how the new calibration API is used before moving forward with this issue.
I would suggest to start with this interface living in cirq.google - as such this wouldn't be cirq.* level, like the Sampler API.
I believe that this calibration model might be useful across hardware vendors - however we need more evidence for that before building a cross platform API, also we can have a conversation about that with our vendors. If we have enough evidence, we can still "upstream" this interface back to the cirq.* level.
@dstrain115 points out that this should mock out Engine, not just specifically calibration api
This has been completed as part of the AbstractEngine interface.  See
https://github.com/quantumlib/Cirq/blob/master/cirq-google/cirq_google/engine/abstract_engine.py
