This is meant to be kind of a meta-issue describing the set of issues that need to be resolved w.r.t. types in QASM3.
typed variables in gates and defs
At some point we already removed the type identifiers from gates, arguing that the compiler did not need this information to satisfy the need of having a mathematical representation of the meaning of gate. Meanwhile, we have kept them for defs. I would argue that the latter is important for consistency with kernel and defcal declarations. @ndebeaudrap, meanwhile, argued for dropping the types for def in his write-up attached to issue Backwards compatibility with OpenQASM2 #130.
order of type and variable identifier
See issue Drop the colon in subroutine and defcals #117.
array types
e.g. qreg q[4] vs qubit[4] q vs qubit[4] q[10]
or bit[4] a vs bit a[4]. This latter example relates to some of the discussion in @ndebeaudrap's write up where he suggested making creq q[4] and bit[4] synonyms for each other.
typed constants
The issues raised by @steleman in #130 regarding conversions between different real-valued types (even between, say, angle[16] and angle[8]) may also need to be addressed. It seems to me that those remarks apply whether or not there is 'implicit' conversions, as they touch on the question of whether or not there is a well-considered (as opposed to just well-defined) way to go about doing any sort of typecasting between these types.
Regarding 3: bit[4] a vs bit a[4]
In #130, necessity of "return type" in subroutine def is discussed. I believe that a subroutine can return an array. If we keep "return type" and this "return type" includes its size, return type for array will be -> bit[4].
This is a good point @hhorii. If we use type[BITS] id[ARRAY_SIZE], how do we denoted return types w/ ->. We could do -> type[BITS][ARRAY_SIZE], where the latter entry is implicit.
Also, why would we allow BITS for qubit/qreg/bit/creg. It seems like they should always have a single bit.
Then how about an explicit array type? e.g. array[bit[BITS], ARRAY_SIZE] a
That could work, although if this language should be C-like, we could define standard bit lengths for the main types and then use the simple array syntax type name[SIZE]. I am not as familiar with the importance of defining precision lengths for different types, so maybe that can't be done without.
Or we could have default sizes and include a more explicit syntax such as the above in the cases where precise bit lengths are required.
It is only “C like” in that white space doesn’t matter and statements end with a semicolon. Nothing else from C needs to be carried over.
At some point we already removed the type identifiers from gates, arguing that the compiler did not need this information to satisfy the need of having a mathematical representation of the meaning of gate.
Will gates take any types of parameters other than angles?
array[bit[BITS], ARRAY_SIZE] a
I like it - also makes it clear which you're indexing into first (ie. the outer array)
Can we use an array for an indexset of loop? Also, can we initialize elements of an array in its declaration?
Can we use an array for an indexset of loop? Also, can we initialize elements of an array in its declaration?
I think this makes sense, but probably should be addressed when arrays are formally added to the language.
