The improved_sampling option was recently added to mcsolve. It might also be useful to have in nm_mcsolve, but adaptations to the code are required to make it work. Currently, we have disabled this option for the NonMarkovianMCSolver, see PR 2234.
Since NonMarkovianMCSolver inherits from MCSolver, one might expect this option to work "out of the box". The technical reason why it does not is that nm_mcsolve calculates the value of an influence martingale, which is factored into the calculation of expectation values in the custom result class NmmcResult. If improved_sampling is enabled, the result class McResultImprovedSampling is used instead, which is not aware of the martingale.
Both the improved sampling algorithm and nm_mcsolve give trajectories a weight. In the former case, the weight is related to the probability of the trajectory without jumps; in the latter case it is the influence martingale. I imagine it might be useful to give McResult itself the capability to handle weighted trajectories.
This capability would be useful for one additional purpose: if we want to allow mixed initial conditions for mcsolve in the future. In this case, the trajectories would need to be weighted with a correction factor, because the fraction $f_i$ of trajectories starting in a state $i$ will generally not be equal to the corresponding eigenvalue $p_i$ of the density matrix $\rho = \sum p_i |i \rangle\langle i|$. (Hence, the correction factor would be $p_i / f_i$.)
If people think this would be useful (including the mixed initial states), I will try to implement this proposal once I can find some time to do so.
Alternatively, we could leave things as they are now and not support the improved sampling for nm_mcsolve. Another less invasive option would be copying the improved sampling algorithm to nm_mcsolve (adding a NmmcResultImprovedSampling class).
