In the context of calibration we often write a template circuit, and then attach pulse gate to it.
This looks bit awkward because circ indicates the logical circuit but attached schedule references to the physical qubit index (index '3' doesn't exist in circ_q3). Transpiler should check mapping of logical-physical index in .calibrations so that we can also write pulse gate in the context of logical circuit.
Side-effect:
This is of course breaking change and there is no way to upgrade properly. Also this can break mapping of qubit index to schedule. To address this issue correctly, we need reverse mapping of schedule channels to qubits, and schedule should know associated qubits.
So this kind of validation may be necessary.
I don't have any opinions on this change, but just to say: you can do this sort of behavioural change safely within the deprecation policy, it just takes quite a long time.  The gist is that we add a keyword argument to choose the behaviour to all relevant function, and global option (to make it easier), make people select the new behaviour, then change the default, then remove the argument again.
That's a super long process, but in every single release there's a way to write library code that supports the current and previous releases without raising any warnings, and has the same behaviour.  This is the ideal situation, though in reality we if you think that downstream libraries won't be using it, you don't necessarily need to take so much care - individual users generally only need code to work with one version at a time, so the warnings are fine.
(It's so long just because it's changing the semantics of a call.  Removing or renaming functionality is much much easier than changing functionality.)
Thanks @jakelishman that sounds reasonable migration plan. Indeed adding logical_indices flag is good first step (I feel current Qiskit is too much agnostic to physical/logical index). I'm not sure if I do this by myself but I feel this will become important because in the long run this change might allows us to cache template calibration programs as compact binary data and later loading for daily execution:
In calibrator
Currently we cannot write like this because we need to create circuit instance for different pulse program due to physical index based mapping.
