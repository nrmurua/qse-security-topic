Using testnet with v0.2.0.
Calling qrl_pb2.GetBlockByNumberReq() for 12703, in the list of transactions, I cannot determine the from-address for transaction 05f0859e14cd10357661e92d7c3d5a358c04bb0155af0daf47620db6eef65136.
If I call qrl_pb2.GetTransactionReq() for this transaction, I also cannot determine the from-address.
The block explorer does display the from address so I feel like I am doing something wrong?
The odd part is that the to-address is a multisig address.  Seems like non-multisig transactions will have a from-address or master-address populated.  Not sure if I am using old API or misinterpreting the results.
Here is my output:
$ ./qrl-query.py 12703
INFO:root:Connected to 127.0.0.1:19009
INFO:root:Query of block number detected
INFO:root::{
"block": {
"genesis_balance": [],
"header": {
"block_number": "12703",
"extra_nonce": "15176262144",
"hash_header": "ia/8mbyDaQYF81i89zxoXhZDm6ZiRtOx809CosMAAAA=",
"hash_header_prev": "6yxC+ym5DdyRqFcw3kk58LUUFY40eAxPMCHF0w8EAAA=",
"merkle_root": "YAhKt2b2qDF17t/3CLyfDgCGtX1Qz00p+GwRN+wClfI=",
"mining_nonce": 1356663296,
"reward_block": "6642294635",
"reward_fee": "1000000",
"timestamp_seconds": "1583710173"
},
"transactions": [
{
"coinbase": {
"addr_to": "AQYAxhDiJBN6W+at3VgtlX4XU/e+BAK9YZ6wN3ra4P4Y4kcesk8o",
"amount": "6643294635"
},
"fee": "0",
"master_addr": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
"nonce": "12704",
"public_key": "",
"signature": "",
"transaction_hash": "dVBPqk33OUSUhwDWZDwsF/vP2hZeJW3sHch+O67VHjE="
},
{
"fee": "1000000",
"master_addr": "",
"nonce": "2",
"public_key": "AQUAr+2YPRCCH9g8pnIIo/Lgp19TpW7aBJyX5ZNdVqkg9r/wENoGBFl1wry6Yi50DXGqIbnSOevFCiN6KYKhIFzEVA==",
"signature": "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",
"transaction_hash": "BfCFnhTNEDV2YektfD1aNYwEuwFVrw2vR2INtu72UTY=",
"transfer": {
"addrs_to": [
"EQAAXozQ2cU9J/FKTBP0mMIwYfd0j8yOfxrQoB05fIt4oBhwux7H"
],
"amounts": [
"200000000000"
],
"message_data": ""
}
}
]
}
}
$ ./qrl-query.py 05f0859e14cd10357661e92d7c3d5a358c04bb0155af0daf47620db6eef65136
INFO:root:Connected to 127.0.0.1:19009
INFO:root:Query of tx detected
INFO:root::{
"addr_from": "",
"block_header_hash": "ia/8mbyDaQYF81i89zxoXhZDm6ZiRtOx809CosMAAAA=",
"block_number": "12703",
"confirmations": "15031",
"timestamp": "0",
"tx": {
"fee": "1000000",
"master_addr": "",
"nonce": "2",
"public_key": "AQUAr+2YPRCCH9g8pnIIo/Lgp19TpW7aBJyX5ZNdVqkg9r/wENoGBFl1wry6Yi50DXGqIbnSOevFCiN6KYKhIFzEVA==",
"signature": "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",
"transaction_hash": "BfCFnhTNEDV2YektfD1aNYwEuwFVrw2vR2INtu72UTY=",
"transfer": {
"addrs_to": [
"EQAAXozQ2cU9J/FKTBP0mMIwYfd0j8yOfxrQoB05fIt4oBhwux7H"
],
"amounts": [
"200000000000"
],
"message_data": ""
}
}
}
The addr_from is not provided by the API, neither the field addr_from exists in the QRL transaction. addr_from is derived from the public_key if master_addr is empty.
If master_addr exists then addr_from is the master_addr and the address derived from the public_key is the address that signed the transaction for master_addr due to Slave relationship.
Thanks for the explanation, I figured I was interpreting something wrong.
