Did you search the F.A.Q. First?
Yes
What is your question?
Is there a mapping of what qbits are connected? I don't remember seeing any at all and I can't tell from the circuit drawings.
At one point I had a relatively complete architecture document, that was one of the victims of the drive failure. The general architecture of this design has four qubits on either side, these are independent of one another, and then we have the gates in the middle which enable you to actually do various controlled logic on two qubits.
All of the qubits can be entangled by using the control circuitry labelled in qpio.sch to shift them into the controlled gate where the non-linearity occurs:

It works much the same way as a regular processor instruction bus, you send it commands to control the state of the circuit. so to run qasm like:
Your compiler would turn that into binary instructions like:
When I first wrote the architecture I had an excel spreadsheet that listed every possible command and the required bits to perform it, I'll see if I can't put another together for you here in the next week or so.
So like this?

(Sorry for the bad drawing)
Thus to CX q0, q5 the code would actually be something like.
`SWAP q4, q5;
SWAP q0, q3;
CX q3, q4;`
No, the actual architecture is more like this:

The qubits only interact with one another when you send them through the controlled gates. These are photons, so we have to use teleportation to entangle them. Essentially you directly shift any qubits you want into the controlled logic gate and then shift them back out to any location you want.
So let's say you wanted to do a CX of qubit 1 and 5, you would pass both of those into the controlled gates:

And then you can choose to output those into any qubit circuits you want, so if we had a vacuum state on qubits 2 and 6, we could shift the result of that operation into those circuits:

This enables us to entangle any of the qubits together we want, so in the example you shared if you wanted to do a CX between q1 and q5 with q1 as the control, you would just do that operation.
Now, if you wanted to set Q5 to the control qubit and Q1 to the target, you do have to use the SWAP gate to accomplish that, but that should be hidden behind the compilation process, so your code is still going to look like:
I guess in a way the compiler will technically add the SWAP gate to turn it into:
But all of that is tucked away in the instruction set architecture. Using qubits 1-4 as the control qubit requires you to set the instruction bus bit 40 to 0 while using qubits 5-8 as the control requires setting instruction bus bit 40 to 1.
Anyway, tldr;
The qubits exist in independent circuits and are dynamically mapped by the user code
All right, thank you. All qbits can be entangled with all other qbits.
