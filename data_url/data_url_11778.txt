Several tests do not fully test if the circuit does implement the correct gate. For example, the file test_mcg.py does check the fidelity between all the colums of the correct unitary with the outputs of the circuit for the corresponding input state. Thereby, the phases between the columns are lost (and hence, it is not checked if they are correct).
One should use the unitary_simulator from Aer and check if the output is equal to the desired unitary (up to a global phase).
in test_mct.py,
test_mct_with_dirty_ancillae already does exactly what you suggested, doesn't it?
test_mct_with_clean_ancillae was done so because its unitary is different due to its assumption of, well, clean ancillae.
for test_mcu1.py and test_mcu3.py, we probably should change to using unitary_simulator as @rabaniten suggested.
@alfrisch do you mind taking a look?
... or, feel free to contribute yourself @rabaniten :)
yes, I agree with @rabaniten that the tests for mcu1 and mcu3 should be done using unitary_simulator, mct in mode noancilla relies on mcu1 for more than 2 control qubits
multi-controlled rotations are now fully tested with unitary_simulator
The existing mcu3 implementation using the graycode pattern, does not work for arbitrary rotations, as the rotation needs to be carried out in small steps, with step size defined by the number of controls where the total rotation angle is divided by 2**num_controls. Dividing all three angles would also change the direction of rotation. This can not be implemented in a general fashion. Thus controlled arbitrary rotations along X, Y and Z axes are introduced.
But there seems to be an inconsistent definition of CU3 gate in apply_cu3 from controlled_circuit.py and the CU3 gate defined in the Qiskit documentation. The phase correction in apply_cu3 makes the CU3 be similar to U3. But the Qiskit documentation shows a CU3 different from a controlled U3 and distinguishes between controlled rotation around Z-axis CRZ and controlled phase rotation CU1 with a difference in phase by exp(\lambda/2).
with the current implementation CRZs are not possible at all, because the correction will always make a CU1 out of it.
apply_cu3 is used in controlled_circuit.py which is used in circuit_factory.py, so adding @stefan-woerner to the discussion
@alfrisch Terra had aligned the cu3 as controlled-u3 at recent commits, does the issue still exist?
Closing as Terra has updated CU3 so this no longer an issue
