Importing python_toolbox methods into qiskit_metal can result in circular dependencies since
toolbox_python.utility_functions
contains
from qiskit_metal.draw import Vector
If we move those Vector-specific functions (bad_fillet_idxs, get_range_of_vertex_to_not_fillet) into a class for Vectors outside of toolbox_python, we can then use toolbox_python.utility_functions  for all functions that are python specific but have no qiskit_metal parts.
Example: I was unable to add a get_class_from_abs_file_path to toolbox_python.utility_files to be used in both parameter_entry_window.py and 'delegate_qlibrary.py` because of the of the resulting circular import chain:
I'm suggesting that toolbox_python.utility_functions should be for functions that don't rely on qiskit_metal specific imports, meaning and toolbox_python.utility_functions functions can be used throughout qiskit_metal without fear of circular imports
If we move those Vector-specific functions (bad_fillet_idxs, get_range_of_vertex_to_not_fillet) into a class for Vectors outside of toolbox_python, we can then use toolbox_python.utility_functions  for all functions that are python specific but have no qiskit_metal parts.
We don't have any circular import issues.  They have been addressed.
