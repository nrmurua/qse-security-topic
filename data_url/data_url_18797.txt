The "reset" instruction is a special case for defcals as it must contain control flow. The paper says "Note that some instructions, such as a reset instruction implemented with measurement feedback, might require control flow. A calibration grammar should support such use cases while still guaranteeing deterministic duration of the instruction."
This is likely the only instruction that requires control flow. However, as @shiyunon points out here: #184 it makes the implementation of defcal grammars difficult, since defcals can contain control flow.
Use subroutines instead of defcals. @taalexander came up with a good idea here: #184. Essentially use subroutines, which already support conditionals since they are part of the top-level OpenQASM grammar.
In #244 there's a proposed enhancement to customize how defcals are linked to gates. There may be a desire to do the same for reset, which would be a challenge with subroutines rather than defcals. For example, maybe there is a choice between fast reset and passive reset:
Is this related to #102 ?
PMI, are these really resets?
defcal $fast_reset $0 ((implements reset $0;)) {
bit res = measure a;
if (res == 1)
x a;
}
What about the z axis?
defcal $passive_reset $0 ((implements reset $0;)) {
delay[100us] $0;
}
reset $0;
Isn't this an assumption about relaxation time that may not be true in a matter of months?
