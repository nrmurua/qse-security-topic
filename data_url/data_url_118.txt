When adding noise channels in C++, a programmer passes the gate for the channel as a cudaq::types::GATE template argument. Example:
In Python, however, we rely on strings for this gate specification
My suggestion is to create an enum, or a new types submodule, that mirrors the C++ version.
I believe this will make the interface a bit easier to follow, especially if you pass in an invalid gate. As is, an invalid gate will return the error
which is a clear error message, but doesn't give a good starting point for finding acceptable gates. You would have to refer to our kernel builder documentation to find the list of gates, and not all are allowed here.
This change would look more like this:
a) A completely invalid type
b) valid cudaq::type that we can't add noise to. This is more likely in a scenario where the types class is re-used elsewhere and has to be extended beyond just the allowed noisy gates.
