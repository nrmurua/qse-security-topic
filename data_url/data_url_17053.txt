The scheduler, as is, loses information about the circuit. Scheduling should be invertible, so we need a way to track meta data from circuits into schedules.
A set of pulse instructions alone is not mappable to a circuit as it is a one to many mapping. I believe there should be several steps and corresponding intermediate representations in a typical compilation workflow.
At a certain point, a quantum circuit must be fully decomposed into its pulse machine instructions which is the current pulse Schedule. This Schedule will then be decomposed into its transport form at assembly time. For an example of what I am describing for the Scheduling step, see the SelectionDAG of LLVM.
@lcapelluto,  @taalexander, Good points!
Theoretically, "zero data loss" in scheduler would be impossible (as like some optimization passes in transpilar can not be invertible), but I can understand what you mean by "strive for". It may be possible for naive schedulers, which do not include any optimization in scheduling.
Anyway, I agree with Thomas, we need to design a good intermediate representation for schedulers.
I think the intermediate representation for scheduling "Schedule bundle mapping" includes a DAG, which represents dependency among Schedule(Instruction)s (= gate-schedules in the main Circuit-to-Schedule stream). DAGCircuit may be too much for that, so introducing a light-weight class for just representing dependency among gate-schedules would be an option worth consideration. (Maybe I should have known SelectionDAG before implementing DependencyGraph in https://github.com/Qiskit/qiskit-terra/pull/1803/files#diff-5adcfebd13297291406a8a5e029e3045)
Closing as stale, feel free to reopen.
