If a kernel ends abnormally (force terminated, RTIO underflow etc) it can leave the Urukul in a error state, such that a subsequent init() gives an "Urukul AD9910 AUX_DAC mismatch" error. A second init after this succeeds.
I would expect the init to succeed regardless of the previous command history. I guess this may be due to the AD9910 SPI state machine being left in an odd state, and an IO_RESET may help.
An IO_RST pulse is already done on Urukul.init():

But I'd be open to adding another to the DDS init() if that handles the bad state.
@cjbe ping. What do you mean by init()?
The init() on the AD9910 class fails. My Urukul initialisation kernel does:
The error is (sometimes) thrown in one of the AD9910 channel init() calls, if the previous kernel does not end gracefully.
As I said above, self.urukul0_cpld.init() already does the IO_RESET pulse you suggest as a remedy.
Could you have a look at your core log and see whether there might be something else going on (underflow/sequence errors after the first experiment failing and with/from your initialization kernel running)?
With the below experiment (which runs for a while and then underflows) I see the error once every 5 or so runs. There is no startup or idle kernel, and there are no errors in the core log. I am using Artiq 2edf65f.
@jordens have you managed to reproduce this?
Yes. I added a workaround. The MASTER_RESET pulse leads to the AD9910 not responding every other time that experiment is run (and errors). It is related to the activity after the cpld and dds init and it is also related to the underflow error. The IO_RST pulse is benign but also does not help. I don't understand yet why the AD9910 gets messed up if and only if there is the master reset.
The AD9914 on the NIST hardware also gets messed up if you reset it (with the hardware reset pin). Related?
Don't know.
