In QEOM, we want to use the eval_observables() function from aux_ops_evaluator.py
after a call to a VQE or any other minimum eigensolver.
The following test case of QEOM runs with a non-quantum MinimumEigensolver.
The qeom tries to retrieve the quantum_instance of the solver but fails in that case.
Also note that the evaluate_operators() method of the ground state_eigensolver had additional if/else conditions
to account for a missing quantum_instance.
This might be interesting in the broader context of algorithms and not just QEOM. It would for instance allow us to remove the logic inside NumPyEigensolver that currently evaluates auxiliary operators. So I think this would be a good idea.
@woodsp-ibm @dlasecki do you have an opinion on this? ðŸ™‚
One thing that needs to be sorted is how does this fit in with the upcoming Estimators and which I can see VQE transitioning over to using exclusively. Having this extracted from current VQE and made more general in the interim to allow the evolution logic to use it seemed ok. I had suggested in the PR where this was created that a "better" place for this, if this is perhaps a more general method with opflow level objects that is viable in the longer term, that the method would better be located in opflow (rather than in algorithms).
The aux_ops_evalutor is now deprecated pending removal. There is a newer utility that was done for the primitive based algos - and of course Estimator can much more directly be used. I am closing this as no new feature like this will be added to deprecated code.
