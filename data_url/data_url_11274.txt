This is a place where speed is critical. I just wanted to record here some suggestions that came up so they're not lost:
Both loops can likely be parallelized, but with different strategies.  It's easier to parallelize over the sum between terms, then do a reduce operation, but that has a higher memory overhead and only speeds up QubitOperators with multiple terms.  The inner loop may actually be a bit tricky due to operations touching the same part of memory.
I guess the inner loop is a good candidate for Cython, while the outer one is good for multithreading.
@Strilanc @jarrodmcc @kevinsung @idk3
Sheila is willing to implement this for us in C++ or Cython (I spoke with her offline). But this is a major decision that should not be made lightly because it would change how people install OpenFermion. I am thinking that perhaps we should have this implemented as part of Dave's simulator or something like that. What do others think?
At some point we will want C++, Cython, or other bindings to optimize some of the routines.  The first addition of this will be the major hurdle, because we have to change the CI, build system, testing etc, but once it's there it has the potential to lower the barrier for others.  For any C++ change we make, I think the Python simulator should be left in place so that if the build fails on someone's system it can be defaulted back to.  Projectq worked this way and I think it's a reasonable choice.
Did @sheilaliuxl 's pull requests sufficiently close this issue?
@babbush Inner loop (C(ython)) is still a TODO item, while the outer loop is done in #357.
It goes back to #347 (where further discussion should be) for its priority/ ETA.
