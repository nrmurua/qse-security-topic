The following circuit
gets reduced to

even though I have made a custom calibration for the Hadamard gate that is no longer a valid cancellation.
Follow tutorial with a custom H gate and transpile.
Only valid cancellations should occur.
Probably do not cancel calibrations at this stage.
Is this not exactly what the transpiler should do? In my opinion one should opt-out of optimization by selecting optimization_level=0. This also aligns with the previous path of schedule(transpiler(circ, backend), backend)
You are assuming that the custom pulse definition is correct for the supplied gate.  However, an user is allowed to do whatever they want with the definition of the pulses.  Once you give the freedom to define things however one wants, the standard rules are not necessarily satisfied.
I disagree. The user specified a program,   the transpiler has a defined behaviour and it should not auto magically change said behaviour to anticipate the users intent. The user who specifies correct pulses will have the opposite problem and be confused. I prefer consistency over perfection in this case.
Ok, feel free to close then.
I will just point out that this decision means that the transpiler need not preserve unitarity amongst optimization levels (something that used to be true).
A gate is an ideal unitary at the circuit level. In practice in the hardware that is not so. Adding poor calibrations is equivalent to having a backend that is poorly tuned up or with large errors. It is beyond the scope of the transpiler to decide that a user has specified one gate h but provided an implementation that is incorrect. If your custom Hadamard is no longer a valid cancellation it is not a Hadamard and should not be input as such.
