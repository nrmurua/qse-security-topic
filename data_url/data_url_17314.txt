It is not currently possible to perform any operations on Parameters, other than to include them in the params of an Instruction, so e.g. a circuit which requires both theta and theta/2 needs to define two separate parameters, and manage them accordingly.
It should be possible to construct simple expressions of parameters when constructing parameterized circuits. Expressions should contain some structure of internal operations to be performed when some or all of their parameters are bound. They should support partial binding, provide a reasonably display of their operations and parameters when included in a printed circuit e.g. (2 * pi * theta / nu), and should follow the same conventions as Parameters when being bound (updating circuit instructions and the parameter table).
It should be possible to add, subtract, multiply, divide, and take powers of Parameters, both with constants and with other parameters.
This will also fix use of parameters with e.g. the cu1 and cu3 gates, which decompose their params like -self.params[0] / 2.
If the parameters were SymPy symbols, all these niceties would come for free.
Look who's arguing in favor of Sympy!
Well sure.  The use of parameters is basically symbolic computation, i.e. the one thing you should be using SymPy for.  It is already a dependency, so I guess I am puzzled as to why we are creating Parameters that are not using SymPy.  Basically the current Issue is asking to do mathematics on symbolic objects.  To quote from the SymPy homepage: "SymPy is a Python library for symbolic mathematics."
The goal in #2537 is to use sympy, but not necessarily to use the interface of sympy.Symbol for that of Parameter. Sympy supports a lot of functionality (len(dir(Symbol('s'))) == 271) not all of which necessarily makes sense in the context of parameterized circuits.
Parameter lets us design and document an interface fit for purpose, e.g. provide a help more meaningful to qiskit users, and raise ZeroDivisionError instead of returning zoo. We still leave ourselves the freedom to expand sympy compatibility where it makes sense, but taking it away once given (as was the case for DAGCircuit) can be very difficult.
