What I would like to know is if there's a built-in way of representing states in the Pauli basis and if there's an efficient way of getting that representation. Currently I'm doing something similar to this code below:
Since for the problem I'm interested in I have to sample thousands of states and represent them all of them in the Pauli Basis, this naive implementation scales really badly.
Anyone here would have a better idea of how to use Qibo to the fullest in order to optimize this?
Thank you in advance
Some attempts to make this calculation faster:
i) In the construction of pauli_basis_representation the circuit() that is inside the list comprehension will be executed len(pauli_basis) times which is a large number. Instead you can execute the circuit once outside the loop and reuse the final state for the expectation calculations:
ii) an alternative way to do this calculation without creating the 2^qubits x 2^qubits matrices in pauli_basis is the following:
For qubits=7, depth=5 and samples=10 this takes 3sec in my laptop, while the original implementation after the circuit correction takes 15sec.
Thank you for the quick and helpful answer. I'' test out your suggestions.
One question though:
For qubits=7, depth=5 and samples=10 this takes 3sec in my laptop, while the original implementation after the circuit correction takes 15sec.
Which backend you used? Because I ran my version of the code for qubits=7, depth=5 and samples=1000 and it took ~20h on numpy backend.
Which backend you used? Because I ran my version of the code for qubits=7, depth=5 and samples=1000 and it took ~20h on numpy backend.
I used the qibojit backend on CPU (numba) for these tests which may be slightly faster than numpy, but most likely the difference is small for 7-qubit circuits. The 15sec for 10 samples is after the correction (i) I wrote above (moving the circuit() outside the loop). If I extrapolate this to 1000 samples, it should take around 12h which is better as we avoid many circuit executions. The other method should take 4h.
Which backend you used? Because I ran my version of the code for qubits=7, depth=5 and samples=1000 and it took ~20h on numpy backend.
I used the qibojit backend on CPU (numba) for these tests which may be slightly faster than numpy, but most likely the difference is small for 7-qubit circuits. The 15sec for 10 samples is after the correction (i) I wrote above (moving the circuit() outside the loop). If I extrapolate this to 1000 samples, it should take around 12h which is better as we avoid many circuit executions. The other method should take 4h.
OK, thank you. I'll try it out
