Description of the issue
Equality in controlled gate is implemented as follows, intentionally ignoring the order of the controls.
This means gates are considered equal even if their unitaries don't match.
In some cases the gate can't even be applied to the same qubits.
So, while there's a relationship between such gates, calling that relationship "equality" doesn't feel right. Was this intentional?
Cirq version
0.14.0.dev
I think I see the reason. ControlledOperation is defined in the same way, but it makes a bit more sense in that case. The qubits are applied so the operation does the same thing regardless of order. So, if two operations do the same thing then we call it equal. If two operations are equal, then their gates must be equal.
Not sure if we should consider the two operations equal though. There's certainly an equivalence relation, but the two operations with_qubits(*qubits) on the same qubits would produce different operations. So they're really not "equal" I'd think. Thoughts?
Cynq notes:  Change this in the gate, but continue to allow operations to ignore ordering. This will be consistent with the behavior of DensePauliString vs PauliString.
To the 2nd paragraph of the above comment, there are examples of other things in Python where x==y does not imply f(x)==f(y), for example {1:1,2:2}=={2:2,1:1} but list({1:1,2:2}) != list({2:2,1:1}). So it seems okay that we can specify that two operations are equal even if their underlying gates are not equal.
