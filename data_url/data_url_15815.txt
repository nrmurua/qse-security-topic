Hello, I am trying to compare the HHL algorithm to classical methods. I'm testing the algorithm for a 4x4 case where A and b are:

Running the algorithms give:

There seems to be a rather large discrepancy in the results. When I tested out the algorithm with different matrices, I got worse results when I would change some positive elements for negative elements. Not sure what would cause this error.
Any help would be greatly appreciated.
Thanks!
My codes are based off of the code from the Qiskit textbook:
https://qiskit.org/textbook/ch-applications/hhl_tutorial.html#A.-Running-HHL-on-a-simulator:-general-method
Please explain why the HHL algorithm results in this disagreement between the results. I saw that other people had similar issues with trying to get classical and quantum solutions to agree but couldn't find if the problem had been solved yet.
The current version of HHL doesn't support matrices with negative eigenvalues, which seems to be the reason this example is failing. That's a feature we're looking to integrate and will soon be working on!
The right result can now be obtained with the code from the fix from #6971 as follows:
If we normalise the approximate and exact result to remove any scaling factor, we can see that approx_result is now indeed an approximation to the exact solution vector:
Hi everyone,
When I tried to reproduce the Qiskit HHL tutorial (qiskit-terra  0.19.2) with A the 8 by 8 matrix, I got very different HHL solutions compared to the classical one.
[(https://qiskit.org/textbook/ch-applications/hhl_tutorial.html)]
Is this a bug?
Platform:
MacOS Catalina 10.15.7
Python             3.9.6
qiskit                0.34.2
qiskit-terra      0.19.2
Using the 8 by 8 matrix from the Qiskit HHl tutorial,
HHL solution= [-3.63250174e-04-0.00087696j -7.13722578e-05-0.00017231j
-1.37749833e-04-0.00033256j -3.99987591e-03-0.00965655j
2.21093015e-03+0.00533766j 3.26591171e-03+0.00788461j
-1.77709870e-03-0.0042903j  1.06751932e-03+0.00257722j]
Classical solution= [1.14589783 0.4376935 0.16718266 0.06385449 0.0243808 0.00928793
0.00348297 0.00116099]
Fidelity:        0.007554
Euclidean norm of HHL= 0.015680300674385816 ;Euclidean norm of HHL_XYL= 0.015680300674385823
Euclidean norm of classical solution= 1.2399109034486437
Here is my code,
It seems it has to do with the default Hamiltonian simulation from qiskit. If you use instead
It returns the right solution:
The difference between calling HHL with TridiagonalToeplitz or an array is that the former implements an efficient circuit and the latter calls qiskit's unitary circuit, i.e.:
So it seems there is a bug somewhere - you could open an issue. Thanks for noticing!
Many thanks for your reply @anedumla. I have now opened an issue on HHL. I have done many tests with random Hermitian matrix with different sizes (4 by 4, 8 by 8, 16 by 16, 32 by 32) and they all returned incorrect answers. Could you @anedumla please point to the code (e.g., qc.unitary) where I can try to fix it?
