Is your feature request related to a use case or problem? Please describe.
Need some way to represent a qubit that's already entangled as input to a simulator. This is required for certain simulations like quantum teleportation.
Describe the solution you'd like
Want to allow a simulation of quantum teleportation via (harsh pseudocode)
Need to think a little more about how to represent this under the hood, but I think the input state of a n-qubit circuit simulation needs to be extendable beyond an n-qubit vector. It needs to support an ((n+m) * (n+m)) matrix, where m represents external pre-entangled qubits. It also needs a way to represent qubits as references to a part of a larger matrix, and some way to feed these forward. It'll probably be apparent how to represent this after digging a little deeper.
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
Looks like simulators are tightly coupled to the state representation, so this would require a new simulator. (In creating one, there might be a good opportunity to investigate further design consolidation that can be done to simplify creation of new simulators.) It seems this would also require either a new qubit type that supports persistent state, or adding this to all existing qubit types.
So here, the only thing that would remain unchanged is the circuit. Otherwise it's kind of different from the rest of the cirq platform. So the question is, is this worth it, and if so, how far do we want to go into integrating this into existing cirq classes vs creating entirely new ones?
I think most of the pieces are actually already there. You can input and retrieve state space from the simulators. The remaining thing would be for simulators to provide a way to join two state spaces, so that you could e.g. run "entangle" on qa and qb, then join "input" to that state space before the aliceCircuit step above.
Closing in lieu of #3686
