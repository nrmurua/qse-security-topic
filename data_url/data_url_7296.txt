It would be great to have POVM measurements, as well as measurements with post-selection. Both are available in QuantumInformation.jl, Yao.jl and recently added to QuTip (git only) as well.
That sounds like an interesting feature. The issue is that I'm not too knowledgeable when it comes to POVM or PVM measurements. Could you provide some more details?
Thanks! POVM measurements are projective measurements with respect to a given set of operators M_i which satisfy the completeness relation \sum_i M_i^\dagger M_i = I (Section 2.2.6 in Nielsen & Chuang). In QuTip, this is implemented in measurement.py as _measurement_statistics_povm_dm  and returns the array of probabilities tr(M_i^\dagger*M_i'*œÅ), Eq. 2.143 in Nielsen & Chuang (for kets, it is def _measurement_statistics_povm_ket).
Measurement with post-selection returns the state of the system after a specified measurement M_i (Eqs. 2.131 and 2.147 in Nielsen and Chuang), essentially performing a wave-function collapse using Born rule. In QuTip, it's implemented in measure_observable (although it does a little more than just calculating the collapsed state, by diagonalization and finding eigenvalues to additionally report the result of the measurement as well). For simulating quantum circuits which include measurement boxes anywhere along the circuit, this would be the necessary function to have.
You say that the measurement statistics should return the probabilities, but the functions you reference in QuTiP return a set of projected states as well. Also, given a vector M that contains the POVM operators and a state, the probabilities are literally just
for both Ket and Operator states. So that doesn't really need to be implemented. Returning the states as well is not hard, but probably worth to just have implemented. I suppose that is what you want on top of the probabilities. I'd do something like this:
Measuring an observable can be implemented using this as well. However, it would require building the POVM by actually writing down a bunch of matrices that are just projectors. You can actually do it without building up those matrices, which is beneficial when working with many qubits:
Is that what you need? Could you test this in your use-case?
POVMMeasurement in QuantumInformation.jl actually only returns a diagonal matrix of probabilities. Yes, it's a one liner (assuming you don't verify the given set of operators is complete and skip other sanity checks), just like Pauli matrices, but IMHO it's one of the fundamental concepts in QIP that probably deserves to have its function.
For my purposes, I'm currently using QuTip. but thanks anyway for the code. I'll be looking forward to use QuantumOptics.jl in the future. I just wanted to point out that it would be nice to have measurements out-of-the-box in QuantumOptics.jl since that's an essential and very practical concept in quantum mechanics.
For reference, measurement API is now included in the recently released version of QuTiP 4.6 (changelog).
