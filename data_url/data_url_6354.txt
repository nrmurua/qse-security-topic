Since the inclusion and use of Hybrid compute parameters of the qrack benchmarks program I get suspicious measured value output from [cosmos]. Even when not using the hybrid parameters measured values are zeroed out and/or repeat.


./benchmarks --proc-stabilizer --layer-qunit --enable-normalization --device-id=0 -m=-1 --measure-output=/var/log/qrack/measured_cosmos_2020-10-16_8:38.log [cosmos]
bitrate ladder measured output log
After a big round of debugging, I'm seeing other QFT bugs fixed, and it's possible-to-likely this is, too. Thank you for opening the ticket. I haven't recreated this yet, but I can dig in tomorrow, if necessary. I'll check in the AM.
@twobombs I just put two and two together: this is test_cosmology, not test_qft_cosmology. The test giving zeros is my speculative, local iterative version of test_qft_cosmology, and it might very well have some tendency to "stick" at 0. I do not necessarily know, a priori, what the expected distribution of outcomes on this particular test is.
test_qft_cosmology could be described as just a QFT on randomly initialized single separable qubits. The idea was that, per the paper I mention with Carroll among its authors, cosmology as natural quantum computation might, over the consumption of the full universal entropy budget, amount to a QFT on initially perfectly random but separable qubits. That's moot, though; this test is meaningful as a QFT benchmark, regardless of theoretical cosmological application. The other test, test_cosmology, takes some internal time step, (perhaps the Planck time,) and performs a parallel local QFT of small width across every neighborhood of the space, iteratively per time step. I added it for my own curiosity, but it's a less generally meaningful test, unless it turns out this is a meaningful approximation to a process like test_qft_cosmology over much smaller time scales, which is definitely my speculation rather than an accepted cosmological model. Sorry if that's lead to confusion.
The supreme_test has zero outcomes in it too, but both might not be relevant because the QFT test/benchmarks are based on a paper and that's enough for me. Personaly I am interested in a test that can transfer its measured outcome to the next calculation but that is a different discussion. QFT it is then üëç
Ignore the closing:
reran the test on QFT cosmos and found similar results:

It seems to me some states in fp32 just tick off those zero results.
./benchmarks --proc-stabilizer --layer-qunit --enable-normalization --device-id=0 -m=30 --measure-output=/var/log/qrack/measured_cosmos_2020-10-18_11:30.log test_qft_cosmology
Ran the command on POCL CPU OCL implementation and in fp32 on NV hardware and found similar zero-out; i'm happy to report however that fp64 has no zeroes. Both in -DQBCAPPOW=6 and 7 modes.
As a workaround  I've switched to fp64 on all calculations so the 27qbit fractal project can continue, as well as the massive multi qbit cluster I've recently started working on. Again: no hurry to fix this.
I was about to ask you for exactly the info you just gave me in the last reply. That's a tricky one. I was going to suggest trying fp64, for now, so I'm glad that works. A couple of things to note:
(Rather, Intel or NVIDIA, both probably throw such memory check warnings. Also, if you're using JIT OpenCL compilation instead of precompilation, you still need to update the XXD rule.)
Suspicious values came from OpenCL implementations that are not prepared for the precision and consistancy required by Qrack and other high-end math driven applications. It is fairly unfortunate that some of the OCL implementations have this problem because the scope of some of the  implementations  are fairly wide hardware architecturally wise and could open doors to some ARM/FCGPA OCL patforms.
The shortlist of OCL implementations that AFAIK give off reliable results in Qracks' cosmos are:
The fun fact here is that with a relative low qbit count (eg: ~16 or so qubits) Intel GPU hardware coupled with one of the reliable ICDs does give quite the punch for the price; for Qrack this is one to watch as the hardware evolves.
