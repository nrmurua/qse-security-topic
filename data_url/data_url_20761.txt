Should Rainbow be updated as per this comment by its authors? Question discussed downstream how to suitably close out round 3 for this broken algorithm.
I think we will probably leave it as-is and just remove it once we get to the end-of-r3 cleanup. We do plan to create a git tag, but we don't really track versions or releases of this repository.
Agreed; in liboqs I think we'll remove Rainbow level 1 configurations, and leave the level 3 and 5 configurations as is for the 0.7.2 release, then remove them entirely after that.
in liboqs I think we'll remove Rainbow level 1 configurations, and leave the level 3 and 5 configurations as is for the 0.7.2 release
To me this sounds not quite right/logical: If the reasoning for removing Rainbow L1 from liboqs is because it's (acknowledged) broken then how can one keep the (equally acknowledged "weaker") L3 and L5 configs (at those levels) in an "official" release?
In my eyes the approach stated by @thomwiggers for PQClean is more easily understandable: Have a "non-judgmental" release of what was the "state of things" at the end of NIST round 3.
If the goal for liboqs is to have an approach more amenable to use in early-stage "products" (without "unsuitable", i.e., weak and broken algorithms) I'd vote for removing Rainbow completely before doing a release that folks may rely on for some "serious" uses.
in liboqs I think we'll remove Rainbow level 1 configurations, and leave the level 3 and 5 configurations as is for the 0.7.2 release
To me this sounds not quite right/logical: If the reasoning for removing Rainbow L1 from liboqs is because it's (acknowledged) broken then how can one keep the (equally acknowledged "weaker") L3 and L5 configs (at those levels) in an "official" release?
In my eyes the approach stated by @thomwiggers for PQClean is more easily understandable: Have a "non-judgmental" release of what was the "state of things" at the end of NIST round 3.
If the goal for liboqs is to have an approach more amenable to use in early-stage "products" (without "unsuitable", i.e., weak and broken algorithms) I'd vote for removing Rainbow completely before doing a release that folks may rely on for some "serious" uses.
We can also downgrade Rainbow level 3 and 5 to 1 and 3 respectively as advised by the Rainbow team.  Just that this has a lot of knock-on effects for downstream OQS-OpenSSL, -BoringSSL, -OpenSSH.
what if you keep the names the same but just update the metadata?
Yes, that's what I'd do, still has a knock on effect downstream because it changes which algorithms they're paired with in hybrid mode... although I guess we could override that, pairing a level 1 PQ algorithm with a level 3 ECC algorithm in principle isn't insecure, just wasteful...
I guess we could override that, pairing a level 1 PQ algorithm with a level 3 ECC algorithm in principle isn't insecure, just wasteful...
Correct. Plus writing (such "pairing override") code for something that's going to be removed right after the release (i.e., code written only for doing 1 release) in every main downstream project (at least in openssl, openssh, boringssl, oqsprovider) just sounds "wrong".
Besides it's not what NIST has used for their decision making in round 3 (which is the "clean" argument for PQClean -- sorry for the pun :).
So before doing that, I'd rather suggest assigning new OIDs etc and run again the known-good "hybridization" code unchanged in all integrations after downgrading L5/L3 in liboqs. The latter obviously needs to be done manually, as it's not coming via PQClean -- but that is arguably OK as it's a one-time effort never to be repeated as Rainbow is completely removed right after the release.
