Pipfile and pipenv are considered to be the current recommended standard way of managing project dependencies. Pipenv is the tool that manages your python virtual environment and dependencies according to the Pipfile.
A Pipfile and Pipfile.lock should be distributed with QISKit to promote the use of pipenv for managing virtual environments and also for reproducible builds with Pipfile.lock.
Dependencies declared in setup.py can be automatically declared in the Pipfile, reducing duplication as it currently exists.
Furthermore, dependencies are currently pinned to exact versions, which may cause conflicts if qiskit is used as a library. Instead, setup.py and all requirements should declare as broad as possible ranges, so that the user can declare their own dependency versions.
Pipfile.lock can then define what the exact expected versions are for reproducing builds of qiskit (i.e. a dev environment or testing environment).
Currently the use of pip is recommended throughout the documentation but this causes packages to be installed in the global package repostory. This makes it more difficult to work on multiple projects and separate dependencies, and to clearly define the current project dependencies. Locally updating your dependencies could break your projects, since they are globally defined.
Suggested Pipfile:
Note that the "e1839a8" identifier was generated after running pipenv install "-e ." as recommended in the advanced documentation to add setup.py install_requires dependencies. Not too sure why this identifier is used but it may be a hash of the string "-e ." (I see it in other examples too).
The associated Pipfile.lock will define the exact versions that should be used by developers for reproducible builds for development. This is why unpinned versions can be used, unless there are confirmed breaking changes.
I would like to be able to develop on qiskit using a nicer way to manage dependencies. There seemed to be some duplication in declaring dependencies. Plus it is more cumbersome to manage dependencies with virtualenv/venv plus pip.
I have just closed the associated PR mostly for doing a bit of housekeeping, as it seems the real work is on discussing rather than the "implementation" of it.
As far as I can see, it seems pipenv indeed provides benefits, mostly streamlining the virtualenvs and dependency handling, but I'm not sure if fits cleanly in the "allow as much flexibility in how each contributor sets his environment as possible" or if it would provide enough benefits for our array of developers and contributors to compensate moving to it and force it as the "official" tool for managing the dev environment in qiskit. It's a powerful motivation that is the pypa recommended approach, but the use still seems not to be as widespread yet, and we also have to take into account another powerful force: the familiarity of the average developer with the de-facto tooling and the resistance to adopt a new one (and again, placing emphasis on flexibility). I think this issue pypa/pipenv#1398 and similar ones requesting documentation or features related to integration sum up a bit the question to be answered before introducing it in the project.
To put it a bit more into context, as far as I know the majority of the team (team and contributors: please jump in!) mostly use either a virtualenv or a conda environment for development, using the regular flow of activateing it, etc to provide isolation - and other than being indeed slightly cumbersome, I'm not sure we did have any reported case of a developer not being able to replicate the dependencies needed by using the requirements.txt file. I'm also unsure if it would help with the duplicated dependency specification in our scenario. Could you provide some specific examples of how it help this repository, as it might be a matter of me not being fully aware of the possibilities?
Personally (strong emphasis on "personally" - I'd love to see more feedback from the rest of the team!) I think it make sense to hold off and reevaluate the decision eventually, when the combination of adoption of pipenv as a whole and the demand/solutions provided in our specific case justifies the change - but again, looking forward to more input!
An example of duplicated dependency specification is in the current requirements.txt and the setup.py.in, they both have a duplicated list of dependencies. In #370 you can see an example pipfile that gets rid of that. Note that the required (non-dev) dependencies are copied over from the setup.py file.
There is definitely a lot of talk about how you should use the Pipfile and how you shouldn't. And to be fair, that whole discussion has confused me more, not less. I would simply imagine qiskit provides the Pipfile for use as a library and for developers you also provide a Pipfile.lock so that everyone has the same dev environment.
The PR #1587 will use the -e . approach. Would that merge close this issue?
I think pipenv has support for automatically converting requirements.txt files, though it does not find the requirements-dev.txt file. This is also not resolved by using the -e . approach if you were to be using pip. Besides the excellent support for setting up virtual environments and lock files, this is an additional benefit of pipenv.
So I'm definitely a fan of the pipfile/pipenv approach (except for the use of toml which is unfortunate) more than the current setup.py model. It basically adopts what rust did for cargo (which is one of the biggest reasons I enjoy using rust) for python. But, while it is the future direction from the pypa, it is not currently ready for primetime use. This is made quite clear on the pipfile spec repo: https://github.com/pypa/pipfile which has: WARNING: This project is under active design and development. Nothing is set in stone at this point in time.
I think at some point in the future adding a pipfile to the qiskit repos makes sense but not until the pypa community has made it clear that it's ready as a replacement to the current model. Especially, given all the packaging issues we have around namespace packaging (see #559) adding yet another way to install things will only make that worse.
Tagging this one as on hold until Pipfile gets more stable.
I think it's better to use pyproject.toml instead of Pipfile.
https://www.python.org/dev/peps/pep-0517/
https://www.python.org/dev/peps/pep-0518/
Pipfile does not seem to be actively maintained anymore. I suggest using something like poetry that is well maintained, documented, and widely adopted. It can help in managing packages and environments in development better.
