The eigenstate in the result object of compute_minimum_eigenvalue of a VQE object using statevector_simulator is given as an array which makes it impossible to know which basis state corresponds to which value especially since the length of the array for the eigenstate is not equal to the total number of basis states probably omitting the basis states with coefficient 0.
Run a vqe.compute_minimum_eigenvalue with statevector_simulator (no noise or mitigation needed) and print the result of this call to see the eigenstate.
The expected behaviour is present when using aer_simulator for example which returns the eigenstate as a dictionary:
eg (for 4 qubits):
Eigenstate
0000=0.09695359714832658
0001=0.11958260743101398
0010=0.08774964387392122
0011=0.19261360284258222
0100=0.08306623862918075
0101=0.49477267507411926
0110=0.4618441295502196
0111=0.0824621125123532
1000=0.0888819441731559
1001=0.41964270516714575
1010=0.466476151587624
1011=0.061644140029689765
1100=0.19570385790780928
1101=0.07348469228349534
1110=0.07483314773547883
1111=0.06928203230275509
Return the eigenstate as a dictionary when using the statevector_simulator.
We currently have the statevector since that's the most general result type if using a statevector. Converting that into a dictionary would lose information since we convert amplitudes into probabilities. However it's true that currently you get different result types depending on the type of simulator, which might be unexpected...
If you want to obtain probabilities from the statevector you could do that manually using
This issue concerns the result from the now deprecated and soon to be removed VQE. The new primitive based VQE only returns an eigenvalue as that that all the Estimator provides. If a state is desired the user can run a Sampler on the corresponding circuit and the result is always a quasi distribution - this issue is no longer relevant to the primitive based algorithms and so I am closing it.
