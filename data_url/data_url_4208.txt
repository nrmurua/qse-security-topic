I know that I can use StatePreparation() on a qureg as follows:
This works and outputs Measured: (1, 1) as expected.
How can I use StatePreparation() when the qubits were allocated individually and not as a qureg?
Suppose have two qubits that were allocated as follows
and I can't change that part of the code, but want to prepare them in a state with StatePreparation(). I have tried all of the following, but to no avail:
StatePreparation([0,0,0,1]) | [q0, q1] -> gives AttributeError: 'Qureg' object has no attribute 'id'
StatePreparation([0,0,0,1]) | (q0, q1) -> gives AssertionError:   raised in: '  File "/home/cgogolin/.local/lib/python3.5/site-packages/projectq-0.4.1-py3.5-linux-x86_64.egg/projectq/setups/decompositions/stateprep2cnot.py", line 33, in _decompose_state_preparation' '    assert len(cmd.qubits) == 1'
StatePreparation([0,0,0,1]) | Qureg([q0, q1]) -> gives AttributeError: 'Qureg' object has no attribute 'id'
It does (seem to work) if I do the following:
But this can't be the right way of using StatePreparation()? Why do the individually allocated qubits not get an id? It doesn't seem to matter whether I put q0.id = 0 or q0.id = 54. Is that intentional/expected?
In a program one can combine lists of quantum registers (using +) or creating new lists of qubit objects:
PS:
Instead of
one could do:
and for more quantum registers use the trick above to build a new larger quantum register:
Thanks for the clarification! Is that documented somewhere? I knew that a Qureg is a list of Qubits, but wasn't aware that allocate_qubit() returns not an individual Qubit, but a Qureg that contains a single Qubit. The comment that can be fond in many of the examples in the docs:
seems to suggest that q1 ends up being a Qubit not a Qureg...
Is the behavior of allocate_qubit() documented somewhere and I was just too stupid to find it in the docs?
You are welcome, I'm happy to help out.
Yes, all our functions are documented:
allocate_qubit documentation
To find, e.g., MainEngine.allocate_qubit:
Go to MainEngine doc which in this case does not contain allocate_qubit, hence check the parent class BasicEngine (either know the parent class or quickly look it up using the link to the source code) which has it documented. Or just search for it in the docs.
# allocate one qubit does not say anything about the container this qubit is in. One could write
# return a list with one new Qubit object to be more precise. It depends for who the comment is intended for.
