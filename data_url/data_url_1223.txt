Description of the issue
I was trying to run a >5000-qubit QAOA ansatz when I found that cirq.append is very slow at this scale.
How to reproduce the issue
Number of qubits 100
Elapsed Qiskit 0.069
Elapsed Cirq 0.344
Number of qubits 1000
Elapsed Qiskit 0.845
Elapsed Cirq 37.59
Number of qubits 2000
Elapsed Qiskit 1.957
Elapsed Cirq 134.448
Line profile output when running up to 100 qubits:
The circuit.append calls circuit.insert. This line took ~87% of the circuit.insert elapsed.
Cirq version
I suppose it is the default insertion strategy that is slow.
I'm not sure which strategy corresponds to Qiskit's method. Needs further investigation.
This is a known issue with Circuit.append. A much faster approach is to build up a list of moments and then call Circuit.from_moments to create a circuit. This requires that you know the moment structure, but that is very important when running on hardware.
On my machine this gives:
Clearly, the from_moments version performs much better.
Thank you for providing a faster way to construct the circuit. I have learned more context about the moments from https://quantumcomputing.stackexchange.com/questions/8883/moments-based-quantum-circuit-in-cirq. It does make sense to have a fine-grained control on how the gates are run in parallel, for a quantum hardware. In the case of a classical simulator, the default behavior is fine for low-qubit circuits (the limit of the statevector simulators are usually low anyway). I suppose anyone who also does >5000 qubits and encounters this issue, they may hopefully find this issue and the resolution.
(Another alternative way would be to defer the moments structure creation until just when the circuit is executed. Where in the case of a classical simulator, the moments are not constructed, while in the case a quantum hardware, the moments are constructed and optimized for a specific hardware topology.)
