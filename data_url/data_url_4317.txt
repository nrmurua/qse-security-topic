I fear some confusion might arise when the output of a circuit execution with collapsed gates is no longer a CircuitResult object, as it would in a normal circuit execution.
Example:
This is what one would normally do to access the quantum state after a circuit execution. In this case, result by itself will default to the symbolic version of the state while still being a CircuitResult object.
However,
will raise an AttributeError, as result is now a list with nshots number of np.array states, therefore no longer have the properties of a CircuitResult object.
I propose that a quick way to equalize that while still maintaining the list of quantum states at each execution, would be to maintain the object as an output and have result.state() output the current result.
Let me know what you think.
If I understand you correctly, you would also like to extend the Data Structure CircuitResult to the case where collapsed measurements are performed.
Personally I think this would be useful to be able to access the information we use even in the case where collapse=False is set (frequencies, probabilities, etc.) and it would certainly make the notation regarding the results more generic. However, this kind of structure (CircuitResult) should be released from qibo.state, on which it now relies, since in collapse=True mode we change paradigm (and no longer have state).
At the same time, however, I can't imagine a case where it would be useful to perform numerous collapsed measurements in simulation. This is why I have always found it reasonable to have a container of information in the case of collapse=False and a list of collapsed states in the other.
Please tell me if I understood what you meant, or if you needed to perform collapsed measurements and access the sampling statistics at the same time.
