As #1470 merged, the performance characteristics of McEliece changed massively and not very coherently:



--> Is this expected from "the literature" or worthwhile investigating?
@praveksharma You seem to be the go-to guy for McEliece; is this something you could take a look at?
Going through this document which describes the changes between Round 3 and Round 4 McEliece it isn't obvious to me why these changes should affect performance in this way.
A change in performance is expected given that #1470 changes the compiler optimisation level for McEliece, but these changes are not in line with my expectations.
While working on #1515 I observed that the constant time behaviour of McEliece has also significantly changed after #1470. I'm uncertain whether the two issues are related but I can investigate this alongside #1515.
Edit: fixed broken link.
@praveksharma It seems #1515 is closed -- so any insights on this issue?
I've worked my down our code pipeline: Reference code -> SUPERCOP -> PQClean -> liboqs. The largest changes to code seem to be introduced at the Reference code -> SUPERCOP stage; PQClean and liboqs only minimally modify their ancestors.
I integrated the reference code into liboqs and benchmarked its performance using Profiling; it performs similarly to the older benchmarks @baentsch shared, suggesting that the changes introduced by SUPERCOP are modifying performance. I had hoped working through #1515 would let me accurately point to code snipped responsible for these changes but that didn't quite work out.
Unless we plan on changing our upstream source, the only way to revert to previous performance would be to (partially) undo the changes introduced by SUPERCOP. Given that KATS are passing and that SUPERCOP is maintained by Daniel Bernstein (one of the principal submitters of Classic McEliece) I believe the algorithm is behaving as intended.
Thanks Pravek for investigating thoroughly. Since the performance here matches the performance in SUPERCOP, I'd consider that an indication that our code is behaving as expected from a performance perspective.
I think then we can close this issue?
I think then we can close this issue?
Fine with me. Even better of course would be reference to a paper by the McEliece authors clearly stating that they trashed reference code decaps performance intentionally (ideally with an explanation why -- constant time property added? Any other security feature added?).
To be clear, from what I can tell the performance changes are introduced at implementation level by SUPERCOP and not at the algorithm level. As mentioned in my first comment, the McEliece authors list changes between round 3 and round 4 in this document and don't explicitly mention performance changes.
