Hi everyone,
I am having some issues when using the me solver either for small systems or large systems. In all cases, the solver is slower than the es solver, which makes no sense for me, specially for the case of large systems.
In this specific case, the system consists on 5 atoms interacting with eachother and with a single-mode cavity field. I have tryed with matlab QOtoolbox version and the Qutip version of the code.
The code just set up the parameters of the system and builds the Hamiltonian and Lindblad equation. Finally it solves de equation with mesolve, and compute a 2op_2t correlation function. For the case of Qutip, the mesolve spends about 15 minutes for solving the equation, and 3 hours the correlation function. For the case of matlab toolbox, it takes a few seconds solving the equation and one minte computing the correlation function. Finally, if I try ode2solve in qutip, it solves the equation in just 45 seconds.
Is there  something I am doing terribly wrong with the mesolver in qutip?, or is just that the matlab toolbox has a much better solver?
Thank you very much,
Joaquin Guimbao
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from qutip import *
qutip.settings.num_cpus = 16
import math
g2  = 1                   # coupling strength with EM field
kappa = 1                 # cavity dissipation rate
gamma = 1                 # atom dissipation rate
gamma12 = 1               # dipole-coupling dissipation
N = 2                     # number of cavity fock states
dephasing = 10000         # pure dephasing
g=np.random.rand(10)*500  # dipole coupling strengths between 5 atoms
tlist = np.linspace(0,60,200)
psi0 = tensor(basis(N,0), basis(2,1),basis(2,0),basis(2,0),basis(2,0),basis(2,0))    # start with an excited atom
rho0 = psi0 * psi0.dag();
a  = tensor(destroy(N),qeye(2),qeye(2),qeye(2),qeye(2),qeye(2));
sm1 = tensor(qeye(N),destroy(2),qeye(2),qeye(2),qeye(2),qeye(2));
sm2 = tensor(qeye(N),qeye(2),destroy(2),qeye(2),qeye(2),qeye(2));
sm3 = tensor(qeye(N),qeye(2),qeye(2),destroy(2),qeye(2),qeye(2));
sm4 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),destroy(2),qeye(2));
sm5 = tensor(qeye(N),qeye(2),qeye(2),qeye(2),qeye(2),destroy(2));
H = sm1.dag()sm1+sm2.dag()sm2 +sm3.dag()sm3+ sm4.dag()sm4+sm5.dag()sm5+a.dag()a + g2(sm1.dag()a+sm1a.dag())+g2(sm2.dag()a+sm2a.dag()) + g2(sm3.dag()a+sm3a.dag())+g2(sm4.dag()a+sm4a.dag())+g2(sm5.dag()a+sm5a.dag())+g[0](sm1.dag()*sm2+sm2.dag()sm1)+g[1](sm1.dag()*sm3+sm3.dag()sm1)+g[2](sm1.dag()*sm4+sm4.dag()sm1)+g[3](sm1.dag()*sm5+sm5.dag()sm1) +g[4](sm2.dag()*sm3+sm3.dag()sm2)+g[5](sm2.dag()*sm4+sm4.dag()sm2)+g[6](sm2.dag()*sm5+sm5.dag()sm2)+g[7](sm3.dag()*sm4+sm4.dag()sm3)+g[8](sm3.dag()*sm5+sm5.dag()sm3)+g[9](sm4.dag()*sm5+sm5.dag()*sm4) ;
#Lindblad equation
c_ops = []
c_ops.append(math.sqrt(kappa) * a)
c_ops.append(math.sqrt(gamma) * sm1)
c_ops.append(math.sqrt(gamma) * sm2)
c_ops.append(math.sqrt(gamma) * sm3)
c_ops.append(math.sqrt(gamma) * sm4)
c_ops.append(math.sqrt(gamma) * sm5)
c_ops.append(math.sqrt(dephasing)*sm1.dag()*sm1)
c_ops.append(math.sqrt(dephasing)*sm2.dag()*sm2)
c_ops.append(math.sqrt(dephasing)*sm3.dag()*sm3)
c_ops.append(math.sqrt(dephasing)*sm4.dag()*sm4)
c_ops.append(math.sqrt(dephasing)*sm5.dag()*sm5)
L1 = liouvillian(H, c_ops)
L12 = gamma12*(spre(sm1)spost(sm2.dag())-0.5spre(sm2.dag()sm1)-0.5spost(sm2.dag()sm1));
L13 = gamma12(spre(sm2)spost(sm1.dag())-0.5spre(sm1.dag()sm2)-0.5spost(sm1.dag()sm2));
L14 = gamma12(spre(sm1)spost(sm3.dag())-0.5spre(sm3.dag()sm1)-0.5spost(sm3.dag()sm1));
L15 = gamma12(spre(sm3)spost(sm1.dag())-0.5spre(sm1.dag()sm3)-0.5spost(sm1.dag()sm3));
L16 = gamma12(spre(sm1)spost(sm4.dag())-0.5spre(sm4.dag()sm1)-0.5spost(sm4.dag()sm1));
L17 = gamma12(spre(sm4)spost(sm1.dag())-0.5spre(sm1.dag()sm4)-0.5spost(sm1.dag()sm4));
L18 = gamma12(spre(sm1)spost(sm5.dag())-0.5spre(sm5.dag()sm1)-0.5spost(sm5.dag()sm1));
L19 = gamma12(spre(sm5)spost(sm1.dag())-0.5spre(sm1.dag()sm5)-0.5spost(sm1.dag()sm5));
L20 = gamma12(spre(sm2)spost(sm3.dag())-0.5spre(sm3.dag()sm2)-0.5spost(sm3.dag()sm2));
L21 = gamma12(spre(sm3)spost(sm2.dag())-0.5spre(sm2.dag()sm3)-0.5spost(sm2.dag()sm3));
L22 = gamma12(spre(sm2)spost(sm4.dag())-0.5spre(sm4.dag()sm2)-0.5spost(sm4.dag()sm2));
L23 = gamma12(spre(sm4)spost(sm2.dag())-0.5spre(sm2.dag()sm4)-0.5spost(sm2.dag()sm4));
L24 = gamma12(spre(sm2)spost(sm5.dag())-0.5spre(sm5.dag()sm2)-0.5spost(sm5.dag()sm2));
L25 = gamma12(spre(sm5)spost(sm2.dag())-0.5spre(sm2.dag()sm5)-0.5spost(sm2.dag()sm5));
L26 = gamma12(spre(sm3)spost(sm4.dag())-0.5spre(sm4.dag()sm3)-0.5spost(sm4.dag()sm3));
L27 = gamma12(spre(sm4)spost(sm3.dag())-0.5spre(sm3.dag()sm4)-0.5spost(sm3.dag()sm4));
L28 = gamma12(spre(sm3)spost(sm5.dag())-0.5spre(sm5.dag()sm3)-0.5spost(sm5.dag()sm3));
L29 = gamma12(spre(sm5)spost(sm3.dag())-0.5spre(sm3.dag()sm5)-0.5spost(sm3.dag()sm5));
L30 = gamma12(spre(sm4)spost(sm5.dag())-0.5spre(sm5.dag()sm4)-0.5spost(sm5.dag()sm4));
L31 = gamma12(spre(sm5)spost(sm4.dag())-0.5spre(sm4.dag()sm5)-0.5spost(sm4.dag()*sm5));
L= L1+L12+L13+L14+L15+L16+L17+L18+L19+L20+L21+L22+L23+L24+L25+L26+L27+L28+L29+L30+L31
options=Options()
options.nsteps=5000
options.atol=1e-9
options.rtol=1e-9
options.method='bdf'
options.max_step=1e-1
options.min_step=1e-8
output = mesolve(L, rho0, tlist,c_ops=[],e_ops=[a.dag() * a, sm1.dag() * sm1],options=options)
cor= correlation_2op_2t(L, rho0, tlist, tlist,c_ops=[],a_op=a.dag(), b_op=a, solver='me',options=options)
Qutip essolve and QOtoolbox's ode2es both work by diagonalizing L. Once the eigenstates are computed, the time evolution is mostly free.
mesolve solve the ODE system one time increment at a time. So for any long enough tlist, essolve will be faster. Also, unless you compiled Qutip yourself with the openmp option, mesolve will run on one cpu, while the eigen solver run in parallel. With 16 cpus and the size of your problem, not running in parallel will slow you down. With some luck, the next major version release will be distributed compiled with openmp.
With the present release, if you compile with openmp (https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds) you should get better time, but correlation will still not be great.
Why use bdf here?  Adams should be faster.
Also note that mesolve is basically sparse matrix vector multiplication that is nominally memory bandwidth limited.
For a constant Liouvillian, it seems very reasonable that an eigenseries-based solution would be faster?  In the end, that massively reduces the number of matrix-matrix operations to be done.  I'm not at all familiar with Matlab, but I wouldn't be shocked if that's what your toolbox there is doing too.
Looking at your code, you seem to have 16 cores available.  QuTiP at present can't make too much use of multiple cores in mesolve or essolve (though it can in correlation), whereas Matlab may well have some fancy parallelised methods for solving eigenvector problems (if doing that method) - we rely on Scipy for our eigenvector calculations, and I'm pretty sure there's no parallelisation in there.
There could also be large timing disparities if you're not being linked to good BLAS/LAPACK/ARPACK implementations in Python space.  I'm sure that any distributed version of Matlab will come stuffed with lovely libraries compiled specifically for your processor's instruction set, but Scipy may only be able to find Netlib BLAS or (even worse) Accelerate - if so, they probably won't be making good use of vectorised instructions in your processor, and may not be well-optimised for memory access.
Just a small additional comment, the ODE solver is probably slow in your case because of the large disparity in parameters (particularly the very large dephasing rate), which makes it a bit stiff I guess (and hence maybe why BDF works a little better than adams in this case?).
I will close this issue, but if you have any comments/updates on improving the performance of your example, feel free to comment or re-open it.
