Description of the issue
cirq.I is defined as  IdentityGate(num_qubits=1) and since IdentityGate takes in a variable number of qubits, it correctly doesn't inherit cirq.SingleQubitGate.
How to reproduce the issue
Cirq version
0.13.0.dev20210929175218
The solution is to make a class for the identity gate that does inherit from cirq.SingleQubitGate
Or you can use cirq.num_qubits for comparison. Relatedly, why wasn't cirq.SingleQubitGate wasn't deprecated like #4207?
SingleQubitGate is used in the type annotations of several functions, so depreciating would be more invasive. IIRC we were on the fence as to whether we wanted to deprecate it eventually too.
Though since as you mention, there are varadic gates that are sometimes single qubit and sometimes not, it makes me lean toward thinking that having SingleQubitGate as a type is wrong, and we should be doing runtime checks on num_qubits instead. @tanujkhattar
having SingleQubitGate as a type is wrong, and we should be doing runtime checks on num_qubits instead.
+1
it makes me lean toward thinking that having SingleQubitGate as a type is wrong, and we should be doing runtime checks on num_qubits instead.
+1. We should definitely replace all isinstance checks with num_qubits check in Cirq. I'd also propose that we should try and deprecate SingleQubitGate before cirq 1.0, because if we don't, users will end up writing buggy code like isinstance(g, cirq.SingleQubitGate).
@vtomole Shall we change the issue title to "Deprecate SingleQubitGate" and mark it as accepted?
@daxfohl Yup, done. Thanks!
@dstrain115 Have you started on this? I worked on it today and will open a PR soon.
