The p.rp.scope._reads() function to get scope data normally uses 1-3 ms, but occasionally uses 310 ms. I suspect similar large delay where PyRPL reads any register from Red Pitaya (RP).
Anybody knows what causes these large occasional delays ? and how to suppress them ?
Background:
I have a Python loop that controls RP's and also need to empty a fifo every 10 ms to avoid overrun. However when the Python code includes code that retrieve scope data, the occasional 310 ms delay violate my required realtime response time.
Below code runs a tight loop for a specified duration, and registers the max time each loop iteration takes. This is repeated 10 times and the min and max value of the 10 max-delays are listed below. They are typical below 20 ms, but when reading scope data, some loop durations use 310 ms. This is the output when running on my Windows 10, HP ZBook Fury, PyCharm 2022:
Are you sure this has anything to do with windows 10 ? Was it really faster on some other OS (windows 7 ?) ? I am not so surprised that some TCPIP operations can be much longer than average. I have also noticed sometimes that in some networks, the refresh rate of the scope was quite erratic... usually, the problem can be solved by replacing the switch to which the redpitaya is plugged
Not sure it is Windows 10 related, will try Linux. The Red Pitaya is connected directly to my laptop with an UTP cable, i.e. no Ethernet switch between my laptop and Red Pitaya. The sudden delay increase is mostly in the narrow interval 310 - 319 ms. My guess is that some well defined software process gets in the way.
Have now tried on Linux Ubuntu 18.04.6 LTS. The real-time behavior is clearly better: no large 300 ms when running for 1 second. However, when increasing the runtime to 5 seconds I also see on Linux see sudden delay increases. However the delay increase are not constant 300 ms as in Windows 10, but different/random values.
