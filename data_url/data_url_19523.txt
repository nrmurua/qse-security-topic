Would be interesting to check our performance against QSystem published in https://arxiv.org/abs/2004.03560 with code available https://gitlab.com/evandro-crr/qsystem.
The most impressive performance claim is the GHZ state:

Here are some benchmark plots
GHZ preperation:

QFT:

Supremacy-like circuits:

Note that I ran the QSystem benchmarks on the TII laptop (because of Linux) while the rest CPU runs are in my personal one. Some differences may be due to different CPU, but I don't think this is important.
Algorithmically speaking, the GHZ is the optimal case for QSystem's bitwise simulator because it only requires two basis elements when written in the computational basis, so the hashmap only has two elements for the whole simulation. This explains why there is almost no scaling with the number of qubits. Although the hash map idea is generally good, a "criticism" is that many quantum algorithms start by creating a full superposition as this is a promising way to achieve quantum advantage. In this case the hashmap will have 2^n elements and most likely will not offer any advantage compared to the traditional approach that uses the full state vector. Of course this does not mean that it won't be useful in other applications (eg. variational circuits, etc.). Also, QSystem has state vector and density matrix simulators that I did not test. From the paper these seem to be fast for less than 12 qubits but have much worse scaling than Cirq (and therefore also Qibo GPU).
Perfect, many thanks, please reply to JI mail with the url of this issue.
Because we are using TensorFlow operators which are optimized for GPU (e.g. einsum). These operators do not guarantee the best performance on CPU.
A couple of weeks ago we decided to focus just on GPU however if at some point we discover that CPU is mandatory, we can replace the GPU operators with faster CPU implementations, see for example #11 (comment).
That is a very good point. I think the PR #45 already provides the flexibility to select the best operators for GPU and CPU operators (in the later being very close to Cirq), so we could include an automatic hardware parser there.
