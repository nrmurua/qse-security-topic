Currently the qutip.measurement.measure_observable function always uses rank-1 projectors to determine the final state after the measurement. But for obervables with degenerate eigenvalues you might just want to project the state onto a higher-dimensional eigenspace. Eg. measuring the $Z \otimes Z$ operator on the Bell state $\ket{\psi} = 1/\sqrt{2} (\ket{00} + \ket{11})$ using qutip will return either $\ket{00}$ or $\ket{11}$ despite the state being an eigenstate of the observable.
I am aware that I can get my intended behaviour by explicity passing the list of projection operators to the measure function, but the following enhancement would be very useful:
An option respect_degenerate_eigenvalues=False in qutip.measurement.measure_observable that groups the eigenstate projectors based on eigenvalue degeneracy. In the above example the rank-2 projectors |00><00| + |11><11| and |01><01| + |10><10| would be used and the Bell state would be preseved during a ZZ measurement.
Hello. I'm hoping to participate in GSOC, and would like to take a look into this issue as a first contribution.
I think the measurement_statistics_observable function need not return a list of eigenstates of the observable. After all, the user could just call op.eigenstates() directly themselves. If the signature is changed to return all of the possible states immediately after measurement, this can be made the default behavior as in the following code. (I.e, without needing a respect_degenerate_eigenvalues option.) Density matrices will then return projectors on the corresponding degenerate eigenspaces.
Note however, that even if this is implemented, the degeneracy of eigenspaces is determined by the precision with which their eigenvalues are calculated. E.g if two values differ by just 1e-16, they'll still be considered distinct by np.unique().
Would it make sense to add a np.round before the np.unique call? Then the user could specify the accuracy needed for two eigenvalues to be considered distinct.
Yeah, I would think so too. Most of the times the energy gap is quite large compared to calculation errors.
But I'm really a newbie, so I'm not sure what the day-to-day users need. It would be great if a contributor could pitch in if this is a good idea.
Hello! is this still open to contributions?
Is someone working on this issue? If not is it open for the contribution I am interested in working on it.
The issue is open for contribution.
@PriyanshuPansari I have a (very inefficient) code that works somewhat for this. I ran into some issues with calculating the eigenstates (see #1998) which is the reason for the many options for calculating the eigenvalues.   I paste it here for your reference:
Thanks @pschindler, This solved some problems I was having.
