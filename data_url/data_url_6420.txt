Virtual gates are relatively slow, for register-wise operations. In cases like add or subtract without carry, a virtual gate implementation will match a single permutation state input to a single permutation state output. This points to alternative implementations without virtual gates that can correctly match inputs to outputs in parallel as gates would, with significant improvements in memory usage and total processor cycles. For one-to-one input-to-output methods, this has already been implemented. However, register-wise functions that match more than one input to one output have not been optimized similarly, yet. (Also see issue #1 .)
Possible targets for optimization include (register-wise):
I opened a couple of issues without proper consideration of unitarity in reversible computation. (See also #3 )
The closest things to bitwise Boolean comparison operations are properly implemented with Toffoli and X gates. As a convenience, Qrack allows input bit indices to match output bit indices in these methods; this is not generally quantum mechanically correct, because it can break unitarity in an undefined way. If an overwritten input bit is separable, a call to these methods with that input overwritten can be acceptable, but this is not quantum mechanically correct in full generality.
These operations can still be optimized, but the only cases that are generally rigorously acceptable are when first input, second input, and output are all completely disjoint registers. This might simplify the requirements for implementation. (In fact, these are convenience methods that measure and zero the output register before performing the comparison.)
