The cast to int returns 0, and the program fails with
MemoryError: std::bad_array_new_length
when super_dim==32, for example

Hmm...that's definitely integer overflow (2^35 is zero in the lower 32 bits) but it's also the correct value - we do expect the largest tensors to reach this size. The only quick solution I know would be to cast the output of pow to a long instead of an int--in theory this should be possible, but it would only work on 64-bit machines.
I did some tests and casted to long. It crashed. I do not have enough memory for that.
A more convoluted solution would be to use a 2D array for scratch space, storing e.g. the bottom 24 bits of the index in the second array dimension, like:
Obviously, this won't solve the memory issue :/ It also requires going through and converting all of the "scratch" arrays used in the repo to 2D arrays...which at minimum is a widespread change, and likely requires non-trivial fixes to how we address the space.
For most cases, the solution to this is to not run large circuits (e.g. bristlecone_70_1-40-1). However, we should shift to size_t in the future to allow devices capable of running these tests to do so.
@95-martin-orion, should we close this issue?
@95-martin-orion, should we close this issue?
Seems reasonable. The memory flag should be sufficient guard against this issue in the future.
