Several functions in qutip.superoperator return Qobj instances with type="super" (though notably not spre and spost, which return type="oper"). While this is very useful for distinguishing quantum maps from other quantum objects, additional metadata to tell apart Liouville (supermatrix) and Choi representations would be very useful in writing functions that act on quantum maps.
For instance, the average gate fidelity of a map is easily calculated in terms of its Kraus decomposition, such that to find the fidelity of the map represented by a Qobj, one would either call super_to_choi and then choi_to_kraus, or would skip directly to choi_to_kraus, depending on how the map was represented.
Moreover, having this metadata would be especially important if more superoperator representations are added, such as system+environment or Steinspring pairs.
Hi Chris. Thanks for pointing out the inconsistencies with spre and spost. They should, of course, return Qobj of type super. PR #89 should fix this problem.
As for having additional metadata in a Qobj to distinguish different type of superoperator representations, I think that is a good idea. We would certainly welcome pull requests that implements such features.
Thanks for fixing the spre and spost functions so quickly! I'd be happy to write such a PR, but want to make sure that my design meshes well with QuTiP before I start. I wasn't sure if it'd make more sense to add a new attribute to Qobj to hold superoperator representation data (maybe name it Qobj.superrep?), or if Qobj.typeshould be allowed to hold more values. Unter the latter idea, super_to_choi would check that its input has type='super' and would return with type='choi'. Would either of these work with the current and planned design of QuTiP? Thank you!
As I mentioned in the discussion of #90, I think it would make more sense to add this information in Qobj.superrep rather than allowing Qobj.type to have more values, because for some purposes it is sufficient to know if Qobj is a superoperator or not, and it would be a lot easier and more maintainable to add new types of superoperator represenations if we don't have to make changes in many places in the code (which check if Qobj.type is a superoperator)
Sounds good. I think that makes sense in a lot of ways, but I was initially wary of adding additional attributes. I'd be happy to rework PR #90 to be in terms of a new attribute Qobj.superrep, then. Thanks for the feedback!
