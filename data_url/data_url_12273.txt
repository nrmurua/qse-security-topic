In many places in the tutorial the real backend to run on is hardcoded. When many users run tutorials, this creates a problem of overloading some backends and starving others.
The problem is aggravated when one of the overloaded backends goes offline for maintenance, creating very long queues.
A potential solution is to not hardcode the backends. Rather, the tutorial codes must query the backends for availability, and also randomize the backend selection so it gets distributed across users. (In particular, often the tutorials run on 5 qubits. But they could as well run on the 16 qubit device).
@ajavadia i agree. Lets add a lowest pending jobs and go though and fix them.
I added this to the getting started. With the update to qiskit 0.5 it will be nicer but this works. @attp when you go through the tutorials i think we want to have a similar function.
I think this function should be implemented in qiskit or at IBM Q API. I do not think it is wise to ask users to do the load balancing because there are many factors to obtain the best balancing. If users are asked to do so, they will do so greedily and it may not lead to optimal balancing.
Another factor is that we have to take into account many factors, such as, the number of qubits, layouts, gate fidelity, etc when choosing which backend that can run a program.
Resolved by the above PR in the SDK. When merged, I will go through tutorials and update them accordingly.
We have shown how to choose the least busy device at the tutorial.
