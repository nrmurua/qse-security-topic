Treating runtime values like ordinary variables seems to generate a lot of difficult edge cases.  Although it would be nice to handle this in a general and elegant manner, the more pressing need is to get something adequate working soon... So we're going to take a different approach.
This is easier to understand with an example.
The original pseudocode for pyqgl2 runtime conditionals looked like:
or
These are replaced with something like:
Note that it's possible to "cheat" this approach by doing something like:
But in this case we can detect that the assignment of x takes place within a runtime conditional, and mark x as runtime as well (and then decide whether it's a simple case to handle, or halt the compiler with an error).
In this example, we use 'v' as the name of the location to store the result of the measurement.  If 'v' is just a string, then a corresponding location will be allocated in memory, large enough to store as many bits as there are qubits in q.  It is also possible to specify a location explicitly, or with different parameters (i.e. a mapping between qubit names and bit offsets in the memory).  Details TBD.
The current working draft of the syntax is show below.  It's still a work in progress; it doesn't feel mnemonic yet.
I've introduced QValue and QMeas as a shorthand for naming a runtime value and using it as the destination of a measurement, i.e.
