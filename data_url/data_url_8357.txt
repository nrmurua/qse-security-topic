In response to #920, and following the discussion in #949, we need some way to make the compile flags optional during setup. The -march=native is the probable cause of issues with the conda-forge build #647, and also causes problems for some installing in a cluster environment.
However, for most people installing on a local machine, -march=native is likely to have significant performance advantages.  The suggestion is then to have some cmd line option to choose compile flags where the default is 'optimal', which would include -march=native.
@Ericgig we can discuss this next week
I might oppose to the fact that it should be default. The reason is that majority of people don't read the documentation and don't know what "segfault: illegal instruction" means. It might better to note somewhere that CFLAGS="-march=native" pip install qutip will lead to 30% increased performance in certain scenarios.
@slavoutich I am assuming that march=native will only lead to "segfault: illegal instruction" when the compiled objects are used on a machine other than the one that they are compiled on, like for instance the conda-forge package. A pip or setup.py install on a local machine should be fine with march=native. Please correct me if you think this is incorrect
The suggestion that @Ericgig and I discussed is that qutip will set the the flags -w -O3 -funroll-loops via Cython's extra_compile_args unless the  CFLAGS variable is set, in which case it will not set  extra_compile_args, as Cython picks these CFLAGS up. That is if CFLAGS is set then qutip assumes the user knows what they are doing and won't interfere.
We need to test that this will work with the conda-forge build etc.
@ajgpitch You are absolutely correct. Suggestion mentioned above has also perfect sense and IMO the best behavior.
For future posterity: we simply can never issue -march=native commands to build wheels for distribution via pip or conda; we have to have these appeal to the lowest common denominator instruction set.  We have hard-coded SSE2 instructions in zspmv.cpp, but these are ancient, and that's probably the baseline we need to support at least for now (it's been working without issue for a few years now).  Computing clusters don't have the latest and greatest hardware, but usually are just a weird amalgam of other bits.
The CFLAGS changes were merged already, so I'm closing this now.
