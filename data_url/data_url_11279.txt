The module _jellium.py contains a method standardized_dual_basis_hamiltonian which provides a different interface for generating jellium models from that provided by the method jellium_model. As discussed at #320, this method needs a better name to reflect what it actually does. I actually have doubts about whether it should exist at all. It seems to me that the purpose of this function is to provide a convenient interface for generating a proper Grid instance, given the "Wigner-Seitz radius" and number of particles. This actually seems very useful, but it's just not clear enough that that's what is happening. Perhaps the most sensible thing to do is to actually have a function that takes in the required parameters (Wigner-Seitz radius, number of particles, etc.) and outputs an instance of Grid? @idk3 what do you think?
Yeah, after thinking about it more, I think the "standardized" function I had is only really natural for a cube / hypercube. The problem is that you do (maybe?) need the Grid, i.e. maybe there are cases where you might want a 2x4 Grid or something (though I'm not sure how relevant or interesting they are).
The thing I really strongly agree with from your comment is that the Wigner-Seitz radius is the natural quantity we should pass in to jellium_model, rather than a length scale in the Grid that has to be computed from it. I think this caused most of my annoyance with Grid. Passing in the grid scale (which is derived from the WS radius anyway) is like putting the cart before the horse - it's the same as requiring the user to specify distances in the Hubbard model that give desired hopping terms t, instead of letting them specify t directly.
The one small modification I'd like to propose would be to have the Hamiltonian definitions take the WS radius, number of particles, etc, and (instead of a Grid instance) a vector of the side lengths in each dimension. We could then have the function you propose called inside the Hamiltonian function, as well as in other utilities like fourier_transform, which would take the same vector + WS radius as the Hamiltonian. Thoughts? This allows us to completely be ignorant to Grid from the user's standpoint, where I don't think it belongs to begin with.
As much as I appreciate you guys constantly striving to make OpenFermion perfect, I worry that sometimes perfect is the enemy of good. The code is perfectly usable regardless of what we ultimately decide here. But what can be problematic is if we are constantly changing the interface because users write code that depend on the current build and then get upset when we constantly break that build a week later. I think it is important to try to keep our eyes on the prize and push forward with building the really important stuff.
That said, I'm really fine with any of the options being discussed here. But moving forward I would encourage you two try to focus on the big things. Still, I'm thankful that you care so much about these things.
To be clear, I'm not proposing we change the standard jellium model generation method jellium_model, but only the recently introduced method of @idk3 's. At the minimum, it should be given a reasonable name that reflects what it actually does. Ideally, in my opinion, it should simply output a Grid for use with the standard generation method jellium_model. I think that would be something people might actually want to use._
I agree we should be careful about changing how things are "meant" to be accessed. Separating the grid functionality is fair and pretty minimal - #328 addresses this. I still think it would be better to ignore Grid outright and try to make it a class that the user doesn't have to care about - we can do this without breaking any code - but at least this way they can more easily specify the Wigner-Seitz radius.
Closed in #328 .
