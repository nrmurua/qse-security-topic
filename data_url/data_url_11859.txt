Remove backends from params in run_algroithm
I don't know if I understood. What is the difference if "qasm_simulator" string is in the algo_params and IBMQ.get_backend("qasm_simulator") gets called internally as currently ? In case you need to call run_algorithm with multiple backends, you would just change the algo_params dictionary key and call run_algorithm again . Also IBMQ may have to be  initialized with the correct account before getting the backend. If you were using the IBMQ in the cloud you would need to add to the code above the enable_account method. This is all already done by Aqua automatically. Also, the algo params was supposed to represent the full state so that you could run from the command line or from the GUI without needing to do anything else.  Maybe I misunderstood the intention. I will talk to @pistoia too.
because backends are not unique by name in general and may depend on the provider and I don't want the backend to be hidden. I want to be able to add the backends. If the backend does not exist we can produce an error or something.
OK @jaygambetta . I will talk to @pistoia, @chunfuchen and @woodsp-ibm about it so we make sure there is no side effects in the code.
thanks. I just looking through the code and looking at potential issues with terra.
No problem @jaygambetta but I think it would be nice if there were a way I could have some json representation of a unique backend identity. Maybe having provider name & backend name as combined key or something else. That would allow for a complete json representation of the algorithm input but we will discuss it.
but I think in python we should look pythonic. I think we can have a JSON converter for the gui etc.
Sure @jaygambetta I agree about the pythonic way in python code but it would be nice if it is possible to have some form of JSON representation for a backend unique identity for the cases where there is no user code involved.
I am not disagreeing but I don't think needs to be in the main code. It can be a tool.
The 'backend' entity in the input file, whether the text version in Chemistry or the functionally equivalent json form in Aqua have not only the name but also other config parameters for the experiment such as noise, timeouts etc. This allows the whole experiment to be saved in the input file and re-run identically or shared to others, though the latter may require the user to change to a backend they have.
At the level of the Aqua user we have not exposed them to Terra APIs per your example above rather the backend is setup declaratively via the params (internally of course we call the Terra APIs to setup the backend for the algorithm)
Yes but strings are not unique and what happens if I want to run on a different third-party provider. I very much want the backend removed from dependencies of aqua. The login and admin handling should be a responsibility of the backend, not qiskit aqua. In the next update to terra IBMQ will be removed and made an external provider that is installed by default with pip install qiskit.
In general, I would like to see the python user of aqua more pythonic. I am fine having gui that make the higher level users happy but lets not wrap too much in json files.
Aqua does not manage login and admin. The most we do is allow selection/editing of which credential to be used for the experiment that is needed for the chosen backend. Basically what we have is the users desired backend for the experiment and configuration for it - as a declarative config block.  Aqua had called the necessary APIs from Terra transparently to an Aqua user. But yes things have been changing and we need to discuss how to move forward with upcoming planned changes and to handle non-uniqueness etc.
It does by hiding the backend inside it. It is bound to the methods of the backends it hides.
What @jaygambetta is talking about is the following.  For users who have more than one account that access the same backend(s), aqua will no longer work.  For example, I have multiple accounts that have access to Tokyo, and the ibmq_qasm_simulator.  Running the simple script from the website with either gives an error:
As it stands now, I can not work around this error, because the selection of backends is internal to aqua.  This issue will only be exacerbated when third-party providers come online.
I agree that there needs to be a way to use custom providers in the experiments, even just for using the other simulation tools such as JKU and Project Q
The merged PR #163 adds the backend parameter to run_algorithm so that the code on top can be used.
Related to Qiskit/qiskit#1052
Now, we still need a field to store those backend_cfg in the aqua and then pass to terra.
Ideally we should not embed the backend into the algorithm, but rather make the algorithm backend-independent.  Algorithm and backend can be passed to run_algorithm as two separate parameters.
