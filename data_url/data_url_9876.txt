Description
I noticed that the BQM is now stored as a lower triangular matrix. At least this is what I get when I instantiate a random 5x5 matrix.
BUG 1) The embedding function from dwave.embedding fails to provide a similar lower triangular matrix. What is going on here?
BUG 2) Also I would like to have the BQM matrix to analyze. If I run the old method bqm.to_numpy_matrix() - which is now deprecated but still present with no alternative - I get an upper triangular matrix. I guess I can use bqm.to_numpy_matrix().T as for now.
Steps To Reproduce
As for BUG 1, just embed the BQM.
Expected Behavior
Not sure, the new_bqm is it not supposed to be lower triangular as well?
Before embedding BQM

After embedding BQM

I was wrong, the lower triangular matrices are produced only if a dense square matrix is provided in the initialization. Generally it seems that the BQM do not enforce either i > j nor i < j. Even the method bqm.to_qubo() does not produce a dict that follows i < j as it is often written in the QUBO formulations. It seems that there are no issues with the other components, as long as for each (i, j) there isn't another (j, i).
Hi @quosta,
I think the point of confusion here is that the BQM object actually encodes both the upper and lower triangle simultaneously. In general I would not recommend poking around in the private attributes like this, but it is probably useful to look inside the implementation of the DictBQM.
here you can see that we store the biases in an adjacency structure. So each bias is saved twice.
We then de-duplicate when we convert to a QUBO dictionary, for instance with bqm.to_qubo() or when printing or when iterating with bqm.iter_quadratic().
