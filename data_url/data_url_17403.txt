This is an idea for reworking the assemble_circuits and circuit.append functions to make it easy for third-party providers to define and implement custom instructions without having to modify any terra source code.
The idea requires two pieces:
Modify the base Instruction class to have an assemble method that returns the QasmQobjInstruction representation of the instruction for the assembler. The base class should include a default implementation of this that can be overriden by derived classes. Eg something like
Then the assembler would just call this method for all instructions in a circuit (this might need to take arguments to pass in qubit positions or something from the qobj). This offloads having to define special cases in the assembler (like we currently do for unitary, snapshots, and conditionals), and would let these instructions define their own method of assembly.
The second part would be to add a to_instruction method to an object that must return an Instruction subclass object that allows it to be inserted into a circuit, and if you also define a custom instruction subclass you can override its assemble method to define how it is serialized. To make this useful you would need to change the circuit methods that take instructions to check if the input is an instruction or has to_instruction attribute:
and then to define a custom objct that can be converted into a valid circuit instruction something like:
This would be very useful for defining instructions such as arbitrary unitaries, snapshots, kraus errors etc for Aer.
FYI see how Naoki went about solving this problem for pulse in #2115, specifically in the qobj.converters.pulse_instruction module.
I hope this could help:
To define some custom commands, you need to define PulseCommand and its Instruction to handle it in the pulse schedule. Then you can define custom converter (PulseQobjConverter) to create qobj. This object is passed to the assembler.
#2173 "partially closes" this issue. What else is missing?
