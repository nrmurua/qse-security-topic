Hi,
I'm having a hard time getting the build to produce a DLL. I've read through the quickstart guide many times, and I can't seem to get past building the libs in a DLL format to even start with the dotnet wrapper.
I've used cmake in the past (very limited), but surely there has got to be a simpler way of building this stuff :)
Thanks for your time
Did you also read the platform-specific Wiki?
That does provide more options. I can't seem to get cmake working
liboqs-main\liboqs-main\src>cmake ..
-- The C compiler identification is unknown
-- The ASM compiler identification is unknown
-- Didn't find assembler
So i can't get to the msbuild step. There must be more steps involved in the cmake setup than just simply installing it and have vs 2019 at the ready.
I also tried building on WSL (Windows Subsystem for Linux) I get the below error:
CMake Error at .CMake/gcc_clang_intrinsics.cmake:12 (message):
.CMake/detect_gcc_clang_intrinsics.c returned exit code: FAILED_TO_RUN
Call Stack (most recent call first):
.CMake/compiler_opts.cmake:60 (include)
CMakeLists.txt:107 (include)
After spending an embarassing amount of time on this, is there anywhere public that an x86 or x64 dll can be found?
Well cancel that, I got the regular Ubuntu commands to work on WSL.
The build took several minutes to complete
I hope you'll consider pre-built releases in the future.
Actually that only gives me a .so
I can't seem to find the right command or cmake flag to get me a dll.
I hope you'll consider pre-built releases in the future.
There are ready-made pre-build releases available: Please check out the Docker images at https://github.com/open-quantum-safe/oqs-demos
I can't seem to find the right command or cmake flag to get me a dll.
After spinning up a Windows VM, doing as documented in the Wiki and running  (per the  standard cmake shared-lib build documentation) cmake -DBUILD_SHARED_LIBS=Yes .. I just got a DLL built without problem (in bin/Debug).
Yep, been there, tried that.
I was only successful creating a .so file...
Thanks for your time, I'll wait for a true build file, I'm sure something will be available eventually.
I was only successful creating a .so file...
Did you run msbuild ALL_BUILD.vcxproj (instead of ninja)? I don't see how that command can  build an .so file. Second question: Why are the pre-built docker images not suitable for you? What do you want to achieve?
Using the document commands, I am unable to generate the all-build.vcxproj. cmake fails with the details I provided before. I'm guessing VS 2019 or newer would need to be setup for a typical C++ dev environment (something I don't have)
The docker builds don't describe what platform they are built on, I'd have to pull each one down to try and find the dll... and likely find .so in most cases I'd imagine
As far as what I want to acheive - I want to test out some benchmarks & input/output formats via liboqs-dotnet wrapper. I understand the KEMs are not final yet, but I would like to take a look at their current status - mainly compare Kyber & classic mceliece.
Unfortunately I'm kind of burnt out at this point and I'll have to wait for something a tad simpler. Again, thanks for your time.
I'm guessing VS 2019 or newer would need to be setup
That prerequisite is clearly documented
The docker builds don't describe what platform they are built on
Every docker image is tagged at Dockerhub about its platform (Linux). Hence, only .so's. We don't have Windows docker images.
mainly compare Kyber & classic mceliece.
To get a basic idea about that, you may want to look at our benchmarking site. .dotnet-based relative performance won't differ radically on the same platform(s), but be sure to compare only the reference implementation figures as optimized code typically is available for open platforms (Linux) first.
After installing "Desktop development tools for C++" via the VS 2019 installation tool, the build worked. No extra flags needed other than "cmake .." and the msbuild command.
