I often construct circuits by doing
where f is a function that outputs an OP_TREE, and it's possible that f will output an empty OP_TREE. For instance, f may yield operations based on some conditions but sometimes it won't yield anything. However, running an empty circuit on a simulator, for instance:
raises the following error:
I think we should change this behavior to allow running empty circuits which should mean "do nothing".
Can we make it so that
results in final_state being the same as the initial state, rather than giving
? I admit I haven't looked into the situations where result.final_states could have more than one state so maybe this is naive.
This can be made more user-friendly by providing a method (in the object with the simulation result) which would inform whether there are final states (if the empty circuit is interpreted as no-op).
Shouldn't an empty circuit give a final state which is the same as the initial state?
An empty circuit should have a final state of |> (i.e. a numpy array containing a single complex number equal to 1). There is only one state (the empty bitstring state) and the system is 100% in that state.
If the user provides an initial state, then naturally that should be the final state. Maybe they really want i|>?
(If the circuit has qubits but no operations, then the state would be |000...0> instead of |>. The empty bitstring ket is for when you have zero qubits.)
Ah so the problem is that if you don't specify qubits, and you use the intiial_state=int (not array), what is the final state?  How many qubits?
This makes me think the proper behavior is to fail immediately if you give me an empty circuit.
I strongly disagree that an empty circuit should fail. That's like saying that str.contains should fail on empty strings.
If the circuit has no qubits or operations, the length of the initial state vector should be required to be exactly one. The same is true of the results vector. The magnitude of the single entry in the vector should be 1. The initial_state value should be exactly 0, or else an exception should be raised.
Basically, write down the formula for how big things should be for n qubits and then set n=0. If the initial state has to satisfy 0 <= initial < 2**n, then when n = 0 that means 0 <= initial_state < 1 meaning initial_state == 0.
In my use cases so far, I'm always passing in a list of qubits to simulator.run, mainly because I'm interested in looking at the final state output and need to know the qubit ordering that defines the wavefunction. I agree with everything @Strilanc said. The only time a user should be allowed to run an empty Circuit and not give the simulator any qubits is if the initial state is 0 or a numpy array of length 1. However, if qubits are passed to simulator.run, then running an empty circuit should never raise an error.
Should be fixed in #321
