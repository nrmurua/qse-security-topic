The cirq.PointOptimizer class assumes that an optimizer won't change qubits (or at least won't change qubits in a way that pushes the new gate backwards).   If two gates are modified in the same moment to use the same qubits, a ValueError is raised.
A check similar to https://github.com/quantumlib/Cirq/blob/master/cirq/circuits/optimization_pass.py#L128
needs to be added at or around Line 148 to detect this condition and adjust the 'i' index or frontier accordingly.
A minimal example that causes the issue is below.
I have sent a PR which tries to resolve this, but there is one inherent issue with trying to address this problem. If two gates in the same moment are changed to act on the same Qubit, what should be the ordering in which these two gates are applied on the Qubit? This will become implementation dependent and I'm not sure if that's something we want. Let me know your thoughts on this.
