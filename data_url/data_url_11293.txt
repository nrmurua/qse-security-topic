It seems the current gaussian_state_preparation_circuit(quadratic_hamiltonian) only spit out one ground state and is agnostic about the degeneracy. How can we make the function produce the preparation circuit for other degenerate ground states as well? Thanks!!
The header of gaussian_state_preparation_circuit looks like
As you can see, there is a keyword argument occupied_orbitals. The value of this argument indicates which eigenstate of quadratic_hamiltonian you want to prepare. The default behavior is to give you a circuit that prepares the ground state.
The "orbitals" in occupied_orbitals refer to the pseudo-particle orbitals that correspond to the basis which diagonalizes the quadratic Hamiltonian. Recall that up to a constant, any quadratic Hamiltonian can be rewritten in the diagonal form
so that the eigenvalues are the sums of subsets of the \epsilon_j. The reason there is degeneracy is that some of the subsets sum to the same value. The ground state corresponds to creating pseudoparticles in the orbitals b^\dagger_j b_j where all the \epsilon_j are negative. But if some of the \epsilon_j are zero then you can fill in those orbitals too and get another ground state.
As an example, if the \epsilon_j were [-4, 0, 0, 4] then putting occupied_orbitals = [0] would give you an eigenstate with eigenvalue -4, but so would putting occupied_orbitals = [0, 1] or [0, 1, 2].
If you want to find out the \epsilon_j you can run
Then orbital_energies will contain the \epsilon_j. The eigenvalues will be shifted by constant.
Now that I think of it it's probably good to have this functionality demonstrated in the demo!
Looks like this closes the issue.
