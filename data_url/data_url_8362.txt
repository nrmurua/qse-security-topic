Consider the following example:
Now, it seems very sensible to want to apply the superoperator to the density matrix via a simple product. However, this fails:
The only way to do it seems to be:
I would argue that the product L * rho should do this kind of conversion internally instead of throwing an exception. It seems to me the intention of L * rho is completely unambiguous, but maybe I'm missing something?
Having the product work out of the box means that I can write a simple propagation routine as (A * dt).expm() * state and it would work independent of whether (A, state) are a (Hamiltonian, vector) or a (Liouvillian, density matrix). Currently, I have to catch the different cases and handle them separately.
I do not know if L * rho not working is desired or an oversight.
However you can call operator Qobj: L(rho) does what you expect of L*rho.
Since H(ket) also work, you can use that form to handle both cases with the same code.
Oh wow! That's really nice! (and completely undocumented, as far as I can tell ;-) ). I had actually noticed at some point that callable(qob) returns True and wondered what that was about.
So this definitely solves my problem, and I could see the argument for the abstract "apply x to y"  being realized asx(y). In that case, maybe not allowing objects with incompatible data shapes is ok after all. I'll leave it to the maintainers to decide whether they want to close this issue with "wont-fix".
