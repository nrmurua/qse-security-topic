qsimcirq does not support passing a cirq circuit, and instead requires passing a QSimCircuit instead. This is poor user experience because the user needs to change their code when using qsimcirq instead of the native cirq simulators.
Program:
q0 = cirq.GridQubit(0, 0)
q1 = cirq.GridQubit(1, 0)
def basic_circuit(meas=False):
sqrt_x = cirq.X**0.5
yield sqrt_x(q0), sqrt_x(q1)
yield cirq.CZ(q0, q1)
yield sqrt_x(q0), sqrt_x(q1)
if meas:
yield cirq.measure(q0, key='q0'), cirq.measure(q1, key='q1')
circuit = cirq.Circuit()
circuit.append(basic_circuit())
print("Ciruit:")
print(circuit)
import qsimcirq
qsimulator = qsimcirq.QSimSimulator()
qsim_result = qsimulator.simulate(circuit)
Output:
ValueError                                Traceback (most recent call last)
 in ()
40
41 #qsim_result = qsimulator.simulate(program = qsim_circuit)
---> 42 qsim_result = qsimulator.simulate(circuit)
43
44 #qsim_result = qsimulator.compute_amplitudes(program = qsim_circuit,
1 frames
/usr/local/lib/python3.6/dist-packages/qsimcirq/qsim_simulator.py in simulate_sweep(self, program, params, qubit_order, initial_state)
138       """
139     if not isinstance(program, qsimc.QSimCircuit):
--> 140       raise ValueError('{!r} is not a QSimCircuit'.format(program))
141
142     options = {}
ValueError: cirq.Circuit([
cirq.Moment(operations=[
(cirq.X0.5).on(cirq.GridQubit(0, 0)),
(cirq.X0.5).on(cirq.GridQubit(1, 0)),
]),
cirq.Moment(operations=[
cirq.CZ.on(cirq.GridQubit(0, 0), cirq.GridQubit(1, 0)),
]),
cirq.Moment(operations=[
(cirq.X0.5).on(cirq.GridQubit(0, 0)),
(cirq.X0.5).on(cirq.GridQubit(1, 0)),
]),
]) is not a QSimCircuit
This was fixed in #104. The actual issue here is that we haven't had a release in quite some time.
See also: #59
I've taken ownership of this issue to bring our release back up to speed.
