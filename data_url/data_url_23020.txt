I tried to implement a controller, which is more complex than a PID, using the IIR-module. The controller is "just" a discrete-time linear transfer function. That didn't work and during debugging I stumbled across multiple issues with the IIR module I couldn't explain.
The fpga code only uses four coefficents, whereas the difference equation y0 = b0 * x0 + b1 * x1 + b2 * x2 + a1 * y1 + a2 * y2 of a general second order section / biquad has five. There is also a warning in the python code if b2 is non-zero. This would suggest the IIR module is currently unable to implement filters with complex zeros?
I also had weird outputs suggesting an unstable filter or some sort of transient oscillation or even saturation even given very small inputs.
I'm currently prototyping a re-implementation of the fpga-side implementation - I there didn't dig too much deeper into the second issue.
Edit: Also just... to avoid trouble later: What branch should I sensibly base any PRs on? I also did some dead-code removal in the verilog code for example.
Hi, please use the branch develop-0.9.3, the IIR implementation is a bit more advanced there than in the master branch. As far as I rememer, one can implement complex zeros, just needs to make sure the number of poles is bigger or equal to the number of zeros (for the high-frequency response not to diverge). Actually if there are as many poles as zeros, I think the code automatically adds a first-order pole near the nyquist frequency to make the filter more stable and to simplify the computation of the coeffiicients.
I just merged above branch into master. This should fix the issue. In case it persists, please re-open this issue @Delphinator
Sorry this took so long.
As far as I can see the issue still exists. The warning about b_2 != 0 is still there and the FPGA code only has four coefficents instead of the required five.
As far as I can tell the FPGA code implements y0 = b0 * x0 + b1 * x1 + a1 * y1 + a2 * y2, which corresponds to the (z-domain) transfer function
which can only have a single real zero (given real-valued coefficents). It can however have one or two real poles or a single complex conjugate pair of poles.
EDIT: @lneuhaus I may missing it, but I seem to be unable to re-open the issue?
