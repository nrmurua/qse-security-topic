This method searches for available xacc plugins and installs them to the cppmicroservices framework.
We need to set this up to not be dependent on the installation directory, as that may not be there in the case of a wheel install.
Currently we search for external plugins in $HOME/.xacc/plugins, and this is fine. But how to load the internal xacc-quantum-{gate,aqc} plugins that are in the installation directory?
My first thought is that we have xacc-framework create a internal $HOME/.xacc/.internal_plugins file that contains the path from
This would require that users run
before using the framework.
ServiceRegistry could start by searching for this .internal_plugins file, and then if not found or invalid, throw an exception that explains to the user that they must run the above initialization command. If found, the plugins are loaded and the the rest of the plugins are loaded.
Now if we start using pip install for plugin wheels, then we must require our users to go through the xacc-framework executable. They would then run
which would try to pip install the wheel, and if successful would add the path to the library to the .internal_plugins file. If not successful, then it would be do a custom build and install to .xacc/plugins/
Add a map to ServiceRegistry that keeps track of installed plugins so we don't try to reinstal plugins that have been installed.
