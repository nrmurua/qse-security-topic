As a user of PulseTemplates, I wish to be able to save and load PulseTemplate to/from a persistent storage to simplify reuse. PulseTemplates should be stored in a readable way to allow modification of stored PulseTemplates without invoking the software. It should be possible to either store an entire PulseTemplate hierarchy in a single file or split the hierarchy, store different subtrees in separate files that reference each other.
During the 3rd meeting it was decided to use JSON-files as the primary format of storing PulseTemplates (see #8 for a discussion on different storage mechanisms).
To allow for flexibilty, PulseTemplates should not know how they are stored. This should be encapsualted in a PulseTemplateSerializer object which provides an interface for PulseTemplates to serialize and deserialize their internal information from an abitrary persistent storage.
PulseTemplates need to be identified by a unique name to derive file names and construct meaningful references. However, it may be possible to embed PulseTemplates only relevant for a single hierarchy into the serialization of their parent PulseTemplate. In this case, no identifier is needed.
Proposed changes to the current design:
Introduce new abstract class PulseTemplateSerializer:
PulseTemplate:
Changes to the intended design:
Introduce new base class Serializable:
PulseTemplates and ParameterDeclarations will be Serializables.
Introduce new class Serializer:
I like it. Related to this issue is the question of serializing mapping functions.
The problem there is that functions cannot be pickled. There are several approaches for this. I am going to open a separate issue for that.
