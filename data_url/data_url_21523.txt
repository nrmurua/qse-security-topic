Since #1461, the manual suggests to use delay_mu(self.core.ref_multiplier) as an option to avoid sequence errors. On b89610b this fails because core.ref_multiplier is implicitly a int32 and delay_mu() expects a int64.
What's better?
We also run periodically into this behavior. It is expected behavior, but it is not convenient.
In our code, we only use ref_multiplier in the context of time in machine units. Casting the value to int64 in artiq.coredevice.core.Core.__init__ would probably be a convenient solution for us. Though in the end, I think any of the proposed solutions is fine with us.
There's no good reason for ref_multiplier to be int64. It's always a small number.
Is it?
Specifically for us, I would not call it a very common use case, but it is our only use case for this variable at this moment. A quick search through the ARTIQ repo also suggests that this variable is mainly used in the context of time in machine units.
I think adding delay_rtio_coarse() is overkill, but any of the other solutions would work for us.
There's no good reason for ref_multiplier to be int64. It's always a small number.
Agreed. I was mostly reacting to the fact that the example in the manual doesn't work.
Is it?
On user code, I don't know.
In the coredevice drivers, there're a couple of isolated hits. For example spi2 and suservo do
and make use of ref_period_mu outside of delay_mu() calls.
grabber and sawg on the other hand locally cast core.ref_multiplier (named c and coarse_cycle respectively).
Instead of casting core.ref_multiplier, would it make sense to expose ref_period_mu in the core instance (maybe as coarse_ref_period_mu for consistency) such that delay_mu(self.core.ref_period_mu) works?
