For QEngineCPU, we support the 256 bit width AVX extension for double precision builds, SSE 1.0 for float builds, and the option to completely remove intrinsics for systems that lack them. It would be nice to make good use of 512 bit width AVX instructions.
This is by no means a high priority, but it's something I want to track. Single qubit operations at float precision don't need this, for any purpose I can think of, and it's likely only a modest performance gain for double precision builds, maybe roughly but less than a factor of 2 on typical execution time. It's also another set of variants for the single target qubit gate protected method in QEngineCPU, which is already complicated by preprocessor switching many different ways for intrinsics, but that's long been tolerable for only this one core method, with high optimization priority, for a general single qubit target gate.
We have an intrinsics header or two for complex numbers that are worth referencing for this task, and Apply2x2() in src/qengine/state.cpp also.
If you happen to have an interest in writing C++ with intrinsics, it's basically just linear algebra coded in multi-float wide registers, which you can lookup from the Intel Intrinsics Guide. If you've taken a linear algebra class and want to code for Qrack, this is potentially a "good first issue," but there will be others.
If we have any takers for this for the Unitary Fund Hackathon, please remember that we want to be able to enable and disable this option via CMake. However, if you get AVX-512 working at all, I can personally help you with the CMake, if you need me to.
Take note of the CMake PSTRIDEPOW build option. It sets the number of work items dispatched in a single threaded asynchronous batch by QEngineCPU via ParallelFor. So long as this parameter is >=1, ParallelFor could safely be modified to combine pairs of work items at once, for AVX-512 opportunity. It's safe to assume that CMake option ENABLE_AVX512 must be OFF if PSTRIDEPOW=0. (The default for PSTRIDEPOW, for typically maximum performance, is 9.)
Interesting tidbit I just read: Intel is pushing consumer motherboard manufacturers to disable AVX-512 support in BIOS, (at least in some cases, for reasons I don't totally understand).
AVX-512 gives us 8x width double SIMD operations, which have no particular obvious use to us; the most we need for 2x2 gates is 4x width, though we could have hacked around substantially enough to handle 2 iterations of 4x at a time, with 8x double SIMD registers. This was never particularly high priority, as a result.
If some consumer systems are losing AVX-512 support going forward anyway, there's really no reason to hack this together. We're tagging this issue wontfix and closing.
