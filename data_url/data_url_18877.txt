Logical OR use || as C.
https://github.com/Qiskit/openqasm/blob/master/source/language/classical.rst#comparison-boolean-instructions
Concatenation of arrays use || also.
https://github.com/Qiskit/openqasm/blob/master/source/language/types.rst#register-concatenation-and-slicing
In #180 (comment), @zachschoenfeld33 suggested that
According to the current live spec, concatenation is only for qubit registers and shown only in alias statements.
It is natural that concatenation is allowed in any qubit specification such as bits = measure q0 || q1;
On the other hand, logical OR will not be used in qubit specification because binary operations of qubits are not allowed (for example, given two qubits q0 and q1, q0 == q1 is not valid).
Therefore, I believe that a parser can distinguish Logical OR and concatenation of registers even if || is used for the both.
Another option would be to use ++ like in Haskell and Scala. (if we free up ++ from being increment like I suggest here: #144 (comment)
I agree that || should not be array concatenation.
I agree that || should not be array concatenation.
Then let's overload the '+' operator which seems the simplest and most intuitive option.
I would support + as it is common to more languages vs ++
I would prefer ++ if #74
With +, the 0b10 + 0b01 is 0b1001 or 0b11? If #74 is ignored, + is good with me.
Consensus of the TSC was to use ++ for this.
I closed in error. We still need to update the spec to replace ||  with ++
