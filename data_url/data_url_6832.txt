I was wondering how hard it would be to make a new kind of control operator that would run a certain gate U if the control is OFF and inverse(U) if the control is ON.
The only way to accomplish this right now is to write down the gates one after the other:

I was thinking about something like this:

It would actually be quite a bit of work to add, I think.
Applicability rules. This operation modifier doesn't work on certain operations that controls work on (e.g. postselection, detectors, displays). There would need to be a new set of "does this modify that?" rules. The hardest part would be writing well behaved code to detect whether or not a custom matrix gate was invertible (since custom matrix gates may not be unitary, and these kinds of discrete checks are flaky when applied to floating point values).
Simulation code. Either the GLSL generation code would need to be generalized to perform an operation in one part of the superposition and its inverse in another part (super hard) or the javascript would need to know to decompose an inverse-controlled operation into "controlled U then U^-1 then U^-1". Note that the latter strategy introduces a compounding exponential cost when a composite operation containing inverse-controls is itself inverse-controlled.
I would also want to come up with a better way of visually indicating it. The mix of black and white makes me think it is the control that is switched from off-type to on-type. E.g. the control linking up to the power or something, though that would be hard to get right for every gate..
Overall I think this is a reasonable idea, these kinds of situations where you want to quantumly control the inversion certainly show up in circuits, but I don't plan to implement it because of the implementation challenges I mentioned.
Thanks for the info!
