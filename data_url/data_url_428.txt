I tried this to specify the clang as my compiler:
cmake .. -D CMAKE_CXX_COMPILER=clang++
After that, the make will generate this famous error (a lot of people are discussing about why the very basic headers cannot be found by clang.)
fatal error: 'string' file not found
So, I changed the CMakeLists.txt of the staq from this:
to this:
Everything works like a charm.
Now, I am not an expert of the tool chains. I just feel that clang should be smart enough to figure out where to get the basic things like standard headers on a mainstream Linux box such as the Ubuntu 19.04, which I am using.
Did you build it successfully by clang on your box with that -stdlib=libc++?
Hmm, interesting. We had had trouble with clang and glibc at some point, which switching to libc++ fixed. The error you report is fixed for me in Ubuntu 18.04 by installing libc++-dev, but I'm getting linking errors with clang for either standard library. Leaving this open until we can figure out what to do with clang
If you want to use clang with libc++ (and not libstdc++, which is the default C++ runtime on Linux, as the latter uses the gcc toolbox), you need to install both libc++-dev and libc++abi-dev via sudo apt-get install libc++-dev libc++abi-dev; works on our end (and also on Travis CI, now that we support clang as well). Note that on Linux (Ubuntu) ldd ./staq shows
so both libc++ and libc++abi are used during linking.
Great. It now works for me too.
Thanks.
