The code in qiskit/tools/visualization.py are poorly covered by the current testsuite. (see #221)
It would be great to have more tests to cover the methods and functions in this file.
I don't see the qiskit/tools/visualization.py in tree anymore. Should this be updated to the contents of qiskit/toos/visualization/ now? I checked the coverage. I ran the current coverage numbers here:
(and the new interactive stuff has 0% coverage)
Although part of the problem will be a lot of what's in those files will just calls to matplotlib or other external libs. We can test that with mocks but it doesn't really help to test if we're formatting the data correctly or use the right arguments to generate the desired visualization output.
Good point, I'm updating the title to reflect the change. Mocking external libs is definitely an option.
Hi, I've been working with a project team at my home institution, and as a final assignment for our Software Design course, we were interested in addressing this issue. As of right now, we just wanted to confirm whether this issue is still an active concern, as well as which specific files you were referencing above that currently have 0% coverage.
Thanks in advance for your consideration!
@youngchuleta Yes this is still an issue, but things have moved around a bit in the visualization directory. I just reran the coverage numbers by running locally from the root of the repo:
tox -ecoverage && .tox/coverage/bin/coverage3 html
Which yielded:
@youngchuleta Yes this is still an issue, but things have moved around a bit in the visualization directory. I just reran the coverage numbers by running locally from the root of the repo:
tox -ecoverage && .tox/coverage/bin/coverage3 html
Which yielded:
File	Statements	Missing	Excluded	Coverage
qiskit/tools/visualization/__init__.py	15	5	0	67%
qiskit/tools/visualization/_bloch.py	274	244	0	11%
qiskit/tools/visualization/_circuit_visualization.py	115	65	0	43%
qiskit/tools/visualization/_counts_visualization.py	58	50	0	14%
qiskit/tools/visualization/_dag_visualization.py	38	32	0	16%
qiskit/tools/visualization/_error.py	4	0	0	100%
qiskit/tools/visualization/_latex.py	670	267	0	60%
qiskit/tools/visualization/_matplotlib.py	469	412	0	12%
qiskit/tools/visualization/_qcstyle.py	55	28	0	49%
qiskit/tools/visualization/_state_visualization.py	320	293	0	8%
qiskit/tools/visualization/_text.py	485	30	0	94%
qiskit/tools/visualization/_utils.py	10	7	0	30%
qiskit/tools/visualization/interactive/__init__.py	8	8	0	0%
qiskit/tools/visualization/interactive/_iplot_blochsphere.py	28	28	0	0%
qiskit/tools/visualization/interactive/_iplot_cities.py	31	31	0	0%
qiskit/tools/visualization/interactive/_iplot_hinton.py	31	31	0	0%
qiskit/tools/visualization/interactive/_iplot_histogram.py	57	57	0	0%
qiskit/tools/visualization/interactive/_iplot_paulivec.py	39	39	0	0%
qiskit/tools/visualization/interactive/_iplot_qsphere.py	76	76	0	0%
qiskit/tools/visualization/interactive/_iplot_state.py	29	29	0	0%
Perfect! We also had a couple more questions:
We want to make sure we're accessing the test files correctly, since it seems as though we're only seeing a few of the tests that have been developed for this library. In particular, we've been looking at the files posted in qiskit-terra/test/python with "visualization" included in their titles, so we want to confirm whether these are all the relevant files we should be looking at.
We wanted to confirm with your team the general/file-specific requirements we should be testing for.
Again, we appreciate your correspondence!
@youngchuleta the current file organizational structure in the tests/python directory is less than ideal. There are other bugs open about that (see #1211 for example). If you're planning to work on improving the coverage here I'd probably recommend just making a new directory: tests/python/visualization or tests/python/tools/visualizationand putting the tests in there. It's the direction we'll be moving for things anyway and will help organize the new testing better.
As for what to target I'd probably prioritize the non-interactive visualizations. The interactive visualizations while they have 0% coverage don't actually do much in python. Most of the functionality is in an externally hosted js library and the python code is just about formatting the data as a json blob we pass to that and then render in jupyter. What I'm really hoping to gain by increasing coverage here is to make sure we exercise the code run by the public api (circuit_drawer(), plot_histogram(), and plot_state()) to make sure we don't accidently break things in the future (like what happened recently in #1245 )
The complexity here comes from the fact that most of the visualization code is about calling to matplotlib to generate a properly formed image. We really don't want to be testing that matplotlib does the right thing, which probably means we'll have to end up doing a lot of mocking to verify the behavior.
I am going to close this now we have moved visualization to its own folder. @mtreinish has added lots of test and if we still need more lets make issues for the individual tests.
