See the following comment for the specific test that doesn't seem to be working:
Originally posted by @co9olguy in https://github.com/_render_node/MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI1MTM2NDE1/pull_request_reviews/more_threads
Interesting! @josh146, @co9olguy, I am not able to use that link. Could you share some more information about this?
Oops, look like the link is broken. It is from here:
https://github.com/XanaduAI/strawberryfields/blob/master/tests/frontend/test_decompositions.py#L508
I ported over the test you wrote from unittest to pytest, and for some reason could not get those two commented out assertions to pass. I had a look at the two orthogonal matrices O1 and O2, and it looks like they were no longer symplectic, so I assume it is the return of that bug?
The actual decompositions.py file is unchanged, so it could be three things:
The old test had a bug in it that made it look like it was working, and this was removed by porting to pytest
The ported test has a bug in it
The new test is using a different function argument that has uncovered an edge case bug in the decompositions.py file
@josh146, thanks for sharing. If I understand correctly, this is a different bug that pops up when we input passive matrices. The S matrix is sensible (identity) but some submatrices of the O1,O2 matrices are somehow rotated, as was happening in the original bug.
I'm not sure how Bloch-Messiah should respond to passive inputs. We could in principle deal with passive matrices separately. One option could be to return O1 = S_in and S = O2 = Identity. Another could be S identity and O1, O2 = sqrt(U).
Ah, thanks for catching that. I saw the rotated O1 and O2 matrices and assumed it was the same issue.
One option could be to return O1 = S_in and S = O2 = Identity. Another could be S identity and O1, O2 = sqrt(U).
In most cases, the Clements or Reck decomposition will be called directly after the Bloch-Messiah decomposition. In this case, it probably makes more sense to do O1 = S_in and S = O2 = Identity, to reduce the gate count?
Sounds good! Implemented. @josh146, could you please review? I also think that this function is getting a little too unwieldy so suggestions for refactoring it are welcome!
