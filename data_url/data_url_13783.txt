Current Cirq folding functions use the convention of inserting two new moments per gate fold, namely G -> G G^dagger G. The primary reason for this is to make indexing the new circuit simple -- every insertion in moment m shifts every moment after m by two.
This has the perhaps undesirable effect of creating a bunch of new moments in the circuit. (Or, from a hardware implementation perspective, it might be beneficial to have "virtual" gates in their own moments, I don't know.)
There are three options:
(1) Don't decrease the number of moments.
(2) Decrease the number of moments by more careful indexing inside the folding functions.
(3) Decrease the number of moments by "collapsing" gates into the same moment as much as possible after the current folding functions are called.
I tend to think that (3) is the best option as it allows for both possibilities that it's beneficial to have virtual gates in new moments on hardware, or that it's not.
To implement (3), I propose writing a new function which implements the collapsing procedure, and adding a boolean argument to fold methods to specify if this should be called after the folding or not.
So, the changes would be adding the function
and modifying fold methods for the new input:
Sounds good, thanks @rmlarose.
We should be aware that  collapse_gates_into_moments would collapse also the gates which are  unrelated to the folding process. In other words, if the original circuit has a non-trivial structure of moments, this structure would be lost if collapse_gates_into_moments == True.
For me this is still ok, but maybe we should warn the user in some way (e.g. with a note in the doc string?).
