Hi,
We added qsim to quantum simulator benchmark: https://github.com/quantastica/quantum-simulator-benchmark
Goal is to compare quantum simulator algorithms and see how different simulators performs with single shot, one circuit at a time, 1...X qubits.
Currently, we are running QFT algorithm only, but plan is to add more circuits in near future.
Now, we would like to know if we are running qsim correctly, so if someone is willing to review our code, that is great.
qsim related code can be found here:
code which creates QFT algorithm in qsim native format: https://github.com/quantastica/quantum-simulator-benchmark/blob/master/benchmark_qft.py#L77-L94
and code which executes simulation: https://github.com/quantastica/quantum-simulator-benchmark/blob/master/benchmark_qft.py#L191-L219
Results performed on Google Cloud n1-standard-8 node shows following:

Thank you!
Your usage of qsim looks correct to me, but it there may be a misunderstanding in how it is meant to be used. The result value returned from qsim is a full state vector, not just a single sample. Since it implements cirq.WaveFunctionTrialResult, it should be possible to do the following:
This generates 1000 samples, but only needs to perform the simulation once.
As a general note, there are several different classes of simulator supported in Cirq: samplers, amplitude-finders, and full-state simulators (like qsim). Each of these performs best on a specific set of tasks; for a single-shot sampling test, the sampler-type simulators will likely give the best performance.
@95-martin-orion thank you for your answer.
OK, now I got it.
Our intention is to see how quickly simulator can build (internally) state vector and take single sample from it. We don't want to measure roundtrip of entire state vector (which is large with higher number of qubits) from simulator to python (and python's probably slow sampling from it).
Now, one more question: is qsim capable of returning sample(s) ?
OR: is there option to tell qsim to simply don't return anything after it builds statevector? (timing should be close enough because sample is just one weighted random choice from statevector which is fast operation anyway).
Our intention is to see how quickly simulator can build (internally) state vector and take single sample from it.
Just to be certain we're on the same page: for sampler-type simulators, building the entire state vector isn't strictly necessary. This is why they can outperform qsim for single-qubit samples.
Now, one more question: is qsim capable of returning sample(s) ?
OR: is there option to tell qsim to simply don't return anything after it builds statevector? (timing should be close enough because sample is just one weighted random choice from statevector which is fast operation anyway).
We have an issue open for Python sampling support (#65), but my understanding is that pybind uses ctypes for passing objects from C++ to Python - I wouldn't expect a significant overhead from this. Unless you are concerned about the cost of sampling in Python vs. C++, using the Cirq sample_state_vector method (from cirq/sim/wave_function.py) should be representative of the actual sampling cost.
@95-martin-orion thank you!
Iâ€™m closing this issue.
