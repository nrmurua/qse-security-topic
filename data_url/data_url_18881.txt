Versions
Python 3.8.3
OpenQASM Version: 2
Trying to replicate the example code from https://arxiv.org/pdf/1806.10221.pdf
`
Code
from qiskit import QuantumCircuit, Aer, execute
qasm_str = """OPENQASM 2.0;
include "qelib1.inc";
qreg qr[25];
creg cr[25];
h qr [0];
h qr [3];
h qr [4];
h qr [7];
h qr [8];
h qr [11];
h qr [12];
h qr [15];
#To  i n i t i a l i z e  the  a n c i l l a s  required  f o r  diagonal  checks  in|1>state
x qr [19];
x qr [20];
x qr [21];
x qr [22];
x qr [23];
x qr [24];
x qr [0];
x qr [3];
x qr [4];
x qr [7];
x qr [8];
x qr [11];
x qr [12];
x qr [15];
#Preparing  each  of  the  4  blocks  in  the 4−qubit W−state
ccx  qr[0], qr[3], qr[1];
ccx  qr[4], qr[7], qr[5];
ccx  qr[8], qr[11], qr[9];
ccx  qr[12], qr[15], qr[13];
x qr [0];
x qr [3];
x qr [4];
x qr [7];
x qr [8];
x qr [11];
x qr [12];
x qr [15];
ccx  qr[0],qr[3],qr [2];
ccx  qr[4],qr[7],qr[6];
ccx  qr[8],qr[11],qr[10];
ccx  qr[12],qr[15],qr[14];
cx  qr[2],qr[0];
cx  qr[2],qr[3];
cx  qr[6],qr[4];
cx  qr[6],qr[7];
cx  qr[10],qr[8];
cx  qr[10],qr[11];
cx  qr[14],qr[12];
cx  qr[14],qr[15];
#Circuit  f o r  performing  column  check  ( Fig .  1 Part  I )  using  3  a n c i l l a r y  qubits
h qr [16];
h qr [17];
h qr [18];
cu1(3.14159265358979)  qr[16],qr[0];
cu1(3.14159265358979)  qr[16],qr[4];
cu1(3.14159265358979)  qr[16],qr[8];
cu1(3.14159265358979)  qr[16],qr[12];
cu1(3.14159265358979)  qr[17],qr[1];
cu1(3.14159265358979)  qr[17],qr[5];
cu1(3.14159265358979)  qr[17],qr[9];
cu1(3.14159265358979)  qr[17],qr[13];
cu1(3.14159265358979)  qr[18],qr[2];
cu1(3.14159265358979)  qr[18],qr[6];
cu1(3.14159265358979)  qr[18],qr[10];
cu1(3.14159265358979)  qr[18],qr[14];
h qr [16];
h qr [17];
h qr [18];
#Circuit  f o r  performing  diagonal  check  ( Fig .  1 Part  I I )  using  6  a n c i l l a r y  qubits
#Evaluating  f (Q1,Q2) ,  value  of  which  i s  stored  in  qr [19]
ccx  qr[0], qr[5] , qr[19];
ccx  qr[1] , qr[4] , qr[19];
ccx  qr[1] , qr[6] , qr[19];
ccx  qr[2] , qr[5] , qr[19];
ccx  qr[2] , qr[7] , qr[19];
ccx  qr[3] , qr[6] , qr[19];
#Evaluating  f (Q1,Q3) ,  value  of  which  i s  stored  in  qr[20]
ccx  qr[0] , qr[10] , qr[20];
ccx  qr[1] , qr[11] , qr[20];
ccx  qr[2] , qr[8] , qr[20];
ccx  qr[3] , qr[9] , qr[20];
#Evaluating  f (Q1,Q4) ,  value  of  which  i s  stored  in  qr[21]
ccx  qr[0] , qr[15] , qr[21];
ccx  qr[3] , qr[12] , qr[21];
#Evaluating  f (Q2,Q3) ,  value  of  which  i s  stored  in  qr[22]
ccx  qr[4] , qr[9] , qr[22];
ccx  qr[5] , qr[8] , qr[22];
ccx  qr[5] , qr[10] , qr[22];
ccx  qr[6] , qr[9] , qr[22];
ccx  qr[6] , qr[11] , qr[22];
ccx  qr[7] , qr[10] , qr[22];
#Evaluating  f (Q2,Q4) ,  value  of  which  i s  stored  in  qr[23]
ccx  qr[4] , qr[14] , qr[23];
ccx  qr[5] , qr[15] , qr[23];
ccx  qr[6] , qr[12] , qr[23];
ccx  qr[7] , qr[13] , qr[23];
#Evaluating  f (Q3,Q4) ,  value  of  which  i s  stored  in  qr[24]
ccx  qr[8] , qr[13] , qr[24];
ccx  qr[9] , qr[12] , qr[24];
ccx  qr[9] , qr[14] , qr[24];
ccx  qr[10] , qr[13] , qr[24];
ccx  qr[10] , qr[15] , qr[24];
ccx  qr[11] , qr[14] , qr[24];
#Performing  measurement on  a l l  qubits
measure  qr[0] −> cr [24];
measure  qr[1] −> cr [23];
measure  qr[2] −> cr [22];
measure  qr[3] −> cr [21];
measure  qr[4] −> cr [20];
measure  qr[5] −> cr [19];
measure  qr[6] −> cr [18];
measure  qr[7] −> cr [17];
measure  qr[8] −> cr [16];
measure  qr[9] −> cr [15];
measure  qr[10] −> cr [14];
measure  qr[11] −> cr [13];
measure  qr[12] −> cr [12];
measure  qr[13] −> cr [11];
measure  qr[14] −> cr [10];
measure  qr[15] −> cr [9];
measure  qr[16] −> cr [8];
measure  qr[17] −> cr [7];
measure  qr[18] −> cr [6];
measure  qr[19] −> cr [5];
measure  qr[20] −> cr [4];
measure  qr[21] −> cr [3];
measure  qr[22] −> cr [2];
measure  qr[23] −> cr [1];
measure  qr[24] −> cr [0];
"""
qc = QuantumCircuit.from_qasm_str(qasm_str)
backend = Aer.get_backend("qasm_simulator")
#Execute the circuit and show the result.
job = execute(qc, backend)
result = job.result()
print(result.get_counts())
`
Error
Exception has occurred: QasmError
'Unable to match any token rule, got -->#<-- Check your OPENQASM source and any include statements.'
The example is not useable as literally shown because # is not the comment character in OpenQASM.
Thanks. I changed the comments and also the '−>' to '->' in measure and it worked.
