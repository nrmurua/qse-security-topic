{'qiskit-terra': '0.11.1',
'qiskit-aer': '0.3.4',
'qiskit-ignis': '0.2.0',
'qiskit-ibmq-provider': '0.4.5',
'qiskit-aqua': '0.6.2',
'qiskit': '0.14.1'}
Executing on IBM Q Experience Jupyter Notebook Server
Executing on IBM Q Experience Jupyter Notebook Server
If you run Deutsch-Jozsa first on the qasm-simulator and then on the statevector-simulator you get an 'IndexError: list index out of range' error.
If you run Deutsch-Jozsa first on the stavector-simulator and then on the qasm-simulator you get an
'No counts for experiment' error.
****** For the first error:
from qiskit import *
from qiskit.aqua import *
from qiskit.aqua.components.oracles import *
from qiskit.aqua.algorithms import *
oracle = TruthTableOracle("0101")
dj = DeutschJozsa(oracle)
backend = Aer.get_backend('qasm_simulator')
quantum_instance = QuantumInstance(backend)
result = dj.run(quantum_instance)
print(result)
backend = Aer.get_backend('statevector_simulator')
quantum_instance = QuantumInstance(backend)
result = dj.run(quantum_instance)
print(result)
****** For the second error:
from qiskit import *
from qiskit.aqua import *
from qiskit.aqua.components.oracles import *
from qiskit.aqua.algorithms import *
oracle = TruthTableOracle("0101")
dj = DeutschJozsa(oracle)
backend = Aer.get_backend('statevector_simulator')
quantum_instance = QuantumInstance(backend)
result = dj.run(quantum_instance)
print(result)
backend = Aer.get_backend('qasm_simulator')
quantum_instance = QuantumInstance(backend)
result = dj.run(quantum_instance)
print(result)
Both experiments should run without problems (I've tried with other algorithms, for example Grover, and the issue doesn't seem to exist).
To have this work you should re-create the algorithm (DJ) and components (oracles in this case) for each experiment. Consider that after construction and when run the algorithm/components are "consumed" by the experiment to produce the end result. I.e. internal variables may be updated as part of the run in producing the result (only in construction of the new instance are such variables set to defaults). So the object instances used in the 2nd experiment may have internal state left over after the first run and may not work as expected if re-used.
Now depending on the algorithm/components you might find that re-running, i.e. re-using the same instances, is possible however this is not guaranteed at all as the design/implementation did not require instance re-use across experiments. This is something we are presently re-evaluating for other reasons such that re-use would be part of the basic design and required.
But for now something like this works (i.e. create identical new instances for use in 2nd experiment/run)
Thank you. I had found a similar workaround, but thought you might be interested in knowing about the problem. Glad that you are onto it and thanks again for the response!
Sure, you're welcome. Evidently instance re-use can require much more careful implementation and testing to ensure things all work, but as I mentioned we are re-evaluating this aspect for other reasons. So in the future what you had tried to do may become possible but for now each experiment should have new instances. If you do this you should not have this problem.
Understood, thank you!
