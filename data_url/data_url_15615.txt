Performing Statevector.draw('latex') on a statevector that includes numbers which are near zero, results in bad output.
A sample CSWAP-test circuit:
evolution of a sample input statevector according to the CSWAP-TEST:
Notice the near zero numbers at indices 1,3,5 and 7:
Performing:
Produces:

Should produce:

Although a vector output and not Dirac notation, note that performing:
does not suffer from the same problem.
Is it possible to set up a global "snap to sigma" parameter to the whole system, such that all underlying auxiliary functions can follow?
(and it would be nice to change 'latex' to 'dirac'... :))
Can you assign me please?
Thank you!
I don't know if this has been patched yet, but the issue is in  state_visualization._state_to_latex_ket .
In particular here:
This issue is that _round_if_close()  uses np.real_if_close() which if called on an array will only return real if the entire array is real.  Something like this would work:
data = np.array([ _round_if_close(v) for v in data])
Or some more 'numpy' way to do it probably exists, perhaps  _round_if_close()  could be defined like this instead (not tested in detail!):
EDIT: note that isclose has a rather large default value for the tolerance and might not be appropriate.. as opposed to real_if_close which uses 100 times the machine epsilon .  Kind of a pain but something of which to be aware.
Oh that comment was meant to help  whoever is going to patch the code, not for end user work around.  My work around btw is to do this:
which is ugly but works :)
