This is bad!
X-ref #1837 - maybe we should just deprecate it?
X-ref #1837 - maybe we should just deprecate it?
Added a comment there - IMO, that issue should be closed as obsolete. ParamResolver now provides a nontrivial speedup over what is possible with function-based parameter resolution by memoizing complicated parameter mappings.
If we deprecate it, should we have a hashable version? Presumably hash support was added for a reason (?)
The main use case I'm aware of for hashing ParamResolver is to support hashable CircuitOperations, but the behavior is as old as the class itself (#96).
Very few things in python are truly immutable; would we be okay just documenting that ParamResolver expects that the dict passed to it will not be mutated, or do we want to try to more enforce immutability more strictly? One possibility would be to make a defensive copy of the input dict, as in #4329, but this may have performance implications in tight loops, such as sweeps over circuits.
This is already documented:

A decision on this should be made, it looks like it is floating without a clear decision on what to do.  Marked triage/discuss to bring this up.
I think it's pretty bad that we're caching hashes of a dictionary-like object. Python dictionaries are not hashable because they can mutate. It would be even worse if they cached their hash value.
Discussion from cirq cync:  One possibility (unverified but might work) is to remove hashing capability from ParamResolver and CircuitOperation.
Lessons from un-hashing experiment: more pain than it's worth, likely introduces new and exciting issues.
The chosen resolution for this at the Cirq sync is outlined in #5507: we'll make the relevant fields "private" and use properties to at least let mypy identify sketchy behavior.
