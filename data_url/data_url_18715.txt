If we add a :CNOT case to the function gate-application-trivially-satisfies-2q-target-requirements so that CNOT p q simply gets optimally compiled to CNOT p q, then the compiler gets itself into infinite loops. The doc string of that function (which I wrote) is:
"Does the gate application INSTR trivially satisfy the requirements imposed by REQUIREMENTS? (In other words, do we actually need to do decomposition?)"
and it seems that CNOT is appropriate since it's a valid target. Maybe it shouldn't be a target? Maybe 2q compile is wrong? I'm not sure.
It seems like if there is this bug, there must be other ones lurking.
(CC @ecp-rigetti)
Eric sez:
Any compiler that returns a result is seen as “making progress”, which is why it doesn’t check any compilation methods below the successful one. If you consume a nonnative gate and return the same, you’ll never actually make progress & instead fall into a loop
This doesn't happen anymore since the compiler will just give up.
