It would be awesome to be able to take something like
and run it with
where d becomes the dictionary mapping states to their measured probabilities.
So, for examples, run(["h(0)", "cx(0, 1)"], num_qubits=2, shots=5000, backend="ibmqx4") would return {"00": a, "01": b, "10": c, "11": d}, where, if the quantum computer was perfect, b = c = 0.0 and a = d = 0.5.
If algorithm doesn't contain a "measure" gate, then by default we measure all the registers.
It is implemented mostly below, and has support for all gates. See the if __name__ == '__main__' statement for example usage.
Hi @jiosue,
This seems more like a script, and not really suitable for including in Qiskit. The aim of Qiskit is to provide the API and interfaces that users can use to build their own tools. Building a circuit and executing it in Qiskit is straightforward (refer to the examples directory).
The main advantage of what you are describing is to basically start from a string, and not build a QuantumCircuit in python. For this, Qiskit already has something similar:
You can write it in OpenQASM language and use circuit = load_qasm_string(qasm) to get the QuantumCircuit equivalent.
I am closing this but please let me know if there is something I have missed.
