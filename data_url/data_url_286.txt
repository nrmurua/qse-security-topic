Building code with nvq++ currently results in the inclusion of all plugin libraries which are present in the install (see nvq++.in:197). Currently if building with python support, this includes libcudaq-pyscf.so. This plugin depends on libcudaq-chemistry.so, which is not linked by default, resulting in a runtime error: error while loading shared libraries: libcudaq-chemistry.so: cannot open shared object file: No such file or directory.
This can be fixed by manually adding -lcudaq-chemistry to the compile command.
Build CUDA Quantum with CUDAQ_ENABLE_PYTHON set to True.
Compile the bellow hello world program with the command nvq++ -o hello ./hello.cpp. Then attempt to run the binary ./hello, or use ldd hello to view the linkage.
Programs compiled with nq++ but not using cudaq-pyscf or cudaq-chemistry to not try to link either (or to successfully link both).
Not a regression
Modify nvq++.in to only link libcudaq-pyscf.so when the chemistry package is loaded. Alternatively, my unsophisticated local solution was to append -lcudaq-chemistry to the list of always loaded libraries.
Following the bug report I cannot reproduce this.
So the plugins ought to be linking against the files in both lib/plugins and lib by default.
Apologies for the delayed response -- if it can't be reproduced I'm happy to assume it was either an issue with the specific version I was using or (more likely) a local configuration error. I'll close!
