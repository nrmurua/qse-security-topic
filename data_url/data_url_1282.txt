Summarize the task
Currently, distance queries in MappingManager and logical -> physical qubit queries in RouteCQC are made using dictionary lookups.  In order to scale routing to 100+ qubits and 1000+ moment circuits, we need to replace these dictionary lookups with array indexing to gain speed.
Based on profiling the runtime of the current implementation, @tanujkhattar  and I expect a 2-2.5x speedup from this optimization.
Acceptance criteria - when is the task considered done?
This can be done by sorting the logical qubits in the incoming circuit and mapping each qubit to its index in the sorted list. The same for the physical qubits in the given devices. The logical to physical mapping then will simply be a mapping of integers to integers. This can be kept track of in a single array of integers.
These dictionaries would have to be converted into a 2d numpy matrix and every method in [Some]InitialMapper, MappingManager, and RouteCQC that currently accepts and/or returns cirq.Qid(s) as function arguments would be converted to accept int(s).
Related
http://tinyurl.com/cirq-qubit-routing
@ammareltigani Can you also add screenshots for the profiling and add a brief explanation of why the speedup is expected?
Above is a screenshot of profiling the transformer on 100 qubits 500 moments and 1/2 op density. After switching the array indexing the combined time spent in dist_on_device and apply_swap (two mutually independent methods that do dictionary lookups ove qubits) should be reduced only to a few seconds.
Some very simple tests
shows that array accessing ints is 25x faster than dictionary lookups that require hashing the qubits. So we can expect the 170s to come down to 7s for a total shave off of ~160s, or ~3x speedup.
