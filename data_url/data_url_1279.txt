X.controlled simplifies to CX when possible (and Z to CZ). However this does not work when the control_values is represented as a SumOfProducts, requiring workarounds by any code expecting such optimizations.
A fix for this is provided in #5873.
This is probably backwards incompatible. Potential considerations:
One open question:
decompose on X.controlled(cirq.SumOfProducts([[1]])) currently throws TypeError: object of type '<class 'cirq.ops.controlled_gate.ControlledGate'>' does have a _decompose_ method, but it returned NotImplemented or None. So going ahead with this strictly benefits that situation.
Also note that all other cases for X.controlled(...) already return CX when possible. e.g. X.controlled(cirq.ProductOfSums([[1]]) returns CX. Just SumOfProducts([[1]]) doesn't, even though it represents the same control value. So fixing this improves consistency.
https://github.com/quantumlib/Cirq/blob/master/cirq-core/cirq/ops/common_gates_test.py#L125-L128
@tanujkhattar Any further thoughts on this? The linked PR is ready to go. I added additional details in the comment above.
