Right now what we can do, and what is done in the notebook, to take a measurement is:
This is getting too restricted, we could start overloading the run() even more with all kinds of stuff but I have the feeling it will get too big.
There are a lot of things I might want to do. And i want to propose some kind of measurement container. That can take care of settings, metadata, storage, and notes and others.
This also encourages reusing loops, instead of loop(...).run(...)
I'd like to run a measurement like this.
@alexcjohnson and others, what do you think about this?
I agree that qc.Loop is not enough. The example you give is similar to the workflow I use.
Something like the qc.Measurement object is good, but I am also happy with this living outside qcodes and people having their own versions of this. What I would like however is for qcodes to provide all the necessary components to build such functionality (e.g. storage of data, metadata and plots).
@MerlinSmiles , @alexcjohnson .
In general I like the current Loop, however the biggest inconvenience is that a new instance of the Loop has to be created for every measurement that is started. In principle this is fine, however because a lot of arguments need to be given to the Loop in order not to use the defaults it causes a lot of repeated code upon use (the things listed in exp = qc.Measurement( location ... etc) in your example). This is information that is different for every group/setup/person however usually stays fixed after that.
Additionally It involves creating a new plot (that needs to be handed data explicitly) every time a new loop is started.
The way we use the MeasurementControl (MC) is very similar to what you propose in having a reusable container exp
First we instantiate the MC, this instance contains a plotting monitor, info on the data location, basically all the stuff you put in exp = qc.Measurement( ...
After that we set the sweep_functions (parameters to sweep) and sweep points
This MC can then be reused.
To me the advantages of reusing an object that is instantiated once are:
Additionally I consider explicitly specifying the sweep points (as opposed to implicitly upon instantiation of the loop) to be more clear, however I am aware that this is my personal preference.
So basically I'm a big fan of the ``exp` object you propose.
Thanks for your comments @AdriaanRol
as for the default information, I thought that is what the station is for, in my proposed exp I just wanted the ability to overwrite this. I.e. put test measurements into a different folder.
Now with your comment, I indeed realize that you have to make a new loop for changed values. hm.
As for the reusing of the plotting monitor, I think that is a very valid point, and it is very important. I'm still in testing phase, but all those plotting-windows that open remind me a lot about igor (which is not an awesome memory).
Actually I think we can reuse it already now.
plotQ.clear()
plotQ.add(x = xx, y = yy)
But I have not looked into reusing subplots and such.
@MerlinSmiles
As for the reusing of the plotting monitor, I think that is a very valid point, and it is very important. I'm still in testing phase,
I have some code snippets for reusing the Qcodes QTplot for 2D plotting. Maybe they are useful for you.
The code is part of the MC and I use the QCodes plotting for 2D (heatmap plots) and for 1D adaptive measurements. I have a separte QTPlot based monitor for my 1D plots but the reason I don't use the qcodes one is mostly historical.
The way I use the plots below puts multiple figures in the same window and clears it everytime a new run is exectued. As my MC is not running in a separate process I use time explicitly to determine when to update.
EDIT:
I agree that most of the defaults belong in the station, however it doesn't make sense to me that the default measurement is set in the station, to me that is something that belongs to the Loop (or exp). I think that the discussion where certain information belongs still needs to be had.
Thanks for that @AdriaanRol
Indeed, that is a discussion we should have.
We had the same feeling about the default measurement, until we realized that the default measurement is only measured when no actions are within a loop. i.e. qc.Loop(param).run() when it is qc.Loop(param).each(foo, bar).run() the default is ignored.
After that insight we couldnt really figure out if we liked this or not.
I thougt I would put the time in the default measurement, then it is always saved with all my data, but it'll get kicked out in a loop with an .each
How about getting rid of the default measurement altogether? Meaning you can only set it in the Loop as per  There should be one-- and preferably only one --obvious way to do it..
Actually, I would like that, would make it clearer for the user. @alexcjohnson ?
Group decission is to remove the default measurement feature.
