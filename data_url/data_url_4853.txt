Unexpected warning using parameter shift gradient with NumPy backend.
The problem is at

The problem is probably also present in parameter_shift_grad_v2.
This is more generally an inconsistency between backends. JAX and NumPy will issue a warning when casting from complex to float while tensorflow will not.
NumPy and JAX use astype for casting while tensorflow uses plain cast. Since the function name is cast, it makes more sense to adopt the tensorflow behavior and suppress the warning.
commit df66795
Yes, there are always many warnings on implicit type convention when using jax, in general no numerical bug. Any specific implementation idea to screen this type of warning in tc?
And this warning is from implicit dtype conversion, instead of astype? I see no warning directly from the following command: jnp.ones([2]).astype(jnp.complex64)
Two ideas:
It is also possible the suppress the warning temporarily instead of globally according to the documentation.
2. In the backend.cast method, check complex to float conversion and raise an exception when the imaginary part is not zero or just directly take the real part.
And this warning is from implicit dtype conversion, instead of astype?
I think so
Thanks for your suggestion, will take the following approach within cast method implementation
Note before python 3.11, catch_warnings doesn't accept category parameter
fixed by 7fab89a
