I have a FermionOperator, and I'd like to make the assumption that some of the orbitals are always empty and others are always full. (As I understand it, this is similar to the active space functionality in MolecularData.) My question is, what's the best way to do this?
What I'm thinking of doing is implementing two methods for FermionOperator, assume_occupied(index) and assume_unoccupied(index), that will remove the ladder operators that act on a given orbital and multiply the coefficients for the corresponding terms by 0, +1, or -1 as appropriate. I'd also need to implement a prune() method for SymbolicOperator that determines which indices don't appear in any terms and then renumbers the indices accordingly.
The idea is that
FermionOperator('1.0 [4^ 5 6]').assume_occupied(5).prune()
would yield -1.0 [0^ 1].
Does this seem like a reasonable way to go?
Ok, I just realized that it's a bit more complicated than I originally thought and the above example isn't right. I'll have to think about this some more...
I won't speak to its perfect accuracy, but I attach the following note I used a long time ago for deriving some parts of the active space routine in OpenFermion.  You may find the general methodology useful in deriving what you want to do:
ActiveSpaceHamiltonian.pdf
Ok thanks!
