You could explain in the readme what "ZX calculus" actually is. Google search returns mainly papers, which is not the easiest way to explain things.
Just two or three sentences would be already an improvement :)
Good call. I have updated the readme to add a bit of information about the ZX-calculus and some references. Unfortunately there are no 'blog-style' introductions to ZX-diagrams as of yet, so research papers would be your best bet to learn more about it. The first paper linked in the readme now should be pretty accessible.
Hi @johnie102. Could you please also add why this project is important? And also why people should care e.t.c? From my experience, it's been hard to sell ZX-calculus to people because it uses, for a lack of a better word, "non-mainstream" mathematics.
Thanks @johnie102 !
And I agree with @vtomole - this also would be very helpful.
There's a couple of reasons people not invested in the ZX-calculus could be interested in this project. The main one of which is that our set of rewrites get a better than state-of-the-art T-count for some standard benchmark circuits
Working in the ZX-calculus as opposed to just reasoning about linear maps also has general benefits because it simply makes it easier to do so (in my opinion).
@akissinger Do you maybe want to weigh in on this and add some motivation to the readme?
To answer some of the questions above we have built a website at zxcalculus.com which includes some introductory material, links to more mainstream papers, and a small demo of PyZX itself. Any comments from people outside of the ZX community would be greatly appreciated!
@hmillerbakewell it's great! Exactly what I think this project needed :)
Just make sure this link is well exposed in the readme, cause right now I don't see it anywhere.
I've updated the readme with some links to zxcalculus.com.
