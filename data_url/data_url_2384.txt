Deferred from #1788
I do like the idea of having the concept of "equivalent in the eyes of QC", but the == operator may not be suited for that purpose. If we special case instances like this and get used to the idea that a==b implies a and b are equivalent in the eyes of QC, then it can be easy for a user to make the mistake of thinking that a and b are equivalent in the eyes of QC implies a==b.
Suppose instead we add a protocol to serve this purpose? Global phases should be ignored for the purpose of such a protocol since they aren't physically meaningful in QC.  We already have a test in testing that checks this for circuits with terminal measurements.
While I was vehemently opposed to having PhasedXPowGate.__new__ sometimes give you a XPowGate, I'm fine with saying they're equal. This all reminds me of the difference between e.g. float and int
It would be surprising if float(3) gave you an int but it's not surprising that float(3) == int(3)
One of my primary issues with the == relationship is that you might have an instance where a device supports only one of XPowGate and PhasedXPowGate, in which case the device may support XPowGate but not understand PhasedXPowGate. My intuition says that A==B implies Device.validate_gate(A) and Device.validate_gate(B) either both pass or both throw errors.
I'm not sure if I personally would expect that implication, but I don't have a convincing argument.
How should we resolve this issue? anyone else have thoughts?
Current behavior is still as described
Ultimately this is somewhat tied to concepts of a gate set, however I don't see a good case not to keep them equal since it really only occurs now for specific defined values of the gates where they are equal.
I'm going to close as we have other places where gate set is argued for and against.
We should open if there are places where this causes user confusion or our own bad code.
