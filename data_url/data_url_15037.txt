The Inverse of the sx gate seems to add more gates than necessary.
For my application I need a gate and the minimal inverse of this gate with a given gate set (e.g from a device).
Here I take the inverse of the SX gate which results in apply two rz gates then a sx gate and then two more rz gate. But two rz gates in a row could be simplified by one rz gate.
Note that I use the gate set of the 5-qubit devices.
I provided 3 examples. In the first the sx gate is added to the circuit. Then the inverse of the sx gate is added.
In the second circuit consists of the inverse of the sx gate without optimization.
The third circuit is like the second circuit but optimized with optimization_level 3.

It should be expected that without an optimization_level, the inverse is rz(-pi) sx rx(-pi).
No response
Strictly speaking, none of this is a bug. Please take a look at the documentation of Qiskit's BasisTranslator pass (https://qiskit.org/documentation/stable/0.42/stubs/qiskit.transpiler.passes.BasisTranslator.html). Note that it is not guaranteed to produce the most optimal translation to any given basis, however you can specify your own translations using a custom EquivalenceLibrary. Considering the first circuit as an example, if you run with optimization_level=1, then it will get simplified by combining Rz(pi/2) gates, thanks to Optimize1qGatesDecomposition transpiler pass.
Maybe i should re-label it, but is there any gain from translating the sx gate into 5 gates instead of 3 gates?
The Sx gate is somewhat a special gate because it is part of many devices as a basis gate, so I thought that there is a special treatment.
Note that for my application I need the the inverse of the gate but with minimal gates used.
If I apply an optimization to the first circuit the resulting circuit has no gates because it is just the identity matrix.
For my specific case I want to sx gate and the inverse, but the inverse with the minimal gates used.
If you transpile at optimization_level=0, you're asking for us to do no optimisation, so it seems odd to complain that the resulting circuit is not optimised.  If you use the default optimisation level (1), you'd get the result you're looking for the circuit at a whole.  If you want to specifically control certain gates in the circuit and use optimization_level=0, you probably want to directly add the gates you want to the circuit.
The reason it gets translated into 5 gates with no optimisation is just because the equivalence rule that it passes through takes sxdg to s - h - s, which then gets taken to rz - (rz - sx - rz) - rz.  At any optimisation level other than the 0 you've used, we'd then resynthesise that into just three gates.  We can't meaningfully add synthesis rules for every gate for every possible combination of basis gates a backend machine might have, which is why our compiler pipelines are split up like this.
I think I can close the issue.
But I want to mention that using optimization level 1 on the first circuit does not result in the solution I want. Because the circuit is just the identity gate and optimization level 1 realizes that fact and results in no gates at all.
Ofcause you cannot add synthesis rules for every gate this is not what I wanted to achieve.
Sorry to bother you guys and thanks for the help.
