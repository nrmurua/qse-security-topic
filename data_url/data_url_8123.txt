I am trying to determine the relationship between Delta and the frequency of this graph. I put all the code that creates the pulse into a for loop and replaced Delta with "x" so the loop can run over different values. For each Delta ("x"), I use lmfit to fit the curve to a decaying oscillation equation and determine its frequency, then I plot the fit. I've noticed that the fit is worse for the lower values of Delta in the for loop. I think restricting the fit to the region over which the pulse actually acts can improve it. The pulse occurs from 0 to 0.5e-5 seconds which is half the length of the times array (1e-5). len(times) outputs 1000, so I thought I could accomplish this by writing times[0:500] and results.expect[1][0:500], but I get an error.
Code:
from lmfit import Minimizer, Parameters, report_fit
h = 6.62607015e-34
b = 0.1786195317554453 #magnetic field
b_AC = 3.572390635108906e-05 #oscillating magnetic field
g = 2 #g-factor
u = 9.274E-24 #bohr magneton
w = gub/h #omega
w0 = 5e9 # omega0 is the rotating frame frequency
gamma_phi = 999000
gamma_minus = 1000
epsilon = gub/h*(2cmath.pi)
Delta = gub_AC/h(2*cmath.pi)
H0 = (w-w0)/2 * sz #+ Delta/2*sy
times=np.linspace(0, 0.00001, 1000)
state0=(state_z_plus)/(np.sqrt(1))
for x in range(2000000,10000000,900000):
def pulse(t0,t1,t):
return np.heaviside(t-t0,2e-9)-np.heaviside(t-t1,2e-9)
def H1_coeff(t,args):
t0=args['t0'] #pulse start time
t1=args['t1'] #pulse end time
phi=args['phi'] #phase
return x*pulse(t0,t1,t)*np.sin((w-w0)*t+phi)
args = {"t0":0,"t1":0.5e-5 ,"phi":(1/4)*np.pi}
H = [H0,[sx,H1_coeff]]
results=q.mesolve(H, state0, times, e_ops=[sx, sy, sz],c_ops=[cmath.sqrt(gamma_phi/2)*sz,cmath.sqrt(gamma_minus)*sm], options=qutip_options, args=args)
def fcn2min(params, x, data):
amp = params['amp']
shift = params['shift']
omega = params['omega']
decay = params['decay']
model = amp * np.sin(xomega + shift) * np.exp(-xx*decay)
return model - data
params = Parameters()
params.add('amp', value=1, min=0)
params.add('decay', value=5)
params.add('shift', value=0, min=-np.pi/2., max=np.pi/2.)
params.add('omega', value=5e9)
minner = Minimizer(fcn2min, params, fcn_args=(times, results.expect[1]))
result = minner.minimize()
final = results.expect[1] + result.residual
#report_fit(result)
fig, ax=plt.subplots()
#ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$')
ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$')
#ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$')
ax.plot(times, pulse(0,0.5e-5,times))
ax.plot(times, final, 'r')
ax.set_xlabel("time")
ax.legend();


I did try to understand the question you are investigating, but a quick look at the error report you can see that the problem is just in the final plotting. If you only fit the first 500 data points, you can only plot those first 500 points, unless you do some extrapolation in advance.
So change the line to ax.plot(times[:500], final, 'r') should work.
