Description
Summary of initial clarifications
Clarifications
Additions
Hi @FyzHsn - Tagging you since believe you are owning the DB schema. Request you to go through the clarifications & additions above. Pls re-assign as you see fit.
Cc @santoshkumarradha @scottwn @wjcunningham7
Clarifications
I'm assuming that it'll have to be an absolute path for it to be useful. Do you have any preferences or thoughts on this?
Thank you for pointing out storage_type and arg_index. I have added these in both V9 and V10.
Electrons can be of several types: parameters, functions, sublattices, generators, subscripted, list and dictionary. The value_filename stores the value for electrons that are of type - parameter. The results_filename stores the output corresponding to an electron that is executable, i.e. an electron of type function or sublattice.
Both lattice.status and electrons.status take the values: NEW_OBJECT, COMPLETED, RUNNING, FAILED, CANCELED.
electrons.type can take the values: parameter, electron_list, electron_dict, subscripted, generated, sublattice, attribute, arg.
It will store the lattices.id of the immediate parent.
It should produce 2 lattices corresponding to A and B. It should also produce 3 electrons corresponding to B, C and D. B shows up in both the electron and lattice table since it's a sublattice.
Additions
Yes, added in V10 of the DB schema already! My apologies, I was supposed to put it back in earlier.
Possible implementations -
a. Maintain these columns from the dispatcher itself. ie Whenever the dispatcher updates the electrons table, it will also update the number of completed electrons
b. Delegate it as a DB responsibility For Eg as a Trigger (Performance implications to be studied)
@ArunPsiog @mpvgithub @Aravind-psiog
@FyzHsn
Yes, absolute path makes sense.
v10 schema

Few other clarifications @FyzHsn based on v10. Request your inputs -
We have a few other clarifications more from a knowledge perspective. Will connect with you to clarify.
Cc @Prasy12 @Aravind-psiog @ArunPsiog @mpvgithub
Note - Pls check history for versions
Hi @FyzHsn - We went through the DB implementation of v9. Wanted to clarifiy the following
Clarifications on actual DB implementation - v9
Hi @FyzHsn - We went through the DB implementation of v9. Wanted to clarifiy the following
Clarifications on actual DB implementation - v9
Ah that looks like a type. I'll stick to the Database schema.
I'm not sure what you mean by dispatcher.pkl.  The executor field in the Result metadata sometimes contains a string dask / local and sometimes an Executor object. The current implementation simply pickles what's in the Result object metadata which is why some examples have an actual executor while others have a string name.
@FyzHsn
I'm not sure what you mean by dispatcher.pkl.
That was a typo. Should have been executor.pkl
The executor field in the Result metadata sometimes contains a string dask / local and sometimes an Executor object.
We are currently referring to the executor.pkl file that is referenced under executor_filename DB field to fetech any executor related information. Should we be looking at this or the results.pkl file for any executor information?
The current implementation simply pickles what's in the Result object metadata which is why some examples have an actual executor while others have a string name.
Will this implementation stay or will it switch to either in the stable implementation? Rather - Do you think we should handle both possibilities and not expect one format over the other?
@FyzHsn
I'm not sure what you mean by dispatcher.pkl.
That was a typo. Should have been executor.pkl
The executor field in the Result metadata sometimes contains a string dask / local and sometimes an Executor object.
We are currently referring to the executor.pkl file that is referenced under executor_filename DB field to fetech any executor related information. Should we be looking at this or the results.pkl file for any executor information?
The current implementation simply pickles what's in the Result object metadata which is why some examples have an actual executor while others have a string name.
Will this implementation stay or will it switch to either in the stable implementation? Rather - Do you think we should handle both possibilities and not expect one format over the other?
For the near term, could you handle both possibilities? Later on we can ensure that the string gets replaced by the actual executor when it's stored in the result object.
For the near term, could you handle both possibilities? Later on we can ensure that the string gets replaced by the actual executor when it's stored in the result object.
Sure
We are currently referring to the executor.pkl file that is referenced under executor_filename DB field to fetech any executor related information. Should we be looking at this or the results.pkl file for any executor information?
Can you clarify this? @FyzHsn
When the electron object is defined, the user can input executor=SomeExecutorObject() or executor="dask" or executor="local". I think the fix should be that when the metadata is stored, the result object should store the actual objects and not the string. Then the database would only pickle the executor objects instead of sometimes the "dask" and "local" string.
Note - Pls check history for versions
Hi @FyzHsn - We went through the DB implementation of v9. Wanted to clarifiy the following
Clarifications on actual DB implementation - v9
@FyzHsn - Updated takeaways from thursday's discussion in the above comment
Consolidation of all fixes & schema enhancement requests from Team Psi
Fixes
a. executor.pkl to only contain an iterable object with all executor details.
b. electron_id column in lattices table to be populated when the record belongs to a sub lattice.
c. Some files contain a mix of bytes & string content. All files to be uniform and per schema spec Eg function_string_filename, error & info log to only contain string, but today has a mix of bytes & string.
d. Only one result file should be generated and should be correctly linked in the DB. Currently two files result.pkl and results.pkl are generated. results.pkl is the file referenced in the DB but is empty.
Schema modifications
a. An is_active integer field to be added to all 3 tables and defaulted to 1.
b. A number of completed electrons column to be introduced to the lattices table. This column is to be updated everytime an electron completes execution.
c. A total number of electrons column to be introduced to the lattices table. This column to contain the total number of electrons in that lattice
Consolidation of all fixes & schema enhancement requests from Team Psi
Added an issue for that.
b. electron_id column in lattices table to be populated when the record belongs to a sub lattice.
This was fixed last week. Can you confirm that you're still seeing issues with this?
c. Some files contain a mix of bytes & string content. All files to be uniform and per schema spec Eg function_string_filename, error & info log to only contain string, but today has a mix of bytes & string.
I'm simply storing pickled files here. Not sure what you mean by a mix of bytes and string. In any case, here's an issue to store the txt and log files as text.
d. Only one result file should be generated and should be correctly linked in the DB. Currently two files result.pkl and results.pkl are generated. results.pkl is the file referenced in the DB but is empty.
All the stored output files are now called results.pkl. In either case, why is the hard-coded path being used? Wouldn't it be better to use the filename paths stored in the DB?
Here's the issue for it.
b. A number of completed electrons column to be introduced to the lattices table. This column is to be updated everytime an electron completes execution.
c. A total number of electrons column to be introduced to the lattices table. This column to contain the total number of electrons in that lattice
The issue for points b and c is here.
#906
#900
@mshkanth Can this issue be closed?
@mshkanth Can this issue be closed?
My bad. Missed the notification. Have assigned this to myself for any final vetting out required.
@mshkanth Can this issue be closed?
My bad. Missed the notification. Have assigned this to myself for any final vetting out required.
Thank you sir!
@mshkanth can this be closed as completed?
@wjcunningham7 - Pls go ahead and close this. We haven't re-visited this in a while and we can pick this up again when we resume OS activity.
@mshkanth closing this for now assuming this is resolved.
