I'm trying to extend Cirq by adding some functionality related to QEC, and I had some questions about the best way about going about this. For right now, I'm trying to implement a generic encoder that encodes k qudits into n qudits using some encoding scheme (i.e. repetition code). Right now, I was imagining someone using this would provide the gate sequence that performs the encoding when creating the encoder, and then the encoder can be called similar to how gates are called on qudits. However, I'm wondering what the best way to represent the gate sequence used for encoding would be without specifying the qudits. Right now I was thinking of doing this by just specifying a list of tuples where the first parameter is the gate class and the second parameter are the indices of the qudits the gate calls on with. For example, the following would be the list for the [[9, 1, 3]]-Shor Code:
Is there a better way of doing this using existing Cirq features that I may not be aware of?
I think what you want to do is make it a function that takes in the qubits and then either returns the list of operations (gates acting on qubits), or an iterator over these.  That way people can pass in their own qubits.
Then you can use just use there where you would with the actual qubits
Does this make sense?  (Hopefully I'm not missing something)
Yeah that's very helpful! Thanks!
