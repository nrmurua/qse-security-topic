When a node fails, the UI only displays  the name of the failed node and not any detailed error message.This occurs because a failing node's error message is not propagated correctly to the Result object.
When a node fails during execution, the Result object stores the node's error message in Result._error for display in the UI. Unfortunately, Result._get_node_error() no longer seems to work even though the error message is stored correctly in the node. Consequently, users cannot view the error message in the UI and can only see it by querying the transport graph directly, which also requires them to know the failing node's node_id.
Example:
yields the generic output
The error is stored in the node:
@cjao We read the error information from the error.log file that is generated for the lattices and for nodes we read it from the stdder.log. Hope once this fix is done, these files will be populated with the required information.
cc: @mshkanth
The problem here is that the schema is missing an Electrons.error field. This would contain the string representation of any exception raised by the task. We may add this to V13 or implement some other fix.
@cjao We read the error information from the error.log file that is generated for the lattices and for nodes we read it from the stdder.log. Hope once this fix is done, these files will be populated with the required information.
cc: @mshkanth
Sure Casey, I have mentioned the way we read and show the errors on the UI. So if these files are populated properly it should be good.
By the way, the error is stored in the node only because we still pickle the entire transport graph, albeit only $O(1)$ times during a workflow execution. This was a stopgap measure introduced early in the DB implementation. Moving forward we plan to reconstruct the transport graph purely from the Electron and Electron_Dependency tables.
@santoshkumarradha What is the priority on this? Without a fix, errors from electrons would be completely opaque unless the user is well-versed in Covalent internals.
We discussed this in the last SW meeting.
To answer the question of how to display exceptions raised by a task, we may wish to distinguish between different classes of exceptions:
Application Errors: exceptions raised by the task inside the executor and propagated back to the server.
Task-specific server errors: exceptions raised in the executor but serverside (e.g. ssh login fails or docker image failed to build):
Other server errors occurring outside task execution.
