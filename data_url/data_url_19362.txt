Is your feature request related to a problem? Please describe.
I have implement a customised noise model for my quantum circuit. However, I could not use the built in .draw() function to visualise my quantum circuit. It would be difficult to check whether I have placed my quantum channels correctly.
~/miniconda3/envs/mypsi4/lib//python3.8/site-packages/qibo/abstractions/circuit.py in draw(self, line_wrap)
953         for gate in self.queue:
954             if gate.name not in labels:
--> 955                 raise_error(NotImplementedError, f"{gate.name} gate is not supported by circuit.draw")
956             gate_name = labels.get(gate.name)
957             targets = list(gate.target_qubits)
~/miniconda3/envs/mypsi4/lib//python3.8/site-packages/qibo/config.py in raise_error(exception, message, args)
50         raise exception(message, args)
51     else:
---> 52         raise exception(message)
53
54
NotImplementedError: PauliNoiseChannel gate is not supported by circuit.draw
Describe the solution you'd like
Draw a quantum circuit with simple special symbols that represents the single qubit noise channels gates (Thermal, Pauli, etc) for the purpose of checking gates placement quickly.
Describe alternatives you've considered
I have place all the gates in a list before adding them to the quantum circuit one by one. By printing out the gate type and qubit index of each gate, one can 'visualise' the quantum circuit with great difficulty.
Additional context
None
Thanks for reporting this. @andrea-pasquale could you please have a look at this issue?
Thanks for reporting this. @andrea-pasquale could you please have a look at this issue?
Of course @scarrazza.
Thanks for reporting this issue @cheechonghian. I understand the problem and I think that we can surely add this feature to simplify the visualization of circuits that include also channel gates.
To address the issue let me mention first that you can get a summary of the circuit , including also channels, using the circuit.summary() method. This could be useful to check that the number of channels applied is the correct one.
In order to visualize these channel gates using the circuit.draw() method I think that we can do something like this for the previous example:
Where for example Pc stands for PauliNoiseChannel and similarly for the other channels. We can distinguish them from the regular gates by adding a c at the end of the symbol chosen.  I'll open a PR shortly and we can discuss more about it @scarrazza.
