gives
QiskitError: "Error decomposing node of instruction 'h': 'NoneType' object has no attribute 'global_phase'. Unable to define instruction 'u' in the basis."
Run above
I should be able to unroll to the target basis
The unroller is a very basic hierarchical basis translation, and cannot guarantee that a source basis will be able to be converted. In general, the only basis that's more-or-less certain (up to opaque instructions) to work is the OpenQASM 2 general basis u, cx. This is kind of fundamental to what the Unroller actually represents.
In general, you'll want to use a full translation transpiler stage to most reliably convert bases. For built-in standard Qiskit gates, BasisTranslator with the StandardEquivalenceLibrary will typically be enough.
It begs the question then as to why the Unroller is even still in Qiskit if it can no longer even handle an h gate?  Moreover, it is at the top of the basis change passes section.  Given the order is not alphabetical, this implies it is the pass of choice when doing basis changes:

I did originally try the BasisTranslator, but I have no idea how to add a equivalence library, and there is no minimal example in the pass documentation that shows me how to get it working: https://qiskit.org/documentation/stubs/qiskit.transpiler.passes.BasisTranslator.html#qiskit.transpiler.passes.BasisTranslator  Is it not possible to default to the standard library, as you suggest above, if none is given?  This would make life easier for the vast majority of users.
This stems from a misunderstanding of how basis translation works. Unroller can handle h for some target bases. This is true for any basis translation; we can't universally translate from any source basis to any target basis with any of the methods we have defined.
We do default if you use the full compiler path.  When you want to access compiler internals outside the full path, you need to handle configuration yourself; us adding default state arguments to the constructors of internal objects would make it easier to introduce bugs or surprising behaviour when defaults at different entry points get out of sync. This has happened frequently in the circuit drawers, and continues to cause problems there. In principle, the lower level you want to enter our stack, the more manual configuration you'll need to do.
Our documentation can always be improved, and this is one place.
In principle, the lower level you want to enter our stack, the more manual configuration you'll need to do.
And where we have big gaps in the documentation.  So very much agree with you.
