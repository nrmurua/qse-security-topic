Test on the master branch and following files.
controlledU.tar.gz
Running the file controlled_gate_test_HL.py gives the controlled gate for the matrix (X gate) this is the CX gate, this is great. However, if I test this CX gate on the IBM engine I get errors in file controlled_gate_test_LL.py.
I would like to have a test file with input a matrix 2 dim and output an IBM qasm file. Is this possible?
Your code is almost correct. There must be only one MainEngine per execution, so change your test_eng to be
and get rid of ibm_eng.
Also, make sure you import IBMCNOTMapper (from projectq.cengines): It maps your circuit onto the IBM chip. I already included it in the engine_list above.
Finally, test_eng.flush() should only be called at the very end, and a simple flush is enough (don't deallocate the qubits yourself). A flush indicates that you'd like to send your quantum program over to IBM for execution (i.e., that your program is complete). Therefore, you should remove your first test_eng.flush() statement and change the last one to simply test_eng.flush().
I hope this helps!
Many thanks,
I think it works, it looks good. This is very cool. Input a matrix (X pauli ) with output a circuit in real gates. I made a hack in ibm.py. It sends the file to IBM and also writes a QASM file, this can be done in a more sophisticated way but for now, I can work with it.
Great, I'm glad I could help.
You could also access the qasm via test_eng.backend.qasm after flushing. But yes, at some point we could separate the qasm generation from the backend which actually sends it to the device.
FYI:
The two decomposition rules which your code uses for arbitrary (controlled) single qubit gates are now in the newest release 0.3.4 (master and develop branch).
Have fun!
I installed release 0.3.4 and the arbitrary controlled gates work fine, great!
Furthermore, I tried the compiler-tutorial but there was a recursion error: the maximum recursion depth exceeded. It has something to do with the CommandPrinter Backend in a call to _command.py.
Great!
I've tried python2 and 3, and both work fine. Could you try printing projectq.__version__ before running the line which fails? Maybe you installed the newest version of projectq in only one of your python versions (if you have several).
That was the problem! I have many python versions also with anaconda. I did a fresh install and it works fine!
My goal is to have a good projectQ interface to the ibm api.
I'm closing this issue since it has been resolved. (But feel free to open a new one if you encounter any problems)
