While I figure out packaging details for the NuGet package, I've started to test integration with Q#. We cover the necessary API to function, but we're not yet useful for the quantum chemistry samples provided in the Q# sample repository. In large part, this seems to be due to our virtual non-handling, barely, of the imaginary exponential of a set of qubit index Pauli matrices.
These methods in the Q# intrinsics API resemble "uniformly controlled" gate variants, very closely. Custom implementations of these methods can benefit from optimizations we have already found for uniformly controlled gates. However, while we offer a totally general interface for those types of gates, it is too general for Qrack/Q# DLL methods to really benefit from in terms of performance, so far. There are some obvious convenience methods we can encapsulate to optimize this interface.
We have support for Q#'s quantum chemistry geared intrinsics, now, but this could ultimately be improved. For example, where the Q# intrinsics accept a Pauli basis argument for an operation, Qrack changes basis with extra gates, whereas Q# might roll the basis change into a single composite simulated gate. On my development machine, without such improvements, the Qrack versions of quantum chemistry samples take about twice as much time as the Q# simulator at high qubit widths, but this is tolerable, for now. If gate model were used in conjunction with "annealer-like" operations, I'd guess that we might outperform the default simulator if a chemistry simulation program had a preamble of simpler gates, particularly Clifford set gates.
