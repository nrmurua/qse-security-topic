A simple code operating on a single-qubit single T-gate circuit outputs the wrong probabilites snapshot.
A sample code:
Results in {'probabilities': {'probs': [{'value': {'0x0': 1.0, '0x1': 1.0}, 'memory': '0x0'}]}} which is obviously wrong (probabilities not summing to 1). Running without the extended_stabilizer parameter results in the correct {'probabilities': {'probs': [{'value': {'0x0': 1.0}, 'memory': '0x0'}]}}.
Similarly, the code
Results in {'counts': {'0x0': 1024}, 'snapshots': {'probabilities': {'probs': [{'value': {'0x0': 187766.17738802318}, 'memory': '0x0'}]}}}, where value is the approximation of the norm of the quantum state; something is wrong here as well (probably not related to the previous bug).
The code above should work for any setup.
The code should return {'probabilities': {'probs': [{'value': {'0x0': 1.0}, 'memory': '0x0'}]}}.
The bug seems to be more than a simple problem in the probabilities snapshot; I noticed something is wrong when checking the new expval snapshot command for #1121 and got wrong results. My guess is that we should check the norm estimation algorithm first.
I pushed a fix as part of #1121.
The probabilities bug seems to result from a simple bookeeping problem in one line:
if((dim >> j) & 1ULL) checks the bit in the size of the vector which is constant across loops; it should be i, the loop's variable.
The second bug seems to result from bad initialization of the extended stabilizer state - in the initialization line we should also divide by the by the constant described in page 30 in the paper).
