Description of the issue
#4941 modified the implementation of _group_interchangeable_qubits, but in doing so inadvertently made a breaking change in how the returning Tuple is constructed.
The example code below shows how the constructed tuple would return ((0, frozenset({cirq.LineQubit(0), cirq.LineQubit(1), cirq.LineQubit(3)})), (2, frozenset({cirq.LineQubit(2)}))) with previous implementation.
Now it returns  ((0, frozenset({cirq.LineQubit(0), cirq.LineQubit(1)})), (2,frozenset({cirq.LineQubit(2)})), (0, frozenset({cirq.LineQubit(3)}))).
The second tuple has 2 keys that are 0.
How to reproduce the issue
Cirq version
0.14.0
Discussion from sync meeting: Lets try and get this back into a state where you can only have one key, and also add tests.
Hey @Ashalynd , your pythonic implementation creates duplicate keys and I can't seem to find a way to get around that besides merging tuples with duplicate keys at the end. Doing this is rather complex so i'm thinking of reverting that code back to the non-pythonic version unless you have a better idea.
Oh boy, that was a silly oversight on my side: https://docs.python.org/3/library/itertools.html#itertools.groupby
TL/DR for posterity: the stuff grouped by groupby had to be sorted prior to grouping. My bad for forgetting about it :-(
