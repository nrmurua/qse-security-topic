I had a go at building Sayma with the SAWG running at 1GBPs line rate using https://github.com/hartytp/artiq/tree/fast_sawg to get a better idea of resource utilization with the current design
I believe I've made all the gateware adjustments required to do this, but I haven't touched the firmware yet. I don't have hardware atm so can't test in any case.
Build files are here: https://drive.google.com/open?id=1TjC1ldEbLZj6Le0T68QqvPX6pN1Rxy3y
Design meets timing.
Resource utilization:
For comparison, here is a build with the current ARTIQ master (600MSPs DAC data rate):
So, unless I've completely messed that up, the 1GSPs SAWG doesn't seem that much worse than the 600MSPs...
What's your hardware setup? I see some references in sayma_rtm.py to clk_mez, but we have no clock mezzanine board here. Is it possible to do this without it? I built and flashed the current revision of your code (without any modifications, despite my lack of mezzanine, just to see what would happen), and get the following output on startup:
https://paste.ofcode.org/vdwbAkhgiTR5pDV7R2aT3B
Hi @bradbqc. Short answer, this branch never worked and never will.
I believe that I configured the SAWG correctly for the higher data rate (although I never tested on hw so I might be wrong about that) and the resource utilisation wasn't an issue. However, the JESD204b core can't be used for the higher line rate without modification. That's not something I'm going to have time to do, so I have no plans to take this further (there was a discussion about this on IIRC some time back, but I never got round to updating the issue).
The references to the clock mezzanine are because this branch morphed into my synchronisation tests at some point (I was using the clock mezzanine IO to control a delay line). Basically, poor git hygiene on my part.
Ah, I see. Well, thank you for trying!
To use Sayma with 1 GHz data rate, the parameters of SAWG, the JESD core as well as the clocking setup and DAC configuration code need to be adjusted. This is likely achievable as most of the parts are designed for and were individually already tested at 1 GHz. But it's not straight-forward. Based on input and requirements from the funding groups and users, with the robustness of the system in mind, and considering the pros and cons and the risk involved, the consensus was 600 MHz.
Seems reasonable. Thanks for the explanation.
Do either of you have any tips on how I can really get familiar with Sayma (both the hardware and firmware/gateware)? So far I've just been reading code, looking at schematics, and browsing datasheets, but that feels somewhat inefficient so if there's any documentation or anything that I've overlooked I'd love to know.
Depends on what you want to do. Tell us about yourself.
There is a Sayma manual somewhere. It summarizes the information from the schematics and layout and talks a bit about the external connectivity. If you want to develop on Sayma—your original question seems to indicate that—then the schematics and layouts and the discussions in the issues and wiki pages are everything. Plus the datasheets and literature on JESD, DSP algorithms etc.
If you want to develop gateware/software then you'll have to learn python/migen/misoc and read lots of code. Development and documentation and tutorials on migen (and/or the funding of that) would be very welcome.
Right now I don't have a specific goal in mind. Until I saw this "issue" I had essentially given up on increasing the sample rate (apparently those minor peaks I mentioned in our email chain aren't as big a deal as was initially impressed upon me). Mostly I just want to become more familiar with the inner workings of Sayma so that I'll be better equipped to handle issues/do any development we may want in the future, and also so that I'll have a better idea of exactly what the board can and can't do. I've read over the manuals and wiki to some degree, but I'll go back and take a more detailed look. Overall it sounds like I'm on the right track at least.
A little about me/my relevant background:
I'm a first year PhD student at Duke, and did ECE and physics in undergrad. I have some experience with embedded programming (an introductory class and an design/optimization class), but very little with FPGAs. I had an introductory Verilog class, but that's only given me a vague idea of how things work. I'm more familiar with C and a few other languages than I am with Python, but I think I know it well enough for now. I should be able to pick up any details/quirks I don't know about Python as I go. Programming is probably the strongest part of my background right now (although I still have plenty to learn). I have very little experience with signal processing - it may have been involved in parts of classes I took, but I never had a dedicated course for it.
@sbourdeauducq How has this progressed since our discussion two weeks ago?
@jbqubit @hartytp @jordens Is there still interest in the old 600MHz clocking scheme, or can we remove it eventually?
I've no interest in it.
Doesn't matter to me.
Other than that, clocking and DDMTD appear to work with 1GSPS, but I'm having problems with litejesd204...
Also SAWG timing is still met.
I don't have interest in maintaining support for 600 MSPS if 1000 MSPS works out.
Done
