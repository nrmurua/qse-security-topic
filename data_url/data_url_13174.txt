It could be nice to allow the user to fold circuits by selecting the specific layer and providing the number of times to fold it. Right now there is no function that allows this level of control in global_folding. What exists now is, besides the strategies from_left, right, and randomly, is that, assigning a fidelity lower than 1 to one or more gate, folding takes that into account.
I propose to define a stand-alone folding function similar to the one shown by @vprusso in the recent Quantum Wednesday talk about circuit debugging. Thanks to @andreamari for discussing this a bit already.
A possible structure could be (pseudocode):
where num_fold_list = [0, 0, 1, 0, 0] or num_fold_list = [1, 2, 0, 0, 0], etc., with the index, $n$, of the list referring to the layer number, and the element filled by an integer would represent the number of times the layer is folded. In the two lists above, in the first case layer 3 is folded once, while in the second list, layer 1 is folded once and layer 2 is folded twice.
For each layer the scale factor is $2n +1$.
The proposed solution could be a module in mitiq.zne, similarly to what done for the identity insertion scaling module.
