Currently, theidentity and qeye functions each take lists of dims as an alternative to an integer. For instance, qeye([2, 3]) is equivalent to tensor(qeye(2), qeye(3)). While convenient, this is inconsistent with zero_oper, basis, maximally_mixed_dm, projection and zero_ket. Would it be worth extending the shorthand used by identity to these functions?
I think there should be the shorthand notation for zero_oper, basis, maximally_mixed_dm, projection and zero_ket . Since it provides a uniformity which helps to grasp the coding style easily and supports abstraction to some extent.
But this functionality seems to be hidden as I couldn't find it in documentation or examples
There is an example in qutip.operator.qeye. It is possible it is only described in the API documentation
I'd be interested in providing these changes.
I have a few points to ask/consider:
which function is meant by zero_oper()?  I can't find any reference to it in the code, and judging by the name, I'd guess it's equivalent to qzero(), which already supports this.
should we extend the automatic tensoring to other operators, e.g. create(), destroy(), and so forth?  I can't necessarily think of any particular use-case, but not having it causes an odd inconsistency with qeye().
for projection() and basis() in particular: should the interface allow only scalar m and n, which must be the same for all dimensions, or should there be broadcasting rules?  The latter seems like a more useful choice to me, with the rules for all arguments being:
For example, this would provide tensor(basis(2, 0), basis(2, 1)) == basis(2, [0, 1]) == basis([2,2], [0, 1]), which seems the "least surprising" to me.
should there be error-checking that supplied scalars/lists are the correct format?  For lists in particular, the current behaviour is to silently flatten nested lists, though this is presumably a user error.
This issue is open since 2015 and no one did anything about it mostly because there are no use case for adding list support for most of those function and removing them from qeye may break something.
What I would see as an improvement: if N could be the dimension of the resulting object.
qeye(dims).dims = [dims,dims]. This would be clear for qeye and qzero (zero_oper does not exist anymore),  since only the dimension of the resulting object is affected. For create, etc. hiding the tensor product would be hiding the physic, so it would be better to leave them as is.
For basis, this could also be nice.  For the rule: basis([2,2], [0, 1]) is ok, but basis(2, [0, 1]) is confusing, I would not accept this format.
Is there a development mailing list somewhere that I should be asking these questions? I'd tried to find something like it, but not spotted it.  I thought this was a bit more active now because it had the "help wanted" tag added earlier this year - I was just looking around for things to help out with.
I think I mistook agarwal1998 for a maintainer - that was why I'd particularly mentioned those particular operators.
I'm not sure if I understand what you mean by "hiding the physics", but I can understand not wanting to expand to other operators.  In (I think?) the same vein, if you take the changes to basis, would you accept a similar change to projection, since all it changes is the output dims, and nothing about the backing array?  My worry from a usage perspective is only that it would make an inconsistency between basis and coherent, and others of their type.  This inconsistency already exists between qeye the others.
No, it's mostly here on qutip and direct email. There is only a few of us. We have a qutip-dev google group on invitation managed by @nathanshammah. agarwal1998 is not a maintainer but cgranade was.
Last year, we took time to review old issues and let some less pressing with "help wanted". We would be happy if you can propose a solution that would close the issue and help with Qutip in general.
The only use I personally see from this would be case like:
Cases were the qobj is more of a dummy variable than a physical operator. coherent and create have a physical meaning and I would not know what coherent([2,10]) is supposed to be, but I understand  what tensor(coherent(2), coherent(10)) is. For projector, it could be added, it's meaning is clear.
To make it consistent, removing the list support from qeye, etc. and fixing the few case that it is used, might be a better option. The dimension can easily be corrected after the creation of the object.
This has been implemented with the merging of #1159.
Hello, I'd like to contribute to qutip but I'm a bit confused. Apparently this has been implemented, but the issue is still open. Does this mean that it still requires help? Should the issue be closed? I'm a bit confused.
This particular issue is fixed, sorry - unfortunately not all the old issues are fully tidied up yet.  @BoxiLi please could you close this?
