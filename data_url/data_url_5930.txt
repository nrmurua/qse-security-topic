'qiskit-aer': '0.5.2'
3.7.4
Windows10
After doing the syndrome measurements for the [5,1,3]
(https://github.com/Qiskit/qiskit-aer/files/5385200/Stabilizer.Measurement-git.html.pdf)
using the circuit given in https://www.nature.com/articles/srep14670 the syndrome qubits shows multiple results. For example, if there is no error then the syndrome should be 0000 but after measurement, it shows all the 16 syndromes.
Use the encoded state directly and use the circuit in https://www.nature.com/articles/srep14670 to measure the syndrome. I have attached my code below
We should get 0000 as the syndrome in this case but we are getting all the 16 syndromes.
`from qiskit import *
import numpy as np
from sympy.physics.quantum.tensorproduct import  TensorProduct
es=list(range(0,32))
import math
a=1/math.sqrt(2)
es[0]=es[9]=es[18]=es[5]=es[10]=es[20]=a/4
es[27]=es[12]=es[3]=es[23]=es[24]=es[15]=es[30]=es[17]=es[6]=es[29]=-a/4
b=1/math.sqrt(2)
es[31]=es[22]=es[13]=es[26]=es[21]=es[11]=b/4
es[4]=es[19]=es[28]=es[8]=es[7]=es[16]=es[1]=es[14]=es[25]=es[2]=-b/4
print(es)
ph_qr=QuantumRegister(5,"physical_qubits")
ph_cr=ClassicalRegister(5,"measured_physical_bits")
an_qr=QuantumRegister(4,"ancilla_qubits")
an_cr=ClassicalRegister(4,"measured_ancilla_bits")
syndrome_nf=QuantumCircuit(ph_qr, an_qr, ph_cr, an_cr)
syndrome_nf.initialize(es, ph_qr)
syndrome_nf.h(an_qr[0])
syndrome_nf.h(an_qr[1])
syndrome_nf.h(an_qr[2])
syndrome_nf.h(an_qr[3])
syndrome_nf.h(ph_qr[2])
syndrome_nf.h(ph_qr[3])
syndrome_nf.cz(ph_qr[4], an_qr[0])
syndrome_nf.cz(ph_qr[3], an_qr[0])
syndrome_nf.h(ph_qr[3])
syndrome_nf.cz(ph_qr[2], an_qr[0])
syndrome_nf.h(ph_qr[2])
syndrome_nf.cz(ph_qr[1], an_qr[0])
syndrome_nf.h(ph_qr[4])
syndrome_nf.cz(ph_qr[4], an_qr[1])
syndrome_nf.h(ph_qr[4])
syndrome_nf.h(ph_qr[3])
syndrome_nf.cz(ph_qr[3], an_qr[1])
syndrome_nf.h(ph_qr[3])
syndrome_nf.cz(ph_qr[2], an_qr[1])
syndrome_nf.cz(ph_qr[0], an_qr[1])
syndrome_nf.h(ph_qr[4])
syndrome_nf.cz(ph_qr[4], an_qr[2])
syndrome_nf.h(ph_qr[4])
syndrome_nf.cz(ph_qr[3], an_qr[2])
syndrome_nf.cz(ph_qr[1], an_qr[2])
syndrome_nf.h(ph_qr[0])
syndrome_nf.cz(ph_qr[0] ,an_qr[2])
syndrome_nf.cz(ph_qr[4], an_qr[3])
syndrome_nf.cz(ph_qr[2], an_qr[3])
syndrome_nf.h(ph_qr[1])
syndrome_nf.cz(ph_qr[1], an_qr[3])
syndrome_nf.h(ph_qr[1])
syndrome_nf.cz(ph_qr[0], an_qr[3])
syndrome_nf.h(ph_qr[0])
syndrome_nf.h(an_qr[0])
syndrome_nf.h(an_qr[1])
syndrome_nf.h(an_qr[2])
syndrome_nf.h(an_qr[3])
syndrome_nf.draw()
syndrome_nf.measure(an_qr, an_cr)
simulator=qiskit.Aer.get_backend('qasm_simulator')
result=execute(syndrome_nf, backend=simulator, shots=10240).result()
count=result.get_counts()
print(count)
{'1101 00000': 604, '1000 00000': 671, '1100 00000': 654, '1001 00000': 701, '0011 00000': 639, '0010 00000': 633, '1010 00000': 637, '0000 00000': 642, '0110 00000': 678, '0101 00000': 598, '1110 00000': 647, '0001 00000': 638, '1011 00000': 640, '1111 00000': 603, '0111 00000': 630, '0100 00000': 625}
`
To file a bug on the simulator please provide a more specific example of an error occurring in the simulator otherwise we cannot debug.
As far as I can tell this is not an issue with the simulator, but that you have a mistake in the initial state so it is not in the code subspace.
