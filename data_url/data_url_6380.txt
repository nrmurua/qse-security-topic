After probably nearly 2 years of having it around, I think it's time to remove QFusion from the API, (at least until a good reason arises to reinstate it, as we've done with the experimental QUnitMulti). I think of the following reasons:
Like the experimental QUnitMulti has already been, it might be revived one day, if there's a point. The only hypothetical benefit I can see in having it, with QUnit, is that a user can pop a bunch of repetitive single bit or controlled gates on the same bits to form general unitaries without (significant) performance hit. Really, this is easily done by a true optimizing compiler, at a different layer of a stack. In fact, even most of this particular use case is still supported by QUnit alone.
The idea of "gate fusion" might have been part of the state-of-art about 2 years ago. It seems redundant with QUnit, and it's starting to cause more problems, with no clear benefit to keeping it.
Of course, if this causes a problem or concern for any of our users, please speak about it here.
In fact, a quick test with the benchmark suite suggests that it hurts baseline performance, (at least by this point in development,) unless it's used for a problem in its intended domain that is specifically not already covered by QUnit, which is an extremely narrow domain. It also adds a ton of time to the unit tests, and it needs its own coverage. I'll leave this issue open to revisit, in case this causes problems downstream, but there's no reason to keep it, when we have QUnit.
Please reopen this issue, if anyone has any problems or concerns with the removal of QFusion.
