I am developing an algorithm with SimulaQron where I need to apply two different types of unitary operators specified by me, one over a qubit and one over two qubits.
For example, I would like to specify a new operator like:
and calling it with:
Is there a way, in SimulaQron, to do something like this?
Thanks in advance!
Hi @matpz!
Currently this is not possible in SimulaQron. The applications in SimulaQron are relatively low-level, since they communicate with the simulated hardware through the CQC interface. The intention is that the way one programs SimulaQron is as close as possible to how one would write protocols that communicate with real hardware. Thus one is left with a finite set of gates. So you would have to decompose your gate into one a sequence of the provided gates. Note that there are other tools that can help you with this if you have more complicated gates.
In the future we might add more layers to the protocol stack on top of SimulaQron that for example can perform gate compilation.
For your specific gate, isn't this just S^\dagger * H * S^dagger? Which can be implemented in SimulaQron as either S*S*S*H*S*S*S or Z*S*H*S*Z.
Thanks for the reply @AckslD! As suggested, I am looking for the gate decomposition. You mentioned tools that can help, are there any particular ones that you recommend? I need to decompose both single-qubit operators (2x2 matrix) and two-qubits operators (4x4 matrix), and then be able to run them in SimulaQron with the set of provided gates.
I think that ProjectQ (https://projectq.ch/) can do some gate compilation, but I haven't really used it myself. For single-qubit gates it should be pretty easy to decompose into rotations around the X-, Y- or Z-basis in the Bloch-sphere, using for example Euler angles (https://en.wikipedia.org/wiki/Euler_angles). What kind of two-qubit gates do you want to do?
Due to no response I close this issue
