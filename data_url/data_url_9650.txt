Reading through the source, I've noticed some places that I think would be better served by using dataclasses, which are part of the Python standard library as of py37. For example, see the following definition of a PasqalDevice:
The properties can be much more succinctly defined using a dataclass, as follows:
There are a couple things that are missing from my dataclass implementation, namely the input parsing and validation that goes into __init__.py, and the definitions of the supported_bases and qubits properties, but these can all be managed by implementing a simple __post_init__ magic method.
As for the ABC part, now instead of defining each device as a subclass of PQDevice, each device would simply be an instantiation (object) of class PQDevice:
This style removes a lot of boilerplate, and I personally prefer it over abstract classes & properties. Let me know what you think!
I admit this is the first time I'm seeing this, but I like it! Not a big fan of the workaround necessary for defining other methods, but I'm curious to see how that looks. My feeling is that, in this case, it should be worth it. However, if for some reason in the future we end up having to define more methods for PasqalDevice, perhaps the dataclass is no longer the best option. Would you agree?
@HGSilveri good question! the post-init workaround is to perform validation on the attributes (that you would normally do in __init__ -- you can still define methods (and even properties! -- see below) on top of a dataclass. dataclasses really just abstract away what goes on in the __init__ method (and some other things).
@karalekas Cool, even better! In that case, I'll give it a shot and I'll request a review from your side. Does that sound good?
@HGSilveri works for me! üëç
This will be addressed in issue #34 .
