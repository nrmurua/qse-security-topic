I'm trying to run the newly added SolovayKitaev (SK) algorithm. For some simple qiskit circuits the SK works, but most of the time it produces the following error:
Since I can't share the qiskit circuit, I will upload its QASM file which contains about 100 (out of few millions) gates  of the original circuit. This QASM file is enough to replicate the error.
First, I will give the code:
Here is the partial QASM file generated from  a qiskit circuit:
I would like to emphasize that even if I feed the circuit directly into SK (without loading it as QASM), the SK algorithm still produces the error. The original circuit was created exclusively with qiskit's default toolset and it runs on qiskit simulators without problems.
The expectation is that the following lines of code should produce a new quantum circuit which is comprised of $S, T, T^*, Z, CNOT$ and $H$ gates. Instead there is an error ValueError: Input matrix is not orthogonal.
I can only kindly ask to fix this issue ASAP.
I managed to reproduce the bug in my linux operating system:
It seems that the failure occurs due to the following assertion:
https://github.com/Qiskit/qiskit-terra/blob/e981b7e8ba073388edc3544b30d908b731dc6d7d/qiskit/synthesis/discrete_basis/commutator_decompose.py#L222
since the default tolerance value atol=1e-08 in np.close() is too small.
Printing the matrix that should be close to identity:
print(u_so3.dot(u_so3.T))
yields:
Changing the tolerance value to atol=1e-07 fixes this bug, hence these lines become:
However we are not sure that this solution will solve this bug also for larger circuits.
We added this test during the implementation of the SK algorithm, but now that it is working correctly we could maybe remove this test if we know the input is a Qiskit UGate or U3Gate because we know these are valid inputs.
As discussed with @ShellyGarion we think there are two steps to improve this behavior:
