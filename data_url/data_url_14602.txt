The bridge gate (definition in https://arxiv.org/pdf/1907.02686.pdf , ref. Fig. 2) allows for an effective CX gate across next-nearest-neighbors and has been shown to improve, in some cases substantially, the two-qubit output depth of routed circuits. With the exception of #1803 , the current in-tree routing passes are not aware of the bridge gate, and so, in some cases, may output a subcircuit like:
which could be equivalently replaced with an application of the bridge gate like:
with a lower overall cost (four instead of seven two-qubit gates).
It would be beneficial to have a transpiler pass which runs post-routing to find instances where a routing pass inserted a SWAP-CX-SWAP and replaces it with a bridge gate. This allows for all non-bridge aware routing passes to take advantage of the bridge gate, without requiring them to be updated individually. (Doing so may be an interesting future enhancement, as it would allow the heuristics used by the routing passes to calculate the cost of a bridge operation correctly.)
To accomplish this:
N.B. That this optimization can be applied even if the middle CX gate is in the reversed direction, or has adjacent single qubit gates, but these can be added separately after the initial implementation.
It would be great if the pass can be applied to the commutation graph.
For example:
(I'm not even sure if this is possible)
In the the new version of tweedledum that will become a hard dependency for
Qiskit-terra(#6588), there is some experimental passes that can handle these
sort of optimization through coupling-constrained linear resynthesis:
I can also handle @1ucian0 example:
But if it won't be able to commute through "non-linear" gates (ex: ZGate):
