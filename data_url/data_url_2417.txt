There are multiple schemes for representing operators that are sums of pauli strings. OpenFermion has QubitOperator. Cirq has PauliString and LinearDict but lacks a way to combine the two.
QubitOperator is a mapping (dictionary) from coefficients to terms, and each term is a tuple of single-qubit operators, which itself is a tuple of (qubit, operator).
LinearDict is a mapping from coefficients to terms, but PauliString (the term in this case) has its own coefficient.
Users should be able to write something like exp(1j * t * (cirq.X(a) * cirq.Y(b) + cirq.Z(a))) and have it work. Users should be able to trivially convert between QubitOperator from OpenFermion.
Make a special PauliLinearDict that subclasses from LinearDict, teach it the rules of pauli multiplication and simplification. Instead of using full PauliStrings as keys for the dict (which would result in redundant and inconsistent coefficients), I propose using only the frozenset of (qubit, Pauli) in the PauliString and dropping the coefficient.
To avoid hairy issues of how the user indexes into PauliLinearDict, I suggest removing the ability for users to index into the dict and only support iterating over the terms in the sum. Under-the-hood we would re-construct PauliStrings with coefficients and yield them.
xref #1439 #1299
