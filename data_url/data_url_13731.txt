This is a Cirq specific function (e.g., uses the language of moments etc.) and can easily be confused with a local folding function (i.e., one which takes a circuit and a stretch as arguments).
+1
Just checking: Do you aim at making fold_local inherit the properties of fold_gates_from_left, fold_gates_from_right, fold_gates_at_random?
I think these three functions could be one with a string variable.
To me "fold_gates" sounds very intuitive and pythonic as fucntion, maybe the private function could switch name, so to save fold_gates for that other use?
Ideas: fold_gates---> _fold_global or _fold_circuit and then fold_gates(...,order="from_left") become a new wrapper containing the previous ones, e.g., _fold_gates_at_random.Â But maybe there are reasons to keep the three functions separate?
One reason to keep them separate is that fold_gates_from_left and fold_gates_from_right and fold_gates_at_random require a scale factor between 1 and 3. The current fold_local can take an arbitrary scale factor and will call its fold_method argument until the scale factor is reached (see docs).
About changing fold_local to fold_gates: The latter is indeed a good Pythonic name but I think the function should emphasize its doing local folding. (Compare to fold_global which does global folding.) We could do fold_gates_locally and fold_gates_globally which is longer but fine I think.
About the string argument for the current fold_gates: I think keeping a function as an argument makes this more extensible as users can define their own folding methods and use their functions here.
Closed by #135.
