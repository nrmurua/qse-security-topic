Why should we make the user supply a reference to the struct in the stack, when the create... and init... funcitons could just as easily malloc space for the struct in the heap and return that?
We already require explicit freeing functions to free their dynamic attribs.
This would mean the creation of these structs is in one line...
as opposed to
It also means the users naturally have a handle to a pointer rather than the struct - all gate functions could then consistently accept a pointer (to be negligably more efficient by not having to copy the struct fields).
E.g. we currently do
but could instead do
where initStateZero now accepts a pointer.
While I agree that in theory we can change the API when going to v2.0, in practice I think it would be better to avoid having to make the change to a pointer everywhere. I'd suggest the compromise of createQubitRegister returning an object:
QubitRegister qureg = createQubitRegister(5);
The cost of copying a small object like this around is negligible and the object can still be created correctly like this as the QubitRegister object contains pointers to the statevec etc.
Returning the struct leaves us unable to free the dynamic memory (for which we've lost the pointer) which stores the struct itself when we destroy the register.
Unless... we give QubitRegister an additional field which is a pointer to its location in the heap. Then, we'd have...
Is this a done thing, or a code smell?
Ahh as clarified by email, the callee can indeed allocate a QubitRegister on its stack and return it by value to the caller - no dynamic memory needed.
Implemented!
