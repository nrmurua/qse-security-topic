For map evolution in mesolve and unitary oper evolution is sesolve (in #868) has a python function for the ode rhs, for all td types. For const and list_str we have a Cython for dm / state evolution.
Focusing on list_str: The spmv function(s) are called on each column of the vectorised map matrix. This could be done inside the custom rhs function. Or we could reshape the vector into a matrix and call some version of spmm (sparse matrix*dense matrix).
Questions:
It would seem like the simplest option would be to spmv on each 'column', but inside the Cython RHS function.
Thanks to some pointer from @nonhermitian I think I now understand this better
I will illustrate with some pseudo code
What we want to do is: M_out = (L_1 + L_2 + ... + L_i)*M
where L_i are sparse matrices and M is a dense matrix.
So one option (A) could be
which would seem more efficient than option B:
but as spmm(L, M) would effectively be:
Then options A & B would be the same efficiency wise.
As option B is much easier for us to implement within our existing codes, then this is what I will do.
Just one note: M actually starts are sparse, but has to converted to a dense column stacked vector as it is used as the variable in the ODE solver
Changes in CQobjEvo I believe have rendered this obsolete.  All these matrix-matrix and matrix-vector products are entirely handled in Cython code wherever possible now (including summation), and dev.major includes the sparse-dense matrix-matrix operation as well (via the sparse-dense matrix-vector kernel).
