With the introduction of the VF2Layout pass we now have a very fast
method of searching for a perfect layout. Previously we only had the
CSPLayout method for doing this which could be quite slow and we only
used in level 2 and level 3. Since VF2Layout operates quickly adding the
pass to each preset pass manager makes sense so we always use a perfect
layout if available (or unless a user explicitly specifies an initial
layout or layout method). This commit makes this change and adds
VF2Layout to each optimization level and uses a perfect layout if found
by default.
Fixes #7156
I've tagged this for 0.20.0, the vf2layout pass needs a bit more tuning I think. Looking at this a bit more the failures where CI is timing out is caused by 53d54c3 when running test.python.transpiler.test_vf2_layout.TestVF2LayoutLattice.test_hexagonal_lattice_graph_20_in_25it's taking forever to find a match (while it was trivial for vf2++). I think we want to be running with vf2++ here but need to modify the pass to take noise into account before we use it by default, otherwise we'll end up with perfect layouts on bad nodes a lot of the time.
I also agree with @georgios-ts we should also set a call_limit the current state of the pr is actually a good place to experiment with this because test_hexagonal_lattice_graph_20_in_25 we can experiment with how large to set. We might also want to tweak this per optimization level. For example I tested locally and setting call_limit=int(1e7) the test failed after ~20 seconds locally. So we can adjust based on this for each optimization level.
What status are we on this?  Does it want a final review, or did you want to make a graph/check some stuff to do with scaling (see #7213 (comment)) first?
What status are we on this? Does it want a final review, or did you want to make a graph/check some stuff to do with scaling (see #7213 (comment)) first?
I think it's ready for final review. The graph scaling will be a bit more involved and will take some additional benchmarking to tune. It's more about dynamically increasing the upper bound based on input graph sizes and just having a fixed limit to start won't hurt anything here (we'll just potentially miss some perfect layouts on larger graphs). Once this is ready I'll open an issue to track adding that
LGTM Thanks Matthew!
