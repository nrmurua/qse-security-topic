This is not a priority at the moment, but something that people might find useful. Sometimes it's easier to reason about a graph.
@Strilanc what do you think of building this on top of networkx?
What do you mean by "networks"? Oh networkx https://networkx.github.io/
Yea, sorry about the autocorrect. I think it makes sense to have an OperationDAG class that subclasses DiGraph to exploit all the fundamental graph primitives in networkx. The only reason not to is the additional dependency.
What kind of extra functionality would we be providing on top of the basic graph?
Dunno at this point. It's mostly basic things that we could implement ourselves but that would be nice to just have.
I'm kinda leaning towards just doing it ourselves.
What I mean is that, if we can just spit out a generic graph type corresponding to the circuit (or read one in) and not provide any extra functionality, then that's a lot easier than having to make our own CircuitGraph classes.
So to return to the original question: are you okay with adding a networkx dependency?
I don't have any particular aversion to it, as long as people actually get use out of the graph functionality.
