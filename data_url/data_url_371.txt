#25 has brought up a new feature request, specifically to be able to use a single call to cudaq::observe on a set of argument data, e.g. given an ansatz that takes as input a list of float parameters, call observe on a 2D array of floats, where each row of that data matrix corresponds to the expected value <psi (row_i) | H | psi (row_i)>.
One thing to note is that this introduces more opportunities for "easy" parallelization on multi-GPU architectures.
I would propose we introduce the observe_n function to handle these broadcasted observe calls. Since the observe function is variadic and is dependent on the CUDA Quantum ansatz kernel signature, we should think about applying this function on a general ArgumentSet type, which encapsulates N vectors, one for each argument in the kernel function (N being the number of arguments). So the ith element of the ArgumentSet is the ith element of all the vectors holding argument values. Here's how I'd do this (writing it here to get feedback / changes)
Here's how this would look for user code
A possible implementation for cudaq::observe_n could look like this
Note that with that inner expectation value computation, we are free to use observe_async and assign these tasks to any available virtual QPUs asynchronously and in parallel.
In Python, this should look like this
Also, we could do similar things with cudaq::sample_n(...)
