Now that nosetests are running and the master branch will be hopefully changed less, we can think about increasing test coverage. After running nosetests, you get a display of the test coverage (currently 68% in Python 2.7) together with the missed lines in the code. So it is straightforward to read those lines and add tests that cover the functionality in these parts of the code, or to remove the code in case it is obsolete and was simply forgotten to remove.
Working on that right now
I have reached 80 % now
The main areas where code coverage is poor are widgets and lockbox.
Actually, it's easy o increase the coverage of widgets by simply creating them in some unittest, however, this is a bit artificial since we don't really test that the widget is actually working. I guess we could make a series of automatic tests on every single attribute_widgets (for instance, making sure that pressing the up/down button is really changing the value or this kind of things)
Before moving forward, another question I have is about the status of PyQt with Travis. It's working fine right ?
80 % already sounds cool.
Lockbox will be dealt with sometimes next week.
For the widgets, I think a unittest that creates all widgets is still a good idea, basically to make sure that no errors occur at the startup. One could even intercept all logger messages and assert that no errors or warnings are issued during startup. The further tests that you propose are welcome, too, of course. W.r.t. increasing/decreasing values, I am not sure that is straightforward since a lot of values are expected to saturate etc. Also, maybe it is easier/faster/more straightforward to create and somehow record a clicking sequence (by hand) that opens all widgets and does exactly what a human would typically try, and insert assertions on the module values/status at breakpoints of this sequence. Not sure what tool to use there, but I bet there are one or two alternatives out there.
PyQt seems to work fine with Travis, there is no "exclusion" or whatsoever on travis. The only relevant lines are for startup of the display service:
OK, I am on it right now.
For the widgets, I set every NumberAttributeWidget to (min + max)/2 then
--> I am already finding some bugs here and there with that test.
maybe do KeyUp for a little longer, i.e. 0.2 seconds (the timeout for continuous increase is 0.1 s right now).
@SamuelDeleglise by the way, I also get nosetests errors from the other recent tests in python 3.4, are you aware of those?
I am running the full tests again on my current commit (82% cover).
I found 3 errors with test_load_save that I corrected, and 1 error with the latest test_attribute_widgets.
Unfortunately, I cannot reproduce the last error quickly because it doesn't happen when launching test_attribute_widgets alone, however, I will have to go to catch my flight to Iceland soon. I will be back next saturday... Cheers,
Samuel
ok cheers nice holidays!
