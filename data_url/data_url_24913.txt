If a ParameterSweep object is initialized with num_cpus not equal to 1, then whatever HilbertSpace object is passed to ParameterSweep fails to update.
Example code to reproduce:
`import scqubits as qubit
qbt = qubit.Fluxonium(EJ=2.55, EC=0.72, EL=0.12, flux=0.0, cutoff=110, truncated_dim=9)
hilbertspace = qubit.HilbertSpace([qbt])
param_name = r'$\Phi_{ext}/\Phi_0$'
param_vals = np.linspace(-0.5, 0.5, 100)
subsys_update_list = [qbt]
def update_hilbertspace(param_val):
qbt.flux = param_val
sweep = ParameterSweep(
param_name=param_name,
param_vals=param_vals,
evals_count=8,
hilbertspace=hilbertspace,
subsys_update_list=subsys_update_list,
update_hilbertspace=update_hilbertspace,
num_cpus=2
)`
I am using scqubits version 1.2.1, python 3.7.7
Confirmed on Windows as well. This appears to be limited to the multiprocessing package, possibly a pickling issue?
Workaround:  enable use of pathos/dill by setting
scqubits.settings.MULTIPROC = 'pathos'
A tentative fix for this is introduced in 67becb2 which switches the default setting to pathos.
Until this is included in the next release, the above workaround or cloning the current scqubits master branch should address the issue.
Closing now - addressed with release of v1.2.3
