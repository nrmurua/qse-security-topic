Documentation says this but we think it should work for three outcome or more measurements.
We should
This at least will need to be changed:

Workaround: Use sampler.run().measurements instead of sampler.run().data or sampler.sample() until this is fixed.
This looks like something I missed (I even reviewed the PR that added TrialResult.data).  The issue is TrialResult.data, TrialResult.histogram, TrialResult.multi_measurement_histogram, and TrialResults._json_dict_ all assume TrialResults.measurements is binary when converting the measurements dictionary to another form.
Here's an example:
Currently, TrialResult doesn't know the qid shape of its data so these methods can't do the right thing.  To fix this, it needs to store a qid shape (a tuple of qubit dimensions: Tuple[int, ...]) for each measurement key and every sampler that supports qudits needs to specify the shapes when they create TrialResults.
Instead of storing the qid shapes in TrialResult, I'd suggest we just store the list of qid's themselves. These will include the shapes, of course, but this also makes TrialResult more self-documenting since you can interpret the measurements without referring back to the measurement gate in the circuit to know what qubits were measured.
FWIW, this concern was raised in the original PR and it was assumed that TrialResult has access to the qid shape #1811 (comment).
+1 to including the qids themselves in TrialResult.
@cduck Actually the JSON serialization does support qudits. For instance, adding
to the end of your example works.
You are right @kevinsung.  I missed that _json_dict_ checks if any measurement result values are not 0/1 and uses numpy's array serialization instead.
Hey @daxfohl, did #4781 end up resolving this?
Yes. That gets passed in from the OperationTarget.log_of_measurement_results property, which uses get_digits, which is integral not boolean. 
