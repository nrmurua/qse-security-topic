In file covalent/executor/executor_plugins/local.py we are using contextlib.redirect_stdout and contextlib.redirect_stderr functions to redirect any print statements performed inside an electron to a io.StringIO object which is then used to write those strings to a file if requested by the user and then into the results object. If no file is given then it prints to stdout/stderr but the strings are still stored in the result object.
The main issue with using redirect_stdout and redirect_stderr is:
Note that the global side effect on sys.stdout means that this context manager is not suitable for use in library code and most threaded applications. It also has no effect on the output of subprocesses. However, it is still a useful approach for many utility scripts.
as mentioned in their documentation here. Which makes those print statements appear in the dispatcher.log file sometimes which is undesirable. We will need to find a way to keep this useful redirection feature but also do it in a thread-safe manner.
Since the nature of this issue is random, a working example is hard to produce. But one can try dispatching a job where in an electron function definition print("Something") is used multiple times and a log_stdout argument is passed to the electron's executor. Then check if Something is printed in the dispatcher log file at ~/.cache/covalent/dispatcher.log. If it does get printed there even once then the issue can be confirmed.
Printing anything in an electron should only write that string to the log_stdout file mentioned in that electron's executor and not in the global stdout of the dispatcher process.
No response
