Might just be me mis-using the new 5.X branch of Qutip. I get a memory error when upgrading to the new branch.
It appears to fail when performing self._to_dm(state) for each state. My states are vectors of length 800 - so it runs out of memory. Is it possible to request the solver only stores the wavefunction at each timestep? I want the wavefunction for each trajectory for each timestep. Alternatively one could introduce a new "proj" data storage to make this more efficient.
Code should not have to store the full density matrix, and should not lead to a memory error
No response
About only storing kets, but not averaging into a dm, we can't do that yet, but it's easy to implement so if useful, we can add the option.
The error is not in the _to_dm, but in the addition, which is done in the sparse CSR format. No dense conversion are made. But the proj operator does not have a tidyup step, so any non-zero are kept, however small they are. This is also an easy fix that could help.
The MemoryError is also not that helpful, we should improve the error message to tell what size of arrays are allocated.
Thank you for reporting these and trying the alpha version.
I see you don't have cython, do you have a way to compile the source yourself?
Once fixed, I would be curious to have you try the development version without waiting for a release.
Thanks for the quick response - currently I've just pip-installed the package, but I would be happy to use the main branch if you would be able to fix this. I would find this very useful - for the quantities I am interested in calculating I need much less than 800 repeats to get convergence. I understand it is possible to calculate the expectation directly in ssesolve but I find it is useful to save the states to a file so I have more freedom to calculate a range of different operators at a later date.
Saving to a file without averaging is possible.
e_ops accept any function f(t: float, state: Qobj) -> number. That function can save the state to a file and return a dummy value. However, it does not know which trajectories it belong to so it would only work with serial_map.
Expectation functions are always called, it would remove the need to keep trajectories and store states.
Qobj.data_as("CSR") will extract the state as a scipy CSR matrix (if already in csr, does not do the conversion).
Yeah I'm not really interested in using e_ops this way - it feels like a hack. I really just want the states of each trajectory so I can do what I want, and it seems silly I have to also pay the price of storing the density matrix. Wouldn't there be significant overhead calling to python each step and opening/writing to a file
Yes, it's a hack, but it's probably the best option you have until we fix it. So if you are in an hurry for your research, just know the method exist.
