Running the default toolchain on a
Intel(R) Xeon(R) CPU E5-2650v4
using gcc 5.3 results in an error in the compilation of libxsmm:
/tmp/ccToV8ay.s: Assembler messages:
/tmp/ccToV8ay.s:4090: Error: bad register name %zmm16' /tmp/ccToV8ay.s:4110: Error: bad register name %zmm13'
/tmp/ccToV8ay.s:4111: Error: bad register name %zmm11' /tmp/ccToV8ay.s:4112: Error: bad register name %zmm14'
/tmp/ccToV8ay.s:4124: Error: no such instruction: vpxord %zmm16,%zmm13,%zmm12' /tmp/ccToV8ay.s:4126: Error: no such instruction: vpxord %zmm16,%zmm11,%zmm11'
/tmp/ccToV8ay.s:4128: Error: no such instruction: `vpxord %zmm16,%zmm14,%zmm15'
compilation flag is SSE4.2
This looks like outdated Binutils on that system. You can prevent this issue with no drawback for CP2K:
I may check for sufficient Binutils in LIBXSMM's Makefile(.inc) or hint the above workaround in case compilation fails. I tried to get around such check, but must admit this issue appears sometimes (hence already the option INTRINSICS=1).
This can happen on Linux distributions that offer newer GCC than initially and if the newer compiler was built on top of the original Binutils. The latter produces a "zombie" compiler hinting certain support but somewhat falling short. It can also happen if a custom/own build of GCC is not fully bootstraped (aka not using ./contrib/download_prerequisites).
LIBXSMM/master (and soon v1.10) points out this issue if compilation fails for any of LIBXSMM's translation units. This is still not a check for sufficient Binutils, but that would be quite some effort as Binutils and Compiler versions are on completely different tracks.
Did  make INTRINSICS=1 help in your case?
Yes, it worked, but I eventually moved to a later gcc version.
Thank you.
