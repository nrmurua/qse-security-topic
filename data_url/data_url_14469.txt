FakePulseBackend.defaults() (link) doesn't accept a refresh kwarg. This conflicts with actual backends, which do accept a refresh kwarg (link).
This prevents writing unit tests that (a) use a fake backend and (b) call .defaults(refresh=True)
--> raises TypeError: defaults() got an unexpected keyword argument 'refresh'
Should run cleanly.
Can be fixed by just adding a refresh kwarg to link.
Thanks for reporting the issue :) Fake backends loads pulse defaults from a snapshot file for example: https://github.com/Qiskit/qiskit-terra/blob/688cf6abe4ec0a2f843a63135cc6c3e9a497b2c3/qiskit/test/mock/backends/athens/defs_athens.json Can you please give an example of use case where you would like to do a refresh for fake backends (other than doing a unit test for real backend).
The fake backends aren't designed to be complete mock replacements for everything that the real backends in qiskit-ibm-provider do - we can't hope to keep the APIs between two separate packages in feature parity.  The fake backends here are more just about storing the configuration and properties data, so you can test transpilation of quantum circuits with the right layout/basis gates/etc, and simulate with some vague approximation of their noise characteristics.
The refresh operation doesn't make sense for a fake backend (e.g. you can use FakeToronto even if you don't have permission to access the real ibm-toronto), so I'm not sure I see a reason to add the argument.  We also don't (and won't) define active_jobs, reservations, or any other IBMQ-specific extensions to the BackendV1 API.
I see. As context, I have code that performs pulse level optimizations after calling backend.defaults()
Previously, I was able to unit test with fake backends, for example FakeLima. However, I just added the refresh=True kwarg in the caller code, and now the unit tests fail.
I suppose this (more parity between real and fake backends, at least for the call signature of .defaults()) could be considered a feature request rather than a bug then.
