Now that we have the transpiler working there is no need to have a confusing set of gate.
The motivation for the keeping is p.control() is different to rz.control()
U2 should be removed. There is no need we have this gate now the transpiler working. This really needs to happen in the transpiler and depending on the backend basis set choose how to do it.
U3 should be renamed just U as it is an arbitrary single-qubit gate.
CU1 should be renamed Cphase or CP depending on above
CU3 should be removed as it implies a control unitary but it is not (as it is missing global phase)
Add CU which should take into 4 parameters (three from U and one more - global phase in su(2))
Agreed üëç In many places we currently still use things such as U2(0, pi) instead of H or U1 instead of RZ, this will force us to replace U* by a the better readable, universally used gates.
Regarding point 1: Renaming the U1 gate to Phase is probably better than removing it, because it differs from RZ by a global phase. At the moment they are still the same but hopefully we'll have the global phases corrected soon so the matrix representation matches the actual gate. This would also be clearer once we start to control the gates as then the phase difference matters.
I agree this is why i want to continue to keep it. I will make and issue soon (if not already one) about how global phase of a circuit should be tracked. This way if I want to control that circuit I can. I am thinking just another variable that goes along with the circuit and keeps the global phase.
There is work started on the phase property here: #3930
Note that we cannot just remove the U gates. Otherwise grabbing circuits from old jobs will break. We need to have the U gates in Qiskit but expressed in the new basis.
I would rather put this in the provider if we can. But this and the link @ajavadia have lots of issues so we should make a RFC for moving to standard gates. I suggest we close this and same with #3930 and make this document. @Cryoris do you think you can start this. From my understanding most things in @chriseclectic issue #3930 are done except transpiler and global phase property being added.
Questions I see:
Should a global phase be changed by the user for a standard? I think the answer is no as when I control this gate it is no longer clear what it means without the global phase is easily observed on the circuit.
How the global phase of a circuit is viewed.
All the steps of the transpiler will need to also decompose to support the global phase
P vs Phase
How do we work with backward compatibility - in near term give a deprecation warning
When it breaks jobs the jobs need to be converted to the new since we are working on the provider we could put this in there.
What do we need to do to finish this?
Translation to P/SX/U works, so if a backend reports those, qiskit can target it (that's pending)
PR from @Cryoris in progress for deprecation so users know to start using the new gates.
If we have backends start reporting ['rz', 'sx', 'u', 'cx'] as the basis gate set, there are some older versions of qiskit that won't be able to target those backends. I think that is okay. Do you agree?
It turns out that you need at least qiskit 0.20 for the new basis gate set to work. So, I think we do need to think again about a more graceful transition.
Thank you @nonhermitian for answering the version question with some tests.
We're going to handle the backend basis gate transition from the API side.
@ajavadia I think all is done now except for how do I view global phase in a circuit.
@ajavadia I think all is done now except for how do I view global phase in a circuit.
Yeah, I agree we were going to close it after the release just to make sure we didn't miss any places in the transpiler that were still leaking u1, u2, u3. There might be a few gate definitions still in terms of u1, u2, u3 but we can fix those in follow up issues. So I'm going to close this issue.
As for viewing the global phase, if it's non-zero the circuit visualizers will include it. For example:


You can also just access the global_phase attribute of a circuit like:
