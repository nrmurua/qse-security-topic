This is up for discussion, but also to reinstate the squash and merge default policy an option could be to go from the releases/ branch to specific branches for each release, such as v0.9.0 etc. I remember having a discussion with @jakelishman on why the latter option would be better than the former, but I cannot replicate the arguments.
The advantages to having separate branches for each minor release are that you can modify the releases separately.  For example, if you only have the one release branch, and you want to make patch releases 0.8.1 and 0.9.1 after 0.9.0 has been released, you have a bit of a problem.  Similarly, you'll need to have a separate branch if you want to start releasing a 1.0.0 pre-release channel, while still making minor releases 0.10, 0.11, etc in the mean time.  As long as your release cycle is entirely monotonic, there's no problem, but I think as a project gets bigger, and especially leading up to/after a 1.0 release, you will eventually end up wanting separate branches.
I don't know any of the rest of the context of this discussion (or what's being referred to as the alternative?), but that (^) was probably roughly what I said when we discussed it in QuTiP.
Merging strategies of squash-and-merge or pure merge are both easily compatible with that model, since it's easy to cherry-pick entire PRs onto another branch just by applying the merge (git cherry-pick --mainline=1 <merge-sha256>).  Cherry-picking something merged by rebase is more fiddly, since you have to individually apply every commit, and the hashes will change relative to what the GitHub PR interface reports, so you have to go find them individually.
Oh yeah, also if you only have one release branch which you keep cherry-picking onto, you're either duplicating your entire history, and you might have to deal with some frustrating merge conflicts when there's a modification to code affected by a bugfix release.  Git's so perfomant that the former isn't a big deal, but the merge conflicts aren't fun if it's been a while since the bugfix, or a different person is managing the merge.
Thanks @jakelishman.
So based on discussions, this is the process we follow roughly: https://reallifeprogramming.com/git-process-that-works-say-no-to-gitflow-50bf2038ccf7
Please add comments/discussion below, I will start working on modifying the actions soon.
This issue had no activity for 2 months, and will be closed in one week unless there is new activity. Cheers!
