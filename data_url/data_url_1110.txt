Currently cirq generates samples using numpy.random.choice (
Often the user wants to average over a large number of samples, in which case the order in which samples appear is irrelevant. When this is the case, numpy.random.multinomial would be a better option for drawing samples. The difference in runtime (especially when looking for >10^6 samples) can easily be larger than the cost of simulating a small circuit itself.
Not entirely sure how to include this; as it stands it would probably be best to never generate the strings at all but just allow the user to generate the histogram directly?
@mpharrigan - this is the PR that I mentioned.
Seems like it might be a better idea to add this functionality to the calculation of expectation values rather than the calculation of samples from the wavefunction?
It also seems like this could be better in openfermion-cirq or openfermion, though I'm not entirely sure, as it mainly shows up in the averaging in a VQE. So if this functionality isn't wanted in cirq we can shift it out.
@kevinsung pointed out that this ties in with #2781
Yes, having a Cirq API for "give me histograms; I don't care about the order" would be pretty nice. Even for real processors, it could considerably compress the size of results sent over the wire
@xabomon is willing to take this on (for a separate project I think he needs something like this pretty soon).
I would suggest the best method here is to add a function 'histogram_state_vector' to wave_function.py, and link this through to the simulator.run function, to be called with a flag 'histograms_only'. But perhaps there's a better way to do this?
Having a flag control return values is a code smell.
