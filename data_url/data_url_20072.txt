With Debian now trying to package liboqs, they build on a lot more platforms than we support, many of which the build fails on.  I'm not suggesting we try to support those at this point in time.  However, one set of build failures (see e.g. this build log) seems to be related to SIKE's config.h header file thinking it's on an unsupported architecture, but apparently CMake still tried to compile SIKE.  In other words, there seems to be a mismatch between architectures where CMake thinks it should try compiling SIKE and architectures that SIKE's config.h header file is willing to support.
SIKE's config does explicitly reject unsupported platforms. I can add a compile guard in the CMakeLists building on non-supported platform. Do we have an environment to test this?
there seems to be a mismatch between architectures where CMake thinks it should try compiling SIKE and architectures that SIKE's config.h header file is willing to support
I'm not sure this is the case: There already is a guard explicitly overruled in this build.
I can add a compile guard in the CMakeLists building on non-supported platform.
Given the pre-existing guard, what about just adding a SIKE-disablement instruction into that guard (and maybe for all other algorithms we know fail building on something unknown)?
Do we have an environment to test this?
I'm not aware we have a test or cross-dev environment for MIPS.
There already is a guard explicitly overruled in this build.
I was thinking about adding a guard here in the CMakeLists to list the SIKE supported archs, to avoid the preprocessor's failure here in the config.
