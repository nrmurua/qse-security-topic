I'm profiling the XEB code and after #4774 is fixed, the code spends ~4 seconds doing transform_qubits. It looks like a lot of time is spent simply copying the moments, re-flattening their op tree (even though we don't need to) with only 2 seconds being spent in the raw_types.transform_qubits method.
I'm doing a transform-qubits-and-zip-fragments together, so I'd imagine this flow could be done much faster by skipping a lot of the validation. Unfortunately, the constructors for Circuit and Moment are tightly coupled to doing transformations on the input data.
I'm going to prototype adding extra, optional arguments to the Moment constructor that just accepts the desired types: namely a flat tuple of ops and a dictionary for qubit mapping. Let's see how much time can be saved like this.
this has potential to change some interfaces, so probably want to see if it is possible before 1.0
@mpharrigan Do you know if this is still an issue?  I tried to do this improvement and it did not really help speed things up (it was actually very slightly slower for some reason).   I am tempted to close out this issue, as I am not sure this will help significantly.  How big of circuits were you looking at?
My example was 100 qubits with 1000 moments of single-qubit gates, and it took ~1.2 seconds to transform_qubits.  Most of the time (over 60%) was spent in re-creating the gate objects with the new qubits.
ok, I'm happy to close if you've looked into it.
