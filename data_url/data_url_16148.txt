The following graph state fits exactly on the device (72 CX), but optimization_level 2 or 3 transpiles it to ~950 CX gates:
I added a callback to your script and printed the depth after each pass. Basically:
The issue here is the CSPLayout is not able to realize the graph state circuit matches a trivial layout and it chooses a suboptimal initial layout and causes stochastic swap to run greatly increasing the number of CX gates. While level 1 tries a trivial layout realizes it's a matches and skips DenseLayout and stochastic swap. I'm not sure the best path to go about fixing this, but maybe to add trying a trivial layout first to level2 and level3's passmanagers before using the CSP layout.
The raw output I got was:
I think this issue can be unfolded, since it uncovers several independent-but-related problems:
Possible solutions (not mutually exclusive):
While the "best of" passmanager controller would solve this for level 3 (and maybe level 2?), in my opinion all the layout selectors should be able to find the trivial layout when that's the only possible solution. If agreed, I could submit issues for each of them.
Actually, the problem of hiding the noise awareness (described in the last two bullets) is a problem that we currently have. PR #5075 will make CSP noise-aware. Probably Layout2qDistance needs to be noise aware too.
