When trying to build a kernels that uses std::acos:
test-3.cpp in #323
We get an linker error:
Try to compile the above program using
bin/nvq++ -v ../test/NVQPP/test-3.cpp  -o test-3 --target quantinuum --emulate
If we can't handle this function, we should return an error.
Not a regression
No response
Have to add -lm to the command-line, eh?
Have to add -lm to the command-line, eh?
I actually tried that:
bin/nvq++ -v ../test/NVQPP/test-3.cpp  -o test-3 --target quantinuum --emulate -lm
But if seems that the -lm do not get added to the linking step that we need(?):
We call clang++ twice. It seems like the -lm flag only affects the second call.
The issue is also that any use of std runtime functions inside a kernel will currently not get compiled away properly before the compiled kernel is set to quantum backends. As a first step that is critical, we need to give a nice, comprehensive error so that people evaluate these functions outside of kernels for now. As a follow up item that won't be part of the next release, we should look into supporting a standard set of functions within kernels. Assigning to @schweitzpgi for giving a comprehensive error.
The issue is also that any use of std runtime functions inside a kernel will currently not get compiled away properly before the compiled kernel is set to quantum backends. As a first step that is critical, we need to give a nice, comprehensive error so that people evaluate these functions outside of kernels for now. As a follow up item that won't be part of the next release, we should look into supporting a standard set of functions within kernels. Assigning to @schweitzpgi for giving a comprehensive error.
I'm not sure what we're erroring on here. Do you want an error on all calls? (acos isn't really anything special. It looks like other functions.)
Add: more specifically, when lowering to QIR (or QIR base profile?) we could make it an error if we see any sort of call.
Have to add -lm to the command-line, eh?
I actually tried that: bin/nvq++ -v ../test/NVQPP/test-3.cpp -o test-3 --target quantinuum --emulate -lm
But if seems that the -lm do not get added to the linking step that we need(?):
We call clang++ twice. It seems like the -lm flag only affects the second call.
OK. Looking more closely, the problem is using mangled function names vs. C library names.
_Z4acos is not the same name as acos. (Although they get printed out the same.)
Linker issue resolved.
