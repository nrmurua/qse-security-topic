Description of the issue
Right now if you do:
Many tests break. This issue (along with others that might be underlying it like randomness seeding @pavoljuhas ) is blocking us from taking advantage of things like parallel pytest:
or more distributed CI checking like is done in #4913 https://github.com/quantumlib/Cirq/runs/5013652945?check_suite_focus=true
We should work to get these issues resolved and make our tests a little more robust. Perhaps a good first step would be to resolve all the issues when using pytest-randomly and then introduce it into our CI.
Cirq version
@MichaelBroughton - can you check if pytest-random is the correct plugin?
Its last update is from 2013 whereas pytest-randomly seems to be actively maintained; perhaps we should use that one.
On my side the current master 4f354ea can already do parallel pytest without either of pytest-random/pytest-randomly plugins:
This produced one extra error compared to a serial pytest, cirq-core/cirq/_compat_test.py::test_deprecated_module_error_handling_3, which should be easy to fix.
After pip install pytest-randomly the serial check/pytest failed all 16 parametrized versions of test_deprecated_module and a parallel run failed 5 of them.  I guess this parametrized test is prone to test ordering, which needs more investigation.  There were BTW no other extra failures from the pytest-randomly plugin.
Do you seen different errors in your case?
If so can you share some examples?
Oops yes, pytest-randomly was the package I was referring to. Experimenting locally those were the breakages I saw, but remotely I was also seeing this break here: https://github.com/quantumlib/Cirq/runs/5013652945?check_suite_focus=true
Which I assumed was caused by this, but perhaps it has something to do with import ordering or something else unrelated.
The tests in _compat_test.py can be fixed by commenting out the test_deprecated_module_error_handling_X tests for X=1, 2, 3.  Trying to understand this now.
Here are some misplaced parentheses - it seems to help if moved to the end, eg,
subprocess_context(_test_broken_module_1_inner)()

Yep, just removed the parens as this is supposed to be a test function and this fixes things.
It looks like this has been fixed. Thanks @pavoljuhas
