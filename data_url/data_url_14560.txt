Got following errors while using crx and rx gates:

/gpfs/software/Anaconda/envs/psifour/lib/python3.7/site-packages/ipykernel_launcher.py:72: RuntimeWarning: invalid value encountered in double_scalars
/gpfs/home/yuluwang/.local/lib/python3.7/site-packages/qiskit/transpiler/runningpassmanager.py:166: UserWarning: Resynthesized [<qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba5022b40>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba5022280>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba5022910>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba72f9d70>] and got global phase: π
┌───────┐┌────┐┌─────────────┐┌────┐┌──────────┐
qr_0: ┤ Rz(π) ├┤ √X ├┤ Rz(-3.1415) ├┤ √X ├┤ Rz(-π/2) ├
└───────┘└────┘└─────────────┘└────┘└──────────┘, but the original was native and the new value is longer.  This indicates an efficiency bug in synthesis.  Please report it by opening an issue here: https://github.com/Qiskit/qiskit-terra/issues/new/choose
new_dag = pass_.run(dag)
Using Rx and Crx gates. I applied parameter binding and noise model at the same time.
transpiled_circ = transpile(circ, backend=backend,optimization_level=3)
circ = transpiled_circ.bind_parameters(para_dict)
job = execute(circ, backend=backend, shots=shots,coupling_map=coupling_map, basis_gates=basis_gates,  noise_model=noise_model)
It seems duplicated with #7033.
You mean the warnings? or is there an error?
@1ucian0  Hi Luciano, sorry it's a warning. It keeps showing up and asking me to report this issue.
I don't think I can reproduce this without an example value of circ, and I mis-wrote the warning — the relevant information should be printed where all those DAGNodeOp strings are appearing instead. #7048 contains a better warning string. Could I ask you to supply an example circ or, if that's sensitive information, to re-run with the warning string from #7048 and paste its output?
It's hard to reproduce it because I think it connects to the value I assigned to theta. Once I changed the value the warning disappears. It's hard to reproduce in my algorithm where thousands circuits have been submitted and ran with such warnings appearing for several times. But fortunately in the end I reproduced it.
Here is one example for you:
The warning I got:
/gpfs/home/yuluwang/.local/lib/python3.7/site-packages/qiskit/transpiler/runningpassmanager.py:166: UserWarning: Resynthesized [<qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0f30>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0ec0>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0c90>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0e50>] and got       ┌────────────────┐┌────┐┌─────────────┐┌────┐┌───────┐ qr_0: ┤ Rz(2.2835e-12) ├┤ √X ├┤ Rz(-3.1415) ├┤ √X ├┤ Rz(π) ├ └────────────────┘└────┘└─────────────┘└────┘└───────┘, but the original was native and the new value is longer.  This indicates an efficiency bug in synthesis.  Please report it by opening an issue here: https://github.com/Qiskit/qiskit-terra/issues/new/choose new_dag = pass_.run(dag) /gpfs/home/yuluwang/.local/lib/python3.7/site-packages/qiskit/transpiler/runningpassmanager.py:166: UserWarning: Resynthesized [<qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e6670>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0520>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0130>, <qiskit.dagcircuit.dagnode.DAGNode object at 0x2aaba73e0d70>] and got       ┌────────────────┐┌────┐┌─────────────┐┌────┐┌───────┐ qr_0: ┤ Rz(2.2835e-12) ├┤ √X ├┤ Rz(-3.1415) ├┤ √X ├┤ Rz(π) ├ └────────────────┘└────┘└─────────────┘└────┘└───────┘, but the original was native and the new value is longer.  This indicates an efficiency bug in synthesis.  Please report it by opening an issue here: https://github.com/Qiskit/qiskit-terra/issues/new/choose new_dag = pass_.run(dag)
Thanks so much! I can reproduce that.
@levbishop Since you have strong opinions about atol, I think you should weigh in. The following circuit
re-synthesizes to have ZXZ angle values (-1.0091434386183797e-12, 5.5000000000187176e-05, 1.0093214144495466e-12), which the PSX synthesizer shifts to (3.141592653588784, 3.1416476535897933, 1.0093214144495466e-12). Because 1.009e-12 is slightly above DEFAULT_ATOL, none of those gates are elided, which raises the warning.
This is sensitive to the complex difference in the definition of sx: replacing the first gate by rx(pi/2), which has purely real / purely imaginary entries yet is equivalent up to phase, causes the problem to go away. I propose that subtraction as the ultimate culprit.
I see two options:
I understand the issue and like you I also lean away from simply raising the tolerance without thinking through carefully.
Let me ponder this for a little.
It's not yet clear if it's a related issue, but the first line in the log from #7041 shows a single gate (supposedly belonging to ['p', 'sx', 'x']) being mis-synthesized into a pair of sxes. That could well turn out to be a symptom of the theta error I was worried about above.
I had a start at doing this based on estimated infidelity. Here's where I got to before I had to switch to other things.
It gives optimal approximations for nearly all special cases.
Open issues:
Anyone want to pick this up? otherwise I'll try to find time but not likely in time for 0.19
I'm happy to pick this up. I think coupling fidelity estimation and approximation dodges my worry about theta in option #2.
Similarly no guarantees about 0.19, but it could conceivably happen.
