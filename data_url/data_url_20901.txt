We are currently not testing anything on Windows. I don't think cygwin is that interesting, as you'd still be linking against glibc AFAIK, but supporting Windows nmake builds is on the roadmap.
No clue how to write those files though.
See PR #14 which shows how a CMake file for kyber768 would look, and then we can use CMake to generate a Visual Studio project and build that.  I've done so successfully with that code on my Windows 10 virtual machine.
If we decide to go the PR #14 route (as opposed to the PR #13 route), it should not be too much harder to turn on AppVeyor for continuous integration testing on Windows.  (We use AppVeyor to do Windows CI for liboqs.)
It looks to be quite challenging to use a single Makefile for both GNU Make and Windows' nmake for a variety of reasons: different suffices for object files (.obj versus .o), different compiler options, and different forms for the implicit rules for e.g. automatically making object files from C files.  So we'd have to have separate Makefiles for GNU Make and Windows nmake.
Okay, PR #13 is ready for review.  It adds a GNUmakefile and a Makefile.Microsoft_nmake for kyber768 which build static libraries.  I've also added a script_windows\build_all.bat file which runs nmake over all the KEMs, and an appveyor.yml configuration that runs a very rudimentary AppVeyor continuous integration on Windows: right now it just checks that the compilation passes, and does not try to do anything else.
After PR #13 for the KEMs has landed, I'll do a separate PR for Makefiles for the signature schemes because there is a problem building dilithium-iii using Microsoft's compiler that will need some further discussion.
#47 adds building the functional test and test vector programs on Windows.  The final step would be to actually check the test vector output, but this would require doing the same things that are in the Python script that checks test vectors, which is too complicated.  (Or we could just run the Python script itself, but then we'd need Python on Windows.)
I don't think installing Python on Appveyor would necessarily be too complicated, it's already installed on Appveyor: https://www.appveyor.com/docs/windows-images-software/#python
Let's make a new issue to run the python scripts there.
