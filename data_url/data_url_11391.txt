name: Docplex converter.
about: Having an optimization problem in Docplex form transforms it into the OpenQAOA Hamiltonian.
title: 'docplex2hamiltonian'
labels: 'feature request'
assignees: @alejomonbar @MaldoAlberto
Before raising this feature request, I have made sure:
Implementing optimization problems using openQAOA is restricted to certain problems with a predefined structure ( NumberPartition, TSP, Knapsack, etc). For example, if we want to modify the Knapsack problem with a Heuristic equation, the implemented Knapsack problem would not help me to solve my problem and I must create my own Hamiltonian of this problem. Docplex a python based library used to solve optimization problems can be used to codify the optimization problem and then translate it directly into its OpenQAOA Hamiltonian.
It will be something like:
Create a class function that translates an optimization problem into its Hamiltonian representation.
we think Numba can be used instead of Docplex. But, we should start first with Docplex.



Thanks, @alejomonbar and @MaldoAlberto !
I like the idea. This way OpenQAOA will also have a simple wrapper to convert qiskit QUBO problems into hamiltonians (cc @vishal-ph ).
Do you think docplex2hamiltonian can be written without needing to install docplex? This way we could make the installation of docplex optional, and not compulsory: if you want to use this feature you'd go ahead and install docplex. But otherwise, the package stays leaner.
Ideally, we docplex2hamiltonian would take some python primitives (i.e., dictionaries and strings, and not an object coming from docplex). Do you think this will be possible?
Also, you call docplex2hamiltonian a class function but you plan to put it in the utilities. What class are you proposing here?
@Q-lds and @vishal-ph
Do you think docplex2hamiltonian can be written without needing to install docplex?
Sure, we will make it optional.
Ideally, we docplex2hamiltonian would take some python primitives (i.e., dictionaries and strings, and not an object coming from docplex).
I think it needs a docplex document as input. Otherwise, we lose the whole purpose of the method because it requires the flexibility of adjusting the cost function, which is only possible if we work outside the function docplex2hamiltonian with the docplex method.
I think it needs a docplex document as input. Otherwise, we lose the whole purpose of the method because it requires the flexibility of adjusting the cost function, which is only possible if we work outside the function docplex2hamiltonian with the docplex method.
Well, what I was thinking is whether you can easily convert the model into python primitives by hand so that the parameters of docplex2hamiltonian() are all python primitives. But ok, let's start with the parameter being the docplex model as you are suggesting.
Well, I'm not sure at this point what is best. But, let us work on the problem and come up with some options. Because the implementation requires other functions that translate equality and inequality constraints into its cost function representation.
Ok. Intuitively I think this could be an abstract method of the QUBO class. But feel free to propose an implementation and we'll take it from there!
I am really looking forward to seeing how this feature will come along!
