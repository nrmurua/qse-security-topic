Adding the following function to class TestPulseSimulator and running it, I expect it generates a near-zero Hamiltonian and evolve it using the simulator for one unit of time, to get a near-identity transformation applied to the initial state |000>. Instead, the state is ~ |+00> for any (tiny) value of omega2, while it remains the expected |000> when setting omega2 to 0 exactly.
The fidelity of the resulting state with |000> is expected to be 1 - O(0.01^2).
@haggaila I think what's going on is that the drift Hamiltonian has X0 on qubit 0, and the simulator defaults the initial state to be the ground state of the Hamiltonian. The state vector output is
array([0.70709794-0.00353552j, 0.70709794-0.00353552j, 0.        +0.j        , 0.        +0.j        , 0.        +0.j        , 0.        +0.j        , 0.        +0.j        , 0.        +0.j        ])
which I believe is correct: this is the ground state of XII multiplied by a phase. Need to be careful with the tensor product convention: using the tensor product convention in np.kron, the order of the subsystems in the simulator is actually reversed, i.e. this is kron(|0>, kron(|0>, |x1>)), where |x1> is the ground state of X.
Thanks Dan, I'll fix the tests, and I will test to check what is the initial state in the case of a Hamiltonian with a degenerate ground state..
So perhaps it could be useful for users to issue a warning if the drift Hamiltonian is not Z in all qubits, or does not commute with \sum_i Z_i, etc.
I'm closing this issue, it's not a bug, the discussion is summarized in the new (feature) issue #539.
