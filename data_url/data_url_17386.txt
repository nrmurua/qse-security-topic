It would be useful to add __radd__ method to the Operator class. This would allow us to use the sum function to add Operators. The default start value for sum is 0 — an int. Since int + Operator is not defined, Operator.__radd__(0) will be called. Currently this is not implemented.
A simple solution would be to add this to operator.py (or base_operator.py).
An example of where this would be useful is on Peter Wittek's edX QML course (and the original Qiskit file mentioned in the quotation).
In order to sum our individual Pauli matrices, we had to use a trick (taken from the official implementation of QAOA in Qiskit Aqua): the python function reduce. Ideally, we would like to use sum([pauli_x(i, 1) for i in range(n_qubits)]). However, the function sum doesn't work yet on Operator objects, even though it's possible to add two Operators using +. The reduce function above recreates a sum that works on Operator. All of that is very technical and will probably be simplified in future versions of Aqua.
Other classes with __add__ defined:
@mkalis, could you please elaborate on your comments regarding the semantics of add for quantum circuit and pulse schedule? The semantics in these cases do not refer to add, but rather extend by appending the elements on the rhs to the lhs as is the case with Python sequences. We would appreciate alternative suggestions if you have any.
@taalexander I think add / + works great for quantum circuits and pulse schedules. My comment was about the sum function only and if there are any other classes where its handy use should be enabled (by implementing __radd__). It seems to me that the only other candidate is Qiskit Aqua Operator, since sum should be limited to mathematical objects (I think). For example, Python itself does not allow summing strings sum(('b', 'c'), 'a') (although it allows concatenating tuples sum(((3, 4), (5, 6)), (1, 2)), so maybe it is less about semantics and more about performance). So, while __add__ is implemented for circuits and schedules (and that's good), I see no reason to implement __radd__ at the moment.
I guess that defining join could work as a semantically better an alternative to sum for circuits and schedules. Or not defining a new function at all — we can just continue using loops or reduce, if joining lists of circuits or schedules is a less frequent use-case.
@mkalis, great I agree with you on all counts :)
I think there are two more decisions.
With these changes it would also make sense to implement __radd__ for circuits and schedules (None + circuit / None + schedule).
I would be happy to implement this and do a PR.
And should I also add this issue to Qiskit Aqua repo as well?
I'm not sure I see the benefit to take __radd__ for None with Schedules. Could you please explain what you believe the benefit would be @mkalis?
True. I was thinking about a situation where you start with an empty schedule / circuit and assign None to it. But both of these classes can be empty, so there is no need to use None. None would still be useful for Operator, since this would allow us not to define dimensions initially.
For Operators I can think of use-cases for None + operator (e.g. building a new operator in a loop), 0 + operator (e.g. sum function), operator + None (e.g. operator1 + (operator2 if ... else None)). The last one would be a nice-to-have, so can be left out now.
So the whole change would be a small addition (or other is None + changes in docstring) to the initial code proposal for Operator. Or adding __radd__ to base_operator.py (similar to __rmul__) and defining operator + 0 and operator + None in operator.py (this would probably fit better in the current structure).
base_operator.py
operator.py
Thank you @mkalis, I agree it makes more sense in the case of the operator. Thoughts @chriseclectic?
@mkalis I think the final small snippets you posted would be good to have, could you make a PR? This could be both in Terra's Operator class and in Aqua's.
@ajavadia I added a PR for Terra #2582. I will do one for Aqua once this is reviewed and merged. Should I also create a separate issue for Aqua to refer to in the PR for Aqua? Or just PR will suffice?
Closing this — numpy.sum solves to original problem.
