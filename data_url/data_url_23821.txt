I have made an instrument which adds parameters on the fly, based on user input.
This works very well without using the server capabilities.
However if I start using the server, the parameters only get added to the server side of the instrument.
but the local 'remoteinstrument' doesn't know about these new parameters.
it would be very nice if the remote instrument could be updated automatically, or else maybe a manual command to refresh the entire list of parameters.
I could also be that this usecase is too unique and I need to start thinking of a different solution
Not that I can help with that, but that sounds interesting, could you give an example for what this is used for?
I am using this to model a system consisting of several subsections. I made it such that sections are attachable with functions of the instrument driver and this will add the parameters corresponding to such a section to the parameters of the containing instrument.
I don't think this will have uses in the experimental case, if you start extending physical instruments, then it is not a big problem to reinstantiate the driver
Interesting, indeed, I cant come up with anything comparable :) Maybe one day...
Thanks
I actually had a rather similar idea (for the experimental side) and in the
end decided against it. We have a qubit object that holds the parameters
for things like pulses and RO. Depending on how we technically implement
the RO we either modulate a MW source or use two of them. As we sometimes
switch between modes I wanted some parameters to disappear /reappear when
switching between these modes.
Would be sad if those kinds of things are not possible when using servers
On 3:27AM, Fri, Apr 22, 2016 MerlinSmiles notifications@github.com wrote:
Interesting, indeed, I cant come up with anything comparable :) Maybe one
day...
Thanks
â€”
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub
https://github.com/qdev-dk/Qcodes/issues/99#issuecomment-213200310
I totally agree with @AdriaanRol that this is actually useful.
If a mode of an instrument changes, some functions and parameters could be hidden, added, or even changed, as they are dependent on thaat specific mode.
Interesting - I can certainly how this would be useful. Servers do not make this impossible, but it will take a little work. We would need to change the way an InstrumentServer responds to an ask, rather than just giving the return value it could reply with a dict containing the return value plus other keys describing mutations to the interface. To start we could just rebuild the RemoteInstrument interface completely with any mutation... which would be fine as long as changes like this aren't expected to happen in hot code paths - like in the middle of a sweep.
The only change this would imply in the instrument drivers themselves would be some sort of indication when the interface has mutated, that is independent of the return value of the method. Could be as simple as some flag (instrument.mutated?) that you set True in your method and we clear back to False after the change has been sent to the remote. Otherwise we'd need to hunt for changes to the instrument prior to any reply, which would be awfully slow.
That would be a good idea,
I think in most cases, parameters are not added within loops. And within your instrument it would be known when parameters are added.
You could even make a call to some method of the "base instrument" class to update all parameters in the remote intstrument.
Closed in PR #244
