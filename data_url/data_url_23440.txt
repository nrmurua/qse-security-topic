From a comment by @damazter on #145:
the parser restrictions on setting and getting parameters should only distinguish between valid and invalid option, I think no safety precautions should be set in those options. If safety is an issue, it should be incorporated in the instrument driver (and an overwrite could be implemented there). The safety precautions should not be incorporated in the parameters themselves however, because they should be as general as possible in my opinion.
Seems like we want a second level of parameter validation, independent of and typically stricter than the validators built into the parameters. Sometimes these may also want to be linked to multiple parameters, like Oxford's double-cylinder magnet safety ranges, or "don't allow adjacent gates to have a voltage difference > 2V". How should this work?
cc @AdriaanRol @spauka
@alexcjohnson , I completely agree that we should have this.
I think we can use the existing validators for this. The way I would implement this would be by not overwriting the (hard) validator but having an optional soft-validator in a parameter. By default this is set to vals.Anything, unless specified by the user.
This should than have some accessible function to set it (function of the parameter), Ideally this validator shows up in the repr of the parameter and also in the docstring.
I understand it might be tricky to dynamically generate docstrings but I think it makes sense to look into this.
Is this issue still relevant? There seems to be consensus nowadays that the Parameter's validator catches invalid commands (like setting a frequency outside of the instrument's range, or using strings for numbers) whereas things like magnetic field limits are handled elsewhere in the driver.
Coupling validation of different parameters on potentially different instruments, like what @alexcjohnson mentioned above, seems right now to be far off in the land of vague future features.
