We currently have a lot of bits and pieces lying around without the clearest structure. For the pre-alpha release, we should clean this up.
To me, a reasonable organization is as follows:
And, we will add a "conversions" directory with functions to convert between circuits.
Open for comments and discussion.
If we use this folder structure my only comment is that the folder name factories/ should be zne/.
Probably @willzeng and @nathanshammah have other suggestions.
Some of the rationale behind the current structure is to keep the different pyquil and cirq implementations separate from each other. I'm not sure how well we are keeping things modular though.
Another modularity to consider is keeping the dependencies for testing (e.g. qiskit right now) separate from the dependencies for the library itself.
We haven't been especially strict about this so far, and, in fact, perhaps we shouldn't be too strict going forward. I'll open up a separate issue to discuss modularity that I think we should consider before we refactor folder structure.
Ok so this actually became a different issue #37 when I thought about it a bit more. If we agree on that then we can talk about how to keep the library modular so that mitiq itself depends only on cirq and that testing mitiq also depends on:
With #37 agreed, this adds a little to color to the current structure of the library and how we could keep it growing:
The idea here is that we don't want to require mitiq users or develops to have to have all of the front and back ends installed. One should be able to use or develop mitiq with whatever front end libraries or backends are available. At the top level we strictly avoid dependencies on non-cirq libraries (I know of only one such dependency right now as a default for zne.py).
What do you all think?
I think conversions.py and test_conversions.py require non-Cirq libraries. So maybe we need different files like, e.g., convert_pyquil.py, convert_qiskit.py, etc.  placed in the associated folders.
You're right that we likely will need lightweight wrappers if we want the interface to be directly with the objects from the other libraries. This can be lightweight though (this is pseudocode):
@rmlarose is there more rearranging that you want to propose / discuss here? Otherwise I think we can close this issue.
I think it's good, other than the location of conversions.py. As we discussed there will be Qiskit/pyQuil specific conversions in the respective directories. We can continue the discussion in Pull #53 though, good to close this now.
