Is your feature request related to a use case or problem? Please describe.
Would be great if there was built in support for mapping operations to automatically run in subcircuits. Otherwise all simple transformers have to do that themselves.
Describe the solution you'd like
Probably just a "run_inside_subcircuits" option in Cirq.map_operations. We should also have one for running inside tagged ops, running inside classically controlled ops, etc.
Additionally it would be nice if we had a Cirq.iterate that had the same options, so you could do something like Cirq.iterate(isinstance(cirq.X), op, run_inside_tags) and we could stop all the special handling for tagged ops. (Or maybe we make a special Cirq.isinstance specifically for this).
[optional] Describe alternatives/workarounds you've considered
[optional] Additional context (e.g. screenshots)
What is the urgency from your perspective for this issue? Is it blocking important work?
P2 - we should do it in the next couple of quarters
We should also have one for running inside tagged ops, running inside classically controlled ops, etc.
so you could do something like Cirq.iterate(isinstance(cirq.X), op, run_inside_tags) and we could stop all the special handling for tagged ops.
Like for when changing measurements to dephases, given a change_measure_to_dephase function, it would be great if we could just call
or something like that, and map_operations does all the work of looking inside subcircuits, tagged operations, classically controlled ops, etc, and it removes tags on any changed gates. Even just having the arguments is useful because it highlights the things users should consider when implementing their own transformers, that they might otherwise forget about.
There are probably a lot of extra features we could add. However recuring through subcircuits is certainly the top.
(I'm actually not super sure about the iterate functionality. It sounded neat initially but I can't think of a solid use case for it).
@daxfohl tags_to_ignore and deep flags have been added to the transformer primitives. This should be enough to unblock the deferred measurement PR.
Please let me know if you think anything else needs to be added, for example:
@tanujkhattar Here's kind of what I'd expect:
But here's what it comes out to
So, the tag is removed in the 2nd one (which I'm aware is an ongoing discussion in #4956, and probably there should be a flag in map_operations to allow users to choose). And also the classically controlled X does not get transformed, which seems wrong (again we could add a separate flag to let users choose).
Granted this is an artificial example, but something similar like increasing the exponents by 1% or something could be real-world use cases. (Also see #970, it would be nice to be able to have a simple mapping function op ** 'param' if isinstance(gate, XPowGate) or something).
From cirq sync:
Let's open separate issues to track the two remaining requests, as both of them are nuanced and would need further discussion / evidence. See comments as follows:
As per discussion on Keeping tags for all TaggedOperation methods.Â #4956, Tagged operations are supposed to be immutable, so if an operation changes, the tags should get removed. We can potentially add support to preserve tags on map_operations since it's a local transformer, but doing that on merge_operations is not well defined because tags can lose their meaning.
I'd prefer to see more evidence of use cases where we'd like to preserve tags during a transformation, and if such use cases exist, we can revisit whether a) we'd like to add an option to transformers to preserve tags and b) Whether we'd like to modify the immutability of TaggedOperations.
run_inside_classically_controlled_operations can also be added to map_operations, but it's more tricky for merge_operations. Another approach could be to wrap classically controlled operations in classically controlled circuit operations and then do a recursive decomposition inside circuit operations. Let's collect evidence of use cases and then decide on an approach.
