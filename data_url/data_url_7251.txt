Ex Laser.k = $\hat x$ produces warning for non-orthogonality before Laser.\epsilon can be set.
Perhaps we should move to a parameter Laser.polarization with const Laser.p = Laser.polarization. Then consider using the format (k = \hat x, \epsilon = \hat z) where the backend takes care of the unit vectors.
This should resolve the QOL issue when running a loop where I build up a Trap with different frequency values on the Laser and receive a long warning list of non-orthogonal vectors upon completion.
