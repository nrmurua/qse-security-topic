When building custom functionality with factories it can be easy to forget to reset the factory. An example use case is when data is loaded repeatedly into the same factory and then extrapolated.
Could this behavior be prevented or at least to warn the user when they are using this pattern that they might want to reset the factory. For example there could be a warning when you add more data to a non-empty in_stack / out_stack or when you call .reduce on the same factory twice.
The current structure of self.push() assumes that the measured expectation values are added 1 by 1 which is motivated by an  adaptive perspective.  So, unless we change this structure, the best way is to raise warning if .reduce() is called twice without resetting (excluding AdaptiveExpFactory from this check).
How about a static method which just inputs the data to fit then outputs the ZNE value?
This avoids messing with the history which is the root of the problem. It's convenient because the functional form is defined by the particular factory. A potential downside is that it could be confusing for users about when to use reduce vs extrapolate.
If it is a static method, sometimes it may need additional arguments such as asymptote, order, avoid_log... etc...
Another option is to define a set_scale_factors and a set_exp_values methods which would override any history.
@rmlarose, thinking twice about this I think that a static extrapolate method with all the necessary arguments should be ok at least for non-adaptive factories. In its docstring we can explain the difference with reduce to avoid confusion. I can make a draft PR and then we check if it works.
It's a good point about being static and having to input parameters. I'm not sure what's best to be honest, we can discuss further once the draft is up. Thanks for taking this @andreamari.
