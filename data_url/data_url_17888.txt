I want to discuss the inputs to the global execute and compile.
currently
I want to argue anything like basis_gates, coupling_map which are part of the backend should not be possible to pass to execute. As it runs on one backend and compiles to that backend.
Others like
initial_layout, shots, max_credits, seed  should be as these are user setups.
Not sure about
 hpc, skip_transpiler, config i have no idea what they are. If you do feel free to let me know and discuss here how they are used.
For qobj_id a user at this level should not even know about qobj so we should just drop it.
So to me execute should be
The goal is to take the circuits and user inputs and internally compile them to make a qobj and run it on a backend they inputted.
Now for compile
I want to argue that it should not take a backend obj. If the user wants to handle the compiling they should pass it a coupling_map and basis_gates and we should make them required.  Then I don't see why we need to pass to compile the backend object. Maybe we can pass a name object to say it was compiled for this backend.
Then a user gets a qobj after running this which is just a container that they can run on any backend with
If it can't run we report an error like this backend does not support that gate etc. The use case is I want to make one compile run it on an experiment and then run it on device and compare. Or I might want to use a different coupling map (sub-map of the experiment) etc. More advanced compiling we push to the transpiler.
basically, I want the first case to be an example of using_qiskit_terra_level_0 and the second using_qiskit_terra_level_1 and level_2 with pass_management we do later.
To make it simple for the user level 1. we make a function
Not sure about
hpc, skip_transpiler, config i have no idea what they are. If you do feel free to let me know and discuss here how they are used.
I vote to remove. I made and issues #1052 to handle this.
Let's also remove the max_credits, since it is IBMQ specific and the global compile/execute should not have args for it. It should be part of backend.set_config() (a la issue #1052 ).
