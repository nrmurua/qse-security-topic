Right now, Job class interface mimics, in a way, python's Future interface, and I think we can make developers life easier by simplifying this interface. My suggestions are:
With my suggestions, the most common user use-case could look like:
Let's have a discussion!
Ok, I'm updating the issue to track the changes that are going to finally be merged.
I have removed  def exception(self): property but all these methods could throw exceptions:
If something wrong happened while submitting the Job, hence we don't have a Job ID, it doesn't mean the Job was not actually queued, but we can't query the API with this Job instance. The only way to know about the status of the Job is by manually calling backend.jobs() and figuring out (by creation date?) which one is our Job.
There's no more auto-submitting on instance creation. One must call submit() in order to push the job to the backend to be executed, that has allowed us to only have one point of creation (the constructor).
I have left the properties which represent states: queued, running, done... etc.
