Summarize the task
If default values are provided for any of the position arguments -- circuit or context, the @cirq.transformer decorator currently ignores them and the returned decorated method expects both arguments to be explicitly passed to the method.
This should be fixed so that the following works:
Acceptance criteria - when is the task considered done?
Related issues: #4483
cc @maffoo
I'd think we want the circuit arg to be required, and I think we should probably treat it like a positional-only argument (although language support for that in function signatures is only available in python 3.8+). For the context parameter, on the other hand, is there ever a reason why you would not want to allow a default parameter? I think having that universal default would be fairly straightforward in the decorator, having an optional default might be a bit more involved. Also, we might consider making context be a keyword-only argument.
For the context parameter, on the other hand, is there ever a reason why you would not want to allow a default parameter? I think having that universal default would be fairly straightforward in the decorator
One problem with making TransformerContext() a universal default in the decorator is that custom defaults will get over-written by the universal default defined in the decorator. i.e.
This can be a surprising behavior for users. The fix for this would probably also work for the optional default use case.
We can modify the decorator to inspect the signature of the decorated function and copy the default, if any. Something like:
I don't think we automatically assign a default TransformerContext() in decorator if it's not explicitly specified in the function definition. The reason is that in the decorator signature, we promise to preserve the input type. But, if we implicitly add a default value to context, the input type would not be preserved.
For example:
