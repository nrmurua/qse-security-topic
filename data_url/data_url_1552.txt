Is your feature request related to a use case or problem? Please describe.
This is a bullet point of #4476 that seems large enough to be its own issue. Simulators currently assume worst-case scenario throughout the simulation. i.e. density matrix simulator uses nothing but density matrices even if the circuit is entirely unitary.
Describe the solution you'd like
It would be great to have simulators be smarter about what underlying state representation they're using and "upgrade" on demand. They could start off in a pure state, upgrade to stabilizer, state vector, and density matrix respectively when they encounter operations that require the additional complexity (of course not upgrading past the standard representation for that simulator type). When using the qubit allocation feature, entanglement would have to choose the heaviest of the two states before kronning, but Measurement/Reset would then automatically bump that qubit back to pure state again.
Maybe this could be a useful optimization for error correction subcircuits(? IIUC those can be stabilizers? But, if they're pre-entangled with something in the main circuit then I assume they'd still have to retain the heavier representation and wouldn't be able to take advantage.) Either way, it seems like a useful general optimization.
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
(Managed to get a working prototype of this here: https://github.com/quantumlib/Cirq/compare/master...daxfohl:prog?expand=1). The whole thing is in the progressive_sim_test module, class ProgressiveSimulator; it's only about 150 lines.
It sits on top of the qubit allocation tooling, so it runs independent states independently, allowing you to have e.g. a 100-qubit circuit where 98 qubits are entangled in stabilizer form and two are entangled independently in density matrix form. (Obviously this only works if the 98 qubit group is entangled by and operated on by nothing but stabilizer operations. And any operation that entangles the two independent states will blow up into a 100-qubit density matrix; no dark magic going on here).
A prereq for this (all the other code in this diff) is the ability to kron two ch-form states. The implementation here seems to pass all unit tests but I'm still not 100% sure it's correct. If there's a way to factor a just-measured-qubit from a ch-form that would be even better, but I haven't figured that out yet or determined if a way even exists.
Quick note, I have a back-of-envelope design for integrating ProgressiveArgs from above directly into the existing simulators, so that everything is handled under the hood without any API changes or new simulators, which would allow us to do this in various simulators without any code redundancy,. Main thing is I want to investigate factoring the ch-form first. This seems like it should be possible in O(n^2) and would vastly improve this feature.
Closing due to lack of real-world use cases.
