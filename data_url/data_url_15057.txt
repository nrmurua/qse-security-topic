Transpiling a Clifford circuit to a clifford basis containing "sx", but not "h" raises a Transpiler error, similar for transpiling with "ecr" instead of "cx" for the two qubit Clifford gate.
Running
is ok, but running
raises
also raise similar exceptions.
SX should be a valid basis gates for clifford synthesis since it is equivalent to Sdg.H.Sdg. Similar for ECR which can be written as CX + 1 qubit cliffords
I'm not sure how clifford synthesis is implemented these days, but it should be updated to support "sx" and "ecr" since they are our native device gate.
My motivation for this is I would like to mimic device transpilation on a clifford simulator by transpiling to a Clifford-equivalent ECR/CX + RZ SX basis, where all the RZ gates would be replaced by either I, Z, Sdg, or S for clifford circuits.
Sounds like at a minimum we need a bunch more equivalence-library rules, and longer term, we need to expand the Clifford-specific synthesis routines (@ShellyGarion probably knows the state of that work).
As an immediate workaround, you can do this at the start of your Python session:
and then all of your lines should work.  They won't be the most efficient synthesis (almost certainly), but they'll at least compile.
(It's also probably worth checking that I got those equivalences correct lol)
They won't be the most efficient synthesis
looool
@chriseclectic - do you allow only s and sx as basis gates? or also other gates, e.g. sdg, sxdg, x, z, y?
@ShellyGarion it should be up to the user, "sx", "s" would be minimal, but they could include other clifford basis gates for efficiency in synthesis if you didnt want long circuits like @jakelishman's example with the basis transpilator without optimization.
Essentially any spanning set of our standard Clifford gates should work (i think minimal ones would all have 3 gates from ecr/cx/cz/cy + h/sx/sxdg + s/sdg).
For example I might use ["ecr", "sx", "s", "sdg", "z", "id"] if I wanted to have a circuit that has same shape as transpiling to ["ecr", "rz", "sx"] basis would, but then replaces each rz with a clifford for the 4 valid clifford angles (mod 2pi).
I added the suggested equivalences to the equivalence library in #9913. As mentioned above, this may produce many redundant S gates, so it may be better to have all clifford z-rotations ["s", "sdg", "z", "id"] in the basis gates.
