Many routines in the fm package declare their arguments as INTENT(IN) although they actually modify the passed matrices, e.g. cp_fm_scale_and_add.
I belive, there are two reason why the compiler accepts this:
Nevertheless, I think we should declare our wrapper routines with the correct INTENT.
The Fortran standard states that the intent of a pointer dummy argument refers to its association state, not to the data to which it points to. The same holds for pointer components of derived types. See for instance here, page 102, C845 or point 2 and 6 (about intent(in)). Thus, INTENT(IN) of POINTER dummy arguments is equivalent to a constant pointer in C, NOT a pointer to constant data. Compare maybe with this
I agree that it sounds counterintuitive, but our declaration is standard conformant assuming that a (Sca)Lapack interface does not use POINTERs because the data to which the local_data points to changes, not the association state of the pointer itself. (your first reason)
Nevertheless, one could switch to INTENT(INOUT) in these cases for clarity suggesting that the data is changed although it is strictly speaking not necessary because the association state of the underlying pointer doesn't change.
Thanks for the detailed response! You're of course right, this is completely in line with the Fortran standard. I've tamed down the wording of the title.
Nevertheless, one could switch to INTENT(INOUT) in these cases for clarity....
Yes, I think this would be a worthwhile change. I got pretty confused by this and I guess I'm not the only one.
Furthermore, it would pave the way for switching the local_data to ALLOCATABLE some day.
I like the idea of switching to ALLOCATABLEs and try to ask other developers to replace POINTERs with ALLOCATABLEs whenever possible whenever I see obvious cases. Surely, we should try progressing with refactoring these aspects in the code.
