Currently, the example code in grover.py has this:
But it would be clearer to do something like this:
Where PhaseFlip is a gate defined like this:
This gate is a bit unusual, since it has no targets. That's why I opened this issue; I assume it'll break all kinds of code if I use it. But many algorithms get minor simplifications from the "just change the phase of all states meeting the current controls" operation.
For example, the alternating_bits_oracle has an output parameter. But it really doesn't need one:
To implement a global phase gate, you just arbitrarily pick one of the controls and apply a Z rotation to it. If there's no controls to pick from, just do nothing.
Maybe a new gate, e.g., CPhaseFlip | qureg with the default decomposition rule above would do the job?
@Strilanc would such a gate address this issue?
A conditioned global phase flip doesn't really have a target, it only has controls. You would apply it to the empty tuple, not to qureg.
Yes, this is why I propose CPhaseFlip:
The context I had in mind was in a method being affected by a with Control(control_qubits), so the code invoking the phase doesn't know the control qubits directly.
My issue with having a gate acting on no qubits is that one would expect it to be the identity -- but it's only the identity if there are no control qubits, which is really weird.
Oh I see, but that's fine since that code could just apply a global phase gate to any qubit it knows (and I guess it knows at least one :) )
