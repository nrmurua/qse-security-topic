Currently, there's no good way to construct a controlled operator like |0⟩⟨0|⊗𝑅𝑌(𝜃)+|1⟩⟨1|⊗𝑅𝑌(𝜙), i.e. do something (not just the identity) to qubit Y when qubit X is in state |0> and do something else (not just the NOT operation) when qubit X is in state |1>.
In Quil, that operation can be expressed succinctly using the CONTROLLED command
e.g. for 𝜙=pi/2 and 𝜃=3*pi/4.
This is not accessible in pyQuil, which not only does not have an object-level ability to mark a gate as controlled, but even its quil parser is not aware of the CONTROLLED keyword. We can of course perform the same operation as above by defining our own gate, but this includes unnecessary boilerplate. In the case of a larger number of qubits, it also means that our program would pointlessly get compiled to an executable using a larger number of native gates than necessary.
As an explicit example, suppose we wanted to construct the 4-qubit operator
(|0⟩⟨0|⊗𝐼⊗𝐼⊗𝑅𝑌(𝜋/3)+|1⟩⟨1|⊗𝐼⊗𝐼⊗𝑅𝑌(𝜋/6))⋅(𝐼⊗|0⟩⟨0|⊗𝐼⊗𝑅𝑌(2𝜋/3)+𝐼⊗|1⟩⟨1|⊗𝐼⊗𝑅𝑌(𝜋/2))⋅(𝐼⊗𝐼⊗|0⟩⟨0|⊗𝑅𝑌(𝜋)+𝐼⊗𝐼⊗|1⟩⟨1|⊗𝑅𝑌(5𝜋/6))
In pyQuil, we could write the following code to construct and apply this operator
whereas in Quil we could write the same as
Not only do we avoid the unnecessary boilerplate, but whereas the pyQuil program compiles to (a program using) 338 native gates, the alternative but equivalent program written using CONTROLLED in Quil compiles to 56 native gates instead.
There's also DAGGER to expose.
