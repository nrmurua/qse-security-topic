@santoshkumarradha commented on Sun Jan 02 2022
Throughout the codebase, we are making API requests to local servers without proper error handling leading to issues listed in #224. Better handling of this with usual pattern of checking if indeed the flask servers are running in each respective module needs to be added like
and then throw meaningful error. Currently if dispatcher is not running and we call the dispatch, we wait and through HTTP request error for API.
@santoshkumarradha commented on Mon Jan 03 2022
Related to #224
@FyzHsn commented on Mon Jan 31 2022
This task can be broken down into the following subparts:
@FyzHsn commented on Mon Jan 31 2022
@santoshkumarradha @wjcunningham7 How do you feel about the UI for the is_server_running functionality to be:
and also place the functionalities inside _cli/service.py?
Also, another alternate suggestion:
Lastly, in terms of code placement, I could also put is_dispatcher_running inside covalent_dispatcher/app.py and similary for the UI server.
@FyzHsn
Yup this totally works
from covalent import is_ui_running, is_dispatcher_running
The problem with the second one is that, adding one off strings is bit error prone as we relay on typing the correct string by the dev/user.
And one more point to note is that this can be made private as we do not expect user to interact with this. ( I potentially see a user trying to see from notebook if the server has indeed started, but that advanced a user can use the private method and we should not encourage tinkering with internal properties.
EDIT: vote for first one.
@FyzHsn  also to add, I see
The status of whether the servers are running can be checking using the _read_pid methods in covalent_dispatcher/_cli/service.py.
Instead I would also vote for making trial ping to the server to check its status as lot of times I see pid files not being cleared correctly and is in general a better design to directly verify for the server existence than indirectly.
@FyzHsn
Yup this totally works from covalent import is_ui_running, is_dispatcher_running
The problem with the second one is that, adding one off strings is bit error prone as we relay on typing the correct string by the dev/user.
And one more point to note is that this can be made private as we do not expect user to interact with this. ( I potentially see a user trying to see from notebook if the server has indeed started, but that advanced a user can use the private method and we should not encourage tinkering with internal properties.
EDIT: vote for first one.
Excellent! This clears things up.
@FyzHsn also to add, I see
The status of whether the servers are running can be checking using the _read_pid methods in covalent_dispatcher/_cli/service.py.
Instead I would also vote for making trial ping to the server to check its status as lot of times I see pid files not being cleared correctly and is in general a better design to directly verify for the server existence than indirectly.
From what I’ve seen recently, it seems to work without any issues. I’ll think a bit more about the design of pinging the server directly to check it’s status. It might also end up being a hybrid solution.
