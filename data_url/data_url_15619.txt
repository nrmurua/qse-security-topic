Overloading the @ operator for class qiskit.quantum_info.operators.Operator (documentation) so it works the same as Operator.compose() method. The same behavior is done with class qiskit.opflow.operator_base.OperatorBase (documentation).
When going through the Open Science Prize 2021 I encountered problem. After investigation it turned out that Operator class doesn't have @ overloading, so in order to fix the issue compose() or np.matmul() methods need to be used. As this is good solution it would be easier to use @, especially for reading the code.
You can already use the & operator for compose, but @ was specifically deprecated Terra 0.17 (#5834) and removed in Terra 0.19 (#7291) so we could change the order of the operands; a.__matmul__(b) was original defined to be a.compose(b), but that's the same as np.array(b) @ np.array(a) (i.e. backwards).  We needed to deprecate and remove it, so that people who were already using it were forced to adjust, and we didn't silently change the behaviour of the code underneath them.  We did plan to add @ back in again with the meaning a @ b == a.dot(b).
I'm somewhat cautious about re-adding the operator with a new meaning after only one release without it (0.19), but with suitable release documentation, it could be ok.  @ikkoham: do you have thoughts?
Yes, that's right. I'm going to add it in 0.20. (maybe in next QAMP)
