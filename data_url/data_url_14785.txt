When running a specific quantum circuit multiple times, I got different state vector results. To the best of my knowledge, the state vector should not change given a fixed quantum circuit.
The below code is a minimal reproduction example for the issue. It defines a quantum circuit with four gates, runs it 1,000 times, and counts the number of different state vector results.
I ran the above code and got the following results, which show 29 types of different result state vectors.
I expected the state vector results to be consistent between multiple runs. Please let me know if my hypothesis is wrong.
No response
Your assumption is right, in the absence of noise or measurements (i.e. if the input circuit is unitary); Aer should find the same statevector each time for a fixed circuit.  If you set seed_simulator (by something like simulator.set_options(seed_simulator=0)), then Aer should find the same results each time for the same input even with noise or measurements.
You're using a rather old Qiskit (Terra) version here, and I think you might be using quite an old version of Aer as well.  The main bug you're seeing was in Qiskit Aer (but now fixed), where it wouldn't check that it had received the correct number of parameters to a gate.  This manifests in your example because of the use of add_control, which is an internal-only method, and not intended for public use.  Doing add_control(UGate(...)) doesn't correctly produce a controlled-U gate parametrised in the way that Aer expects.  This meant Aer was reading effectively random memory for one of the parameters, which is what you're seeing.
The fix is:
Just to be on the safe side in the future: you said that you're feeding it the same circuit each time, but actually your code block doesn't do that - it just happens to work out the same in this particular case.  execute(qc, backend) is only a helper method that's equivalent to backend.run(transpile(qc, backend)), and transpile has (for real backends) stochastic components.  You probably just meant to do simulator.run(qc) at the end, rather than execute(qc, simulator), since your qc was already transpiled.
Thank you for your quick reply! I've updated to the latest version and the code now produces an error instead of the inconsistencies. I'll close this issue since the original bug is fixed.
