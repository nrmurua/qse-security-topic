Across terra, there are several imports of optional dependencies (packages other than those in requirements.txt), which happen at top-level (not within another function definition.) When a user hits an error message about a missing optional dependency, just running pip install foo won't be sufficient to use the package, they'll need to restart their kernel. With a runtime, import, the package would be available in their current session.
e.g. from dag_visualization.py
Searching for except ImportError and narrowing down to cases that happen at top-level is probably the best way to find occurrences.
Hello! I am looking to contribute as I have some free time during this holiday season, any starting points on where to begin on this issue?
Hi @AsavGandhi , great! A good starting point would be searching over terra for except ImportError to find cases like the example above (where we try to import a package that's not in requirements.txt while not inside a function definition). Once we have that list, we can move toward finding where those imports are used, and making them at runtime.
Thanks! @kdk, I will look into it shortly and will keep you updated!
Hi @AsavGandhi @kdk ! Did progress get made on this? I attached a list of Terra files that have an "except ImportError". The ones that have stars are irrelevant, I think (mostly just talking about providers, or whether a circuit has a Z3 gate). Next to the relevant ones, I made a list of the packages that need importing.
qiskit/tools/jupyter/: ipywidgets
qiskit/qasm/node/: pylatexenc
qiskit/transpiler/coupling.py: pydot, pillow
qiskit/transpiler/passes/layout/csp_layout.py: python-constraint
qiskit/visualization/: matplotlib, pillow, seaborn, pylatexenc, pydot
qiskit/visualization/interactive/: ipython
qiskit/visualization/pass_manager_visualization.py: pillow, pydot, graphviz
setup.py: cython
ImportErrorList.txt
Hi @AsavGandhi @kdk ! Did progress get made on this? I attached a list of Terra files that have an "except ImportError". The ones that have stars are irrelevant, I think (mostly just talking about providers, or whether a circuit has a Z3 gate). Next to the relevant ones, I made a list of the packages that need importing.
qiskit/tools/jupyter/: ipywidgets
qiskit/qasm/node/: pylatexenc
qiskit/transpiler/coupling.py: pydot, pillow
qiskit/transpiler/passes/layout/csp_layout.py: python-constraint
qiskit/visualization/: matplotlib, pillow, seaborn, pylatexenc, pydot
qiskit/visualization/interactive/: ipython
qiskit/visualization/pass_manager_visualization.py: pillow, pydot, graphviz
setup.py: cython
ImportErrorList.txt
Awesome, thanks @michelle4654 ! This list looks good. I think
qiskit/transpiler/passes/optimization/crosstalk_adaptive_schedule.py: z3 can be added (z3 here refers to an external python package) and setup.py can be removed (as its unlikely to be run in the context of an interactive session.)
Great! So the goal is to add these imports at runtime? Does that mean the file needs to probably import pip as well so that it can automatically install the package?
Great! So the goal is to add these imports at runtime? Does that mean the file needs to probably import pip as well so that it can automatically install the package?
Warning users with instructions on how to install any needed packages should be sufficient. Auto-installing could be confusing in some cases (e.g. if the install fails).
That sounds good. In qiskit/tools/jupyter/backend_monitor.py, there's a comment that says #pylint:  disable=import-error.
Does that mean this shouldn't read as an error?
also this isn't exactly the place to ask about this, but I saw in qiskit/visualization/matplotlib.py, there's a note about removing self.__style.field after deprecation. Should this be made an issue?
That sounds good. In qiskit/tools/jupyter/backend_monitor.py, there's a comment that says #pylint: disable=import-error.
Does that mean this shouldn't read as an error?
That's right. Pylint will normally raise an error when checking code that tries to import a module that doesn't exist (unless you're doing so within a try block). This is a bit of a special case because this code is only loaded by our jupyter magics in qiskit/tools/jupyter/__init__.py where there's already a matplotlib and ipython check, so we don't need pylint to run this check here.
If this issue is fixed, could this be closed? If not, I'd like to try a hand at it.
