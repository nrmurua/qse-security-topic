Hi,
I recently tried running the translation function on the 'xasm' compiler, and the runtime error indicated that it hadn't been implemented yet. Was wondering if there was a timeline for this?
Additionally, if I use the toString() function on my IR , does there exist a function to go from that string back to an IR if I do some processing on it?
Thanks!
Just pushed an initial implementation of XasmCompiler::translate() to xacc-devel. As soon as the CI tests pass I'll merge to master. As for the second question, there isn't currently a way to go from toString() to IR.
Its in master now, go ahead and try it out and let me know if you find any bugs.
Thanks so much for the speedy reply! I have been trying to rebuild the package and it has been failing. I am using MacOS catalina and tried all the recommendations on the installation about having the proper xcode and other dependencies but nothing seems to work, my xcode command line tool is up to date. Any recommendations on installing with Catalina? I can't figure out what changed since the first time it was built.
Figured it out, in case others run into this issue I installed the command line tools with 'xcode-select --install' and then edited my $CPATH variable to read '/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:/Library/Developer/CommandLineTools/usr/include/c++/v1' , this still threw some warnings but it compiled in the end! Will start using the xacc translate now.
Ok I have been testing the xasm translator, it seems to be working although I am noticing that when I start with an openqasm circuit and translate to xasm, my classical bit registry seems to be lost? If I wanted to have a custom readout index for my circuit (e.g. read qbit 4 onto classical bit 1) wouldn't this information be gone if I try to run on a device? When I translate back to qasm it just adds a single classical bit array in for each qbit. Is this indexing easy enough to incorporate? I am also happy to look into the code myself, though have never touched c++ so it might be tricky
Additionally, when I have U(θ,ϕ,λ) gates (e.g. IBM's u3) and translate those to XASM, it gives me the following error which seems to be a bug:
'[xacc-logger] [error] [XACC Error] Cannot cast Variant to (d):
InstructionParameter::this->toString() = 3.14159
This InstructionParameter type id is 2'
Can you provide a minimal python example of this bug?
Certainly.
My input circuit is the following openqasm string:
OPENQASM 2.0;
include "qelib1.inc";
qreg q[1];
creg c[1];
u3(3.14159, 0, 3.14159) q[0];
measure q[0] -> c[0];
I then call:
xacc.qasm('.compiler openqasm
.circuit circuit
OPENQASM 2.0;
include "qelib1.inc";
qreg q[1];
creg c[1];
u3(3.14159, 0, 3.14159) q[0];
measure q[0] -> c[0];')
ir_obj = xacc.getCompiled('circuit')
c = xacc.getCompiler('xasm')
circ = c.translate(ir_obj)
This final line throws the error:
'[2020-01-06 09:25:29.133] [xacc-logger] [error] [XACC Error] Cannot cast Variant to (d):
InstructionParameter::this->toString() = 3.14159
This InstructionParameter type id is 2'
This also happens the same way if I turn the 3.14159 into just 'pi'. Running the ir_obj.toString() function gives me the following:
U(3.14159,0,3.14159) q0
Measure q0
So I believe the ir object creation is working properly.
Go ahead and pull the latest from master and see if that fixes it.
Thanks Alex, looks like its fixed now. Really appreciate you helping me out with all this.
Was curious if there is any plan to incorporate Q# language into XACC?
Yes we are working on that currently. We are very interested in collaboration and integration with Q#. We have some interesting compiler work going on with the DOE AIDE-QC project, and have a mechanism for integration of Q# with clang that we are working on.
