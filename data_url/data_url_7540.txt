I noticed that the scope of a register in Yao is not local, which means that alternating reg1 in a local scope can change the value of a register with the same name in its parent scope:
The result is:
If this is designed as expect, then I assume the name of a register is actually the pointer points at its memory address. If this is correct, I suggest stressing this property in the documentation.
Secondly, I also noticed that even a register is a "global" variable, it still follows the local-scope definition of Julia, which means if I remove defining reg2 in the top-level of the function test:
I get this error:
It shows that for Julia reg2 is still only accessible inside the for loop. I wonder if this is also desined as expect since reg2 won't have any diferent register with same name inside function test. Thank you!
I don't get it. This is just a normal Julia variable behaviour.
I thought it is Yao's behavior, then I realized it is Julia's feature, Sorry! Now my only confuse is that why inside a function, Changing the value of a variable inside the for loop will affect the variable with the same name outside the for loop:
While without using a function, the variable inside the for loop behaves as local variable:
This question is irrelevant to Yao, I apologize for it.
This is because global scope is different from local scope. But this is something going to be fixed in the future without breaking: JuliaLang/julia#28789
And writing things in function is encouraged since it is recommended by performance tips
FYI (Chinese): https://discourse.juliacn.com/t/topic/159
Docs: https://docs.julialang.org/en/v1/manual/variables-and-scoping/#Global-Scope-1
