Something blocks for 135 ms on occasion in this experiment. Commenting out self.pmt.count() prevents this blocking.
How do you measure the "block"?
How do you measure the "block"?
artiq_coreanalyzer and watching LED flashing.
If c = self.pmt.count() is replaced by c = i the long delays go away.
watching LED flashing.
Really? Isn't the LED a RTIO device?
Is there anything in the log? What ARTIQ version?
Nothing unusual in the log. 4.0.dev+1298.ge4d48a78;opticlock
Could be the compiler getting slow for some reason; try using the usual Python profiling tools, and minimizing it by removing the core device interaction (e.g. like artiq_compile).
See attached .vcd.
rtio.vcd.zip
Compiler only runs once per call to artiq_run. How can that be the cause?
No, it runs every time you call a kernel from outside a kernel.
(And removing count() will cause the kernel to return early, whereas with it in, it needs to wait for the RTIO timeline to reach the current cursor.)
And removing count() will cause the kernel to return early
That clarifies how in the absence of count() the slowdown isn't observed.
Still not understood is why this happens in the first place. It seems like only sometimes that there is the slowdown.
Other programs running on your machine - is this Windows? Network problems? Have you reproduced it with artiq_compile?
No network problems that I've seen. Running Ubuntu with Linux kernel 4.15.0-30.
Have you reproduced it with artiq_compile?
I tried running the same program as idle kernel and don't see the pauses.
I'm uncertain about the execution model for idle and startup kernels that involve methods not marked by @kernel (or engage in RPC). I suspect they're only compiled once and RPCs are silently dropped since they're designed to run when Master is unavailable.
They are not silently dropped, you get a compilation error if you attempt RPCs.
Likely the "pauses" are in the compiler, or the rest of the Python program on the PC, or in your network. Try profiling artiq_run plus checking wireshark traces for problems.
@sbourdeauducq Have you tried my code? If you can't reproduce I'll look to a problem that's unique to my setup.
This will generally not work. cound(); ...; self.led0.off() and count(); ...; gate_rising() are guaranteed to see an RTIOUndeflow the way it's written. Scratch that.
The 135 ms are probably exactly the compiler overhead.
What exactly are you reporting as a bug? I expect to see the LED cycle through 2 s and then ~100-300 ms off.
@jbqubit Is this still an issue?
