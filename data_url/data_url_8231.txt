I have recently started to use QuTiP to compute unitary and Hamiltonian evolutions. Most of the calculations involved Hamiltonians (or circuits) defined on separate regions of the Hilbert space plus some other Hamiltonians used to couple the different systems together. When performing the simulations I have found that the requirement that Qobjs must have the same dims attribute to be summed or multiplied tends to make the code quite convoluted (the convolution might also come from my inexperience with QuTiP).
For example (I will use circuits but the same issues applies to Hamiltonians). Let |psi> be a random 4-qubit state and C a random unitary on the first two qubits. In order to compute C|psi>  one must specify the tensor structure of the random objects and not use qeye(8) but the tensor product of three qeye(2):
C = tensor(rand_unitary_haar(4, dims = [[2,2],[2,2]]), tensor(qeye(2),qeye(2),qeye(2)))
psi = rand_ket(32, dims = [[2,2,2,2,2], [1,1,1,1,1]])
I understand that the tensor product structure in the Qobj class might yield lots of advantages but it might be interesting to consider if in some cases it is possible to allow the summation or multiplication of Qobs of different dims but with the same shape. In this case, the above example would simplify to:
C = tensor(rand_unitary_haar(4), qeye(8))
psi = rand_ket(32)
You may find it easier to create tensor-producted identity operators by using the shorthand qeye([2, 2, 2]), which will automatically sort out the tensor product for you.  You may also want to look at qutip.qip.operations.expand_operator, which will handle applying your operator to qubits.
You can bypass the dimension checking by retrieving the underlying matrix at C.data or C.full() (these may change in QuTiP 5, but for now you're fine), doing your calculations, then reconstructing the Qobj at the end.  If all you're really using from QuTiP is the tensor product structure though, then you may achieve what you want with numpy.kron and avoid all of the overhead.
The only part of your example that I'd consider is convoluted is the duplication in the rand_unitary_haar and rand_ket requiring you to specify both N and dims - we probably could merge those, like how we do with qeye, basis and others.
jakelishmanm, thank you for your comment. As expected, a lot of my confusion was due to ignorance.
