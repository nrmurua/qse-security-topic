The functions return boolean values (1 on success, 0 on failure). However, I feel that an error code would be more appropriate (0 on success, -1 on failure).
In particular, it can keep the code of the caller cleaner. Consider the following:
vs.
I prefer the latter as it doesn't trail off to the right and keeps the error handling close to the function that raised the error.
I chose boolean values (1 on success, 0 on failure) because I like the convention that the function returns true when things are okay and false when they're not.  I would call things as follows:
That being said, I realize there's no real universal convention on return values in C.
Alright, that works. Another thing I'm wondering is if there is ever need for functions to return more than just a success/failure? Is there ever a case where two different errors might occur that need to be handled differently by the user? If so, then I think error codes are better. If not, then either solution is fine and I think keeping the current convention is better (no changes to the API).
If there's a reason to have multiple return codes, then by all means, yes.  But let's jump off that bridge when we come to it.
