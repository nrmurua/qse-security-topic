As mentioned in standup, this requires additional scoping because the legacy DispatchDB doesn't quite hold a faithful representation of the result object. It was designed to store whatever was necessary to render the workflow result in the UI. When a result object is saved to the DispatchDB, it undergoes a lossy encoding that essentially extracts a JSON representation of its essential attributes with most types converted to strings.
The source of truth was never the DispatchDB, but rather the individual subdirectories of results_dir, containing the pickled Result object, log files, and other workflow metadata.
A more reasonable goal would be for the script to vacuum up the individual subdirectories (keyed by dispatch_id) of a specified results_dir and save those result objects to the new db/datastore.
@wjcunningham7 @santoshkumarradha
Question: do we expect the legacy (v0.110) Result object to be rendered correctly in the UI? Until #441 was addressed, there was no way to infer the order of positional args to an electron from the transport graph.
Would this script belong in its own repo or in the covalent tree? This will be a self-contained CLI tool that the user can invoke on any results_dir.
How do we want to expose this tool to users? Should it be a standalone cli tool, or should it be accessed via the covalent command?
hey @cjao  complicating it much, I would add it in core covalent and deprecate it after. 3-4 more releases.
Hi @santoshkumarradha , I've implemented a migrate_pickled_result_object function that users can call on any legacy Result picklefile. My question is how should that be function be exposed to the user? We already have a covalent db migrate command for DB schema upgrades. How about a standalone binary like covalent-migrate-legacy-data? Or would you prefer a subcommand under covalent like covalent migrate-legacy-data?
Yes that works as well as this is a temporary but crucial path. go ahead @cjao ðŸš€
UX:
covalent migrate-legacy-result-object [path to pickle file]
Users can use that in shell scripts to migrate whatever pickled result objects they want. I've tested this for picklefiles created using the latest released version on PyPI (v0.110.2).
