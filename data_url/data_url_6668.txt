Hi,
I came across this issue while I wanted to calculate the inner product of two Ket vectors.
The only related function I could find was the NormDiff  method.
However this functions seems to malfunction as can be reproduced by the following little code:
let keta = Ket(1)
keta.Qubits.[0].StateSet( new CVec([| 1. ; 0. |],[| 0.; 0. |])
let ketb = Ket(1)
ketb.Qubits.[0].StateSet( new CVec([| 0. ; 1. |],[| 0.; 0. |]) )
printfn "%A" keta
printfn "%A" ketb
printfn "L2 difference? %A" <| keta.NormDiff( ketb.Single() )
Results in the output:
Ket of 1 qubits:
=== KetPart[ 0]: Qubits (High to Low): 0
1
0
Ket of 1 qubits:
=== KetPart[ 0]: Qubits (High to Low): 0
0
1
L2 difference? 1.0
It seems that the function calculates L infinity difference rather that L2.
But my main question is whether there is  a way to efficiently calculate the dot product of two Ket vectors.
In theory one could do this while preserving product form, whereas this function event if it worked would treate the Ket as if all qubits were entangled thus creates a full state vector.
Thanks
It appears that you've discovered an API that really shouldn't be there. NormDiff is really old code, isn't used anywhere and should just be deleted. The code is right, but the documentation isn't ;). What it actually computes is via this inner loop:
It's definitely not what you want. The problem you're having is that we've only implemented the routines we've needed for the simulator (not trying to do a complete math package). So, the only reason it isn't there is that we haven't needed it (and I haven't had time to write it). As you also noted, NormDiff also collapses the Ket vector into a single state (very inefficient). I'll put an inner product on my "to do" list, but if you want to write up some code to do it right, I'd be happy to consider adding it to the system.
