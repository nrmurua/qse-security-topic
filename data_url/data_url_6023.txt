In State<statevec_t>::snapshot_pauli_expval, denote by k if the number of qubits in pauli whose Pauli is different from I. Then there are k passes on the 2^n basis states. This can be reduced to only two passes:
This can help chemistry VQE simulation, where there are thousands of Pauli terms, and some of the terms have many qubits (i.e., large k).
Can probably be done in a single apply matrix loop, based on an algorithm to construct the Pauli matrix from a string in Terra's PauliTable class.
It is possible to first write a multi-qubit Pauli gate, and use it in the Pauli expectation value.
Denote: n - the number of qubits, m - the total number of all qubits participating in at least one Pauli term, k - number of Pauli terms. Once we evaluate the complexity of #471, we will be able to identify cases where #471 is more efficient than the solution suggested here, which takes k apply matrix loops, each costs 2^n.
I implemented an optimized method for all-qubit expectation values is in #737 (this is the method based on the sympletic representation in the Pauli table class)
Expectation value is fine since #737. However instead of closing the issue I'm renaming it to apply to all cases where a circuit contains a sequence of Pauli gates.
There will be a new instruction of a set of Paulis (rather than an automatic detection in the circuit). As long as Terra doesn't support it, we will create our own instruction and add it to the set of basis gates when transpiling.
Done in #919 and #1012
