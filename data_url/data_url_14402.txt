The DAGCircuit.collect_2q_runs() method only collects nodes that are of type Gate.
https://github.com/Qiskit/qiskit-terra/blob/f65f08848fda5b301c83f4148dd2be4e8bd13eff/qiskit/dagcircuit/dagcircuit.py#L1672
I think this does not generally apply to things like a subcircuit which is attached with circuit.append(subcircuit) or other higher order operations which we do not represent as Gate, such as Cliffords (#7966). So those would be missed by this method.
Also I'm not sure why we need collect_runs as well as collect_1q_runs and collect_2q_runs.. can these be moved out of DAG and into a general collection strategy (#8319 )?
The same is true here of collect_1q_runs.  collect_1q_runs didn't originally have the Gate logic, but it was added in #5570.  collect_2q_runs inherited the whole condition from Collect2qBlocks when it was added in #6680.  I believe both of these conditions stem from a desire to re-synthesise gates with matrix definitions, but the functions they're in are given too general names, which is misleading.  I don't have a solution in mind, just adding the context I saw.
I think the easiest solution is probably to just make the filter_fn an optional parameter so that pqsses can specify exactly what kind of operations they want to include in the collected  block
I believe a part of @ajavadia's suggestion is to collect 2q runs taking gate commutation into account, for instance based on DagDependency data structure. However, at the moment I don't see how to do this both reliably and efficiently. Suggestions are welcome!
