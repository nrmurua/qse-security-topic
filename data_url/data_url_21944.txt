Startup kernels are currently problematic with DRTIO. The startup kernel runs before the DRTIO link(s) are up. If the startup kernel uses remote RTIO it locks up until the link(s) are up, then gives an underflow error. If the link(s) do not come up, no error is emitted and the master hangs.
Startup kernels that use remote RTIO are very useful for initialising hardware (e.g. Urukul, TTL states, etc.), so it would be useful to work out some robust way of doing this.
The difficulty with this (and the other issue) is when do we consider DRTIO to be operational. When all links that are defined at compile-time are up?
I appreciate the difficulty here.
How about:
Or maybe expose that info to kernels.
Yes, maybe the startup kernel can explicitly wait for all relevant links to be up. I propose introducing a separate API call to check for link status, which will be cleaner than attempting RTIO operations until RTIOLinkError (#942) is no longer raised.
