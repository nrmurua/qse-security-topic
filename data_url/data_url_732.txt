Suppose we do this:
It will produce the information similar to what we do it by hand like this:
adjoint(U) * rho * U
This lecture and this lecture (slide 8), however, seem to like the following convention. By the way, the latter is from your very own Michele Mosca.
U * rho * adjoint(U)
The Qiskit API has the DensityMatrix.evolve(U) that also follows
U * rho * adjoint(U)
When I exchange data between Quantum++ and Qiskit, I have to flip the U and adjoint(U) to suit both APIs.
Well, I understand it is technically correct for Quantum++ to place the adjoint(U) first because it is still unitary by definition.
Could you please comment on why Quantum++ API chooses to do business that way?
In Quantum++, measure(rho, U,...) measures the state rho in the basis specified by the columns of the matrix U (which is specified in the documentation). It does not measure in the basis U (remember that the basis U is generated from the computational basis as U|0>, U|1>, etc. which means that in order to obtain the U-basis vectors one multiplies each computational vector |i> by the i-th row of U. That's why the discrepancy (so in effect Q++ measures in the U^\dagger basis). So the Q++ API is correct. However, now that you pointed out that one may get into these kinds of issues, I'm thinking that it may be better to change the API so U's rows represent the basis vectors. In that case it will be like "measuring in the basis U". Thanks again for your thorough testing!
Thanks.
