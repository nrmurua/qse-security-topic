I am trying to implement the AAVQE, which consists of varying the Hamiltonian after each VQE run with an interpolation parameter 's', such as H = (1-s)H_1 + sH_2. I am facing some problems when trying to create H, because once I have created H_1 and H_2, those are objects that cannot be multiplied by the float 's' and cannot be added after that.
This is what I obtain when multiplying by 's':
TypeError: unsupported operand type(s) for *: 'float' and 'Hamiltonian'
And this if I try to sum H_1 and H_2:
TypeError: unsupported operand type(s) for +: 'H_1' and 'H_2'
Thanks for opening this. These errors are expected because the Hamiltonian object in qibo is very basic and does not support addition and multiplication. If @scarrazza agrees we can fix this by implementing the __add__ and __mul__ methods in the Hamiltonian base class.
How did you create H_1 and H_2? If you wrote a class with your own model for H_1 and H_2 then you could probably create a single Hamiltonian object for the full (1-s)H_1 + sH_2 instead. I just don't think you can change the s parameter during optimization because the hamiltonian is treated as a static object in our current VQE implementation (if I understand it correctly).
I have created the PR #133 with the overloading operators, please have a look and try.
I just don't think you can change the s parameter during optimization because the hamiltonian is treated as a static object in our current VQE implementation (if I understand it correctly).
Indeed, if you need to update s during the optimization then we could modify or create a new VQE class for this particular problem.
Thanks for opening this. These errors are expected because the Hamiltonian object in qibo is very basic and does not support addition and multiplication. If @scarrazza agrees we can fix this by implementing the __add__ and __mul__ methods in the Hamiltonian base class.
How did you create H_1 and H_2? If you wrote a class with your own model for H_1 and H_2 then you could probably create a single Hamiltonian object for the full (1-s)H_1 + sH_2 instead. I just don't think you can change the s parameter during optimization because the hamiltonian is treated as a static object in our current VQE implementation (if I understand it correctly).
H_2 is simply the XXZ hamiltonian that is already implemented. I created H_1 by constructing the matrix and calling the class Hamiltonian to create the object.
I just don't think you can change the s parameter during optimization because the hamiltonian is treated as a static object in our current VQE implementation (if I understand it correctly).
Indeed, if you need to update s during the optimization then we could modify or create a new VQE class for this particular problem.
I believe you do not need to modify the VQE class. I run the VQE for a particular value of 's', say s=0, and then I perform a full run of the VQE. Then, with the optimal parameters that I obtain, I use them as initial parameters for the next VQE run with a different value of 's', and so on.
@bpcarlos thanks for the explanation, then I think the API is fine.
Could you please retry your setup using the branch hamoverloading (git checkout hamoverloading)?
@bpcarlos thanks for the explanation, then I think the API is fine.
Could you please retry your setup using the branch hamoverloading (git checkout hamoverloading)?
I am still having some problems. However, I believe this time the error is due to the Hamiltonian that I defined myself, because when I play with the already defined XXZ, the multiplication and sum work fine. But when I try to sum H_1 and H_2 it doesn't work. This is how I defined it:
Another error than I am facing when trying to optimize (any Hamiltonian, I believe it is a bug due to the changes)
File "/home/carlos/anaconda3/lib/python3.7/site-packages/qibo/models.py", line 104, in minimize
raise RuntimeError("Cannot compile VQE that uses custom operators.")
RuntimeError: Cannot compile VQE that uses custom operators.
here your hamiltonian must be an integer, I have included a test for this problem.
RuntimeError: Cannot compile VQE that uses custom operators.
in the minimize function you should use compile=False, I have just included a more explicit error message.
