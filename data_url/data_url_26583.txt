All Intel regression tester list roughly 60 failing tests since #1647. Some errors, the segfaults, can be resolved by increasing the OMP_STACKSIZE but most of the wrong results remain. Many tests abort in qs_linres_methods which is most likely a follow-up error.
Right now, I try to reproduce the errors locally. The backtrace in the provided output file does not help. The abort in qs_linres_methods points to an error with the kernels. The large differences are probably also related to these large differences with other tests.
I had a closer look at the regtests themselves. It seems to be related to GGAs because all calculations with HF and LDA kernel run smoothly. But there are a few calculations with PBE running smoothly (QS/regtest-tddfpt-3/ch2o_t1.inp and QS/regtest-tddfpt-3/ch2o_t2.inp). I will check the 2nd order kernels again, especially in xc/xc.F
I have absolutely no clue about the other failing tests.
An sopt regression run, i.e. single core single thread, still results in
The linres solver diverges in some cases which leads to wrong results or the trace error.
@fstein93 Can you reproduce any of the errors? Just to exclude that there is something wrong with my local Intel/MKL installation.
With my ssmp, I have already runtime fails before my PR. If I just consider those using qs_linres_method (qs/regtest-debug-*, QS/regtest-tddfpt*, QS/regtest-double-hybrid/* (the last one actually doesn't need libint)), the same tests are failing. Collecting the fails, I have the impression, the intel compiler has problems within the OMP regions. I don't know yet whether it's the WORKSHARE construct I have introduced or some unassociated pointer. I will do some more tests.
I have running a PR (#1655) which seems to fix this issue. A slight increase of the default OMP_STACKSIZE is still needed. I will reshuffle the loops in prepare_dr1dr* to see if this will reduce the memory demand.
Collecting the fails, I have the impression, the intel compiler has problems within the OMP regions. I don't know yet whether it's the WORKSHARE construct I have introduced
It seems that the new WORKSHARE constructs need a larger OMP_STACKSIZE (or KMP_STACKSIZE), which exceeds in some cases the default OMP_STACKSIZE. Consecutive runs of the same input can give random segmentation fault errors which can look rather unspecific especially when the backtrace information is missing. We have to keep that in mind when people will report segfaults in the future.
