In #1503, @godott raises, as I see it, a valid point. Many passes, as gate cancelation, could make a good use of commutative set. The question now is how to support it. Ideas? Opinions?
Currently the commutation set is just dumped into the pass manager's property_set, and I think @godott is going to use that commutation set to write optimization passes (e.g. cancel non-adjacent CNOTs). It's a bit hacky, but works.
@godott can you come up with a case where an actual dependency graph would be useful? This will take some non-trivial amount of work to design.
@ajavadia  I think the property_set  and modified DAG are equivalent, thus anything can be done by the modified DAG can also be done by using the property_set . There might be cases where the modified DAG has a slight speed advantage, for example, this paper (https://arxiv.org/abs/1708.00023) used a modified DAG. I can't think of anything else.
My current understanding is that with the  property_set most of the problems are settled. The actual commutative DAG can provide: 1. better visualization 2. slight speed advantage on some problems. Both of these are not urgent. However, I did implement a commutative DAG in commutation_transformation() pass. Maybe we could remove that pass.
