Currently Qasm3 Exporter generates qubit[2] _q; let q = _q[0] || _q[1]; to generate an array of qubits in OpenQASM 3.
https://github.com/Qiskit/qiskit-terra/blob/main/test/python/circuit/test_circuit_qasm3.py#L34-L35
However, I think that the spec allows concatenating of only two arrays.
https://qiskit.github.io/openqasm/language/types.html#register-concatenation-and-slicing
In the above case, the type of  _q[0] and  _q[1] is qubit and not qubit[1].
One of quick fixes may be generating let q = _q[0:0] || _q[1:1]; instead of let q = _q[0] || _q[1];.
This isn't 100% decided one way or the other (see also openqasm/openqasm#218) but right now I'm pretty sure that our internal compiler supports the form the exporter outputs.  I'm not sure if it actually supports concatenating arrays, but likely it does (@taalexander?).
The internal compiler does not like the current form of exporter arrays very much. Rather, we always use the transpiled circuit which is laid out onto physical qubits. At this point, the exporter contains no reference to qubit arrays.
I can make the exporter turn this circuit:
into this OpenQASM 3:
Is that appropriate for everyone?  I haven't bothered to try and make the exporter cleverer about inserting steps (alternate in this example could be more efficiently written as _q[0:2:8]), but it's easy if people want it.
(This shouldn't change anything about how initial_layout is handled.)
