I'm trying to do a simple circuit optimization (optimizing 3 CNOTs into a single SWAP), but it's not optimizing it correctly.
Version: 0.6.4
Example code from my terminal.
The circuit has 3 gates, but should be optimized to only have 1. What am I doing wrong here?
For technical reasons the basic_optimization function calls to_basic_gates() on things like SWAPs produced by the simplification, so while the simplification does see that there is a SWAP here, it is automatically expanded into three CNOTs.
If you don't want this, then there are two things you could do.
Either postprocess your result, looking for triples of CNOTs, and replace these by SWAPs (this will catch all of them, as this is how the output circuit of a basic_optimization call is structured), or else delve into the nitty gritty in the optimize.py file, build an Optimizer instance, and call parse_forward to get the actual SWAPs (and Pauli's) that are pushed towards the end of the circuit (look at how the parse_circuit method is structured).
I recommend you go the first route.
Why do you automatically expand SWAP gates? That seems counter productive to a circuit optimizer.
Apologies, I had forgotten that I had already implemented a more straightforward way to do this:
