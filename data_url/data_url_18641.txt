Is there some reason to not pretty-print integer multiples of pi?  If not, fix it.
This originally came up in a code review here #257 (comment), where it was suggested that *print-fractional-radians* would be a good place to start investigating this.
Based on https://github.com/rigetti/quilc/blob/911c76ed5348d86decccee98fc1369c6d0e37985/src/ast.lisp#L1054 , it seems like we also don't print out e.g. 3/2 * pi, which might also be nice. Go as wild with this as you like.
Based on
https://github.com/rigetti/quilc/blob/911c76ed5348d86decccee98fc1369c6d0e37985/src/ast.lisp#L1054
, it seems like we also don't print out e.g. 3/2 * pi, which might also be nice. Go as wild with this as you like.
I just happend to come across this exact expression while working on #273 and, weirdly, it seems both 3/2*pi and 3*pi/2 are pretty-printed, but not 3*pi.  Haven't looked at the code yet. Maybe it requires a fraction in order to kick in...
Just took a peek at format-real. It's clear that integer multiples (other than +/-1) are not checked. To be fair, the special variable is called *print-fractional-radians*, though I guess you could consider n*pi to have an implicit 1 in the denominator and call it a fraction.
I could try to twiddle the fraction-detecting loop on line 1061 by prepending 1 to the list of denoms that get tried (and increasing the range of numer accordingly), but I think special-casing integer multiples with a (floor r pi) check prior to that loop is simpler.
It seems my brilliant idea to use floor to check for integer multiples has a minor complication for certain numbers of the form 2^n * x * pi.  For example, for x = 11:
ðŸ˜• Guess, it's time to (re-)read What Every Computer Scientist Should Know About Floating-Point Arithmetic...
This can be worked around, but is enough to make me reconsider an approach similar to the existing fraction-detecting loop, but just checking small integer multiples, instead.
