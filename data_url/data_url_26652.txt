The default ssmp arch file for Macos  uses the -D_ACCELERATE option and links against the threaded -framework Accelerate.
This results in calls to BLAS and LAPACK potentially using threads, whose number is not controlled by OMP_NUM_THREADS but by VECLIB_MAXIMUM_THREADS.
For example, using OMP_NUM_THREADS=1 on my macbook running MacOS 10.15.7 results in the cp2k.ssmp executable (e.g. the one from conda-forge) anywhere from 2-9 threads (but always <= 100% of a core).
In a small test, the timings of the cp2k executable with OMP_NUM_THREADS=1 and VECLIB_MAXIMUM_THREADS=1 are about 13% faster than without limiting the number of veclib threads. I could test more with >1 OpenMP thread as well, but it somehow sounds reasonable that  running 9 threads is not very efficient when all of them are full-on computing and have to share the same resources.
As mentioned by @dev-zero in conda-forge/cp2k-feedstock#16 (comment) it might be useful to check the VECLIB_MAXIMUM_THREADS env var when __ACCELERATE is defined and inform the user to set it to 1 if not done already.
... had the patch in #1321 prepared after the discussion in conda-forge/cp2k-feedstock#16
Better might be to even set VECLIB_MAXIMUM_THREADS, but it is unclear at which point the Accelerate framework is going to pick it up: if it is at library load then it gets complicated, if it's when BLAS/LAPACK functions are being called then a well placed setenv(...) might be an easy fix.
