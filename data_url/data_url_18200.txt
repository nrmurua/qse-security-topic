Here is an example of the qobj object we are working towards and we should start to discuss the format as we are moving to this for all our backends.
Some things to discuss are
convention of the params that are passed to the backends? Should they be doubles or should it be strings?
An example Json file for the QOBJ.
Hi @jaygambetta,
By using the JSON representation I found that the header/qubit_labels and header/clbit_labels are quite misleading: while the header/qubit_labels contains the labels of all the qubits, header/clbit_labels contains only the labels associated to the last bit of each classical registers. This comes from the definition of the method new_creg in _jsonbackend.py.
Is there a reason behind this non symmetry?
I have some questions about the header:
@ewinston @nelimeee
"A list of pairs [clreg_name, size], to allocate the next size contiguous clbits to clreg clreg_name. The sum of the size-s should equal number_of_clbits"
So I guess contrary to qubits, there isn't any sort of mapping of classical bits to the bits on FPGA or CPU or whatever. So you don't need to specify them one by one in an array.
The json that Jay posted validates against both core and generic schemas.
Thanks for the explanations! I also fell into the trap of not reading the schema and assuming clbit_labels behaved the same way as qubit_labels.
I think the core problem is a naming one: clbit_labels doesn't describe bit labels but rather register labels (and sizes). A few possible solutions I see:
Does it make sense to have this issue open? Is it up-to-date? Perhaps someone could clarify the state of the Qobj specification to keep the bug open, @diego-plan9, @ajavadia?
This can close now we have schema in.
