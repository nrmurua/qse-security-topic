Starting from a RegisterLayout, a MappableRegister can be created to pre-declare qubit IDs in a Sequence without specifying their positions. These qubits are then only mapped to positions when Sequence.build() is called, where trap IDs can be associated to a subset of the declared qubits.
Currently, there is no imposition on which qubit IDs are selected at build time. For example, a mappable register declared with qubit IDs ("q0", "q1, "q2", "q3") can then be built with qubits={"q2": 14, "q0": 8}. This will create a register with qubits ("q2", "q0"), in this order.
This means that qubit IDs in a MappableRegister can't be unequivocally associated with indices, which poses a few problems:
It seems to me that the only way around this is to impose an order on the MappableRegister 's qubit IDs that is preserved when it is converted into a regular register. This implies that, when building a Register with N qubits out of a mappable register with N+M qubit IDs, the mapped qubit IDs must be Register.qubit_ids[:N] . This will allow us to associate an index to each qubit ID, ie index i -> qubit_ids[i] .
Furthermore, the order of the qubits given at build time no longer matters. Returning to the example above, the register could be declared with qubits={"q1": 14, "q0": 8}", but the qubits in the Register should still be ordered ("q0", "q1").
