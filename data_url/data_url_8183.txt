This is code from a jupyter notebook in which I am trying to plot a graph of mesolve. Times is the variable that specifies the scale of the x axis (in units of s). I need to plot over 1ms, but it takes so long to plot that I think it just get stuck. If I plot over a much smaller scale, like 10^-6, it plots with no problem, but even then it can only do so if the number of points is small. It seems that the issue is with nsteps. As you can see, I have made nsteps very large already and if I make it any larger I get an error. I've tried debugging this to the best of my abilities but I've hit a dead end and I just can't find any useful info on nsteps online.
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import qutip as q
import cmath
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
rc_dict = {
"figure.subplot.bottom": 0.11,
"figure.subplot.hspace": 0.2,
"figure.subplot.left": 0.125,
"figure.subplot.right": 0.9,
"figure.subplot.top": 0.88,
"figure.subplot.wspace": 0.2,
"figure.figsize":(10,10/1.61),
"axes.grid": True,
"text.usetex": True,
"grid.linestyle": ":",
"grid.color": "black",  #
"legend.fontsize": 20,
"lines.linewidth": 2.5,
"axes.linewidth": 1.5,
"font.family": ["serif"],
"font.sans-serif": "Times New Roman Bold",
"font.size":26,
}
plt.rcParams.update(rc_dict)
qutip_options = q.Odeoptions(
store_states=True,
nsteps=2000000000000
)
si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz()
sp, sm=q.sigmap(), q.sigmam()
state_z_plus=q.basis(2,0)
state_z_minus=q.basis(2,1)
state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) +  q.basis(2,1))
state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) -  q.basis(2,1))
state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j*  q.basis(2,1))
state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j*  q.basis(2,1))
h = 6.62607015e-34
b = 0.1786195317554453
b_AC = 3.572390635108906e-05
g = 2
u = 9.274E-24
w = gub/h
gamma_phi = 442
gamma_minus = 1
epsilon = gub/h*(2cmath.pi)
Delta = gub_AC/h(2*cmath.pi)
H = epsilon/2 * sz
times=np.linspace(0, 0.001*cmath.pi/2, 5)
state0=(state_x_plus)/(np.sqrt(1))
H/(2*cmath.pi)
results=q.mesolve(H, state0, times, c_ops=[], e_ops=[sx, sy, sz], options=qutip_options)
fig, ax=plt.subplots()
ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$')
ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$')
ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$')
ax.set_xlabel("time")
ax.legend();
You're trying to plot a Hamiltonian with a principle frequency of ~32 GHz, and you want to scan time over ~3ms.  That involves integrating over 5 million periods of oscillation - there's little you can do to get a sensible runtime any more because you're evolving it for so long.
You might want to make a frame transformation in your Hamiltonian and make a rotating-wave approximation to suppress these very high-frequency terms.
