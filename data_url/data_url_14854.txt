Modifying a TwoLocal circuit's data directly will cause KeyError when calling .copy() method on the modified circuit. As a consequence, any functionality depending on the copy() method (for example, assign_parameters) will raise error.
If an equivalent QuantumCircuit is created from scratch, and the data is modified, there would be no issue calling .copy() method. It is suspected that some private attributes are the culprit of the bug.
This is largely expected; QuantumCircuit.data is mutable for performance reasons, but it's not safe for users to mutate it directly for the reasons you're seeing - there's a lot of intertwined internal state that needs to be kept in sync.
Can you give an example of what you're trying to do?  In general, no, it's not safe to mutate existing instructions with a QuantumCircuit.  We'd expect you to build up the circuit out of parts (for example using QuantumCircuit.compose to combine components) and put the gates in correctly the first time round.
In general, full substitutions can be done safely via transpiler passes that use the DAGCircuit representation.
Can you give an example of what you're trying to do? In general, no, it's not safe to mutate existing instructions with a QuantumCircuit. We'd expect you to build up the circuit out of parts (for example using QuantumCircuit.compose to combine components) and put the gates in correctly the first time round.
In general, full substitutions can be done safely via transpiler passes that use the DAGCircuit representation.
Thank you for the confirmation. I am trying to compute the derivative of a parameterized circuit, in which case it is efficient to modify the existing circuit components as opposed to building the derivative from ground up.
I will investigate the DAGCircuit representation to see if it shed some lights on my task.
You may be interested in the gradients framework in qiskit_algorithms.gradients (package: https://github.com/qiskit-community/qiskit-algorithms, docs: https://qiskit.org/ecosystem/algorithms/tutorials/12_gradients_framework.html).  If the pre-written gradient framework doesn't work for you off-the-shelf, the implementation may help.
I'm going to close this issue now because the root is the code working as expected, but please feel free to open another if there's more to discuss.  If you have problems with the algorithms gradient framework, you'll have better luck opening an issue at https://github.com/qiskit-community/qiskit-algorithms, which is where development is continuing on that library.
