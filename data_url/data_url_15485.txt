I've seen the same test failure on CI for Windows with Python 3.7 on two different PRs now: #7902 and #7995.  The CI logs look like:
Run CI, but it seems to be non-deterministic.  I've seen the same test case go through after a restart as well.
No test failure, and certainly it shouldn't be stochastic.
Both times I saw it, the failing test was Windows with Python 3.7 and TestFinalLayouts.test_layout_tokyo_2845_2_1, which I think is optimization_level=1 (ddt is doing something weird with the naming), but that might be a red herring.  It's possible that the transpiler seed isn't getting passed down to Rust completely, or that some dependency has changed for us, affecting the random-number generation.
edit: I've now seen this on #7995 on macOS with Python 3.10, so it's not limited to Windows and 3.7.
I'm wondering if this is related to #7862, that added a new heuristic scoring to adjust the layout after routing and I could see the score having some we floating point precision sensitivity (which I always think of when I see windows failures like this).
This isn't just limited to Windows - #7995 has had the same failure on the macOS Python 3.10 run.
So this is definitely being caused by the VF2PostLayout pass looking at the azure test analytics the first failure occured during devlopment in #7862 and it's only failed since that merged. Talking this over with @jakelishman I think the source of the failure is the time_limit parameter on the pass. If we get a particularly slow CI node the test is likely hitting the time limit before the pass finds the expected layout and is returning whatever the best layout it's found so far is when the time limit is hit (which is different from the expected result). The time_limit value for optimization level 1 is 100ms which is small enough that a slow CI node could take too long to find the expected layout.
We can confirm this by enabling debug logging on that test as the VF2PostLayout pass logs the score for each mapping returned by retworkx and when it finds a better mapping it logs the layout too. Although maybe we should just bump the timeout in the test to ensure we have more of a margin.
I am seeing the same failure for macOS as well for #8019
https://dev.azure.com/qiskit-ci/qiskit-terra/_build/results?buildId=36226&view=logs&j=998b1daf-b09e-5b0a-40b3-d5ad4c922884&t=28418b6d-5c6b-55e9-3c92-2f6f10cd0d9a&l=16697
