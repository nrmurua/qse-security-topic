This is the list of actions needed to align the specification with the current implementation.
one question what does job.backend return. The name the backend was run on or a backend object. I ask this as the name is not necessarily unique now.  If possible I would like it to make the backend instance and then I can ask it things like name, provider etc but we need to think through this.
In the new implementation, it is returning the backend instance.
I've deprecated the backend_name method although it continues returning the name of the backend.
Implementing this bug, I've detected some inconsistencies, most important:
Adding method done(). If we are willing to remove running() and cancelled() from the spec, why not removing done() too? @jaygambetta, thoughts on this?
LocalJob had not job_id but it was being generated in some simulators to conform with the result schema, linking the result with nothing:
https://github.com/Qiskit/qiskit-terra/blob/739e94c352bd8b47d9b1ab0b839e1e8da54147cf/qiskit/backends/local/qasm_simulator_py.py#L276-L299
I'll fix this by passing the job id to the job constructor.
The backend instance was not passed to job instances but I'll pass it.
I think it makes sense that the abstract job keeps a job id and a reference to the backend that created it so I was planning to add job_id and backend as mandatory parameters in the BaseJob constructor. @diego-plan9 @atilag @jaygambetta thoughts?
great @delapuente you're faster, when I looked it was name :-).
Your question on done i am fine to remove it from the spec. I see no reason to have it.
@dcmckayibm and I would love job_id and backend to be mandatory of BaseJob. I think @atilag and @ewinston had concerns.
The job_id was meant to solve the problem of retrieving future job results from circuits executed in the real quantum chip backends. We save the job_id and we can come 4 hours later and ask to the server for the status of this job.
This is not a problem for local jobs, as every job will run it's own simulator instance and will get the results once finished. In our current local backend architecture, this process cannot be interrupted so we will always get a result or throw an exception in case of failure. There's no need for an ID with the current local backend architecture.
My opinion is that an ID should be an implementation detail and not imposed by any specification, but... it doesn't hurt either, and I can think of different local backend architectures where an ID could makes sense, so let's keep it in the specs for local jobs, for now.
I think you're right @atilag. It should be an implementation detail but I can also imagine other architectures where it would be necessary. I think I'm going to make it mandatory as part of BaseJob but we should rethink this at the spec level.
