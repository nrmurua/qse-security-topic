posting this to the public so the the community can see what we want in 0.5
 1st —  backend_rework branch*
Backend rework, adding compile and execute #376: merged
At the end of this level 2 user will be happy with no quantumprgroam and will use qiskit.execute
 cpp-simulator-refactor branch*
C++ Simulator Refactor #386: merged - for the C++ changes
Simulator Interfaces #421: closed - for the backend naming changes (reissued in Simulator backends #435)
Simulator backends #435: merged
 Generate new qobj format*
[WIP] Qobj class, schema validation, and update backends to accept qobj #415: open
Backend rework, adding compile and execute #376: closed (added schemas into the codebase)
  Qobj object and validate against schemas
[WIP] Qobj class, schema validation, and update backends to accept qobj #415: open
[WIP] Introduce Qobj object and revise Result #144: closed (introduced in [WIP] Qobj class, schema validation, and update backends to accept qobj #415)
 run Qobj and return instead of QuantumJob
[WIP] Qobj class, schema validation, and update backends to accept qobj #415: open
[WIP] Pass qobj to remote backends. Implement qobj validation. #326: closed (closed and introduced in [WIP] Qobj class, schema validation, and update backends to accept qobj #415)
 Result object
  Introduce a Job object and make all runs async
rework jobs #403: merged
At the end of this level 1 user will be happy with no quantumprgroam and they have control of their jobs
 backend
  remove sympy backends and projectq backends and provided them as qiskit-core-backend-plugins example
 Qconfig
 parameters and calibrations go to properties and pass a schema
After the release
Lets add below anything i forgot.
Also @ajavadia when we are finished with the spec for qobj can we add a link to this in the comments. Also @ewinston @diego-plan9 @ajavadia lets link pr's against this.
Hi @jaygambetta can we help on any of these? e.g., with the qobj items, or the sympy/projectq/qconfig? we can be free for that starting Sunday
@yehuda-naveh great. @ajavadia and @ewinston and @diego-plan9 can you let @yehuda-naveh know which parts they can help out on.
@diego-plan9 @ajavadia  will you be our contact on this? We'd be happy to help for 0.5 with the qobj items, or the sympy/projectq/qconfig, or elsewhere. Need your confirm, and initial pointer to discussion. Otherwise, we'd just continue our WIP on operator-sum and noise approximations
@yaelbh, after discussing with @jaygambetta, let's start with the projectq item
@yehuda-naveh i think another good place to contribute would be to write some more tests. for example, if you check out PR #421, you can try to write some test circuits and compare results across simulators.
One comparison: local_qasm_simualtor_py, local_qasm_simulator_cpp, local_qasm_simulator_projectq
Another comparison: local_statevector_simulator_py, local_statevector_simulator_cpp, local_statevector_simulator_sympy.
The results, both in format and content, should be as close as possible across the simulators.
Thanks @ajavadia . We're looking into both.
I've opened Issue #425 for the ProjectQ item and Issue #426 for the test-across-backends item.
0.5 was released some time ago. Shall we close this issue @jaygambetta ?
I would rather rename it 0.6 or move the things we did not get done into 0.6 so we keep track of them.
I have made an effort to move each individual checklist (the ones that still had open items) into single issues, labeled with type: meta:
https://github.com/QISKit/qiskit-core/issues?q=is%3Aopen+is%3Aissue+label%3A%22type%3A+meta%22
and set them for the next milestone:
https://github.com/QISKit/qiskit-core/milestone/2
I did not transfer all the items directly trying to reflect the current status and the pending items - please feel free to add more items to the existing issues, open new ones, or comment as much as possible!
