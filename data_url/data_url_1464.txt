Is your feature request related to a use case or problem? Please describe.
The functions within mux module inspects the circuit and choose the appropriate simulator to use. This is usually fine, but it may happen that the circuit is clifford or unitary until almost the very end, when some noise is injected. Things like this are unusual, but may occur if we implement noisy measurements or similar. In these cases there's an opportunity for speedup if we can run the first part of the simulation in the lighter representation and switch to the heavier representation only when needed.
Describe the solution you'd like
I created a prototype earlier #4488, where this progressive behavior was added to density matrix simulator. We discussed this in cirq sync and turned it down, as typically when a user wants a DM simulator, they know what they're doing. This also ended up being very awkward to push into the DM simulator without incurring breaking changes.
However I think there's room for an independent ProgressiveSimulator within mux that can use the ProgressiveActOnArgs from #4488, (It could even be just an internal simulator used only by the mux functions if desired). Creating a bare-bones simulator around ProgressiveActOnArgs (or any fully-defined ActOnArgs) is straightforward; there are examples in unit tests like CountingSimulator. (Will be even easier if #4771 goes through).
If we decide to go forward on this, this could be a reasonable first or second issue for the adventurous, as most of the code is in #4488.
Note that we should definitely do #4828 before this, as otherwise the MuxSim would start off in CH-Form, which is not separable, and when promoted to state vector or density matrix, would necessarily remain in unseparated form, which would lead to a major performance regression. (Even if we do #4828, there's still the edge case that it's in a fully-entangled CH state and does a pre-terminal measurement before then adding noise .. since CH has no "factor" method, it'll remain in a fully entangled state while doing the density matrix stuff, which perhaps could have been avoided if we just used density matrix all the way through but I digress....)
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle
It turns out that the noisy measurement is purely classical noise, so doesn't need a density matrix here. Thus this issue is no more important than the first time I brought it up. (With the slight caveat that the deferred measurements transformer might end up translating that classical noise to quantum noise ... but in that case, the measurements are as likely to be near the end of the circuit anyway). We can close it or keep it around to revisit on occasion.
