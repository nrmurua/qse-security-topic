The current type signature of Sweepable is
But there is no logical reason to only allow one level of iteration over Sweep. And in fact, cirq.to_sweeps is a recursive function, so it already assumes that Sweepable is a recursive type. So as it stands, Sweepable should be defined as a recursive type.
But I would like to ask whether Sweepable really needs to be this recursive type, rather than just something that can be converted to a single Sweep. Do people actually use lists of sweeps, rather than just plain sweeps? It seems like a rather confusing thing to attempt, given that one would need to keep track of how results correspond to the individual parameter resolvers.
It sounds like a good idea to make Sweepable recursive - it is not trivial though, we need to do some mypy trickery.
We can follow the trick we use with a mypy Protocol to make OP_TREE recursive: https://github.com/quantumlib/Cirq/blob/master/cirq/ops/op_tree.py#L26.
Is this done? It looks like Sweepable is now defined in terms of SweepLike, which is the closest we can get to a recursive type definition until mypy supports them directly. One last possible improvement in this regard: it looks like the cast in 
@daxfohl Actually, as @maffoo mentioned, we could use a Protocol to make it recursive as we do with OP_TREE. This has not been implemented.
@kevinsung I believe the new push fixes that. I was able to remove the cast completely from the recursive call. Can you look?
