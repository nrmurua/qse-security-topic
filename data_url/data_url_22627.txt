This topic was initially discussed here #145 (comment) . It should be it's own topic.
The present log output is distressingly long in the event of routine ARTIQ exceptions. Below is an example of attempting to use an unsupported type with set_dataset().
Some observation about current log verbosity.
Visual identification of the sources for an error is presently easy to loose in the verbose sea in the Logger.
If an error is sufficiently routine that an exception handler exists, the user should not be subjected to a stack trace.
The last string produced by the Traceback() indicates where it was caught. This string is useful to the end user and should be hilighted in the logger. It could be logged at the CRITICAL level.
2015-10-29 11:02:21,057 CRITICAL:worker(27):print:KeyError: <class 'complex'>
The Traceback() for each exception could be delivered to the Log as a single log entry. Escape carriage returns as needed.
The date in Time column is unnecessary. It's available in the log file.
A hierarchical approach at presenting the content in the Logger would be ideal. All the output in the present example is itself a single logical logging Event for ARTIQ. It would be nice if the Log pane was a table of all such Events. With a detail view showing another table with the details filtered. Try to pull out the salient string to label the Event.
How I envision the error reporting of the present example with Log filter set to level DEBUG.
Note that the last line of the trackeback appears as both part of the INFO logged Traceback() and logged again at the ERROR level. This permits easy filtering by the user.
Here's how the same looks with the Log filter set to level ERROR.
If the filter is set to CRITICAL the output is as concise as I'd like it to be.
I'm certain that my understanding of the innards of python exception handling is naive.  Let's figure out how to use the nice Logger capability to present concise, actionable information to the ARTIQ user.
see "173a/173b" in https://ssl.serverraum.org/lists-archive/artiq/2015-November/000595.html
Keeping human readability, a multi-line log entry could be formatted by the program emitting it as:
After the first line, the parser would read the following nlines-1 lines printed by the program and combine them into the same log entry. If nlines=1, the <nlines> element can be omitted.
In the worker_pipeipc branch (not Windows compatible yet) multiline log entries can now be passed around (worker -> master, controller -> manager -> master). The full log entries (all lines) have the correct level in the GUI now. Folding multiline entries using QTreeView is more complicated (and it would not surprise me if attempting this wakes up more Qt bugs).
There is no folding, but multiline log entries are displayed in a single cell in the GUI now:

I plan to release this as it is for 1.0. Open a new issue if you really need folding.
