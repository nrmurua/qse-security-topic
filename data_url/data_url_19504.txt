Following a private exchange with @joseignaciolatorre , we should consider the implementation of gate union, i.e. in the VQE we could merge the first column of 1 qubits gates with the CZPow and thus perform the evaluation with a single custom operator.
Refers to developments in #90.
Something I had in my future TODO list is the gate fusion algorithm from the TFQ paper. If I understand correctly what is proposed here is a "special" case of this.
In terms of implementation I think we only need one additional kernel that applies two-qubit gates from 4x4 matrices (currently we only have one-qubit gates using 2x2 matrix), which should be easy to implement. Other than that we need to implement the algorithm that decides which gates can be fused but this can be done inside the models.Circuit in Python.
An easier solution which would work for variational circuits until we implement a more sophisticated/automated fusion algorithm is to create a qibo.gates.Gate object for variational layers. The user could then add the whole layer in the circuit instead of adding the one-qubit gates one by one. This layer would have a __call__ method that is optimized for this particular case (eg. one qubit gates fused with CZPow's).
Another thing that I think it would be very interesting is to have some parameterized 2-qubit gates (e.g. fSim(theta,phi) ) implemented, besides CZPow. These are native for instance in Google's Sycamore chip, and I've seen them somewhere else (Andreas Wallraff's group). I think the community will move towards this kind of 2-qubit continuous gate sets in the near future for doing variational algorithms.
Here I leave some references:
https://arxiv.org/pdf/2001.08343.pdf
https://arxiv.org/pdf/2005.05275.pdf
