Importing the qiskit.primitives module triggers a large number of deprecation warnings to be emitted. These are hidden by default from users since it's being triggered internally. But if you're in an environment that shows all warnings this is quite noisy. We also shouldn't be relying on deprecation functionality in non-deprecated paths, especially in this case where primitives are supposed to replace opflow.
You can just run python -Wd -c 'import qiskit.primitives'
We shouldn't be emitting deprecation warnings just by importing a module, especially when the import is the replacement identified in the deprecation guide
If we need to leverage opflow in primtives for backwards compatibility we should guard against using it at import time so it's only ever triggering the opflow usage at user request.
Fwiw: the only non-type-annotation usage is to do a type-check in the observable normalisation routine (init_observable).  It looks to me like that routine could be refactored a shade to make the isinstance(observable, PauliSumOp) the else branch (so avoid the explicit type check), but failing that, it'd be possible to protect the type check behind a if "qiskit.opflow" in sys.modules or something like that, so we don't attempt the import unless the user already triggered it - an object can't (with non-pathological code) be a qiskit.opflow.PauliSumOp if opflow was never imported.
Imports for type annotations only can be protected behind a if typing.TYPE_CHECKING guard.
