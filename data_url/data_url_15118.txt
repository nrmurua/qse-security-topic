Note: It is not the case that the output isn't random enough, it's just that the distribution isn't what the description claims it is.
In qiskit-terra/qiskit/quantum_info/states/random.py, random_statevector() is defined as
However, this doesn't seem to be Haar random for single qubit states.
For higher dimensions, it's a simple computation to just check that $X_1,X_2\dots X_n$ all i.i.d distributed as $\pm \sqrt{-\log A}$ for $A$ distributed uniformly over $(0,1]$ don't lead to a spherically symmetric joint pdf for any $n$. Showing that normalization also does not lead to spherical symmetry might be hard for general $n$, but I have a way of showing it for single qubit states and here's the reasoning:
We'll show that the distribution of $|X|^2$  (where $X$ is the random variable for first coordinate of the output statevector) doesn't match up with that of $\cos^2 \theta$ for $\theta$ distributed uniformly over $\sim (0,2\pi)$.
Since we're looking only at the amplitude, it suffices to just see the distribution of
$$Y= \frac {-\log A} {-\log A-\log B} $$
where $A,B$ are i.i.d random variables distributed uniformly over $(0,1]$. Let $f,g$ be the pdf for $Y,(-\log A)$ respectively. Then, we have
$$ \Pr[-\log A \leq t]= \Pr[A\geq \exp(-t) ]=1-\exp(-t)$$
$$\implies g(t)=\frac {d}{dt} (1-\exp(-t))=\exp(-t)  $$
$$\begin{align}
\Pr[Y\leq t]
&=\int_{0}^\infty \Pr[ Y\leq t |-\log B=\theta] \cdot f(\theta) d\theta \\
&=\int_{0}^\infty \Pr\left[ \frac{-\log A}{-\log A+\theta}\leq t \right] \cdot \exp(-\theta) d\theta\\
&=\int_{0}^\infty \Pr\left[ -\log A \leq \frac{t\theta}{1-t}\right] \cdot \exp(-\theta) d\theta\\
&=\int_{0}^\infty (1-\exp(\frac {-t\theta}{1-t})) \cdot \exp(-\theta) d\theta\\
&=1-\int_{0}^\infty   \exp(-\frac {\theta}{1-t}) d\theta\\
&=1-(1-t)=t\\
\implies f(t)=\frac {dt}{dt}=1
\end{align}$$
So we have that $|X|^2$ is uniformly distributed over $(0,1)$, but this isn't the case for 1 qubit states as its distributed as $\cos^2\theta)$ , which is not uniform. (this computation probably can be extended to higher dimensions too).
To fix this, instead of $\sqrt{-\log}$, it might be better to sample from $N(0,1)$ as the standard multivariate normal is spherically symmetric.  Numpy does have an implementation for this too.
