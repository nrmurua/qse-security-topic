Execution of sublattices involves frequent unpickling of the Result object. When the dispatcher encounters a sublattice, it dispatches the sublattice using dispatch_sync from the client SDK, which is implemented as ct.get_result(ct.dispatch(sublattice), wait=True). Unfortunately, get_result(wait=True) constantly polls result.pkl to see if the workflow has completed.
This inefficiency can be addressed independently of the Result object decomposition. Instead of using the SDK, we could implement a server-side _dispatch_sync which blocks until the dispatch has completed without polling any file. For instance, we can simply wait on the future returned by the threadpool executor when dispatching the sublattice workflow.
Proof of concept
Seems like this has already been resolved in develop. Closing this issue.
