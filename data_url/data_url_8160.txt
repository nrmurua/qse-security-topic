This code produces an animation of the Bloch sphere vector evolution. I have implemented a rotating frame approximation as defined by H. The goal is to model T1 and T2 decay. I am still experimenting with different gamma_phi and gamma_minus values, but right now they're big enough to have a visible effect over the 10^-7 time scale that's being plotted. Right now, I am only plotting state_z_plus so I can focus on the T1 decay from 1 to -1. However, as the animation and graph indicate, it seems to stop short of -1 and I don't see why that should be happening. I appreciate any feedback.
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import qutip as q
import cmath
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
rc_dict = {
"figure.subplot.bottom": 0.11,
"figure.subplot.hspace": 0.2,
"figure.subplot.left": 0.125,
"figure.subplot.right": 0.9,
"figure.subplot.top": 0.88,
"figure.subplot.wspace": 0.2,
"figure.figsize":(10,10/1.61),
"axes.grid": True,
"text.usetex": True,
"grid.linestyle": ":",
"grid.color": "black",  #
"legend.fontsize": 20,
"lines.linewidth": 2.5,
"axes.linewidth": 1.5,
"font.family": ["serif"],
"font.sans-serif": "Times New Roman Bold",
"font.size":26,
}
plt.rcParams.update(rc_dict)
qutip_options = q.Odeoptions(
store_states=True,
nsteps=20000000
)
si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz()
sp, sm=q.sigmap(), q.sigmam()
state_z_plus=q.basis(2,0)
state_z_minus=q.basis(2,1)
state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) +  q.basis(2,1))
state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) -  q.basis(2,1))
state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j*  q.basis(2,1))
state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j*  q.basis(2,1))
h = 6.62607015e-34
b = 0.1786195317554453  #magnetic field
b_AC = 3.572390635108906e-05  #oscillating magnetic field
g = 2 #g-factor
u = 9.274E-24 #bohr magneton
w = gub/h #omega
w0 = 5e9  # omega0 is the rotating frame frequency
print(w)
gamma_phi = 44200000
gamma_minus = 100000000
epsilon = gub/h*(2cmath.pi)
Delta = gub_AC/h(2*cmath.pi)
H =  ((w-w0)/(w))epsilon/2 * sz #+ Delta/2*sy
print(abs(((w-w0)/(w)))*epsilon/2)
#note here the final time satisfies: omega*t_final = pi/2
times=np.linspace(0, 0.0000001, 1000)
#our initial qubit state
state0=(state_z_plus)/(np.sqrt(1))
H/(2*cmath.pi)
results=q.mesolve(H, state0, times, c_ops=[cmath.sqrt(gamma_phi/2)*sz+ cmath.sqrt(gamma_minus)*sm], e_ops=[sx, sy, sz], options=qutip_options)
fig, ax=plt.subplots()
ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$')
ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$')
ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$')
ax.set_xlabel("time")
ax.legend();
import imageio
def animate_bloch(values):
b = q.Bloch()
images=[]
b.point_marker = ['o']
b.point_size = [30]
for i in range(len(values)):
b.clear()
b.add_states(values[i])
b.add_states(values[:(i+1)],'point')
beans = 'beans.png'
b.save(beans)
images.append(imageio.imread(beans))
imageio.mimwrite('beans.gif',images)
values = []
for t in range(0,len(times),30):
values.append((results.states[t]))
animate_bloch(values)
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
from IPython import display
from pathlib import Path
gifPath = Path('beans.gif')
with open(gifPath,'rb') as f:
display.Image(data=f.read(), format='png')


