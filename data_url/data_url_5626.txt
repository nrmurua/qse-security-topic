I am trying to parallelise the execution of simultaneously submitted circuits, that is focusing on parallelisation set by the max_parallel_experiments option. I've run into two issues. The first issue is that the execution is not parallelised when a low, but still parallelisable, number of experiments is submitted. As example I've once submitted 6 circuits simultaneously and a second time I've submitted 12 circuits simultaneously. The 6 circuit experiment is not parallelised at all and is even slower to execute than the 12 circuit experiment.
On my machine this prints:
This should exemplify the non-parallelisation of the 6 circuit execution. While a bit weird, this is not my main problem. I assume there is some internal logic to decide when parallelisation is worth it/should actually be applied and the 6 circuit execution is (somewhat erroneously in this case) considered to be not worth parallelising.
However, my main problem is best exemplified by running the code below:
On my machine this prints:
That is, the first two 12 circuit executions run parallelised. The 6 circuit execution runs unparallelised as explained above. However, any following 12 circuit execution is no longer parallelised.
Interleaving an unparallelised circuit execution seems to prevent any further parallelisation, even if parallelisation would usually be applied in the absence of this interleaved execution.
Running the code above with the 6 circuit execution commented out instead returns:
That is, all runs are now parallelised.
Running the above code snippets.
Firstly, I would expect the 6 circuit execution to be parallelised.
Secondly, interleaving an unparallelised circuit execution should not break parallelisation for any further circuit execution.
N.A.
This issue is caused by setting OpenMP nested parallel when number of parallel experiments is less than max number of existing threads.
To avoid this issue until this will be fixed, please set the number of circuits to OMP_NUM_THREADS

By the way OMP nested parallelism is not actually used currently. I will fix OpenMP parameters to get better speed up.
