This is not so much a bug as an annoying inconsistency. I am not sure if there is a good way to fix this whire retaining back wards compatibility but none the less the naming is inconsistent consider the following:
It's inconsistent if name includes the full name or only the top most part. Depending on which class you are looking at you may have to use either full_name or shore_name instead to get what you are after.
We could make this better by always implementing short_name and full_name:
@QCoDeS/core
Thanks for bringing this up. I have been annoyed by this confusion too.
I like your suggestion. What should __str__ return?
I added the current behavior of __str__ to the table too
IMHO we should just use __str__ as a human readable repr and not rely on any particular format of that
Thank you @jenshnielsen , this has also been bugging me for some time. I like your suggestions. In an ideal world I would want to only have full_name and name  where name is what you suggest to be short_name. But I think your suggestion is a good way to keep compatibility.
We could consider deprecating name to establish a less confusing situation in the future.
I agree that __str__ should be the full human readable version and not be used for logic. So ideally we  implement the parameter str in the style of the channel version (e.g. parallel to full_name)
@Dominik-Vogel sounds good to me
I also considered implementing something like a name_parts function that returns all the elements of the name in a list. For the parameter grouping it is useful to be able to get a name like channel_parameter but without the full instrument name included
@jenshnielsen I like the name_parts idea. Maybe we can even pull all that code into a common place as a mixin?
I agree that str should be the full human readable version and not be used for logic.
Then I guess measurements.py needs some small fixes, since str is being used a lot there, also for logic.
@WilliamHPNielsen
Then I guess measurements.py needs some small fixes, since str is being used a lot there, also for logic.
For parameters only or for instruments/channels too?
Only parameters, as far as I can see. It's in the figuring out dependencies parts.
ok in that case it should be fine but also solvable by a straightforward replacement
Reopening as we should still fix multi and array parameters to conform to the same logic
