Description of the issue
While editing circuits, we often used circuit.prev_moment_operating_on(op.qubits, end_moment_index) to identify the position after which operation op can be inserted. This, however, is no longer correct and can lead to subtle errors, like the one came up during review of #4944
For ex:
We should either update (add a flag?) to prev_moment_operating_on s.t. it takes care of CCOs or make _prev_moment_available a public method.
cc @95-martin-orion @daxfohl
Cirq version
0.14dev
As a stretch goal, we should also find all existing usages of prev_moment_operating_on and figure out whether it breaks with CCOs and needs to be updated to use _prev_moment_available.
To my absolute surprise, we only have a single usage of prev_moment_operating_on which I added recently in the merge_operations transformer primitive. i.e.
Filed #4977 to investigate and fix breakages in merge_operations.
I like making _prev_moment_available public, but I'm concerned that taking an operation as input is too limiting - the function really only needs the set of qubits and measurement keys to check for. Whatever can manage this with the least complex deprecation process should be fine.
Can you give an example where taking an operation as input might be too limiting? Circuits only support inserting operations and when asking the previous moment available for insertion, it seems natural to me to take an operation as input.
Can you give an example where taking an operation as input might be too limiting?
This is a fair point - all cases I can come up with eventually want to add an operation anyways, so just using that operation for the check should be fine.
The main reason I raised this is that an operation is strictly more information than the method needs. Taking an operation forces creating a dummy op (e.g. cirq.measure(*qubits, key='k')) if there ever is a case where there isn't a relevant operation to use.
an operation is strictly more information than the method needs
I agree. Maybe we can make this public as it is now and go through a deprecation cycle once we identify need for cases where an operation is not needed?
