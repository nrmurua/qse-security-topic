After the MPI library has been updated I am wondering how to call the subroutine to initialize the force environments:
The mpi_comm parameter used to be a 'INTEGER' type, and here I called with the corresponding old style mpi_comm handle, but I guess that now I will have to construct an mp_comm_type which is an internal type in CP2K.
So my question is how to go from the mpi_comm integer handle to an mp_comm_type, so that I can call the create_force_env correctly?
I order to obtain an mp_comm_type from an integer handle is to declare your new object mpi_comm of type mp_comm_type and use CALL <your_new_communicator>%set_handle(<your_integer_handle>). If you need the integer handle of a given communicator, use <integer_handle> = <communicator>%get_handle()
The reason for these new types is that the new mpi_f08 module introduces its own MPI types such as MPI_Comm representing a communicator. Because CP2K is also supposed to be compiled with the old mpi module or even without MPI support, I have to wrap the MPI types. This also allows us to apply the OOP features from Fortran as communication routines always require a communicator anyways.
What are you trying to achieve?
Thank you for your reply. I am just trying to update our interface code for CP2K to also work with the new versions of CP2K with the improved MPI interface.
How our program works is that we separate the MPI world communicator into N sub communicators which each do their own  electronic structure calculation to get energies, gradients and stress tensors.
Have you already considered CP2K's farming capabilities?
That seems very neat. We are running path integral molecular dynamics though, so our use-case is more geared towards using the interface and restarting the calculations using the previous electronic structure as a starting point for the individual beads in the calculation. Thank you for your suggestion.
Apparently, the issue is solved. Feel free to reopen it if necessary.
