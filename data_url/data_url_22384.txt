see also #391
There is also the question of the idle kernel.
I propose that if there is no kernel executing, and the RTIO counter exceeds now, then:
There is another thing: the idle kernel is potentially without any inputs. In that case the idle kernel will quickly fill the output fifos and advance the timeline quite a bit. That will delay the execution a higher priority experiment which is not desirable. To counteract that, people can sync() in the idle kernel. But that kills most of the slack.
Otherwise that behavior sounds ok. It is a bit hidden and implicit though. And the reset/clear machinery still needs to be exposed.
The "RTIO resets" I mentioned stop the kernel CPU, empty the FIFOs, and when the next kernel is executed set now to the RTIO counter value plus a margin.
Yes. But if now >> rtio_counter and/or there is undesired stuff in the FIFOs the way to fix that is to write an experiment that resets now into the past, exits and through that very indirectly clears the FIFOs.
Setting now in the past and exiting is another error under inter-experiment seamless handover; it would cause an underflow in the next experiment anyway.
I would add an explicit reset.
Done. All resets and startup tests of time cursor vs. time counter are explicit and managed entirely by kernels (e.g. 
