The current implementation of Sequencer works in general but has some issues:
Branch.. and Loop.. create new instruction blocks to which their subtemplates are translated and which are later embedded into the main instruction sequence. It may happen that the translation of subtemplates is not completely possible (because of dependence on measurements, etc.) in which case the Sequencer would currently interrupt the translation. Since the Sequencer currently features only one stack which holds elements to be translated, problems will arise if the if-template of a BranchPulseTemplate results in a translation stop and the else-template is not translated (because it was pushed to the translation stack before the if-template).
Currently, Sequencer ignores the requires_stop() method. requires_stop() is meant to indicate that the corresponding SequencingElement/PulseTemplate cannot be translated yet and should be respected by Sequencer. Note that templates containing subtemplates should not let their answer to require_stop depend on their subtemplates, i.e. a SequencePulseTemplate can always be translated even if some subtemplate requires a stop. Branch- and LoopPulseTemplate should make their requires_stop response dependent on the Condition.
Currently, Sequencer creates an entirely new main instruction block in build(). This is erroneous behavior because it prevents continuing a translation after it was interrupted.
