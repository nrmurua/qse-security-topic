Many of the methods involving noise/channels mention that the matrices making up a mixture or channel must satisfy \sum_{k=0}^{r-1} A_i^\dagger A_i = I. This is never enforced, which allows the user to simulate unphysical systems and get invalid density matrices (see example below).
Validation is easy enough (assert np.sum([m.T @ m for m in object._channel_()) but I'm not sure where to put this @Strilanc ? Ideally this will be called exactly once, before a call to simulate.
Code Example:
which prints
One first suggestion is that we should add a testing method that checks this.
My opinion is just as we don't enforce unitary returns a unitary (because checking it each time would be costly), I think we just need to make it easier for people to test that their channel is OK.
We have routines in cirq.linalg.predicates that check for a variety of potential qualities. I would suggest adding some additional methods like is_cp and is_cptp there for the users to apply on their constructions themselves. We could potentially add a flag in simulate and run which when true performs quantum computing validity checks on the circuit but I'm not convinced whether that would add much benefit if we had a more complete list checks for individual operations in linalg.
+1 for using predicate and I like the is_cp, is_cptp checks.
@peterse are you still planning to work on this?
oops, sorry for taking so long. I'm struggling to find time to contribute so I'm going to unassign myself for now
Keeping this before-1.0 as new validation will tighten the API. cc @95-martin-orion
