We should make the format (type, shape) of returned measurement results more uniform. Currently we sometimes return scalars, arrays, lists, tuples, etc.
With the new Results object being created, now is the time to refactor the return types for various backends, and have a unified standard expressed in Results.
This may also have relevance for register values.
Things to take into account:
A summary of my posts in the PR:
Returning measurement samples to the user (inside the Result object):
I don't think returning Nones for the non-measured systems is very useful.
Options:
The Result class can also be given a property method (or several) for returning the samples in another format, e.g. result.samples_array
How about, as @smite suggested for the user facing results:
results.samples = {0: [0.32, 1.43, -0.32], 2: [0, 4, 5]}
results.samples_array = array([[0.32, 1.43, -0.32], [0, 4, 5]], dtype=float)
I don't see any downside to also providing result.measured_modes = [0, 2]
For the backend API, I agree with shape == (modes, shots).
I'm in favour of all this. Let's do exactly as @josh146 outlined above --^
What about batch_size? How should it work?
I added some preliminary tests for this. Conventionally, batch axis is always first.
So results_array.shape==(batch_size, modes, shots)
Is this also how it's handled internally? So if you have batching on, the internal representation of the samples is always a 3d array?
If batch mode is used, then deep in the guts of the TF Backend, everything is represented as tensors with shape (batch_size, ...). Measurements are currently returned as a Tensor/array of shape (batch_size,). The only exception is for measure_fock on N modes, which I believe is returned as tuple(batch0, batch1,...) where batchX.shape==(batch_size)
btw I'm open to changing this if we have better suggesitons. Previously there was only one case where a measurement result was returned that had more than one axis (measure_fock in TF backend with batch_size != 1), so it was decided semi-arbitrarily how this should look
Obsolete issue. Results should now be unified across backends (incl. remote).
