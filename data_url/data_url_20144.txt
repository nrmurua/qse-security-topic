We only pull in the vec (vectorized plain C) implementation of Classic McEliece from PQClean; we should also pull in the avx2 implementation.
I tried modifying the copy_from_upstream.yml file to pull in all of the Classic McEliece schemes, but got some weird behaviour.
Here's an excerpt from the modified .yml file:
When running copy_from_upstream.py, I get the following warnings output to the console:
And the following C code is produced, which, if you notice, is not valid.
Although there are four implementations available in PQClean (clean, vec, sse, avx2), I think our desired behaviour is: use avx2 if available, else use sse if available, else use vec.  I'm not sure how to express that to copy_from_upstream.
Tagging @baentsch @xvzcf @bhess
Is anyone already working this issue? When looking at it also noticed that a presumably idempotent python3 scripts/copy_from_upstream/copy_from_upstream.py copy changes a file (just a nit - newline missing)... Would also address that then.
I haven't worked on it since raising the issue with the comment above.
FYI, #920 shall close this issue. One caveat: This is a "quick fix" in that it only enables import of "vec" and "avx" variants of McEliece; "sse2" and "clean" variants are explicitly suppressed: a) @bhess and @baentsch don't see much value in those variants; b) Supporting multiple optimized variants would make the "portability logic" very convoluted.
Anyone disagreeing with this logic, please either comment (negatively) on #920 and/or create a "future-work" item for multi-variant, portable CPU feature support.
Those choices makes sense to me, Michael: AVX2 has the highest performance of the non-portable ones, and vec has the highest performance of the portable ones.
