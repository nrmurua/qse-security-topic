Add the code to take a circuit and a list of pauli operators and output the required circuits and then a fitter to calculate the expectation value of those pauli operators. A limiting case of full state tomography.
Should probably also have an option to have a weighted list so the full "energy" can be output as well.
Can we generalize the "energy" business to be a proper concept in tomography - taking a measurement in the basis of a given operator? The circuits produced in the VQE hamiltonian are the tomographic measurements with respect to each pauli, and the fitter computes the final expectation (both done in Aqua today). This could incorporate commutativity grouping (one measurement for "ZZII" and "IIZI") as an option as well. This would also capture some other desirable tomography techniques, such as measurement in a stabilizer basis, e.g. https://arxiv.org/abs/1908.08909, when these operators are in Terra. Thoughts?
Yes, I was assuming the module would optimize the number of circuits based on commutativity (that's really the main difference with full tomography).
I think what we want is expectation value estimation of a general operator. This isn't really tomography since we aren't reconstructing a quantum object -- we are estimating a classical parameter <A> for some operator A.
You could break this up into the follow pieces:
We already have 2 for specific case of Pauli basis in the tomography module, and 3 for converting counts to an expectation value for tensor-products of single operators (ie Paulis) here, and 4 is just do the weighted sum of expectation values with the coefficients.
So the bit that is challenging bit is step 1. How this is implemented would depend on the type of operator, some examples of operators you might want to support:
As @dongreenberg says some of these cases are already in Aqua (like weighted Paulis for VQE, and some fancy transformations to minimize the number of measure bases).
Maybe workflow could be something like:
@dcmckayibm for your original point of computing a list of Pauli expectation values you could currently do it as follows (without optimizations for commuting pauli operators to reduce number of meas circuits)
Ok, great, we just need the optimizer and we're most of the way there
Thanks, Chris. This all makes sense to me. This will mean a few more operator representations in Terra that can be passed to this module, but I think these were all already on the table (weighted pauli, rank stabilizer). Correct?
We have code for grouping the paulis in Aqua and other parts of piece 1. We can move these into Ignis and Terra if they are appropriate there. Adjusting the basis is an active area of research (especially within IBM), so I would expect some ongoing activity there.
Re building the circuits, two considerations:
