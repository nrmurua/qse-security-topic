I'm not sure if this already exists, and if such computation is even part of qiskit.
After writing a circuit in qiskit, we can transpile it so that it is executable in a specific device.
However, the resulting OpenQASM does not have any information about the timestamp in which a gate is executed. It is possible to extract a gate dependence graph (the DAG circuit), but this still gives little information about the exact time a gate is executed (or when a qubit is idling, etc). For example, gates can be scheduled ASAP (as soon as possible) or ALAP (as late as possible), resulting in different execution timestamps, that correspond, however, to the the same DAGcircuit.
Knowing this would be useful, since I'm trying to develop a circuit fidelity estimator, and I need to know when gates are being applying, when a circuit is Idling, etc.
To give a more visual example about what I'm asking, check this image:

(Here the time happens to be defined in cycles, of 20ns)
Such image gives information about the start and endtime of each gate, and it is easy to see when each gate is idling.
Is there a similar feature in qiskit, that tells this low-level scheduling details?
Thanks
Hi! If you display the circuits and alter the justify parameter, you will get the images such as the ones you generated.
circuit_drawer(circuit, justify=right)
However, this is no guarantee of how things run on the device, but it will give you the information on the ASAP/ALAP orderings. Internally, the drawer uses a method called _get_layered_instructions() so you can call this to retrieve the orderings.
Hello Astlaan. This information and control will be provided by the pulse module. See #2650 for an idea of the capabilities that pulse will provide.
Hello Astlaan. This information and control will be provided by the pulse module. See #2650 for an idea of the capabilities that pulse will provide.
@taalexander
So, this new module appears to convert a circuit to a 'schedule' that has the features I talked about right? And we can then be sure about how things are actually executed on the backend (ex, u3 on qubit k at timestamp 2030ns?).  This seems to be what I asked for.
I had also asked a few more questions some time ago, on the IBM Q experience forum: https://quantumcomputing.stackexchange.com/questions/6317/ibm-q-devices-scheduling-of-gates-with-different-durations
Will those also be answered by this new module?
When is this module then expected to be finished and included in qiskit for use?
The module is functional and is being rolled out to premium client devices. This feature will only available on premium systems for the initial release.
QASM gates are composed of multiple pulses. The scheduling of these pulses will be made clear and be controllable through the scheduling module which will map qasm gates to bundles of pulse instructions and then combine these instruction bundles according to the scheduling policy.
So, this new module appears to convert a circuit to a 'schedule' that has the features I talked about right? And we can then be sure about how things are actually executed on the backend (ex, u3 on qubit k at timestamp 2030ns?). This seems to be what I asked for.
I had also asked a few more questions some time ago, on the IBM Q experience forum: https://quantumcomputing.stackexchange.com/questions/6317/ibm-q-devices-scheduling-of-gates-with-different-durations
Will those also be answered by this new module?
yes these will be answered.
Thank you, just one more question then:
This feature will only available on premium systems for the initial release.
I guess this doesn't include Q16 Melbourne then... Any idea on when/if this will happen?
This does not include Melbourne. I do not know if/when this will be rolled out to public systems.
