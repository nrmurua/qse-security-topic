Appending a circuit with multiple conditional registers to an instruction raises an exception (from to_instruction method), however using compose instead of append seems to work.
A related issue is that the "working" circuit from compose assembles to incorrect qobj (see issue #6583)
Take basic teleport circuit as example
Appending this to another circuit with
raises
This error seems to come directly from teleport_circuit().to_instruction() which gets called by append.
If you do compose it produces a circuit, however the conditional values appear incorrect on the drawer and in the assembled qobj (see #6583)
to_instruction should work for any circuit by flatting registers.
The implementation in compose seems to work, so maybe how it is implemented could be used for building the flattened circuit definition in the instruction-ified circuit.
For now, I think raising is the right behavior here. Instruction conditions can span a full ClassicalRegister or, after #6018, individual Clbits, but not yet slices of registers. One possible short term workaround would be to repeat the conditional instruction, conditioned over the possible states of the remaining bits of the flat register, in sort of an 2^N-way OR, but this doesn't scale especially well.
@kdk In that case compose should also raise an error rather than appear to work (see the other issue for it returning incorrect result)
