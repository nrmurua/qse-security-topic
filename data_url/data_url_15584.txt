Related: #4625
BasicAer can already simulate UnitaryGate, so it can easily be modified to simulate any gate that defines a matrix. Requiring manual transpilation to a "supported" gate set is an artificial restriction. The code below should not raise an error.
BasicAer is meant to operate mostly like a real backend (its initial and remaining primary purpose is for Terra's tests), which require transpilation.  If you just want the matrix form of a circuit or the statevector, the expected path is qiskit.quantum_info.Operator(circuit) (or Statevector).
From @mtreinish at #7627:
However, BasicAer will still be a Backend and the Backend interface doesn't really support a model of executing arbitrary gates with a matrix defined. The interface is designed to model a device with constraints of hardware, one of those constraints is a limited supported set of instructions. The compiler needs to know what instructions are supported up front so it can translate an input circuit to that supported basis set. While simulators are probably able to support simulating any gate with a matrix defined, including aer, the backend interface doesn't support that (as it's not an expressible constraint of the interface). The closest thing is to support the UnitaryGate (which aer already does) which lets you pass a unitary matrix directly as a gate in your circuit.
What if we make the backend support any instruction (use a trivial predicate when checking if an instruction is supported) by trying all possibilities (decomposition, matrix) and raising an error if there is really no way to simulate it?
The way a backend defines what instructions are supported is by exposing a list of strings (gate/instruction names), so the Terra->Backend interface is an open question "what instructions do you support?" rather than "do you support this instruction?".  There's no "wildcard" name in the spec, so there's no way for any Backend (V1 or V2) to tell Terra "I support everything".
You're right that BasicAer.run could (and once swapped over to use quantum_info, will) in theory support anything with a matrix when called directly, but it's not possible for us to specify that within the Backend API, so we can't have transpile know to leave all gates alone.
quantum_info.Operator(circuit) (or Statevector) will need to remain the right way in Terra to  simulate a circuit made entirely of objects with matrices, even if BasicAer.run becomes capable of it via #7670, just because we can't make the rest of BasicAer's implementation of the Backend spec say "I support all instructions".
