This will be similar to QASM output: https://github.com/quantumlib/Cirq/blob/master/cirq/circuits/qasm_output.py
but for QUIL (https://arxiv.org/abs/1608.03355). Use the QUIL specification (https://github.com/rigetti/quil/blob/master/spec/Quil.md) as a reference when making this program.
This will require a design. #1548 (comment) is a good example. Please add a design to this ticket before implementing the program.
A comparison of how this should work like QASM output:
Below is an example of how Cirq outputs QASM:
Below is an example of how Cirq will output QUIL:
Can you assign this to me.
To output a circuit to QUIL format in Cirq, the following call can be made:
Below is an example of printing the QUIL output in Cirq:
The print statement would output the following:
For each Cirq gate that can be output to a standard QUIL gate, a quil representation was add to the gate.
Below is an example of the quil function for the X gate:
@hanusaj  Looks fine to me so far. CPHASE is supported in Cirq as cphase = cirq.CZPowGate(exponent=t). QUIL defines it as
Look at the matrix of   CZPowGate 
The other CPHASE gates are not supported by Cirq. We will need to add them.
To output a circuit to QUIL format in Cirq, the following call can be made:
Below is an example of printing the QUIL output in Cirq:
The print statement would output the following:
Italic and bold means we will be implementing them
For each Cirq gate that can be output to a standard QUIL gate, a quil representation was add to the gate.
Below is an example of the quil function for the X gate:
The gates will be added to common_gates.py.
The matrices for each of the gates can be found below. They will also include the _quil_ function which will output according to Quil.md or this documentation.
PSWAP --> Cirq.PSWAP
CPHASE00 --> Cirq.CZPowGate00
CPHASE01 --> Cirq.CZPowGate01
CPHASE10 --> Cirq.CZPowGate10
@hanusaj  common_gates.py contains too many gates already. Let's create a cphase_gates.py. PSWAP is 
Do we really need to add all these CZ variants? How about a single TwoQubitDiagonalGate to accompany ThreeQubitDiagonalGate?
@Strilanc okay let's do that.
To output a circuit to QUIL format in Cirq, the following call can be made:
Below is an example of printing the QUIL output in Cirq:
The print statement would output the following:
Italic and bold means we will be implementing them
For each Cirq gate that can be output to a standard QUIL gate, a quil representation was add to the gate.
Below is an example of the quil function for the X gate:
For Cirq gates that are not standard gates in QUIL, the DEFGATE keyword will be used to output a new gate in QUIL that can be used to represent the Cirq gate. For example:
Cirq.FSimGate
A _quil_ function will be added the the Cirq ResetChannel to be able to output the ResetChannel with the RESET keyword to QUIL.
The cirq.measure function results in the MEASURE keyword in QUIL.
The Cirq circuits will be defined in Cirq using the DEFCIRCUIT keyword. For example:
Bell Inequality
@hanusaj
Please edit your design instead of adding new ones from now on because they are pretty large.
Non-Standard Cirq Gates
There other non-standard gates in Cirq besides fsim. Please list all the ones that you intend to define __quil__ for
The Cirq circuits will be defined in Cirq using the DEFCIRCUIT keyword.
I don't know what this means. Cirq circuits will not be defined in Cirq using the DEFCIRCUIT keyword. Please explain.
Most of the operations in Cirq will need _quil_. Some of them might be too big to use DEFGATE. That's where DEFCIRCUIT might come into the picture (you can use an operation's _decompose_ method to define this.
You need to add CONTROLLED, DAGGER, and FORKED, and WAIT to your design  e.t.c. This design doesn't address everything on https://github.com/rigetti/quil/blob/master/spec/Quil.md.
@vtomole @hanusaj will this interface be usable to execute computations on Rigetti machines from Cirq (instead of using the Rigetti framework)?
@alexandrupaler Yes. The QUIL code that Cirq generates makes it possible to run programs writen in Cirq to run on Rigetti's QVM like so
Same with the optimizing compiler and on their hardware using https://github.com/rigetti/rpcq/. We are just generating QUIL and adding instructions on how users can leverage Rigetti's infrastructure. Similar to  #2541.
