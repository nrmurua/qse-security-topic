The argument is a float. Give it a float.
1 turn = 1 = 1*s*Hz = 1*s*s*Hz*Hz. It's unitless.
No. It's not inconsistent 50*MHz is a float. It is 50*1e6.
You first claim 1*turn=2pi. What unit does that have? Both sides?
Phase has units implied by context or convention: people are allowed to write 2*pi in papers as a phase. pi has no units.
No. It's not inconsistent 50MHz is a float. It is 50e6.
It implicitly becomes a float after unit processing. The same happens in the following example too.
self.sawg0.frequency0.set(50000000)
You first claim "1turn=2pi". What unit does that have? Both sides?
OK I was imprecise. 0.5 turn is 1*pi rad is 180 deg.
@whitequark Thoughts on this?
@jbqubit It is possible to implement automatic coercions for argument passing in ARTIQ Python, but due to the way type inference works, it's a zero-sum game: for every case where I add a possible coercion, there will be another case where a type annotation is now mandatory. Especially since that will break existing code, I think this feature is a net negative, and in any case the added effort would seem to be higher than fixing the type of a numeric constant.
@whitequark Ya, mandatory type annotation isn't desirable. Thanks for the comment.
@jbqubit
@jbqubit To add to this, automatic coercions for arithmetic operations already result in necessity for type annotations in some cases. E.g. this function on its own is ambiguous:
This is not a very large problem right now because passing a variable with a known type, say a field, to such a function monomorphizes it. But if every argument were subject to coercion, that would become impossible.
