The CMake configuration process now appears to look for pthreads, and cross-compiling a test application for Windows that attempts to call pthread_create fails, and rightly so, since pthreads isn't native on Windows. Here's the output of running CMake:
Tip of master branch is 8950275.
And here are the two output logs:
CMakeOutput.log
CMakeError.log
I'm not sure, but can you try again with this patch?
@gadoofou87 That didn't help. Error is unchanged. It's still failing to build the test binary looking for pthread_create.
@kevinmkane I'm apologize for this patch, I didn't have the opportunity to test it. First of all, I want to say that pthread is not a problem. The problem is that try_run can't find any way to run executable files. I have found two ways to fix it.
In cross-compilation scenarios, there's no expectation the build host would be able to run any executables built for the target. Going down this path implies no longer supporting any cross-compilation scenarios. Is that acceptable?
Turning off OQS_USE_CPU_EXTENSIONS might be acceptable, depending on what if any performance penalty is incurred by doing so.
Going down this path implies no longer supporting any cross-compilation scenarios.
What makes you think that? See point 1 in my previous message, it solves the problem completely.
I think installing wine is a heavyweight requirement to introduce to do a build, but regardless, that only solves the problem for Windows. If I try to run cmake with the Raspberry Pi toolchain, I get a similar error with it failing to build an executable looking for pthread_create. If the problem is that cmake isn't able to run executables, isn't this potentially a problem for cross-compiling to ARM as well?
If the problem is that cmake isn't able to run executables, isn't this potentially a problem for cross-compiling to ARM as well?
Cross-compiling an optimized version of a library for a non-host architecture is not possible. Detecting CPU features in runtime should solve this problem, but it has not yet been implemented (#624). At this moment, I recommend disabling the optimized build when using cross-compiling.
Alright, that's fair. I'll disable the CPU_FEATURES in the cross-compile build. Thanks!
