Configuration to run backend is directly given to the execute() as optional arguments. The number of arguments will be further increased if we make a common interface for circuit and pulse.
To manage these arguments, we need to create configuration class with some validations (for example meas_level = 2 and meas_return = 'avg' are not valid combination). We can pickle this instance and reuse/share if we want.
@ajavadia I think with the philosophy that execute, transpile, and assemble are smart scripts. We should not do this. But I do think we should put some smartness into the execute function to give meaningful error messages.
Right, the current execute/transpile/assemble functions are quite permissive in the args that they accept, with the goal being that these are main user-facing functions. There is a parsing step that parses those arguments into a standardized internal representation. If this issue is about this internal rep, then it might be covered by the TranspileConfig and RunConfig. These classes can be extended for the pulse use case, but can we get a plan here?
