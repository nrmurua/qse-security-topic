The example file pong.qasm looks like it may have been left behind after several iterations of updates to the specification, and I'm not at all sure what it's meant to be doing.  This currently passes the tests because of our broken defcal handling in the reference ANTLR grammar lets the parser eat the first defcalStatement match all the way to the last brace of the file (even though it should have ended much sooner), since this is the only way ANTLR can build a valid parse tree.
My immediate concerns for OpenQASM 3 are for lines 24 to 28: 
The glue[1]-delay[0] construct is unfamiliar to me - certainly it's the only instance of the word glue in the entire repository, including historic commits.  These lines were introduced in #58, and haven't been relevantly changed since.  Line 28 also appears to use a defcal'd gate call as an expression item, which I'm also not familiar with.
The OpenPulse sections also look invalid/out-of-date to me, but I don't know OpenPulse well enough to talk about that.  They are 
This example needs rewriting into valid OpenQASM 3, or removing entirely.  This issue is blocking a fix to the ANTLR grammar for calibration blocks, because fixing that unmasks the errors in this file and causes test failures.
t1.qasm and defcal.qasm also have invalid OpenQASM 3 - the former is missing types on its for loop variables, and the latter has an extraneous colon in a defcal argument list - but these are trivial fixes.  Both are masked in the current tests by the same faulty behaviour of the reference ANTLR grammar.
I have a fix for the ANTLR grammar written and ready to deploy, but I can't make it yet because the tests are failing due to these bugs.
glue is what we used informally before stretch, so this is definitely left-over from an ancient era.
This particular pong example is basically Fig 5 from https://arxiv.org/pdf/2104.14722.pdf. It's for the use case where you want to define a specific "dynamically corrected gate". The pdf has a code example of how this should be done using openqasm. Is that valid using the most recent spec?
Ok, do you know what's meant by things like glue[1]-pong(amp) $q1;?  I parse this as some some of stretch subtract a gate call, which I'm not sure the meaning of.  Looking at figure 5 in the paper, I think what we're after is something to the effect of:
assuming that there's a valid way of defcal'ing something with a non-fixed duration.  I'm not 100% certain that is the case, because the spec also says
The contents of defcal bodies are subject to the restriction they must have a definite duration known at compile time, regardless of the parameters passed in or the state of the system when called.
From TSC meeting on 2022-06-24: general agreement that the spec quote above does not forbid this type of gate, because its duration is known at compile time.  General agreement is that the pong.qasm example as written is broken beyond use, but that we do want an example based on Figure 5 from the OQ 3 arXiv draft linked above by Ali.  This lead us to a problem in the specification that the description of the defcal statement does not provide a way for a duration to be passed as an "argument".  This is the main problem that needs solving.
Current examples:
Given this, as a start point for discussion, I propose we write the complete pong.qasm example as (where <HW: ...> means "somebody who knows OpenPulse/hardware better than I do should write something here):
This would need to be accompanied by some spec changes, in particular that we need to specify that the grammar of defcal statements is (something like):
To be clear, I mean to say things like that in text, with code examples on the circuit-timing page.  We then also need to update the reference grammar to handle this and add some unit tests.
Some things to discuss:
My (not massively thought-out) views are:
I am against durations being specified in defcals. This behavior is overly complex without a clear implementation proposal. As stated currently in the spec defcal durations may be inferred from the underlying defcal grammar layer. To be quite honest the current proposal feels like an unrealistic pipe dream, that will have limited applications in practice for the amount of engineering required to implement it. Given this correspondingly low priority, I would suggest we remove these capabilities before publishing the spec.
Thomas's view (thanks!) is the other main direction that could be taken here. If so, we should remove all the references to this sort of behaviour from the "circuit timing" page (see link above) for the 3.0 release, and probably the box statement and the stretch type (box is simple, but without stretch I don't think it achieves anything).
