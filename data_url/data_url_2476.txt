For example, this would allow us to support functionality like "give me the results where the sweep variable was 0.25".
There can be multiple sweep variables, right? IF we want to support arbitrary querying like this, the result of such a query on a SweepTrialResult will return another SweepTrialResult without the params specified in the query.
I am thinking of implementing SweepTrialResult as List[TrialResult] and an index of the form Dict[str(param+val), Set[TrialID]]]. Index can be created from List[TrialResult] with TrialID as the element index in the List.
GetResults query as above will take in a ParamResolver that describes the query. It then performs lookups on the index for each param in the input resolver, unions the sets and gets a list of TrialResults from the TrialResult dict. It then returns SweepTrialResult(results=List[TrailResults], ignore_params=self.ignore_params+input_resolver.param_dict.keys)
I do like the idea of having a method like
sweep_trial_result.slice_where_params_match({'a': 5})
Feel free to include useful methods like that, and we'll iterate on them.
Another common issue that people run into is how to count the proportion of times a particular measurement occurred. We should have utility methods for that.
This would be same as a multi_measurement_histogram on the combined set of measurements for all underlying TrialResults, correct?
I wrote some experimental code that might be useful for this. It has a sort of SQL feel to it.
Usage example:
Outputs:
And here's the code:
I worry that we are just reinventing pandas.  Have we consider leveraging pandas instead of writing our own dataframe / sql- lite
I think it would be great to use pandas instead of writing our own stuff.
