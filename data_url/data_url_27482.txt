Food for thought:
How should equality be defined for both a Pulse and PulseSequence?
What makes a Pulse(Sequence) unique?
Are all attributes important when comparing Pulse(Sequence)s?
Coming back to this, I think ultimately we don't want equality to be predefined for PulseSequences. A comparison should be performed as defined by the user. We could create a set of PulseSequence comparators, extending an abstract class. The safest thing to do would to raise a warning or error whenever two PulseSequences are compared. Of course this has the drawback of disallowing == in code unless __eq__ is overwritten after instantiation.
Likewise for pulses.
I don't agree. the Layout, interfaces, etc. depend on pulse(sequence) equality behaving a certain way. It would become very confusing if, and probably lead to issues if pulses are equal on one computer, but the same pulses are not on another.
It's an essential feature to be able to check when two pulses are equal, so I think we should come up with a good unified approach.
I understand that there are situations when you would want to compare more than in other situations, but maybe if we can think of some examples it would become more clear how to approach this.
Also, maybe it would be a good idea to have a list of attributes that we think matters and don't matter when comparing pulse sequences. We can update this as we go along. Some attributes only exist for certain pulses
Green means it should be included in pulse equality, red means it shouldn't, black means undecided
Ran into this issue today in the following situation:
A pulse was targeted to a CombinedConnection of the Arbstudio, which created three separate pulses
Wanted to remove one of the three pulses, but it instead removed another of the pulses.
The issue is that connection is not treated as one of the attributes that is compared during pulse equality, and therefore it removed the first occurrence, which had another connection. Perhaps it should be compared as well?
About to be closed via #98
