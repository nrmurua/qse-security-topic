Currently, a method to bind numerical values to a parametric quantum circuit exists (i.e. qc.bind_parameters(...)), but the opposite method to unbind the numerical values to build a parametric quantum circuit does not.
Given a QuantumCircuit object, there should exist a method that replaces all the numerical values with elements from a ParameterVector.
For example: with the following qc = QuantumCircuit(...) object:

qc.unbind_parameters(), should produce:

Hey @des137 , do you mean then we get a single circuit, representative for the binding parameters that are present in our circuits?
Here's a quick implementation after discussion with @des137 that might serve as a good starting point (but would need to be made more robust):
A few questions:
For a current update on this feature request:
I'm not certain that a method like this can exist in Qiskit, because it's not generally possible to arbitrary rebind parameters in the current data model.  I think at best this would need to be a user-defined function, approximately using the template given above, where it is known that all gates are safe for arbitrary redefinition of their params fields.
To explain more: users can define custom Gate objects that have a fixed, static _definition and no _define, but are still available for use with assign_parameters.  There is not enough information in such objects to be able to go back to an "unbound" circuit.  Take this example:
Now let me construct a circuit with this gate initially unbound in it, then bind the parameters:
The problem now is that my_gate.definition has had its parameters fully assigned to the point that it appears to contain a single rx gate with a parameter value of 0.375.  There is no way to recover that the definition of the custom gate originally contained params[0] + params[1] from this, so there's no way to "unbind" the circuit bound.
This might seem quite arcane, but in practice it's very common to define custom circuits, then append them (which internally calls to_gate() or to_instruction()) to another circuit, which can lead to this sort of data erasure.
I'd suggest that given this, it's probably not an appropriate function for the core library, but totally valid for a user to write their own logic, when they know it would be safe to do so.
