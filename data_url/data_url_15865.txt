Currently circuit.depth() considers all gates in the circuit. In the context of present experiments 2-qubit gates are often much longer than 1-qubit gates, so a function circuit.depth_2q_gates() would be useful. This would be a better estimate of true depth cost. Of course the most accurate would be to schedule the circuit with the gate durations and look at circuit.duration, but that requires further compilation and is not a pure analysis of the circuit.
It would be nice to just have this do non-local gates in general rather than just 2Q. But I agree this is much needed.  Especially after the IBM Quantum basis gate change. One might have to be careful about things like conditional 1Q gates and what those might do to the depth even if not explicitly in the computation.
Actually, the circuit depth is the number of non-parallel gates that are executed in the circuit secuentially. Thus, a conditional gate such as a CNOT is not a matter. If you consider it a unit in each qubit, it will be counted as a 1 unit, as they are executed in parallel. And if you consider it as a 1 gate, then there is no problem.
"The depth of a circuit is the number of distinct timesteps at which gates are applied; the point of this problem is that it is  possible to parallelize the Cn(X) construction by applying many gates in parallel during the same timestep.)" Quantum computation and quantum information" Nielsen & Chuang
As I see, the function you demmand would have the same result as the circuit.depth(). However, it is true that having the duration function we would have two different result.
If implementing this function what would be the difference between 1-qubit gate and 2-qubit gate with reference to the depth?
I think this can be accommodated with Qiskit/rustworkx#383.
I like the approach there which allows the user to provide the weight function so we don't have to make assumptions about use cases.
Actually, the circuit depth is the number of non-parallel gates that are executed in the circuit secuentially. Thus, a conditional gate such as a CNOT is not a matter.
conditional gates take longer to execute as it takes the time to evaluate the condition plus execute the gate. Here "conditional" means conditioned on the value of a measured bit.
Your going to get an overhead from the dag conversion. That is why the current depth uses the list data. Ideally this would be computed as gates are added / modified.
The easy way of implementing this function could be a similar function to circuit.depth() in which, you are able to set a different weight to the conditional gates. Then, you will obtain a different result only of the weight for this conditional gates is different from weight=1. Is this a good idea?
If it is, I would like to work in this issue to implement it. Thanks.
@VicentePerezSoloviev Are you working on this issue? If not then I would like to work on this issue.
Apologies for the slow response on this, it is already being worked on by @y4izus, we will update the assignment to reflect this and prevent further confusion.
thanks!
thanks @1ucian0 !
I really needed this so went ahead and implemented it #6998
