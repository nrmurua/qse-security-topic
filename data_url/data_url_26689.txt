The toolchain built of libvori fails because of the -mavx flag in CMakeLists.txt. The removal of that flag allows for a successful built of libvori with armv7l.
you mean the -mno-avx?
@mkrack can you test whether libvori would build and run on an arm at all? make test should run a basic test
@dev-zero Yes, sorry, I mean -mno-avx. The test (only one) passes.
@mkrack if you have time, could you check whether it works with this CMakeLists.txt? It includes a check on whether the compiler supports -mavx and if it does, adds -mno-avx, but I don't have a compiler ready which doesn't have it.
@dev-zero Yes, this CMakeLists.txt works with armv7l (Raspbian, gnu 8.3.0)
@dev-zero The Intel compiler returns the warnings below when building libvori.a:
@mkrack thanks, not sure whether I'm able to fix that in a portable way, though. With the icpc 19.1.2.254 I can't reproduce it, here both -mavx and -mno-avx are accepted. Can you check whether changing -mavx to -mno-avx in the CMakeLists.txt check_cxx_compiler_flag call works (indicating that icpc 18 has a -mavx but no -mno-avx)?
@dev-zero Your change returns still warnings with the Intel compiler. Frankly speaking, I don't understand that change. On the other hand, the following lines in CMakeLists.txt work for me with the gnu, intel, and arm compilers:
Maybe, that disables AVX for any case, because I misunderstand the logic.
@dev-zero Your change returns still warnings with the Intel compiler. Frankly speaking, I don't understand that change. On the other hand, the following lines in CMakeLists.txt work for me with the gnu, intel, and arm compilers:
you mean the version bump to 201223b? There are no changes to the build system in that one, only libvori itself.
Maybe, that disables AVX for any case, because I misunderstand the logic.
That enables it, actually, which is the opposite of what we want: a part of libvori (the part from voro++) is broken when AVX vectorized. CMake should check whether the compiler supports -mavx and if it does we can assume it enables it with -march=native (if supplied by the user), which is why we're going to add -mno-avx to disable it, overriding any option the user may have given.
A different take on it could be:
@dev-zero Thanks for the clarification. I will check, if AVX is really disabled.
