Note that the result has to be a (complex, cirq.Pauli/cirq.PauliString]) tuple, because there may be an imaginary phase.
For example, cirq.Pauli.X * cirq.Pauli.Y should return (1j, cirq.Pauli.Z).
What should the cirq.Pauli result be when you're squaring?
@bradyb The identity. It's not implemented in cirq.Pauli so i'm curious as to how we'll deal with that.
I would make the result type Tuple[complex, Optional[Pauli]] and use (1, None) to represent the identity.
What do you think about
Then multiplying the matrices as they come through __mul()__ and returning the appropriate Paulis as Tuples?
The multiplication rules are quite simple; there's no need to go to the matrix arithmetic. Let r(I) be 00, r(X) be 01, r(Z) be 10 and r(Y) be 11. Then r(A*B) = r(A) xor R(b). Then you have to account for the sign of the product, which is based on the cycling direction: s = 1j if A < B else -1j if A > B else 1. That's the entire multiplication logic.
