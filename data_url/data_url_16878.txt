The mcrx gate for angle pi should (if I'm not mistaken, be equivalent to cx. This means it should be described by the matrix
However, the gate seems to introduce unwanted phases, making the effect seem to be better described by
So it is perhaps more of a controlled-Y than controlled-X.
See this notebook.
For example, the following should rotate |01> to |11>,
Instead it rotates it to -i |11>
mcrx is not equivalent to mcx because the RxGate cannot generate an X gate, only an +/-iX gate.
RXGate(a) = exp(-i * 0.5 * a * X), and so RXGate(pi) = -iX
Hence CRX(pi) = I ⊗ |0><0| -iX ⊗ |1><1|  so the returned matrix/final state looks correct to me.
Hi @quantumjim
Is #3536 (comment) solving this issue?
I suppose this comes down to a conflict of convention. Both for mcrx, and for my proposed inclusion of crx in #3535.
The current convention seems to be that that crx acts the same as rx when the control is |1〉, but I'd prefer the convention that crx acts as  cx when theta=pi.
I suppose the current convention is consistent with that for cu3, as set in #2755. So I guess I am probably in the minority here. But perhaps we can add a note in the docs to clarify?
@quantumjim I disagree strongly. Rx gate is well defined as exp(-1j * theta * X/2), so any added crx/mcrx gate should use that convention.
This will be better documented in PR #3472 which actually adds the matrix definition for every standard gate to the API documentation. After that PR is finished you can set the phases on gates so you could always make your own controlled gate of RxGate(theta, phase=pi/2) and then you could use that to generate a correct CX gate at theta=pi
That looks great, and will serve the purposes of difficult people like me ;)
