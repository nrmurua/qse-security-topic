Namespace packages allow for a single package to be split into multiple sub-packages, which can be distributed, installed and used independently.
The advantage of this approach is that we could make pulser a namespace package and pulser-simulation a subpackage, which would allow us to keep the from pulser.simulation import ... imports unchanged. It would also mean that all the other modules would be moved to a pulser-core subpackage. We would thus move from this:
to this:
When pulser-simulation and pulser-core are installed, their contents would then be located under the pulser namespace package.
As far as I could tell, not being able to have an __init__.py means that we have to drop the direct imports from pulser (like from pulser import Sequence), which would defeat the purpose of keeping existing code working. I haven't experiment with this yet, so perhaps there is a way, but if there is it is obscure. If there is indeed no way to do this, I would say this makes this approach unviable.
This is a more straightforward solution, which would essentially just extract the simulation module and keep the rest the same. In this case, the file structure would look something like this.
As it is, this approach will have the inconvenience of requiring that all imports of pulser.simulation be changed to pulser_simulation. I think a workaround here is to keep an empty simulation module inside pulser with only an __init__.py containing code that checks if pulser_simulation is installed and imports the relevant classes from it (i.e. Simulation and SimConfig). I think this would be fine for now, I'm not so sure it's something we would like to keep forever or deprecate at some point.
