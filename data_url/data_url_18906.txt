@zachschoenfeld33
rangeDefinition allows omissions according to the g4 file. I think clear definition is necessary.
What is the default value of first expression? I guess it is 0 (because live-spec shows [0:2:20] example) or 1 (because of inclusive manner)
I agree.
What are acceptable patterns? From the grammar, [:] looks acceptable. But I guess end is always necessary, then [1:5], [1:1:5], [:5] and [::5] are acceptable.
I think this seems reasonable.
Another question related to rangeDefinition is about setDeclaration.
setDeclaration allows Identifier. Maybe it is an variable. However, OpenQASM3 does not have array type. If Identifier is specified, is it the same with[:Identifier] of rangeDefinition assuming the type of this variable is int?
The idea for slicing appears to come from Python arrays/numpy. In Python, [:] represents all elements.  I don't see any reason not to allow this here. elements. I don't see any reason not to allow this.
With [a:c:b], continuing along those lines, I think the defaults should be: a=0, c=1, b=NUM_ELEMENTS (c=1 is explicit in the spec).
I would argue that combination deriving from these defaults should be valid.
Another question related to rangeDefinition is about setDeclaration.
setDeclaration allows Identifier. Maybe it is an variable. However, OpenQASM3 does not have array type. If Identifier is specified, is it the same with[:Identifier] of rangeDefinition assuming the type of this variable is int?
Yes the Identifier is for variable such as x in a. In rangeDefinition expressions are allowed, which in principle could be an Identifier, however the compiler would have to throw an error during semantic analysis--in rangeDefinition, the expressions should be numeric. Not sure if that answered the question.
On a side note, I actually think it would be good to allow array types (as that's what these ranges really are), but will have to open another issue for that.
I started discussion about an array for an indexset of a loop in #137.
A remaining question is a type of a loop variable. In the spec, it is immutable and integer. const int[64] is reasonable if const is a type modifier (currently, it is a type of constant double-precision floating-point nuber).
Closing (agreed w @hhorii )
