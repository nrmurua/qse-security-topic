I am trying to use Qiskit's implementation of VQE algorithm, but the code is running surprisingly slowly. Upon examining the profiling output, I see that ~90% of runtime is spent on waiting to acquire a lock object, as can be seen on the attached screenshot. This seems to originate from internal VQE parallelization.

Profile the following code:
The code should run much faster.
An option to turn off internal parallelization would be nice.
Are you sure that the algorithm should run much faster than this?  I haven't looked into this much at all, but the wait to acquire that lock is actually just waiting for the job to finish - the internal simulation job is spawned onto an async worker, and it looks like you're just seeing that block and wait for the result to arrive.
If you change your Estimator to from qiskit_aer.primitives import Estimator (i.e. use a high-performance simulator), you'll hopefully see the wall time drop significantly.
Well, I have my own implementation of a simple state vector simulator, and when I was comparing the time to simulate individual circuits with fixed parameters, qiskit was many times faster than my code (as calculated with qiskit.primitives.Estimator). But then I switched to parameter optimization tests (i.e. VQE), and to my surprise qiskit became even slower than my code, which basically just uses the same optimize.minimize that I gave to VQE. This is why I think that there's something weird going on with the performance of VQE, but I am not really sure what it is.
That's fair - I can't answer any further than this really, because none of this code is in my area.  I'll tag this as "algorithms", and one of the algorithms team can hopefully answer / point you to the right place.
You mention going from fixed parameters to VQE - the optimization (done by VQE) with variable parameters has additional overhead. VQE has no parallelization as such (it can group evals for the Estimator but that that is only with specific optimizers and will not be the case with an external scipy one). You could simply use the circuits and the optimizer with a cost function as shown here https://qiskit.org/ecosystem/ibm-runtime/tutorials/vqe_with_estimator.html to take VQE out of the equation so its the same tools and see what that does for you. The only threading as such is done by the Estimator in the PrimitiveJob - it appears in your picture - as it uses a thread pool for results. That thread pool would come into play though any time you use the Estimator whether fixed parameters or not though.
You're right, I tried to do a plain optimization loop, but I still had the same issue, which means that VQE has nothing to do with it, so I assume this can be closed.
