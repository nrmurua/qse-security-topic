Description of the issue
Clifford Tableau is used in the Clifford simulator. Except the simulation usage, Clifford tableau can also be used to represent a general n-qubit Clifford gates, which is not supported in cirq yet. This means we need to import tableau in the ops files to define general clifford gates. However, to avoid circular import issue, cirq/sim is not supposed to be imported in the top level of cirq/ops files. As discussed in cirq-cynq meeting, the easiest solution is move the Clifford Tableau out of cirq/sim folder. (Partially, also because Clifford Tableau itself is just a state representation not simulation.)
Question is where should we move it into? cirq/qis or cirq/value seems to be the good place.
+1 to cirq/value
I am torn between value and qis, I feel like this is more qis, but I'm okay with value too...we have state related info in both, but qis is more for "methods" while value is more for primitive values in my mind.
+1 from me for cirq/qis
The other question is how do we orchestrate moving a class without it being a breaking change?
As to where, how about we say things should go in qis if it's something that you'd find in a textbook, or value if it's something specific to cirq?
The other question is how do we orchestrate moving a class without it being a breaking change?
I don't think it will be a breaking change. Internally, changes the file location and the relevant import path. Externally, nothing changes, it is still cirq.CliffordTableau. Do I miss something?
As to where, how about we say things should go in qis if it's something that you'd find in a textbook, or value if it's something specific to cirq?
I like this point of view. I incline to +1 cirq/qis.
If users usually just import all of cirq that's fine. If users frequently import submodules individually then this could cause breakages.
We have in the _compat module things for this, @deprecated for functions, @deprecated_class for classes for example.
I would recommend doing the deprecation just in case someone is using the submodule import path, it's pretty cheap in the end.
