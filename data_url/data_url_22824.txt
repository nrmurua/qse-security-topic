Qutip is a great package and it provides many, very useful functionalities for quantum mechanics. One of the main things it can do is represent a quantum system with the qobj class. A  qobj object is not much more than a numpy ndarray but it has some problems. Doing operations on qobjs is much slower than simply working with a numpy array (I would say around ~15 times slower on average, obviously depending on what you're doing and how much), also it manages memory worse and uses system resources less effectively. To be fair, numpy is one of the most used python packages in the world so obviously it's super optimized.
Anyway, for pyEPR, qutip is used on around ~10 lines and everything it is used for can be done with a numpy array without really changing the code much. I got this idea when I tried analyzing 10 modes and qutip returned and overflow error, and I think switching to numpy might help solve this problem. And as a bonus there won't be a dependency on the qutip package :)
All of the uses of qutip are one of these:
I might do it myself later today, tell me what you think.
I removed the need for qutip from the package. I've did some testing on it and it worked  but since this could really break the library if done incorrectly I've pushed it into a new branch remove_qutip until we do enough testing to merge with master. Please check that and see if it works for you.
Yeah we should probably write some unit tests so we can make sure everything is correct. This would also be nice in the future, so we can make changes without being afraid that something broke along the way.
