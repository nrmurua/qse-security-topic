Is your design idea/issue related to a use case or problem? Please describe.
This is a refactor instead of solving a particular use case / issue.
Describe your design idea/issue
With Google device construction being revisited to leverage cirq.Gateset for validation, it would be useful to move circuit serialization (cirq_google.CircuitSerializer) and deserialization on server side to take advantage of Gatesets as well, to (1) stay consistent with the device flow in principle and (2) to reuse some of the machinery from the device flow (e.g. the GateFamily lookup table for all device gates).
The current serialization logic works well and is consistent with the planned validation logic, so there's no urgent need for any change. This suggestion is a refactor to simplify the logic. For example:
IIRC it was a deliberate decision to decouple program serialization with validation, and to move the program proto to hardcoded gate types. What was the rationale? This proposal is certainly missing half of the story :)
cc @dstrain115 @maffoo @MichaelBroughton @tanujkhattar
I definitely think we should keep the separation between serialization (how do we send gates over the wire) and gatesets (what gates are allowed on a particular device). We will also need a way to serialize gatesets so that we can query the service to find out programmatically what gates a device supports, but I don't think we should go back to the old way of coupling that tightly to gate serialization itself (e.g. using strings to identify gates, and allowing each gateset to define its own set of strings everywhere).
I just put up #4983 to use CIRCUIT_SERIALIZER as the default serializer for quantum engine, which goes in the direction of my last comment (and opposite the proposal in the issue) by using the new-style circuit serializer everywhere. When running a circuit on quantum engine we have a sensible default for the proto version and IMO this should include a sensible default for gate serialization (this is just the protocol used to communicate with the service). Asking what gates the device itself supports (e.g. what cirq.Gatesets it has) and compiling to that gateset should be a separate concern.
Also in favor of keeping these things decoupled. We've had issues in the past when we paired up the previous iteration of "Gatesets" in cirq_google with serialization and it was not great.
Keeping them decoupled sgtm. There's a chance supporting serialization may complicate the generation of Gatesets from DeviceSpecification, and may also lead to tight coupling of DeviceSpecification and Program protos.
