A Layout object can only be instantiated from the Qubits of a particular circuit. i.e. if the intention is to lay the i'th qubit of the circuit on the j'th qubit of a coupling_map, this would be written as qr[i] -> j
However the qubits in a circuit are completely ordered (regardless of how many registers there are). So the Layout should not necessarily depend on the Qubit within that circuit --- just an integer should exactly specify that qubit.
The reason this is important is that the SetLayout transpiler pass takes a Layout which in turn requires the circuit Qubits. So a PassManager cannot be created independent of the circuit. This is against the design principle of PassManager which is supposed to be created once and run on many circuits.
Instead one should be able to create SetLayout like this:
I completely agree that Layout should be constructed like this, and the times we now use Rust in layout and routing passes e.g. StochasticSwap, the Rust struct we use is two arrays of integers.  We need to change the API a little to have this work right, though - currently Layout.__getitem__ (and a host of other methods) infer whether you passed a virtual or physical qubit based on the input type.  We should get rid of that anyway, because it's really slow for such an inner-loop structure (to the degree that it's faster to completely copy the structure than to swap two elements), but this is one more reason to do so.
The reason this is important is that the SetLayout transpiler pass takes a Layout which in turn requires the circuit Qubits. So a PassManager cannot be created independent of the circuit. This is against the design principle of PassManager which is supposed to be created once and run on many circuits.
I agree this is something to fix. It seems to me that SetLayout should only be called only when initial_layout is provided to the level. That should make the PassManager independent, right?
It seems to me that SetLayout should only be called only when initial_layout is provided to the level. That should make the PassManager independent, right?
not sure what you mean. By "level" if you mean preset passmanager levels, I think that's not the issue. I think SetLayout should be constructible from a simple integer list for the layout, independent of whether it's in a preset or custom passmanager.
Its been close to a year, are there any updates on this issue? This expect issue is a blocker for qiskit-experiments for switching to using pass managers, since an initial layout needs to be specified as an integer list to the generate_preset_pass_manager function.
To get pass managers to work with int list initial_layouts in the current form I hacked the SetLayout pass like this to borrow the transpile arg parsing and use it to generate the Layout on the fly based on dag registers:
Just for reference I hit this in trying to slim down the transpile() function in: #10291 My workaround there was to do something similar to @chriseclectic's suggestion (just a bit smaller in scope) and deferred the int list initialization until SetLayout.
