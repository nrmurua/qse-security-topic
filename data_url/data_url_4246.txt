In MainEngine, there is this line:
Why is this done? It seems like anytime this would get triggered and matter, something very bad must have happened (e.g. printing gate stats without flushing the engine first) and we're about to compound the problem by running more logic on a known-corrupted state.
This line also acts as a de-facto memory leak in python 2. In a long ipython session there will be more and more engines kept alive by this logic. Those engines may have cached transformations or collected stats that use enough memory to matter.
Also it can cause code to run after tests fail, potentially writing debug data unrelated to the failure into the console, swamping out the actual failure reason (e.g. I've noticed test failures usually trigger a wall of warnings about qubits not being deallocated properly).
As I've previously mentioned, there is a problem with final cleanup vs garbage collection if qubits are not allocated inside a function scope. Thus, removing this will cause the following program to output nasty error messages in Python3 (not every time though)
The reason is that module names are assigned None although they might still be used (when sending Deallocate gates).
Could you elaborate on why this is a memory leak? I'd think that all allocated memory is freed (eventually).
