Application
It might be useful to have a more powerful/general formatting object that allows users to customise their printing in-place.
This would generalize the feature added in #370
Proposed Solution
Perhaps something like
Additional Context
@randomir
Let's add the stand-alone formatter class, but
Plug it into pprint's dispatch for SampleSet.__repr__. It's so much better to have the standard pretty printer (and formatter, pformat!) working by default/out-of-the-box.
So I have looked into this more and I think this might not be what what we're looking for, specifically because "The pprint module provides a capability to “pretty-print” arbitrary Python data structures in a form which can be used as input to the interpreter." (link, emphasis mine). So I think it makes sense to make the repr pretty-printable but that is different than the feature introduced in #370 which does not purport to make a string that is interpretable.
The other problem is that numpy arrays do not respect the PrettyPrinter so we would need to write our own hook for pretty printing numpy arrays. I looked into using numpy's array2string which has some of the functionality we need (like prefixes) but that doesn't work very well for record arrays (it doesn't respect line width with record arrays for instance).
Here is the implementation for the record
Not sure if this is worth doing just to get nice indentation of the sampleset object. It works pretty well but I don't find it significantly more readable that the normal version. Also suffers from some of the problems mentioned above (does not respect max width etc). Example output:
It also is not quite right (does not have the field names).
I agree that such output is not too valuable.
But the following sentence(s) (after your quote) give as more options:
If the formatted structures include objects which are not fundamental Python types, the representation may not be loadable. This may be the case if objects such as files, sockets or classes are included, as well as many other objects which are not representable as Python literals.
Alternatively, we could print a more readable output, not a direct representation of numpy recarrays, that is still a valid Python expression.
Anyway, we don't have to spend too much time on this. Having nice readable text description of the sampleset (that we already do) is highly valuable. Having it as a valid Python expression is just a plus.
