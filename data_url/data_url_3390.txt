Converting CNOT(2,3) to native gates representation (RZ,CZ,RX) assigns the action between qubits 7 and 8. There are other permutations also which produces action on 7 and 8 like CNOT(1,3).
from pyquil.api import get_qc
from pyquil.quil import Program,Pragma
from pyquil.gates import  CNOT, RESET
qc = get_qc("9q-square-qvm")
p = Program(RESET())
p = Program(CNOT(0,1))
np = qc.compiler.quil_to_native_quil(p)
print("Native for CNOT(0,1)")
print(np)
print("")
p = Program(CNOT(1,2))
np = qc.compiler.quil_to_native_quil(p)
print("Native for CNOT(1,2)")
print(np)
print("")
p = Program(CNOT(2,3))
np = qc.compiler.quil_to_native_quil(p)
print("Native for CNOT(2,3)")
print(np)
print("")
p = Program(CNOT(3,4))
np = qc.compiler.quil_to_native_quil(p)
print("Native for CNOT(3,4)")
print(np)
print("")
Native for CNOT(0,1)
RZ(-pi/2) 1
RX(pi/2) 1
CZ 1 0
RZ(pi) 0
RX(-pi/2) 1
RZ(pi/2) 1
HALT
Native for CNOT(1,2)
RZ(-pi/2) 2
RX(pi/2) 2
CZ 2 1
RZ(pi) 1
RX(-pi/2) 2
RZ(pi/2) 2
HALT
Native for CNOT(2,3)
RZ(-pi/2) 7
RX(pi/2) 7
CZ 7 8
RX(-pi/2) 7
RZ(pi/2) 7
RZ(pi) 8
HALT
Native for CNOT(3,4)
RZ(-pi/2) 4
RX(pi/2) 4
CZ 4 3
RZ(pi) 3
RX(-pi/2) 4
RZ(pi/2) 4
HALT
Operating System: OSX
Python Version (python -V): python3
Quilc Version (quilc --version): 1.11.1
QVM Version (qvm --version): 1.11.0
Python Environment Details (pip freeze or conda list):
antlr4-python3-runtime==4.7.2
appnope==0.1.0
attrs==19.1.0
backcall==0.1.0
bleach==3.1.0
certifi==2019.9.11
chardet==3.0.4
cycler==0.10.0
decorator==4.4.0
defusedxml==0.6.0
entrypoints==0.3
future==0.17.1
h5py==2.9.0
idna==2.8
immutables==0.6
ipykernel==5.1.2
ipython==7.7.0
ipython-genutils==0.2.0
ipywidgets==7.5.1
jedi==0.14.1
Jinja2==2.10.1
jsonschema==3.0.2
jupyter==1.0.0
jupyter-client==5.3.1
jupyter-console==6.0.0
jupyter-core==4.5.0
kiwisolver==1.1.0
MarkupSafe==1.1.1
matplotlib==3.1.1
mistune==0.8.4
mpmath==1.1.0
msgpack==0.6.2
nbconvert==5.6.0
nbformat==4.4.0
networkx==2.3
notebook==6.0.0
numpy==1.15.0
pandocfilters==1.4.2
parso==0.5.1
pexpect==4.7.0
pickleshare==0.7.5
prometheus-client==0.7.1
prompt-toolkit==2.0.9
ptyprocess==0.6.0
PubChemPy==1.0.4
pycairo==1.18.1
Pygments==2.4.2
PyGObject==3.34.0
pyparsing==2.4.2
pyquil==2.11.0
pyrsistent==0.15.4
pyscf==1.6.3
python-dateutil==2.8.0
python-rapidjson==0.8.0
pyzmq==18.1.0
qtconsole==4.5.2
requests==2.22.0
rpcq==2.7.3
ruamel.yaml==0.16.5
ruamel.yaml.clib==0.1.2
scipy==1.3.1
Send2Trash==1.5.0
six==1.12.0
sympy==1.4
terminado==0.8.2
testpath==0.4.2
tornado==6.0.3
traitlets==4.3.2
typing==3.7.4.1
urllib3==1.25.6
wcwidth==0.1.7
webencodings==0.5.1
widgetsnbextension==3.5.1
Hi, thanks for reporting!
I think this is expected behavior. Were you expecting the compiled gates for CNOT(2,3) to act on qubits 2 and 3? Or some other output?
The compiler will emit native 2q gates that act on adjacent qubits. I believe the qubit topology for the 9q-square-qvm looks like this:
Since there is no direct link between qubits 2 and 3, the compiler will "rewire" your program so that the 2q gates can act on adjacent qubits (7 and 8 in this case).
If you switch to a fully-connected topology, then the compiler doesn't have to rewire anything:
Output:
Does this match the output you were expecting?
Link to docs with some more info about device topology:
http://docs.rigetti.com/en/stable/migration2-qc.html#QuantumComputers-have-a-topology
Yes, it matches the output. Thank you
