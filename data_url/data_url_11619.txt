Type the above
The - should be +
Y.eval('111') is apparently intended to apply Y to each qubit in the string. The logic for computing the coefficient (not coeff) of the Pauli group element is incorrect. The phase (factor of -1) is computed correctly. But, the power of i is computed as if there were a single tensor factor of Y, whereas it is implicitly repeated.
I have a PR to fix this ready to go.
But, I think the design (or behavior) may need to be reconsidered.
TLDR; I suspect that Y.eval('111') returning an incorrect result rather than raising an exception is unintended. If no one comments here soon, I will make a PR to disallow this input rather return the same value as (Y^Y^Y).eval('111').
Eg. with a PR,  Y.eval('111') and (Y^X).eval('11') will both give the correct result. In general, replacing Y and  X by other Paulis, and 111 by a bit string of the same length will work. However, the simple fix I have in mind will not work for (Y ^ Y).eval('1111') because the  current mechanism relies on numpy broadcasting. And broadcasting f(a, b) where a is of length 2 and b of length 4 does not work (ie a is not duplicated). We could check for this and duplicate by hand. But, I am beginning to suspect that Y.eval('111') not only currently does not give the correct answer, but that it was never intended to give an answer at all. That is, these inputs were not forseen and should be considered illegal. In this case rather than "fixing" the problem in this issue, implicitly duplicating the operators should be disallowed. In particular, Y.eval('111') should raise an error with a message stating that the number of qubits in the operator and in the bitstring are not equal.  I favor the latter behavior if no code currently does things like, say, X.eval('111')
The PR linked above fixes this issue. But, the original comment in this issue misunderstands the problem: In fact Y.eval('111') should raise an error because a one-qubit op cannot be applied to a 3-qubt register. There is no (and should be no) implicit repetition or embedding of the operator Y.
