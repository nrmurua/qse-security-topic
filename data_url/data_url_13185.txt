OperationRepresentation and NoisyBasis objects are necessary to apply PEC with Mitiq.
The aim of this issue is to improve their structure such that PEC can be applied by users in a simpler way.
Currently the user needs to define NoisyOperation objects,   a NoisyBasis and an OperationRepresentation .
Is it possible to reduce the number of objects the user needs to initialize? E.g. is the current NoisyBasis object useful? Can we replace it with a simple list of NoisyOperation(s) ?
Currently, the elements of the noisy basis are stored as a Python set.  The rationale is reasonable but this has some important disadvantages: it would require the definition of an hash function for noisy operations (currently not defined) and, most importantly, we don't have a fixed ordering which would be quite useful feature.
For example, one often deals with a quasi-prob distribution (coefficients) or with a prob. distribution (OperationRepresentation.distribution()), but it is not clear what is the corresponding ordered list of noisy operations. Moreover it is quite confusing that, running the code twice, can produce two OperationRepresentation objects that are equivalent but have different distributions due to the different ordering.
