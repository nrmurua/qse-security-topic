There should be a simpler method for adding custom EEM modules, without requiring acceptance into ARTIQ mainline (e.g. plugins for EEMs). Sort of a follow-up to #1403, which was accepted but had a regression in ARTIQ 6 with the requirement of a JSON file to match the schema.
Group X creates a custom EEM module to interface with a custom HW device Y. Several internal groups want to use the same software, but Y hasn't been open-sourced, so it's not appropriate for ARTIQ. The JSON board description makes sense, b/c most of the hardware is standard Kasli EEMs, but for the Y EEM. Such an issue leads to PRs like #1800, which have the downside that they are slow to be integrated, require outside approval for something that's slightly experiment-specific, and typically require waiting for a new ARTIQ version before being able to be used.
The main issue is that there's not a clear path for adding out-of-tree EEM support, and it feels that adding out-of-tree EEM support is made extra difficult by the requirement that JSON files match the standard ARTIQ Kasli schema.
Proposed solutions (some/any combination of these would be great):
As a partial attempt to do the documentation suggested above:
All of the above can be seen (less well-organized) in https://github.com/drewrisinger/entangler-core/blob/634ed112649dd1e26b48d92700a07321231aa86c/entangler/kasli_generic.py if users would like an example.
What about adding a special EEM type to the JSON schema where you'd specify an external plugin (Python file/module)?
What about adding a special EEM type to the JSON schema where you'd specify an external plugin (Python file/module)?
Yes, I mistakenly left any sort of plugin infrastructure out in my suggested solutions above. That sort of solution would be great. I assume the peripheral_processors[...] = peripheral_custom modification would still be needed in that case, so it's not an all-in-one solution? But otherwise sounds great. Edited suggested solutions above to add plugin suggestion
That sort of solution would be great. I assume the peripheral_processors[...] = peripheral_custom modification would still be needed in that case,
I haven't looked into implementation details and how much needs to be changed/refactored. But the plugin solution should be doable.
