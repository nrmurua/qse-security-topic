m_memory is currently not thread-safe (for example when sampling memory inside a bigger OMP loop) and does not support macOS. While we could make it threadsafe, it might be a good opportunity to switch over to the POSIX API getrusage (same for the more extended one).
This can happen in 2 ways:
This is somewhat orthogonal to what #630 proposes
I agree that we should stick to the POSIX standard whenever possible. I'm a bit hesitant to give up on #630, because knowing the true peak memory could be quite useful. However, I'm not sure if it would justify having two separate implementations for Linux and MacOS.
For the record, it would be rather easy to make the current implementation thread-safe: If we use C then we don't have to worry about hard coded unit numbers. And m_memory_max won't be needed anymore if we do #630.
In any case, I'd prefer to have a C wrapper. The added complexity is a small price to pay for the gained robustness.
I agree that we should stick to the POSIX standard whenever possible. I'm a bit hesitant to give up on #630, because knowing the true peak memory could be quite useful.
They are not mutually exclusive (as I wrote, these 2 issues are somewhat orthogonal).
In fact, the VmHWM is part of the set of data returned by getrusage:
For the record, it would be rather easy to make the current implementation thread-safe: If we use C then we don't have to worry about hard coded unit numbers. And m_memory_max won't be needed anymore if we do #630.
Hardcoded units is not an issue anymore with F2008 since we could use newunit.
The other way would be to make it an OMP critical zone.
In any case, I'd prefer to have a C wrapper. The added complexity is a small price to pay for the gained robustness.
Ok.
In fact, the VmHWM is part of the set of data returned by getrusage.
Sorry, I missed that. In this case there seems to be no downside to getrusage.
Hardcoded units is not an issue anymore with F2008 since we could use newunit.
Neat! I didn't know about newunit yet.
