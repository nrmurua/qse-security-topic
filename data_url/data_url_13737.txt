I propose to change the names of the qiskit and pyquil sub-folders as they can be confusing.
We could rename them to something like qiskit-utils and pyquil-utils, what do you think @willzeng @rmlarose @andreamari?
(More in general, but to be discussed elsewhere, I have some comments on the nested structure of the the packages and tests, and on the fact that different folders, which then become packages, have modules with same name, such as test_zne.py in pyquil and top level, although that maybe is just a remnant of previous name changes.)
Partly related, an error occurring in #96 may be related to this, with a conflict between mitiq.qiskit and the real qiskit.
In general duplicate names can generate bugs also at function level, e.g., sometimes occurring in scipy.linalg, scipy.sparse.linalg, numpy or scipy.
We'd want to avoid something too convolute such as
A solution may be with import commands in the __init__.py files of subfolders, e.g.,
Introducing __all__ at the beginning of each module may help with this, ensuring
works fine.
The __all__ sets can also be useful to quickly check the components of a module, e.g., __all__=['random_identity_circuit','run_with_noise'] inside qiskit_utils.py.
One downside is that one needs to remember to add each function to the top of the file after modifying the code. The upside is that this way it can also be quicker to check where a function is. It can help keep the documentation up to date and more customizable since, instead of using the current command automodule, one can call separately function and classes in the API-doc, checking these include all objects of all (I'm sticking to automodule in the docs now, as we are likely to keep shuffling stuff; in future we could also use sphinx-autogen).
Some do not like flooding the init files with stuff, as it can make the loading of all modules slow. We could thus just do the imports in the subfolders inits.
+1 on renaming these directories, I've been meaning to suggest this as well.
I propose mitiq-qiskit and mitiq-pyquil. I think this denotes the purpose as the bride between Mitiq and Qiskit/etc. the best. (Just as OpenFermion-Cirq denotes the bridge between OpenFermion and Cirq.)
Indeed from mitiq.mitiq_qiskit import blah is more verbose, but not overly so I don't think.
That's fine for me, and indeed goes into the direction of APIs that, eventually, can be spun out of the mitiq core library, if needed, in the future, e.g. if it becomes too heavy or if we want to keep mitiq installation as lean as possible (qiskit and cirq do install a lot of stuff).
Hyphens are forbidden in module imports, right? I don't know the standard practices, but you propose to use mitiq-qiskit in the folder and then set an identity to mitiq_qiskit? What if we use a folder name that is the same, like mitiq_qiskit? I really have no clue of what's usual practice. Anyhow I'm happy to open a PR on this.
+1 to 'mitiq_qiskit' and 'mitiq_pyquil'
