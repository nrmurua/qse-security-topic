Presently, the nonlocal_games/xor_game.py file has functions classical_value and quantum_value that are responsible for computing the classical and quantum value of a nonlocal game, respectively.
This task would include the ability to also compute the non-signaling value of an XOR nonlocal game. This value serves as a natural upper bound to both the classical and quantum values.
This would be included in the xor_game.py file with the function name nonsignaling_value. Proper tests would also need to be in place as well for known non-signaling values of given XOR games. For instance, it is expected that the non-signaling value of the CHSH game is equal to 1.
Hi,
I was having a look at this issue and I noticed that there is already a non-signaling function for the more general nonlocal games class.
I am not aware of any way to compute this value specific to XOR games that is more efficient than the general case - do you think it would be a good idea to instead build a function that converts XOR games to general nonlocal games, which can then be called by the nonsignaling_value function in xor_game.py to create a temporary object used to reference the already existing implementation?
While this would take slightly longer because of the conversion step, it would reduce the risk of bugs that comes from re-implementing the function from scratch - I don't necessarily think I'm experienced enough with CVXPY to be confident in my ability to deliver any such function bug-free.
Julius
Hi @juliusw352
Right, as far as I am aware, I don't believe there is any more efficient way of calculating the non-signaling value for XOR games vs. general nonlocal games.
I think you have the right idea here--basically, we would need some type of helper function that could convert an XOR game to the general nonlocal game format. From there, as you said, I think it would be a matter of piping that into the nonsignaling_value function (here) to compute the value.
I don't imagine the conversion step to be particularly time or resource intensive. The bottleneck would be in the actual SDP solver and the conversion would probably just be a few loops to convert the format of the input from an XOR game to a more generalized nonlocal game one.
Hopefully, that made sense. Do let me know if you have any further questions!
Closing as this was completed. Thanks again, @juliusw352 !
