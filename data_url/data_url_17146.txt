The following circuit is not correctly justified, the first U2 after the measure appears in its own column, rather than underneath the other U2.
It seems like this example has the same issue (last round of H):

The file to examine for the bug is qiskit-terra/qiskit/visualization/text.py
I think the error is likely to be in qiskit-terra/qiskit/visualization/utils.py in the method _get_layered_instructions() as I am seeing the bug in both the mpl and the latex outputs too. It is probably an error with the way the layers are being generated rather than drawn.


print(qc.draw(justify='right')) works as expected. left the default and none are broken.
Ditto circuit_drawer. Try:
I have examined the code and have enough of a handle on this that I can fix it .IF. I am sure I knew what is intended by left, right, and no justification.  I do think I understand, but want to be sure.
Can someone please clearly enunciate the definitions?
Furthermore, I don't understand the "expected behavior" in the original report: There are 2 u2 operations on q1 after the cx and before the measure, so shouldn't there be a "hanging" one to right of the stacked u2s and before the measure? And likewise, the "hanging" u2 seems to have moved over to the right of the measure ... is this really the "expected behavior" of diagramming the circuit generated by the qasm code given?
print(qc.draw(justify='right')) works as expected. left the default and none are broken.
Ditto circuit_drawer. Try:
I was wrong, I believe now the only one that appears to be correct is none justification.
@jwoehr the justifications are to enable you too see the ASAP/ALAP layouts of the circuit. left means all the gates are drawn in the circuit as far to the left as possible, so the ASAP ordering. right means they are drawn as far to the right, ALAP ordering. none means each gate appears in its own column in the circuit.
The expected behaviour in the top example is that the two u2 gates are stacked on top of eachother, as regardless of the order they were declared in they can happen at the same time.
Okay, thanks, @maddy-tod , I will work on it.
The expected behaviour in the top example is that the two u2 gates are stacked on top of eachother, as regardless of the order they were declared in they can happen at the same time.
@maddy-tod, me still confoozed :)
There are 3 u2 circuits in the last stack before the measure in the example given, 1 for q[0] and 2 for q[1].
Are you saying the 2 for q[1] get superimposed, drawn on top of one another, so I only see one of the q[1] ops?
See, if I add an id op:
etc., it comes out very nicely both left and right justification, as expected, with both u2 operations showing:
No, this is about the column they are drawn to, they should never be superimposed.
In the example you gave, the right justify is not correct, as the first U2 gate is not in the column as far to the left as it can be. It should be directly underneath the other U2.
Now I'm more confused!
In your diagram above, how can the "extra" u2 on q[1] be to the right of the measure? It comes before the measure in the qasm code.
It is not directly following the qasm order, it is more looking at the topological order - aka which order the gates have to be executed in to stay consistent with the qasm.
Consider the circuit
When printed with left justify this follows the same ordering as the code.
but with right justify the Id gate is shifted to be in the second column.
even though the Id gate was declared before the H gates in the code. This is because with right justify we try to draw each gate as far to the right in the circuit, consistent with the code. As there is nothing else on this qubit it is ok to draw the gate in the final column.
Does this make more sense?
Okay, I think I was confused by the measure but since q[1] isn't being measured it doesn't matter where the second u2[q1] appears w/r/t the messure.
It seems like this example has the same issue (last round of H):
@1ucian0 , I recreate qasm for the circuit you illustrated above and test draw left, right, and none with this code:
The resulting output is show below. Am I correct that both left and right are incorrect (left for the reason you pointed out above, and right for the positioning of the last h q[3]) while none is correct?
Thanks, @maddy-tod
Given this source:
is this now correct for left-justification?
And ditto the question for this source and output, is this correct left-justification?
A little program to test this and 2 example qasm files representing the circuits we have been discussing.
lay.zip
@jwoehr Yes, both those examples are now correct as all the gates are as far to the left in the circuit as they can be
@jwoehr Yes, both those examples are now correct as all the gates are as far to the left in the circuit as they can be
Well, here is the punchline of the joke: That's what the code does when one calls for right justification!
Since none already works, I just have to
I think the issue is that the layers don't taken into account where the actual gates will be plotted
For example, of the last 3 columns, the first 2 are in the same layer, as all the gates could be executed in parallel. The last column is in a separate layer, as that contains gates that overlap with the previous two columns.
The required change would keep track of where in the column already contained gates, and use that to decide if a gate should stay in that column or not. I think the right justify works in a manner similar to this already.
So that change would still happen in utils.py _get_layered_instructions()?
Yes :)
@maddy-tod , I offer apologies for being so dull-witted here, but I find the programming problem trivial and the behaviour specification nearly impenetrable :)
Given the following qasm:
Here is the current behaviour of the various justifications. Are they correct? Can a "rule" be enunciated about the priority of a multibit gate w/r/t a single bit gate, or the priority of a measure over other operators?
Is even justifcation none correct in the above?
Incidentally, the bizarre output of utils.py _get_layered_instructions() as currently defined illustrates how tangled the code really is :)
I attach again the current version of my little program lay.py to test layer generation and draw output.
lay.py.zip
For justification right, the H on q_2 should be on the last time slice, not the first.
Question about DagCircuit:
Given the following Qasm source as qasm_src:
and then
_get_layered_instructions(q_circ, justify='none') simply does a
which comes out like this:
If you have a look at the DAG generated by the qasm you have given, it can be seen that the measure is independent of the cx and final h so it does not matter where in the list comes in relation to them.

According to the networkx documentation topological sorts are non unique, which means that both the qasm order and the order returned by the DAG are valid (along with many other potential orderings!). We have found that the order the nodes are returned can vary with python versions, but ultimately they are all valid orderings.
