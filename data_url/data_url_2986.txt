When I run the following test on the google3 version of cirq:
I get the following error:
The error also occurs if I use dtype='complex128' when specifying the initial state.
Sorry this was a mistake on my part. Just realized I was using numpy.complex128 instead of numpy.complex64.
Reopening because I think the simulator should be a little responsible for retyping the data to match its internal expectations. If a user happens to give a list of bytes that are all 0 except for a single 1, it should cast that to a complex64 appropriately.
Hm, not sure I agree, especially with a downcast.  Spotting when this does or does not create problems isn't simple and by yelling (as we do) if the type is wrong, we avoid hidden behavior.
If we want to allow upcasting from certain types, that is a different question but np.complex128 --> np.complex64 seems dangerous.
On the one hand, in general, I agree. One of the design mistakes in C was allowing implicit casts from long to float.
But, in the context of a simulator in a library focused on near-term hardware, even complex32 is kind of massive overkill. Single-precision floats have 24 bits ~= 7 digits of precision. In terms of hardware fidelity we'd be ecstatic to hit a fidelity of 4 nines, nevermind 7.
If a user is running into problems because we downconverted their complex128 to a complex64, they're going to really have a hard time on the hardware. Maybe we should push even harder and downconvert to complex32 to save a factor of 2 in memory usage.
Closing this one and opening #265 and #266 for these issues.
