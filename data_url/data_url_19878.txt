With #1618 CT testing toggles to testing the reference code. At the same time we enable building optimized code (activated in most use cases). If the optimized code for some algorithms doesn't have the CT property what about introducing a build option to request a "CT binary"? Optimized (and reference) code for those algorithms that have this property for both code types and reference code only where the optimized code is not CT.
I like this idea, and I think it could help us delineate the boundary between "production" and "experimental" versions. A "production" build of the library could include only those implementations (and schemes) which clear the constant-time tests, whereas an "experimental" build could include others which are included more for, well, experimental purposes and aren't held to the same standard.
