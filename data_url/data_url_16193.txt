It would be useful to be able to iterate over, or return a list of coefficients in PauliSumOp. At present, one has to dig into the details to construct the coefficients for each term. In particular, it requires multiplying two numbers for each coeffcient. There are use cases, for instance when bounding the eigenvalues of the operators.
For example, this gives a bound on the eigenvalues:
Abstracting access would be cleaner and resistant to implementation changes. Like this, if we want to return an numpy array
or this, if we return a list
This should be quite easy to implement.
https://github.com/Qiskit/qiskit-terra/blob/master/qiskit/opflow/primitive_ops/pauli_sum_op.py
Hello,
I'm pretty new to quantum, but I wanted to start contributing.
If this is the patch you were looking for, I can create a pull request.
Here's how it is working now:
Paolo
Thanks for jumping in. I don't think that patch gives the correct result in all cases. There are two "layers" of coefficients: pauli_sum.primitive.coeffs and a single number pauli_sum.coeff.
A list of the full coefficient might be generated like this: [c * pauli_sum.coeff for c in pauli_sum.primitive.coeffs]
Thank you for the additional info. Sorry I did not get it in the first place. So how about this?
that would return something like
Thanks, this looks good. Before making a PR, it would be a good idea to wait a bit to see if someone comments. There might be a reason to return a list rather than an array.
All right. Thanks a lot. I'll just leave this here for others to jump in and provide review/direction.
Thanks. Nice. I provide some discussion points.
Hi thanks for the comments.
instead of calling the tolist()
I don't have any experience with this matter, so forgive me, but I'd keep it simple and go with the basic implementation of returning the coeffs with a numpy array, since that is the type that is returned by the primitive object, and leave any typecasting/conversion to the caller.
So, here's what I have so far:
