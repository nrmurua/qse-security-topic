AbstractBlock interface now requires
Make the parameter system clear, use iparameters  for intrinsic (parameters in subblocks are not included) parameters and parameters for total parameters.
A intrinsic parametric block should implement
In this way, parameters, nparameters and dispatch! can have simple and uniform interface.
What's dispatch!!? we don't need to create a new API.
the problem of parameters can be resolved by adding type traits, and re-dispatch the methods. add a new API iparameters does not look like a good idea. By return iterators, we will be able to make parameters truly lazy.
dispatch!! is easier to implement, but it will pop out items from the vector/set. To make this API compatible, we need to rename it to dispatch!! In order to show it has two side effects.
While subtyping new blocks, iparameters is easier and clearer than parameters.
Imaging subtyping a chain like block, you have to iterate over subblocks to get parameters. But it can be automatically done since you have subblocks as the standard API for tree. You can even get rid of iparameter API if a block does not have any intrinsic parameters, which is impossible if you use parameter interface. Also, requiring a CompositeBlock not take any parameter (previous solution) is silly... This new API can solve many existing parameter related problems.
I don not think implementing dispatch!, parameters, cache and furture features such as qasm and autodiff case by case is clever. Now, with new design, you only need these APIs
I still don't understand, what's the difference? can you demonstrate what is a iparameter?
And I don't think this should be in v0.3 until we make this clear.
I don not think implementing dispatch!, parameters, cache and furture features such as qasm and autodiff case by case is clever.
What is this related to this topic? What do you mean case by case?
Imaging subtyping a chain like block, you have to iterate over subblocks to get parameters. But it can be automatically done since you have subblocks as the standard API for tree.
Current blocks returns an iterator, therefore, simply apply parameters to the iterator will return ANY block's parameters. What's the difference between your new iparameters?
You can even get rid of iparameter API if a block does not have any intrinsic parameters, which is impossible if you use parameter interface.
parameters can be set to Tuple{} by default, you don't need to implement this method if you don't have any parameters.
BTW, you don't say silly, this is not a good way to reply issues publicly.
I still don't understand, what's the difference? can you demonstrate what is a iparameter?
It is clear enough in the issue, we “use iparameters  for intrinsic (parameters in subblocks are not included) parameters”.  e.g.
For chain, iparameters returns (), for  RotationBlock, it returns (theta,). Every detail is in the code, feel free to find out more examples.
And I don't think this should be in v0.3 until we make this clear.
Refactoring is decided, details can be discussed.
What is this related to this topic? What do you mean case by case?
Quite obvious if you see the above dispatch!! function. The master branch contains old realization, one need to write dispatch! for composite, primitive , tagblock and sequence, and this realization is based on the assumption that a composite block/tag block does contain intrinsic parameters.
Current blocks returns an iterator, therefore, simply apply parameters to the iterator will return > ANY block's parameters. What's the difference between your new iparameters?
Current blocks interface is only for composite blocks. The difference between iparameters and parameters is answered above.
parameters can be set to Tuple{} by default, you don't need to implement this method if you don't have any parameters.
Not true for a composite block or a tag block.
BTW, you don't say silly, this is not a good way to reply issues publicly.
Thanks, but please focus on the issue. Please read the code carefully and ask more constructive questions, so that we can make this discussion fruitful.
For chain, iparameters returns (), for RotationBlock, it returns (theta,). Every detail is in the code, feel free to find out more examples.
Then it is the same with parameters, why not just use parameters?
It would better if you open a separated PR for refactoring dispatch! and parameters, I can't read a large PR with mixed implementation.
parameters for chain returns concatenation of parameters from subblocks. It counts recursively (I.e. all parameters in a subtree). iparameters is the net contribution of a node to tree.
The key point is the net parameter is more friendly for subtyping.
cloed by #138
