Lexes like
that possess no semantics and merely serve as road braille for the user should be admissible but optional.
E.g., taking an example from Quantum Gate Modifiers:
could just as easily be written
This observation does not apply to commas (,) used to separate gate parameter arguments which do possess semantics where expressions can appear.
Lexes like
that possess no semantics and merely serve as road braille for the user should be admissible but optional.
E.g., taking an example from Quantum Gate Modifiers:
could just as easily be written
This observation does not apply to commas (,) used to separate gate parameter arguments which do possess semantics where expressions can appear.
The comma operator has semantics.
What's the semantics of the comma? I may be wrong, but I'm having trouble imagining an example where a gate invocation would become ambiguous without the commas.
What's the semantics of the comma? I may be wrong, but I'm having trouble imagining an example where a gate invocation would become ambiguous without the commas.
The comma operator creates lists and/or enumerations. That's the semantics.
Arguments and/or parameters passed to functions, gates, kernels, etc. are lists.
My position is such commas should be "permitted but not required".
There is no parsing ambiguity omitting the commas (it seems to me).
The LALR syntactic list-iness of the qubit/qreg targets of a gate operation is not a concern for the user.
They are a list with or without the commas.
inv mygate(some, params, possibly, expressions) qx qy;
Again, I refrain from applying my plumb line to the commas separating parenthesized gate parameters because expressions might appear there.
My position is such commas should be "permitted but not required".
Noted.
The LALR syntactic list-iness of the qubit/qreg targets of a gate operation is not a concern for the user.
It is a concern to the compiler writer, and I am speaking as such.
Ha, @steleman ! As @taalexander has already found out, I have been lying in wait for someone to offer that justification!
In response, I quote to you from IBM's premier language designer of the 20th century:
The general principle is that very few people have to implement interpreters or compilers for a language, whereas millions of people have to use and live with the language. One should therefore optimize for the millions, rather than the few. Compiler writers didn't love me for that, because Rexx got to be a hard language to interpret or compile, but I think it has paid off for people in general, certainly programmers in general.
IBM Fellow Emeritus Michael Cowlishaw, A Conversation with Michael Cowlishaw by Jack Woehr,  Dr. Dobb's Journal, March 01, 1996
Hmm I tried this and the whole test suite passed.
The problem of permit-but-not-require commas in index identifier lists is probably more complex than this but it doesn't look intractable.
Anyway, I went further with this, but there is no point in proceeding if it's not of interest to the team. Commas, at-signs, (@), if the team wants them in the language, that's the way it's going to be.
