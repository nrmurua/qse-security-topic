Make a "comm log" that can record all communication to/from an instrument, something like:
I've added -> and <- to the written and read strings respectively to differentiate them.
Also add timestamps to each message.
As discussed in #145
cc @spauka @AdriaanRol
I think this should be centralised and implemented with the standard logging.
Like linux does in the system log.
Where users can specify a setting ( say: error, warning, info, debug), and qcodes attaches  ID (instrument, loop, process pid,etc)  timestamp and log message.
This should somehow be external (i.e.) not in the notebook, to avoid slow downs and memory hogging.
I very much agree with @giulioungaretti the qcodes core should not have to take care of logging and debug messages, and also not save it, it should be at a central place where we can filter, merge and read all the logs from the different things.
Then do a qc.logging('WARNING'), or qc.Loop(blah, logging='DEBUG') or volt.get(logging='INFO') to adjust the internal logging-levels.
I'd say qc.set_log_level('WARNING') and that's it! Every other part is responsible to decide what to log.
F.ex. a raw call is info level, so the it would be logging.ino(volt.get())  (ish)
Yes!
But it would be nice to only have one instrument log with debug enabled if we want to log that one instrument only.
And then not log the other stuff in debug mode
Right, so it seems like we need both log levels and separate loggers for each instrument, that all get collected into one log. But you're right, still sounds exactly like what the built-in logging framework is made to do.
I think it's a really bad idea to have per instrument log switches, it adds complexity to a) code b) use (one more parameter, one more test and so on).
If the logging is done right, one can easily filter by the instrument one is looking after.
we can try that, I just worry about performance and how easy filtering will really be for our users, what tool do you have in mind for this? Isn't it relatively easy to make them all separate loggers that are nevertheless controlled under the root logger?
@alexcjohnson  performance? Not sure I follow.
When debug mode is on, it should be ok for things to be slower.
If there are a lot of errors/warnings  then something is wrong in any case :D
I was picturing something like this:
logging levels intended to be read by users when using qcodes
logging levels intended to be read by users when developing qcodes
Not sure about the tool, depends on where/how we log :D
Side note in case I was not clear: every instrument (actually each part imho) should have a logger.
But the level should not be changed on the code itself (again, IMHO). At best by a config file (python logger supports that f.ex) in case it becomes really needed (like having 400 instruments logging ).
@giulioungaretti
When debug mode is on, it should be ok for things to be slower.
My experience with data acquisition software is that most of the standard software development practices tend to break down. Debug mode should always be on.
The reason for this relates to the fact that we are in general always trying out new things that don't work as expected. If something unexpected happens you want to be able to find out if it is due to QCoDeS (or some instrument) misbehaving or if you are looking at physics.
It is in general hard to reproduce things.
As for an example of what I mean with (some) standard software development practices break down take a look at development of the physical instruments, because we are talking hardware here and not software it is very hard to write self contained unittests. This is because it will always interact with the outside world which we cannot control perfectly (doesn't mean we shouldn't do unit tests but it makes it much harder to reach 100% coverage)
handled via logging module
