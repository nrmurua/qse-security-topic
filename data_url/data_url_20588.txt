Hi, I am an undergraduate student trying to use the OQS OpenSSL library for my project and I have some questions that I hope you can answer me.
Can I seek your clarification on what kind of TLS connection is set up (what data is communicated between client and server)  in the TLS demo of the readme file?
Personally, I created a self-signed root server where it’s signature algorithm is Falcon1024 and a  dilithium2 server where it is signed by the root server using Falcon1024. The following is the result that I got when I run the client and the server:


I don’t get why there is an error (underlined in red) as dilithium2_srv is not a self-signed CA because it is signed by the root CA using falcon1024.

Thank you very much and hope to hear from you soon!
Can I seek your clarification on what kind of TLS connection is set up (what data is communicated between client and server) in the TLS demo of the readme file?
Please see the man page of openssl option -www.
I don’t get why there is an error (underlined in red) as dilithium2_srv is not a self-signed CA because it is signed by the root CA using falcon1024.
You pass a file named dilithium2_srv.crt as a CAfile, i.e., the server cert if I understand right what you do -- what you ought to pass is the true CA file (the corresponding falcon cert file as per your description).
I also want to ask if OQS is able to create a certificate chain and then set up a TLS connection between client A and client B as shown above ?
Hmm -- I was tempted to simply say "Yes", but then I'm not entirely sure what you want to do: You are showing in your diagram something that looks like two server cert chains but then label the leaf certs "client". So, I wonder: What do you want to have communicate? Two clients? Or rather a client and a server (each with its own cert chain)? The latter is possible, the former has me scratching my head: Or do you want to do separate server and client cert chains (and do server and client auth)?
Hi,
Thanks for the prompt replies. I really appreciate it.
I have several follow-up questions that I hope you don’t mind answering as I am still relatively new to this field.
Let’s say if I have a root self-signed falcon1024_CA and it signs dilithium2_srv and dilithium2_srv signs sphincsharaka128frobust_srv.  Can a dilithium2_srv sign another server ?
Eg  apps/openssl x509 -req -in sphincsharaka128frobust_srv.csr -out -CA  dilithium2_srv.crt -CAkey  dilithium2_srv.key -CAcreateserial -days 365
Next if I run sphincsharaka128frobust_srv as a server, what should I put as _CA.crt in
apps/openssl s_client -groups  -CAfile _CA.crt? Is it falcon1024_CA or dilithium2_srv?
The aim of my project is to measure the efficiency between servers of different certificate chains and clients.
Thank you so much!
Yes, all of this is possible and I think it's up to you which CA in a chain you set (but I didn't check openssl's behaviour in such case myself). But I'm personally wary that you're playing with many variables (intermediate certs, algorithms, openssl behaviour) at the same time, so I'm not sure you'll get sufficiently "informative"/algorithm-discriminating results/numbers. Also, did you already check out https://openquantumsafe.org/benchmarking/visualization/handshakes.html (open the "..."/Hamburger menu on the top left to toggle between algorithms)? You'll see that such measurements are subject to large variability over time and thus arguably of limited utility. Raw (signature) performance numbers are probably more reliable/tell-tale if you want to know algorithm efficiency. However, should you do get reliably reproducible numbers with clear dependency on algorithms chosen, please let us know, e.g., adding a link to your results below: Thanks in advance!
Sorry to bother you again,
I still have difficulties creating a certificate chain and using it in TLS.
To simplify things, this is the order in which the certificate chain looks like :
root_CA -> CA1 -> CA2.
I run CA2 as a server.
In order for the client to verify the certificate chain, we need to include the certificate chain file that consists of certificates in this particular order : CA1, root_CA.
However, I don't get why CA1 is invalid as per the error in the image below.

Thanks in advance !
The error is output: The cert purpose given is not accepted. Googling will provide suggestions (or your lecturer :-).
@baentsch I kind of have the same issue too when I followed @chongweil907 's example.
I think it would be best if you could give a specific command in creating an intermediate CA from the root CA as it is not mentioned in the readme file.
I am quite sure he is stuck at that part.
Agreed, we do not have samples with intermediate CAs to not complicate things too much (don't you think the README already is too long?). Also, cert purposes are no OQS-openssl specific issue which is why I think this topic would better fit in https://github.com/openssl/openssl/issues. Either way/location, can you please send commands you executed (to generate the certs) to reproduce (not as a screenshot, please)? Most importantly, please state which openssl.cnf was used: Exactly the one from oqs-openssl or another one? Which purposes are stated in there? Did either of you already check out for example this to resolve the issue?
@baentsch Thanks for the help!
Based on @hengyongming comment, I realised I have some misconception between CA and server so just ignored my previous post.
So what I really want to do is to create an intermediate CA from the root CA. Like to create an intermediate CA and let it signed by the root CA. Is there a command to do that ?
So what I really want to do is to create an intermediate CA from the root CA. Like to create an intermediate CA and let it signed by the root CA. Is there a command to do that ?
There's nothing special about OQS-OpenSSL compared to normal OpenSSL. Check out the documentation or examples such as http://dadhacks.org/2017/12/27/building-a-root-ca-and-an-intermediate-ca-using-openssl-and-debian-stretch/
