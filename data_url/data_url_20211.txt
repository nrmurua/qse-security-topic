In Visual Studio I can only get oqs.lib and oqs.exp, even when I add -DBUILD_SHARED_LIBS=ON to the build args. How do I get Visual Studio to output a DLL file?
How are you generating the VS solution? We've recently switched cmake, and we now typically use ninja to build the project, even on Windows. cmake has some VS bindings; are you using these, or are you using an older version of the project where we defined the VS solution manually?
I opened the root folder (liboqs) in VS opened the file "CMakeSettings.json" (I believe this file is generated by VS), I add the argument "-DBUILD_SHARED_LIBS=ON" to "CMake command arguments" and click "Build All." Am I missing a step?
I tried to build it without Visual Studio using cmder (which uses git-bash). My commands were the following.
mkdir build && cd build
cmake -GNinja -DBUILD_SHARED_LIBS=ON ..
ninja
It still didn't work. It built a file called "liboqs.dll.a" which does not work. Even if I delete the ".a" from the end it still doesn't work. Is there anything wrong with my commands? I have all the dependencies installed (except doxygen).
I have not tried cmder, but if you use the x64 Native Tools Command Prompt for VS 2019, your sequence of commands should build oqs.dll in build\bin. The tests can then be run by adding bin to the PATH as done here.
Perhaps in cmder you can try calling vcvars64.bat as done here before running the commands.
Note that we only test liboqs regularly on Visual Studio 2019, which means earlier versions might or might not build liboqs as desired.
Building it within the Visual Studio GUI also resulted in an oqs.dll being placed in a bin sub-directory that is several levels under out.
@ChristianOConnor Can we close this issue?
Oh yeah sorry about that I forgot to respond to the last comment. Yeah @xvzcf you're right the dll file is in the bin folder Thank you!! You can close this issue now @dstebila . Thank you for the help you guys!
