qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py
The default location is in the home dir, with

This forces Linux distributions to do more work when building in a chroot.  For instance Debian build chroots set the "home" directory to /nonexistent, and then building docs fails with
since it can't create /nonexistent/.qutip.
In practice that's not a great problem since when building docs for the package, we can set HOME=$BUILDDIR to place the config location in the build dir (which is writable) instead of /nonexistent.
However there is a standardized location for config files which might be worth considering instead.  The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files.
Config files can be located under (one of)  $XDG_CONFIG_DIRS for system configuration, or under $XDG_CONFIG_HOME for user configuration.
No response
No response
In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of
could be done with
A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS).
No response
Would it be okay to use _path_from_env("XDG_CONFIG_HOME", Path.home() / ".config") rather than depend on the xdg package?
How does one know if one is on a system where XDG is supported? E.g. I know Windows used to use a special APP configuration folder of its own.
I've bumped this to QuTiP 5, since that seems a more polite time to change the default configuration directory than 4.7.1.
Would it be okay to use _path_from_env("XDG_CONFIG_HOME",  / ".config")`
That would probably be fine. XDG_CONFIG_HOME is not normally set as an environment variable, but you're suggesting the same code that the xdg package itself uses, so the result will be the same, using ~/.config.
xdg seems to be pure Python, indifferent to operating system. So it would just use whatever Path.home() returns on Windows.
Some frameworks take it a step further and use an Organization/Application subdir underneath ~/.config. That's what Qt does with QStandardPaths::ConfigLocation. So Qt would use these XDG paths where supported (Linux systems, maybe MacOS) and assign equivalent paths in the case of Windows.
No point overengineering it though (unless you want to switch to QtPy6 as a framework!), so using _path_from_env will get the job done if you're trying to avoid the extra xdg dependency.
