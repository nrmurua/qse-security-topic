From the code:
When doing an instrument.ask_raw('TRIG:COUN?') my device returns a string  '+9.9e37'. This gives an error since int('+9.9e37' results in ValueError: invalid literal for int() with base 10: '+9.9e37'.
We might want to change the get_parser into lambda x: int(float(x)).
Also:  since the get_parser  is int, does the MultiType validator make sense?
@jenshnielsen @WilliamHPNielsen
I guess this is implemented in the same way as the Keysight 33xxx series driver in KeysightAgilent_33XXX.py where it uses 9.9e37 as the response to signal infinity?
It could probably be solved in the same way using a val mapping that looks something like this
@jenshnielsen Ok, I see how the parser works. But from the KeysightAgilent_33XXX.py
The validator vals.Ints(1, 1000000), only accepts an int, but the parser can return a float. So the parameter there also seems inconsistent.
Yes I'm not sure that parameter makes sense in that context. burst_ncycles seems to make more sense.
In this case it should maybe return the string 'Inf' instead of a float('inf'). That way it will round trip correctly but you will naturally lose the ability to do math directly with the result
