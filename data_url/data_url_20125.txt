I wanted to compile a liboqs library for windows using linux and I was unable to find a way to do it just following the documentation. We should have a section in readme specifying how to properly cross compile. For example
To build a .dll file
The result of ninja process, will generate a bin/liboqs.dll file on project root directory
Isn't this what you're suggesting?
@baentsch  yes but not exactly. Im suggesting to add it to the readme as part of offical guidelines for newcomers, for those who want to build the C callable library to use it with on of the available SDKs. However, currently existing configuration  does not generate a dll as a result, because DBUILD_SHARED_LIBS flag is missing. At least, this is what happens to me
@zerjioang Thanks for the suggestion. When I run your suggestion to build a DLL above, I encounter some issues:
--> Could you please update your description as to what needs to be done to arrive at a Windows-executable DLL? Would you want to do that as part of a PR to update README.md? Are you using this DLL to handle open-quantum-safe/liboqs-python#36 (i.e., are cross-building the Windows-DLL for the python wrapper and not build it on Windows natively)? May this explain the naming issue there? Follow-on question: What speaks for you against building a Windows-DLL on Windows?
@baentsch  Okey, I'll do a PR with changes for review & approval
FYI: I choose to try cross compilation first, because I already had setup the environment for compilation in my Ubuntu. That's the only reason, to try this way first. Because I can always rely on Windows, download msys2 and do the compilation process again to generate the DLL
Thanks for the explanation (and in advance for the PR). Does the issue open-quantum-safe/liboqs-python#36 also surface if you build "natively" on Windows?
@baentsch  I PR you. Sadly I cannot test in windows at the moment, so i cant give you an answer
Closed with update to Wiki. Thanks for the suggestion and text, @zerjioang !
