In pulser/json/deserializer:
There are multiple ways this function can fail, and raising multiple different classes of Error.
We use this function to validate a serialised abstract representation of a device. Because of the unpredictability of the exceptions raised in this function, we have to cast a wide net with a try ... except Exception...  which is less than ideal.
First point is obviously the json load that could fail and that is not caught. (could raise TypeError or JSONDecodeError)
Second point the the jsonschema.validate(instance=obj, schema=schemas["device"] function that can fail in multiple ways: at least:
according to the documentation. Though I've not dug deeper to see if other uncaught exceptions could arise.
Ultimately what would be nice is a unique Exception class that we could catch for when using this deserialize_device function.
I see there is an AbstractRepresentationError but it looks like it is only used when serializing to the abstract representation.
Would it be possible to have an equivalent error raised consistently on deserialization ?
@Augustinio If I understand correctly, what you are looking for is that I group all possible errors that may arise from an invalid argument to deserialize_device() under the same exception. If so, then errors like jsonschema.exceptions.SchemaError should not be contemplated, right?
I see there is an AbstractRepresentationError but it looks like it is only used when serializing to the abstract representation.
Would it be possible to have an equivalent error raised consistently on deserialization ?
AbstractRepresentationError is already being used by all errors raised directly by the deserializer. What you are suggesting is that we catch all others too and turn them into an AbstractRepresentationError?
This seems feasible, when would you need this?
I guess it depends on how you want to structure your error classes internally. You could have a parent DeserializationError from which some of your errors inherit. Or you could catch any of the 5 or 6 exception classes you currently raise and then raise a DeserializationError. But yeah the core requirement is to be able on our side to do a try deserialize except SomeError.
As far as how soon we need it, it is not crucial at the moment as we just catch any Exception. So if you want to take some time to think of the best way to structure your exceptions, there's no rush.
I guess it depends on how you want to structure your error classes internally. You could have a parent DeserializationError from which some of your errors inherit. Or you could catch any of the 5 or 6 exception classes you currently raise and then raise a DeserializationError. But yeah the core requirement is to be able on our side to do a try deserialize except SomeError.
As far as how soon we need it, it is not crucial at the moment as we just catch any Exception. So if you want to take some time to think of the best way to structure your exceptions, there's no rush.
Ok. So, in principle, it would be okay if this feature was treated normally (ie added to the develop branch and eventually release on the next Pulser release)? In other words, would it be okay for you to then update pulser-core to a new minor release?
Yes this would be completely fine!
