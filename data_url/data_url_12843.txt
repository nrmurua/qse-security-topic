It looks like the reference code never stops when we face unlucky case. The Grover's algorithm is not deterministic algorithm and the lower bound of possibility where we can obtain correct answer for unknown number of solutions is 0.5 when we increase k = 1,2,...,n for 2^k iterations.
Do we need to add upper bound for the loop? Or, do we need add description on the task such as "the given problem can be solved 100% with 2^k grover iterations" ?
If my understanding is not correct, please close the issue.
My intention for this task was to show that you can use Grover search to solve the problem even if you don't know how many solutions it has (and thus can not estimate the "correct" number of iterations to use). The exact sequence of the numbers of iterations can vary - you can try 1, 2, 3 etc. iterations, or you can try powers of 2, or you can try the number of iterations you'd do if there was 1 solution, 2 solutions, 3 solutions, etc. Even if you don't hit the "correct" number of iterations in your sequence, you will eventually loop around to a number that has high enough probability of success.
Does that make sense? We can add a note to this effect to the task description if we come up with a good wording - I don't want to promise that the problem can be solved with 2^k iterations, since even if you apply the "correct" number of iterations and maximize the probability of success, you still can get unlucky and measure a state that is not a solution.
Thanks for rephrasing and that's my point. I was wondering if we could add some sentences as a note for this task.
I opened PR #98 to add some notes to this task and an extra exit condition for the loop. Could you please take a look and let me know if this helps?
This should be resolved by #98.
Thank you for bringing our attention to this!
