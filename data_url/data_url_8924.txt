When implement function sinter.predict_observables method in count_logical_errors
predictions = sinter.predict_observables( dem=detector_error_model, dets=detection_events, decoder='pymatching', )
Is probability to get a permission error, and there will be a new directory in ''C:\Users\UserName\AppData\Local\Temp\' which won't be deleted for each time error occurs. Usually, the probability of error is higher when num_shots is larger
`---------------------------------------------------------------------------
PermissionError                           Traceback (most recent call last)
File ~.conda\envs\quantumion\lib\shutil.py:606, in _rmtree_unsafe(path, onerror)
605 try:
--> 606     os.unlink(fullname)
607 except OSError:
PermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'C:\Users\UserName\AppData\Local\Temp\tmp823cixvn\sinter_dets.b8'
Hm. The error is that another process is using the file? It looks like either the main process is starting to delete files before the worker process has been killed, or killing the working process is leaving the file in a permanently marked-as-in-use state.
This should be fixable, hopefully by just calling join on each subprocess when shutting down the workers. I'll try; need to find a windows machine to test on.
I didn't use multi-process, all I have done is repeat getting_start_ipynb, maybe there is a multi-process from the source code of package. And it is weird that it is probabilistic to get error. It seems that when the number of errors in quantum circuit exceeds some threshold, the process is killed.
sinter uses multiprocessing behind the scenes. It's likely probabilistic because it depends whether or not the child finishes being killed before the manager starts deleting its files.
I'm also getting the same error on Windows by just trying to run the code from the example notebook.
@282898474 can you verify if the linked pull request solves the issue?
To do so:
Note: updated instructions for checking if it works to install sinter instead of stim
You can also install it by cloning the repo, pulling the branch from #452 , then !pip install -e PATH_TO_CLONED_REPO/glue/sample.
