Sometimes, we want to measure a qubit one more time after a first measurement on the same qubit. That is we want to keep the qubit after the first measurement and make it possible to measure it again in the same run of the experiment (not to be confused with a independent run of the same measurement, that kind of repeated measurement).
However, the current latex backend use a "-M=" style for measurements, which implies to convert a quantum state into a classical state. In order to allow the above repeated measurement, it should be possible to allow users to choose (or the compiler to exam)  which one out of "-M-" and "-M=" should be used.
It seems that the simulator does allow such manipulations already since I have tried to H | qu and Measure | qu after Measure | qu and it does lead to results consistent to quantum mechanics.
Thanks for your question. Let me try to explain what a measurement gate does:
If you use Measure | qubit (and call eng.flush() to make sure the backend has received the command), then it measures the qubit and registers the result which you can access via converting the qubit to an int or bool, e.g. int(qubit). It's important to note that this does not change the qubit to a classical bit but only gives you access to the lastest measurement result of that qubit. The qubit still exists as a qubit, so as you mentioned you can do repeated calls to measure the qubit. Keep in mind that every measurement overrides the previous measurement result and int(qubit) always returns the last measurement result. If there was no other operation on the qubit between the measurement, then you always get the same result. But you can also put the qubit back in a superposition by applying for example a H gate.
The latex backend CircuitDrawer has a feature that if a qubit has been measured and is in a classical state (but still a qubit), it will draw a double line. As soon as another quantum operation is applied, it will change back to a single line indicating that we don't know the state anymore. Here is an example:
This will produce the following figure:

This shows that after H is applied to a measured qubit (which was in a classical state), it goes back into a superposition indicated by a single line.
Let me know if that answers your question and we will try to improve our documentation to explain the measurement better.
Thanks for the answer. I did figured out what you have demonstrated and adding in more explanation of measurement is of course helpful.
However, I think it repeated measurements are possible, than the following two make a better sense:


In the first one, the two lines out of measurement box represents respectively the qubit and the classical readout.
The second one refers to only the qubit.
Of course, as long as people do not see the double line as an indication of a classical readout, then the original one in you post is also OK.
Just a suggestion, your call.
I'm not sure I understand your suggestion -- is it that one should be able to choose whether the latex backend draws double lines for qubits which have been measured? If so, you can simply change the double_classical option in settings.json to false.
Alternatively, you could set init_quantum to false as this would give an additional indication that double lines only mean that the qubit is in a classical state: The qubit would start out with double lines and only after, e.g., a Hadamard gate it would become a single line.
If you are suggesting an additional feature, please let me know and I'm pretty sure it's only a quick fix.
thomashaener , yes, you understand my point correctly. And as shown in the figures that I post above, I can modify the tex file to implement -M-, -M-= and also -M=. So it is not a problem for me.
However, it might be good to allow users to make such a choice, or tell the compiler to do so (for example, whenever the qubit is need to be and also can be quantum after measurement, use -M- or -M=-, instead of -M=).
Of course, the compiler might need to check the backend, since on IBMQ, after a measurement, the qubit can no longer be quantum. So that might add a little bit of complexity.
From a more general point view, I am not only suggesting an additional feature to ProjectQ, but also a possible usage of -M-, -M=- and -M=, maybe also -M=- (the "-" aligned to the above line of "=") as following:
Maybe this will be better than using always -M= for all these cases.
What do you think?
I see. Again, you don't have to modify the .tex file to get the circuits above; you can simply modify the settings.json file and re-run your python script. Of course, the settings for qubit lines are general and not on a per-gate level, i.e., you'll always just have a single line or always have double lines after measurement.
A problem I see with these different options is that it's hard to determine automatically which to choose. E.g., a qubit might be reused after a measurement but before the next gate acting on this qubit, an operation on a different qubit might be controlled on this measurement outcome. Because the first qubit will be re-used, I would choose -M-, but the user might have intended this to look like classical feedback. Having an option to specify this for each gate would make the resulting code incompatible with other backends, so I'm not sure this would be worth it.
On a more general note, the circuit drawer is mainly for publication purposes and a better way would be to include the programs themselves anyway, since it's hard to capture, e.g., loops or more complicated classical feedback with circuits, but it's really easy to do so in code.
I understand the complexity. However, for the example that you are referring to, I think, it is better to in fact use the options that I described above,  for example, -M=< then the above line goes into a quantum gate and the lower line goes into a classical manipulation. Anyway, I think distinguishing the two lines out of -M is valuable.
If this convention can be used, then it is both easy to implement in code just ProjectQ and also meaningful. Of course, you are right that then the compiler will have to do some check of the code based on different backend.
I'm closing this issue since repeated measurements are allowed in ProjectQ.
Also, separately handling all of the cases above could be done in the latex drawer but I don't see the benefit in doing so, especially because quantum programs involving classical control/feedback can be expressed in a much more compact and clear fashion when using code instead of circuits.
