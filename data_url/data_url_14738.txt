The following fails:
Run above.
U.is_unitary() gives true so I would assume it works.  It does work on random_unitary(16).
Not sure if I'm using it correctly, but this seems to work:
The above does not work for me:
I get the error as well. It appears like a floating point rounding error;
np.abs(z) - 1 = [ 6.22008223e-10,  1.15420784e-10, -2.46884735e-11, -4.08109102e-11,
1.12878595e-11, -2.20169438e-11, -2.15460205e-10, -2.65099054e-11,
2.75784728e-10, -3.44324902e-10, -1.11241016e-10,  8.13875634e-11,
-2.29364527e-10, -2.33918440e-11,  1.75683690e-10, -2.84255397e-10]
and _EPS is 1e-10 so it fails. How did you generate the matrix? Maybe rounding error happened during serialization?
Indeed, it's a rounding error.
So then we have an issue where is_unitary says its good, but it is in fact not good enough.
I forgot to mention that this is from may 4 challenge. So are we saying that that matrix is not unitary from floating point viewpoint as we (and is_unitary) claim?
For that challenge, it seems that the matrix is randomly generated for each user. It does work with "my" U.
@nonhermitian Operator.is_unitary is implemented with numpy.all_close which allows setting an absolute and relative tolerance which it sets to 1e-8 and 1e-5 respectively. I think we should probably change diag to do the same, perhaps directly referencing the same tolerances.
That seems like a reasonable solution to me.
âœ… Issue still reproducible! PR #4375 addresses the tolerance issue but has a few checks failing!
Will update comment/add more comments if cause is found/fixed!
Python version 3.9.7
qiskit-terra version: 0.19.1
