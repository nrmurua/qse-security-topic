Given the optimization above, it would be easier to find and replace by first finding the CNOT gate, and then checking before and after the gate for the Hadamard gates. However, the PointOptimizationSummary function takes in a length to clear and determines the start based off of the index of the input index to PointOptimizer optimization_at function. I believe that it would be easier for cases like this to allow the clear_span argument of the PointOptimizationSummary to take a range of indices to remove for these situations or something else along these lines.
I think changing the clear length to include negative will conflict with the way the PointOptimizer iterators through the circuit, so I don't think we can update the clear as described.
I'm going to close this, but if you can think of a good way to do this iteration and then have a pattern matching replacement like you mention, please reopen.
