The schema for the JSON hardware description files (e.g. Sinara systems) grows dynamically with new boards and additions to the artiq_ddb_template tool.
When writing such files, the only way (I'm aware of) to know which options are supported is to read the source code. This is not very user friendly, even considering that generating custom configurations is an advanced usage of the ARTIQ/Sinara ecosystem.
A JSON schema for the hardware description files.



Pros:
Cons:
Also:
When writing such files, the only way (I'm aware of) to know which options are supported is to read the source code. This is not very user friendly,
Those programs are essentially "scratch my own itch" tools that we use in-house at M-Labs and QUARTIQ, and released as-is.
heavy information duplication with frontend.artiq_ddb_template, gateware.targets.kasli_generic
Can those read the schema? Maybe there could be schema entries that tell the machine how to handle each peripheral in the gateware and device DB.
Thanks for the feedback.
Those programs are essentially "scratch my own itch" tools that we use in-house at M-Labs and QUARTIQ, and released as-is.
I understand. I feel like they should nevertheless be made more user friendly. Even if not building gateware/firmware, the JSON files are really convenient to contain the full system description and generate the DDB from it (e.g. when changing Urukul clocking).
I guess #1410 is loosely related here. I'm grateful that these scripts are released but one could argue that non-vendor modifications are just not supported. Although users would write a myriad of inconsistent scripts to address that.
Can those read the schema? Maybe there could be schema entries that tell the machine how to handle each peripheral in the gateware and device DB.
This starts to feel a lot like dataclasses or even something like pydantic and a OO-heavy design. The JSON schema could be generated from the Python (data)class definition for convenience. But this doesn't look like the general design choice of these tools.
The JSON schema validators can extract default values from the schema. What to do with the data is written in the scripts. I'm mostly afraid that the schemas get quickly out of date because they're not really needed by artiq_ddb_template or kasli_generic if they stay written the way they're now.
As someone who read the source code when writing a custom EEM module (see https://github.com/drewrisinger/entangler-core/blob/v1.1.1/example/entangler_gateware_example.json), I think this area could use some improvement, and a schema like this would be a good example of standardization.
However, as with much of ARTIQ, I think there's a fundamental user interest issue: many of the physicist users just want SOMETHING to work with ARTIQ & aren't interested/don't have the skills for investing to fix the pain points they encounter. And the engineers who have more of the background/inclination to fix these issues are stretched too thin to adequately address these issues (I know I am).
@drewrisinger Do you have experience with JSON schemas and associated tooling? I see two problematic aspects:
@airwoodix no, I don't have much experience. The main reference I have for JSON schemas is lightly skimming through https://github.com/Qiskit/qiskit-terra/tree/master/qiskit/schemas.
I quickly tried json-schema-for-humans: the output is nice, it can in principle do the job.
Most of the arguments to the coredevice driver's __init__ are given by the JSON entry (refclk, pll_vco, pll_n, etc. in Urukul/AD9910). I guess this could also be autogenerated but is surely too complex overengineering.
done
