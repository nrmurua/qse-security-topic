TERRA RESULTS:
{0: 0.5, 1: 0.5, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.0, 8: 0.0, 9: 0.0, 10: 0.0, 11: 0.0, 12: 0.0, 13: 0.0, 14: 0.0, 15: 0.0}
{'0000': 0.5, '0001': 0.5, '0010': 0.0, '0011': 0.0, '0100': 0.0, '0101': 0.0, '0110': 0.0, '0111': 0.0, '1000': 0.0, '1001': 0.0, '1010': 0.0, '1011': 0.0, '1100': 0.0, '1101': 0.0, '1110': 0.0, '1111': 0.0}
AER RESULTS:
{1: 0.54, 0: 0.46}
{'1': 0.54, '0': 0.46}
We should see only the non-zero probability states in Terra, and a correct conversion to binary in Aer (i.e. matches the number of qubits):
TERRA RESULTS:
{0: 0.5, 1: 0.5}
{'0000': 0.5, '0001': 0.5}
AER RESULTS:
{1: 0.54, 0: 0.46}
{'0001': 0.54, '0000': 0.46}
Thank you for your report.
Aer passes bitstrings as integer to QuasiDistribution. So, the result looses the information of number of qubits.
I made a simple PoC to fix the issue for shots is not None Qiskit/qiskit-aer#1668.
@ikkoham can elaborate this patch.
It might be good to remove results with zero probability for the reference implementation of Sampler though we don't guarantee the behavior. It may be a good first issue.
Couldn't the QuasiDistribution just contain the number of bits? It already contains the number of shots so it's already strictly tied to a quantum circuit result ðŸ˜„ because this exponential scaling would be nice to avoid if e.g. someone is iterating over the outcomes.
Yes, it might be good to remove bits with 0 prob at QuasiDistribution side. It can be a good first issue too.
Also Terra's Sampler should use probabilities_dict method instead of probabilities.
https://github.com/Qiskit/qiskit-terra/blob/main/qiskit/quantum_info/states/quantum_state.py#L216
This would be nice to fix.
These PRs fix this issue
