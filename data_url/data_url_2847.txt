I was thinking about how one would contribute a QAOA example (it would be nice to have that at release time), and my first thought is that one would want to represent the problem Hamiltonian, which is diagonal, as a sum of tensor products of Pauli Z's. This is most naturally represented as a QubitOperator (from OpenFermion). Are there plans to have a QubitOperator or something like that? Or, does anyone think there is a nice way to do the QAOA without it?
I'm working on ways to represent and manipulate hermitian operators in cirq. Since these operators form a real Hilbert space in their own right they come with a rich set of operations that we may potentially want to implement:
Also, their cousins anti-Hermitian operators have a useful property that exponentiation yields a unitary providing us with a neat new way of specifying evolution operators.
--
BTW, there is a question that I'm trying to answer that you may have input to. How would you interpret an expression such as cirq.X * cirq.X that is likely to feature in many Hamiltonians? Would you read the asterisk as composition or as tensor product?
Craig said he sees it as the former (see #932 (comment) and #962 (comment)). Dave indicated he may read it as the latter (see #932 (comment)).
Note that the ambiguity disappears when qubits are specified explicitly and so I am leaning towards requiring the use of GateOperations instead of Gates in writing down a Hamiltonian in cirq. Is this acceptable for your use-cases?
@dabacon @kevinsung @Strilanc
My immediate reaction is that it is composition. A thought that pops into mind is to make @ mean composition instead.
Yes, I think it makes sense to require using Operations when making Hamiltonians. I think Hamiltonians are operations that have qubits associated with them.
This is done now that we have cirq.PauliSum.
