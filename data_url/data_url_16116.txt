The permutation circuits from the circuit library do not implement some permutation correctly. For example:
here the 5th qubit has to end up in the 0th location, but it ends up in the 6th location because two swaps act on it.
Are you not interpreting the permutation incorrectly? It seems to me that you are specifying the 0th qubit to be moved to the 5th position.
@Serock3 I guess this should be clarified in the docstring of the Permutation class. But the way I interpret a permutation pattern such as [5,4,1,7,6,3,0,2] would be that q5 goes to the 0th position, q4 goes to the 1st position, etc.
This interpretation is easier to think about in terms of swaps, as you can imagine the identity permutation to be:
[0, 1, 2, 3, 4, 5, 6, 7]
then let's say you swap the first and last qubits, followed by the first and second qubits. You get:
[1, 7, 2, 3, 4, 5, 6, 0]
so qubit 1 has gone to position 0 (not 0th qubit has gone to position 1).
Also even with your interpretation this is buggy (the 4th qubit does not go to position 6).
I looked a bit more at this issue and found that it seems certain permutations are never visited.
The figure below shows the error with respect to the uniform expected probability of all permutations of size 4. On the left is the requested permutation. On the right is the one I believe is generated by the swap circuit.

On the right the three states with +1 values are associated with 0 counts while the three states with  -1 values have double the counts one would expect.
For 5 qubits, the response looks like,

