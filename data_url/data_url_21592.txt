I'm trying to program a fast sequence using urukul and zotino with timesteps in the us regime. The total sequence will take ~1s and I'm doing some calculation inside the kernel for programing the events. In doing so, I always got Underflow Exceptions. Reading the docs, I thought I could prevent these by just putting a huge delay (delay(10000*ms)) in the beginning of the sequence, as this would guarantee that I'm able to program the events before the rtio counter reaches the programmed times. Unfortunately, this didn't work and I still have underflows. I tried to debug this and found out that programming lots of events in the future doesn't work: For each DDS channel, only 16 events are actually queued, before the CPU is blocked (cf. the script below) for 10 seconds until the first events are executed. Is this behavior intended? What I find very confusing in addition is that adding a second DDS statement below the first one (self.urukul0_ch1.set_mu(0)) results in 64 events instead of 16 programmed at once.
You are filling up the gateware RTIO buffer and then the CPU has to wait for an event to be executed before being able to submit a new one.
The buffer size can be increased at compilation time. Where did you get your Kasli system and do you know the variant?
Thank you for the quick reply!
The buffer size can be increased at compilation time.
Is it possible to increase this value a lot, i.e. to a few thousand? Or will this lead to problems?
Where did you get your Kasli system and do you know the variant?
We have artiq-kasli-hub (kasli 1.1) and afaik we bought it from quartiq
