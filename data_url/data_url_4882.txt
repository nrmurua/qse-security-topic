Consider distributing an N-qubit statevector between 2^k nodes.
The current Pauli gadget algorithm (multiRotatePauli) involves 2 t rotations, where t is the combined number of X and Y operators in the gadget, and a single multiRotateZ. While the multiRotateZ is embarrassingly parallel, each rotation can in-principle invoke a serial round of communication (when targeting qubits >= N - k). In the worst case, when the upper k qubits of the state-vector are targeted with X or Y operators, the current multiRotatePauli algorithm invokes 2k serial rounds of communication. It furthermore always involves 2 t 2^(N-k) + 1 access/modifications of each amplitude per-node, and a total of O(t 2^N) flops.
A significantly improved method is possible, derived in the distributed manuscript (under development). We can implement multiRotatePauli in only a single round of communication, and only O(2^(N-k)) access/modifications of each amplitude per-node. Furthermore, while a total O(t 2^N) numerical ops are still required, only O(2^N) need to be floating-point (the remainder can be integer). This is a drastic improvement.
Note the scheme leverages a subroutine for effecting a general Pauli product (which generates Toffoli, fan-out gates, etc) which might be worth offering as its own API function.
