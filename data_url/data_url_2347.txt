PauliSum, LinearCombinationOfGates, and Circuit could all implement a protocol
Do you have in mind what the function that calls this protocol looks like?
I was thinking of a single expectation protocol that would dispatch to different _expectation_*  methods defined for wavefunctions, density matrices, or bitstring arrays. Then, for example,  expectation(cirq.X(cirq.LineQubit(0)), wf), would end up using a method like PauliString._expectation_from_wavefunction.
Right now, if we were to put this method into PauliString it would just be a thin wrapper for cirq.pauli_string_expectation(self).value_derived_from_wavefunction. However, it feels like the methods of display.ApproxPauliStringExpectation and display.PauliStringExpectation should live inside PauliString.
@Strilanc @mpharrigan does this seem like a reasonable protocol?
xref #1805
@peterse : this seems like a weird form of dispatch. Why not wf.expectation()?
@kevinsung : What is state? How would the protocol work on Circuits? Circuits are unitary but generally not Hermitian
@mpharrigan I don't think there's a dedicated class for wavefunctions/dm's at this point.
Another alternative is PauliString.expectation( ... ) though the natural choice of defining PaulliSum.expectation in terms of PauliString.expectation would lead to a lot of redundant input validating/dispatch.
@mpharrigan state would be the wavefunction. Now that you mention it, in fact none of the objects I mentioned (PauliSum, LinearCombinationOfGates, and Circuit) are guaranteed to be Hermitian. I was thinking that the expectation for any object A would nevertheless be defined as ⟨Ѱ|A|Ѱ〉, but I guess this might not be conventional?
resolved with #1975
