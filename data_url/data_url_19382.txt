Hi! I'm trying to understand how to use the qibo.abstractions.abstract_gates.Gate.on_qubits() method.
By reading the documentation, I understood that such method is used to obtain a gate that acts on some target qubits by cloning a gate that was originally created with different targets.
Indeed, in the following example it works
but in this one it doesn't work
Am I using the method properly?
Thank you for reporting this. Indeed the documentation is misleading regarding this but I am not sure if I would call it a bug. I believe the gate.on_qubits method was not designed for direct usage but as a helper method for circuit.on_qubits. This method was requested to allow adding smaller circuits to larger ones to ease the coding of quantum algorithms that are expressed via subroutines that are repeated and acting on different sets of qubits. You can check the issue #253 for more details.
Now regarding the current issue, I believe it never appears if .on_qubits is used at the level of circuits since the qubit numbering on circuits always starts from 0. For example:
works as expected.
A simple solution would be to keep gate.on_qubits for internal usage only, for example by renaming it gate._on_qubits which will also hide it from the docs, exposing only circuit.on_qubits to users. I believe gate.on_qubits is not useful on its own anyway, for example:
would be equivalent to the simpler c.add(gates.H(0)) and this is true for any gate. Let me know if you agree or I am missing some potential application of gate.on_qubits here.
Ok, thank you for the answer. If I understand correctly, len(q) must be greater than the highest qubit id of the original gate, so that
works,
does not, but
works. In circuit.on_qubits this condition is verified so there are no issues. I agree to keep it for internal usage only,  given that the standard way to add gates is simpler and less prone to errors (e.g. .on_qubits(*range(nqubits)) does not change anything, but an unaware user may think that it "moves" the gate towards qubit 0).
Indeed as you can see from the source code of gate.on_qubits it will ignore all numbers in the given new list of qubits except the ones in the position of the original qubits (in this case 2, 3 as you correctly placed 0 and 1). If the given qubits list is of smaller size you'll get the error. Obviously this behavior is confusing if exposed to users but I think it's the one that works well with circuit.on_qubits (I am not wrong). So if there are no other suggestions (eg. by @scarrazza) I believe renaming to _on_qubits is a good solution.
Would you like to make this update or shall I open a PR?
Would you like to make this update or shall I open a PR?
Ok, I'm on it.
Thanks for reporting this issue. I agree with the renaming, sounds reasonable at this point.
I also agree with the renaming. The .on_qubits() was designed to be used on Circuits to make building complex circuits with repeating parts a bit easier, so it makes sense to hide it from the gate methods.
