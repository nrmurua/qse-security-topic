Something similar to NetworkX's Graph.subgraph would be good. Would obviously need a BQMView object to implement that version though.
Note this is distinct from induced subgraphs as in dwave-hybrid's bqm_induced_by function.
When you say distinct from hybrid.bqm_induced_by/hybrid.bqm_reduced_to, you mean values for boundary nodes would not be fixed, right?
In that case, how would you determine energy offset for the sub bqm?
Otherwise, how would BQM.subbqm be different from:
Yes that is what I mean, so it would be the same. The difference would be convenience (one method, no dependency on NetworkX) and performance (no intermediate objects and implementation as a view rather than a copy).
I would expect the offset, because it is not associated with any variables, to be 0 on a subbqm defined by a subset of the variables. We could I suppose allow it to be included as a kwarg. Though how we would handle offsets with bqm views is an interesting question in-and-of-itself. E.g. I might expect to be able to
but doing the same thing with the offset would not make sense (assuming we set it to 0 for views). One obvious approach would be to just not allow the views to be modified.
I agree, setting offset=0 for a sub bqm would make sense. But it is also incompatible with a current syntax for BQM construction (which requires explicit offset value).
I don't understand what you mean. When do we need to construct the subbqm with an offset?
BQM constructor requires offset <=> SubBQM constructor sets offset to zero.
I don't understand what is incompatible. There are many says to construct a BQM without explicitly providing an offset, e.g. BQM.from_ising(h, J). Do you mean it's incompatible because the user does not have a path to set it? We could easily mitigate that by allowing the user to include it, e.g. bqm.subbqm(vars, include_offset=True) which they might want to do if say dividing it into disconnected components and wanted one to include the offset.
That was a typo, I meant inconsistent.
What I would consider consistent is, for example, offset always optional, and set to zero by default. In BQM.__init__, BQM.from_ising (current behavior), ..., and BQM.subbqm (proposed above).
