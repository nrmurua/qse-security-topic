The ResourceCounter class uses a dictionary called gate_counts whose keys are string representations of the gates. I was wondering: why not use the gates themselves, rather than string representations? I would find this useful for performing additional analysis of the gates, such as grouping together rotation gates even if they are by different angles, and other kinds of grouping. Right now it seems that the only way to do this is by reverse-engineering the string representation to obtain the original gate, which isn't too bad, but still it seems better not to process it unnecessarily in the first place.
I guess my concrete suggestion would be to have keys of the form (G, k) where G is a BasicGate and k is an integer representing the control count.
Oh, I actually tried it, and got
TypeError: unhashable type: 'AllocateQubitGate'
Interesting, I've never seen this error before!
Yes, simply using the gate objects as keys won't work (dictionary keys need to be hashable)... one would have to define the __hash__ function of all gates first, which isn't too much work.
The current ResourceCounter is just one example implementation and it would be nice to have other compiler engines for counting resources. It should be easy to adapt the existing implementation to facilitate the analysis you describe above. Also, at some point we want the resource counting to be performed in a hierarchical fashion to speed up the compilation process. E.g., only forward commands to the next engine if "similar" commands have not already been decomposed earlier; otherwise directly update the cost and discard the command.
Would you be willing to contribute to 1) or 2)?
I'd be willing to do 1) and the first part of 2). I plan to just change the existing implementation of ResourceCounter to use my suggestion; what do you think? I don't think this internal change warrants creating a separate engine, even if I do add some additional functionality to it.
I may be willing to do the latter part of 2) later on when I have more time and am more familiar with ProjectQ. Perhaps you should create an issue for it?
To submit a contribution I just make a pull request, right? This isn't clear from the README.
Awesome! Sounds good, thanks.
Yes, you can just make a PR whenever you think it's ready for review.
