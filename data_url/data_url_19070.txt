Currently, there's a modify_params_after_iter option which allows injection of arbitrary code after each iteration of Krotov.
Is there by any chance an option to inject arbitrary code after each update (time step)?
There is not, but you can "inject code" for most use cases due to the fact that the propagate routine that you pass to optimize_pulses is under your control. Specifically, you have direct read/write access to both the propagated state and the Hamiltonian/Liouvillian.
The two specific use cases that I've come across are:
Both of these are very straightforward to do inside a custom propagate routine.
You could conceivably extend the scope of what propagate has access to with some Python trickery (closures), e.g. to give it access to the objectives:
For anything beyond that, you can always create your own copy of the optimize_pulses routine and modify that to your needs. I'd have to see a very convincing use case that isn't covered by one of the two approaches I outlined above to consider adding further hooks to the implementation in the krotov package.
