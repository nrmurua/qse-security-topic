Hi, I hope I can get some help with this. I am new with qutip
Sx_nv= qutip.tensor(qutip.jmat(1,"x"),qeye(2))
Sy_nv= qutip.tensor(qutip.jmat(1,"y"),qeye(2))
Sz_nv= qutip.tensor(qutip.jmat(1,"z"),qeye(2))
Ix_nv= qutip.tensor(qeye(3),qutip.jmat(0.5,"x"))
Iy_nv= qutip.tensor(qeye(3),qutip.jmat(0.5,"y"))
Iz_nv= qutip.tensor(qeye(3),qutip.jmat(0.5,"z"))
S_vector = [Sx_nv,Sy_nv,Sz_nv]
D_xx = 0
D_yy =0
D_zz =2870
D_matrix = np.diag([D_xx,D_yy,D_zz])
I want to make a product like "S_vector * D_matrix * S_vector" so I did this
TypeError                                 Traceback (most recent call last)
TypeError: must be real number, not Qobj
Somewhere I read that there is a problem with 1.20 numpy version and qutip, so I created an environment in conda with numpy 1.19.0
but it does not fix the problem, or maybe it is me the one that is not understanding. Why I can not make operations with Qobj, or convert it to numpy arrays and then back to Qobj.
Hi @yuli139304,
I can't really make out from the code you have written what you are trying to achieve -- it simply looks like you are using numpy and Qobj incorrectly.
Could you type out in terms of Sx_nv, ... and D_xx, ... what you want using simple arithmetic? E.g. maybe you want D_xx * Sx_nv + D_yy * Sy_nv + D_zz * Sz_nv (which just works as is)?
Then once you have the simple expression written down, you can make it fancier (e.g. use np.dot, etc) if you need to.
I'm going to close this for now because this doesn't look like a QuTiP bug, but feel free to ask more questions, either here or preferably on the mailing list.
Many thanks for your kind reply. Unfortunately, I can not do that, because there is cases in my hamiltonian in which that matrix is not diagonal, I am just trying from the simplest case, actually my goal is to have a term "S_vector * D_matrix *S_vector" . Could you please explain how I am using Qobj incorrectly and how to used right. The error message states that since  S_vector is a Qobj I can not multiply it with the D_matrix. If I put Qobj(D_matrix) then I can not multiply them because all terms are Qobj.
Do you want to end up with something like: Sx_nv * D_xx * Sx_nv + ... or Sx_nv * D_xx * Sx_nv + ...?
