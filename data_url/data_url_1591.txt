Is your feature request related to a use case or problem? Please describe.
With unentangled states split, it should be possible to run simulations of the following sort efficiently:
Since there are never more than two entangled qubits at a time, this should run linear in the number of qubits. (And it does in simulate_moment_steps). However, in run, there is a degenerate conflict with a separate optimization we have, that runs the unitary prefix first, then stores that state to feed into the non-unitary suffix for the n repetitions.
This behavior causes full entanglement in the prefix, and thus exponential time, because no measurements take place until the suffix.
Describe the solution you'd like
I haven't thought much about the solution, or whether we could automatically detect degenerate circuits like this. Perhaps it's better to leave a flag as to whether to perform the unitary/nonunitary partitioning optimization, and leave it up to the user. In fact this may be the only way to do it, because the optimal behavior depends not only on the circuit but also the number of repetitions.
What is the urgency from your perspective for this issue? Is it blocking important work?
P3 - I'm not really blocked by it, it is an idea I'd like to discuss / suggestion based on principle. (Unless there is a common use case for this).
@daxfohl is this still relevant
It is, it's a very low priority issue and isn't a regression, just a potential improvement. This is just for tracking. I don't think it's worth a triage/discuss label.
Is there the same issue with reset gates? then we don't support qubit deallocation #3240
Even this doesn't work
Even this doesn't work
What are you expecting / seeing when you do this? There's a unit test 
Is there the same issue with reset gates?
Not with density matrix simulator. That one allows reset gates also to go in the prefix: 
then we don't support qubit deallocation
Note this is only in the non-density-matrix simulators, and only when using run. simulate and simulate_moment_steps don't do the prefix splitting.
discussed offline. There are probably places where reprs get implicitly generated and are exponentially large
I'm going to close this because this seems like a degenerate case and I don't think there's any great solution. The best solution is providing a flag for the user to toggle this optimization, but I think nobody would understand what it does, it would never get used, and just pollute the API. If anyone encounters this problem in the real world we can open it back up.
