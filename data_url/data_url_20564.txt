Do we have support for hybrid key exchange with x25519?  Looking at https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/generate.yml#L75, for example, we list a NID for x25519+kyber512 in the configuration file, but then searching the generated code in the ssl directory or in https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/qsc.h, I don't see any reference to x25519 with Kyber or the specific NID in question.  @baentsch any idea?
The listing above is due to the agreement that https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/generate.yml should be the central (algorithm/combination) ID definitions file (until there is a standards doc).
The reason for those IDs to be listed there is that oqs-provider supports those hybrids: https://github.com/open-quantum-safe/oqs-provider#status and sources that file when generating its code.
Edit/Add: Now I see the reason for the question: https://blog.cloudflare.com/experiment-with-pq/ documents an alternative specification and ID selection for X25519/Kyber hybrids. May it be worth while touching base with the Cloudflare team as to why they do things differently? Again, key question: Is interoperability of interest to "the industry" prior to the finalization of an IETF standard?
But at this point we don't have code generation in OQS-OpenSSL111 that does the x25519 variant, but it is present in oqs-provider?  Indeed the motivation was to be able to test interoperability with Cloudflare's implementation (which does use different group identifiers).
we don't have code generation in OQS-OpenSSL111 that does the x25519 variant,
Correct.
it is present in oqs-provider?
Yes, it is.
Indeed the motivation was to be able to test interoperability with Cloudflare's implementation (which does use different group identifiers).
Yup: I'd also have been curious about such interop (tests) --which would be possible with the provider-- but, as you point out, different IDs makes this a non-starter --> Sounds like it is time to standardize in this space...
Based on discussion in today's status meeting, it seems like there is motivation to have the x25519 hybrids available in OpenSSL 1.1.1.  Michael, how does the logic in oqs-provider use both the NIST and alternative curves from generate.yml?  Looking quickly at the code generation here in OQS-OpenSSL, it looks like it doesn't actually make use of any of the extra_nids in the yml where the x25519 hybrids are listed.
Michael, how does the logic in oqs-provider use both the NIST and alternative curves from generate.yml?
@dstebila Sorry I see the question only now. Here is the macro activating "ECX" hybrids, i.e. X25519/X448 hybrids. generate.yml is utilized by generate.py here to populate via template the ID/code-point table here.
Thanks Michael. So we would need to extend generate.py in OQS-OpenSSL-111 in an analogous way to pull out the ECX hybrids?
Yes -- and of course to add the corresponding logic creating "X25519/X448" EVP calls. Indeed sounds rather doable.
Additional question: Shall we mix in X25519 for L1/L2 and X448 for L3/L4 algorithms as in oqsprovider or "more flexibly" as Cloudflare did it (X25519 for Kyber768, say)?
Additional question: Shall we mix in X25519 for L1/L2 and X448 for L3/L4 algorithms as in oqsprovider or "more flexibly" as Cloudflare did it (X25519 for Kyber768, say)?
I'd like to be able to do interoperability testing with the Cloudflare implementation.
I'd like to be able to do interoperability testing with the Cloudflare implementation.
You can do this now after landing open-quantum-safe/oqs-provider#78: Usage and successful test documented there.
A completely flexible choice of x-hybrids, or of several types of x-hybrids (independent of secbits/NIST strength) would require major refactoring through the complete software stack starting with updates to generate.yml. This certainly is worth while doing when specific hybrids are getting standardized. For the time being I hope open-quantum-safe/oqs-provider#78 fills the need.
Understood, thanks for the clarification.
Since we will have it available in oqs-provider, there's no urgent need to make it available here given the greater difficulty of doing so here.  If and when consensus emerges around particular hybrid combinations, we can revisit.
Related to this (I think), is there plans to spin up a test instance https://test.openquantumsafe.org/ that supports the same hybrid kem as Cloudflare is using?
@pixitha Just looked at this issue again. Can you provide a rationale for this? Who would benefit from this? Implementing this with oqs-openssl111 would require way too much work as per the above. Using oqs-provider it would be possible -- but only if disabling the more logical hybrid KEMs using the CLOUDFLARE define : This works but is undocumented as it is so far outside a "standards approach" that I don't exactly feel comfortable standing it up as a test server.
The OpenSSL project has indicated that OpenSSL 1.1.1 will reach end-of-life in September 2023.  As such, we are discontinuing development on OQS-OpenSSL 1.1.1, and recommend all users switch to OpenSSL 3 and the OQS Provider for OpenSSL 3, which provides all the same functionality that OQS-OpenSSL 1.1.1 does.  Hence we are closing open pull requests and issues in OQS-OpenSSL 1.1.1 as won't-fix.
