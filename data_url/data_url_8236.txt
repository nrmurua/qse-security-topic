I was wondering what the optimal way of including Heaviside step functions in the Hamiltonian strings is? Calling numpy's heaviside works; but presumably is slow. One can also approximate it analytically (i.e. Fermi function, etc), but that is also not optimal in some situations and leads to ugly/long strings.
Is there an easier way i missed that is already supported?
If not, it perhaps would be nice to implement. Even allowing the user to specify a direct c conditional, say something like:
(t > 4 ? sin(t) : cos(t);)
would be very useful.
thanks
Hopefully sin(t) if t > 4 else cos(t) should work for you?
Internally the relevant data structures either compile standard Python to code objects or go native via Cython, so the rule of thumb is "would eval(my_string) give me what I want?".  QuTiP provides some basic wrapping of the scoping rules so things like t are available, and the standard numpy functions sin, cos, etc., are available without needing the namespace, but it's not got a full DSL for specifying time-dependence - it just uses regular Python.
ok, this is great!.... I don't know how i missed it.
Thanks for your quick answer!
I'll close this.
