üëÄ Some source code analysis tools can help to find opportunities for improving software components.
üí≠ I propose to increase the usage of augmented assignment statements accordingly.
Would you like to integrate anything from a transformation result which can be generated by a command like the following?
(:point_right: Please check also for questionable change suggestions because of an evolving search pattern.)
I'm -0.5 on such an automated change for the following reasons:
We should probably also only consider doing this on dev.major since that is what will become QuTiP 5.
üí≠ Can you follow the rationale of the Python enhancement proposal 203 (from 2000-07-13)?
A rationale for adding the operators to the language isn't the same as a reason to use them in a particular programme.  The compound assignment operators have different semantics, which may change the behaviour of the code.  For example,
Swapping to in-place operations can also mean that certain operations that need to perform a copy no longer do.  This can mean that a function or class may start holding a reference to an object that something else holds a reference too, so it might get mutated out from underneath it.  We already do use compound assignments in many places where we absolutely want the operation to be in-place.
For immutable types on the left, such as tuple or int, the compound assignment has no difference (other than evaluating subscripts only once).
Technical reasons for not doing it aside, it's also just not a good idea to change existing code with no actual measured benefit from an engineering perspective.  It just creates churn of the code, and any change can introduce a new bug.
There seems to be some discussion out there about @elfring being a bot:  pylint-dev/pylint#5174.
@elfring The first line of the PEP There are two main reasons for adding this feature to Python: simplicity of expression, and support for in-place operations and the in-place operations mentioned are part of why a = a + 5 is not equivalent to a += 5 (as Jake took the time to demonstrate).
I'm closing the issue, but feel free to continue the discussion here & thank you for suggesting an enhancement to QuTiP and please feel free to suggest others.
The compound assignment operators have different semantics,
I suggest to reconsider such a wording a bit more.
üí≠ I imagine that the discussed assignment variants should logically be equivalent.
which may change the behaviour of the code.
Some differences are documented.
üí≠ Would you find any ‚Äúeffects‚Äù on the software run time characteristics desirable?
‚Ä¶ certain operations that need to perform a copy no longer do.
How would you like to identify (and eventually mark) the source code places where in-place data modifications should be excluded? ü§î
We already do use compound assignments in many places where we absolutely want the operation to be in-place.
Thanks for such a background information.
For immutable types on the left, ‚Ä¶, the compound assignment has no difference (other than evaluating subscripts only once).
üí≠ Can this information trigger any further development considerations?
‚Ä¶, it's also just not a good idea to change existing code with no actual measured benefit from an engineering perspective.
How do you think about to clarify evolving development views any further by corresponding test cases? ü§î
In general, if you think this is something that is worthwhile, we'd ask you to try it yourself, and then show us memory-usage and execution-time benchmark results showing that such a change is warranted.   I've given you a few reasons why this sort of "programming by script" can be difficult and introduce errors, and why there may be more concerns than you might have thought about.
If you can show that such a change has actual tangible benefits with proof, then we would be willing to consider a limited change, but you also need to have verified everything yourself. If it looks like you've done it indiscriminately by script, we would reject the PR, because it would require one of us to go through ourselves line-by-line and check everything, which is something the PR author is meant to do themselves first.  We (mostly) do this for free, and we only have a finite amount of time.
‚Ä¶ are part of why a = a + 5 is not equivalent to a += 5 ‚Ä¶
Different development views are involved here for the interpretation of ‚Äúequivalence‚Äù.
How will the design goals evolve further for selected software areas? ü§î
If you can show that such a change has actual tangible benefits with proof, ‚Ä¶
Would you find any adjustments (because of known ‚Äúside effects‚Äù) desirable? ü§î
If it looks like you've done it indiscriminately by script, ‚Ä¶
Data processing results from the shown Perl command example can point source code places out for further software development considerations, can't they? ü§î
üí≠ Can change suggestions like the following trigger more constructive software development considerations?
