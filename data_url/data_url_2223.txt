Currently ControlledOperation silently accepts this and Operation.controlled_by() returns the operation itself which is highly unintuitive IMO.
I think that the current behavior is the correct behavior.
How many controls does a NOT gate have? Zero controls. Therefore NOT.controlled_by(*zero_controls) should equal NOT.
I can see the reason for not throwing an error on zero qubits. Maybe I was a little hasty on jumping to that.
But NOT.controlled_by(*zero_qubits) being different from ControlledOperation(*zero_qubits, NOT) felt weird. controlled_by does a special thing when no control qubits are specified, even though ControlledOp without controls is well defined.
I get that this is because the original op is more convenient than the weird zero-control ControlledOp. Will fix the function documentation at the least to denote that it does not necessarily return the controlled version of the operation.
Also, I have modified Gate.controlled() without args to return a single control ControlledGate instead of returning self. https://github.com/quantumlib/Cirq/pull/2090/files#r323442946
This was to make it consistent with the default behavior of ControlledGate. Let me know if this doesn't feel right.
We're likely to specialize controlled_by more in the future, e.g. returning a CZ instance when controlling Z. I think the correct behavior is to return self when there are 0 controls. If the user literally tried to instantiate a ControlledOperation then we won't stop them (although...), and we'll just deal with the fact that they disagree slightly.
Note that we also make it so that controlled_by().controlled_by() behaves differently, in the sense that the controls get concatenated into one ControlledOperation instead of nested.
Since the relevant PRs are merged and the other changes should not be done, I'm goin gto close as completed.
