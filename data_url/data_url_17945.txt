The unroller is too conscious of how/where the gates are declared:
Example 1:
Output 1:
Example 2:
Output 2:
It shouldn't matter if the gate definition is done in the body or in the library. Or please, CMV.
Do you mean you expect the output for the first listing would be something like:
I mean, do you think it should not expand the my_swap gate?
The load_qasm_string() function that you use by default unrolls to
so it is expected that it does not keep my_swap in the output (not a bug).
The question is: can we get the unroller to unroll to a new basis? how do we specify that basis.
You are right. My submission is a bit cryptic. Let me rephrase.
Considering the following code:
This raises an exception:
The unroller only accepts basis defined in the standard extension when it should not matter. The expected output is:
I think this is more the unroller should not be called by the parser.
i am not clear if this is an unroller or a passer issue. To me the passer should not use the unroller and as such not need the transpiler and just be part of the parser or circuit object.
You might be right @jaygambetta. In the current code in master:
and
Indeed, _circuit_from_qasm calls the unroller and it seems that is not possible to define a basis there:
Maybe I should rename the issue to _circuit_from_qasm unrolls up to standard extension?
The output error now is different:
I suspect that the problem now is another one...  renaming the issue
The regular update of how to reproduce this issue:
This is the same bug as #1566
