
That suggests some processor specific code has taken care of timing attacks if the processor is known, say,  if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64")
Instead of reading all the code, I would appreciate very much if you could show me the code of how the timing attacks are avoided if the processor is x86_64.
The motivation here is to make the oqs WASM build, which currently falls under OQS_PERMIT_UNSUPPORTED_ARCHITECTURE, as secure as possible.
The known limitation of WASM is that it cannot support assembly language. But, I'd like to find out if the assembly-free version of oqs would lead to timing attacks inevitably or not.
That suggests some processor specific code has taken care of timing attacks if the processor is known
This seems like an overly broad interpretation: This warning message arguably is just a warning but not a(n implied) guarantee: With the "standard"/supported compilers and processors it is a "known art" how to generate timing-attack-resistant code. Such statement simply cannot be made for unknown compilers&platforms. @jschanck and @dstebila may want to correct my interpretation, of course.
In general, the question whether all code / each algorithm indeed is timing-attack resistant is not something liboqs guarantees let alone can be done by specific code "avoiding timing attacks" but indeed must be ensured throughout the code base and within each algorithm. The property is tested to some degree which could suggest a way forward for you: Is it possible to run test_constant_time.py under WASM? But then again, a pass only would be a positive indication, not a guarantee along the lines of
if the assembly-free version of oqs would lead to timing attacks inevitably or not.
Instead of reading all the code, I would appreciate very much if you could show me the code of how the timing attacks are avoided if the processor is x86_64.
There's no single method or place where this is done, as there are dozens of algorithms with more implementations, each of which has to handle this issue.
The known limitation of WASM is that it cannot support assembly language. But, I'd like to find out if the assembly-free version of oqs would lead to timing attacks inevitably or not.
Our existing toolchain, with test_constant_time.py which Michael refers to above, can be used to check for secret-dependent branching in compiled version of the reference implementation, which would be a good first step. But I don't know what promises the compilation process to WASM makes with respect to maintaining such properties.
