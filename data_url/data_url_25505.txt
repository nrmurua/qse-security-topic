Description
There is a need to maintain an inputs attribute in the electrons table in the new DB schema. This is a field shown on today's OS application GUI to the end user at the electron level. Ref below

Technical implementation
Given that all lattice & electron fields shown on the GUI are maintained as direct fields on the DB, it is requested to implement this for the inputs attribute also.
Ref below comments from @FyzHsn in a Slack conversation
Electron inputs are actually computed during run time - it's not something that might necessarily exist at first. If I had to query the inputs, I would use the electron dependency table to determine all the parents and check the output / value stored in them to determine the inputs field
@FyzHsn & @santoshkumarradha - Logging this here, to take to closure. Right now, there is no input shown at electron level since it is not available as a field on the DB. Pls share your thoughts on how we can take this to logical closure.
Hi @mshkanth, when  Covalent runs an electron, it computes its inputs from the transport graph  -- @FyzHsn's comment
Electron inputs are actually computed during run time - it's not something that might necessarily exist at first. If I had to query the inputs, I would use the electron dependency table to determine all the parents and check the output / value stored in them to determine the inputs field
is accurate. The main logic is in _get_task_inputs() of execution.py.
For a given electron, its incoming edges are labeled with the type of argument ("arg", "kwarg"), the parameter name, and the parameter order in the case of args.
Please also keep in mind that all electron inputs are encoded, and you should not attempt to decode them. Instead, access their string representations via TransportableObject.object_string.
Please also keep in mind that all electron inputs are encoded, and you should not attempt to decode them. Instead, access their string representations via TransportableObject.object_string.
Thank you @cjao . Apologies for dropping the ball. Given the above inputs, I see the following as an efficient way for the web app to get electron inputs -
This way, we do not need to re-write any of this core logic.
@mshkanth Yes, that should work.
Please also keep in mind that all electron inputs are encoded, and you should not attempt to decode them. Instead, access their string representations via TransportableObject.object_string.
Thank you @cjao . Apologies for dropping the ball. Given the above inputs, I see the following as an efficient way for the web app to get electron inputs -
This way, we do not need to re-write any of this core logic.
Closing this as we retreived inputs at runtime using the above and no longer need to add a column to the DB
