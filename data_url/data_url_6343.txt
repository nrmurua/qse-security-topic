Qrack as a deployed software tends to exist as the repository main head, at least in my personal understanding, but obviously we need a more useful system of tags for archival and external version control. I've tended to tag in slower periods of development, when I think the library is most stable and accurate, according to my own testing and usage. Given precedent and current state of development, I think that a January 1st tag is appropriate. As is already on main head, this notably includes our first "hybridzied" stabilizer/ket simulation, operating as QUnit shards.
Beyond serendipity, I don't have many particular development goals between now and New Year's Day. As I've confirmed we work on Android OS, I'd like to personally attempt an iOS compilation of the library as a native plugin, before then. I expect that the only changes between now and release will be any necessary for iOS deployment, with or without optional (not Mac supported) OpenCL functionality, like how I already commonly deploy pure C+11 builds to my Android projects, to expected levels of performance.
It's possible that I will add to the PInvoke API DLL. I have been using this for experimentation in Unity3D, with my fork of OpenRelativity, and I encourage Qrack users to experiment with those tools I have made available for embedding quantum computer simulation in "entity-component-system" hyper-relativistic space-times.
#566 fixes about half a dozen explicit/implicit casts, which were apparently the only errors/warnings preventing the ability to compile in (whatever version I still have of) XCode on Big Sur.
The remaining development priority (besides "serendipity") is documentation updates, and I think I have benchmarks to include.
The API reference documentation is at least fully rigged between doxygen and sphinx, but I plan to revise the introductory materials, in the next day or few.
Documentation has been updated, and tagging will likely occur slightly after Eastern time zone midnight, (because we all need little celebrations and festivities from the safety of our homes, this year, if so lucky, and this is part of mine). I expect main branch commit 688d28d to constitute the tag, unless I happen upon some particularly irksome bug in the time until then, but that won't happen.
Happy 2021, everyone, and I hope it proves to be some relief for all of us.
This is the current draft of the release notes:
vm6502q.v5.4.0
Release Title: QStabilizerHybrid
Major changes in this release include a “hybridized” Gottesman-Knill stabilizer simulation type, adapted from the basis of Aaronson’s CHP, suitable for general purpose use under QUnit. When operations outside of Clifford set gates are invoked, this QInterface type transparently converts (base simulation unit or selective QUnit sub-units) to “ket” simulation, without any required user code action, which is further “hybridized” by default between CPU and GPU QEngine types.
QUnit “Decompose()” variants have finally been adapted to separate sub-units without first maximally entangling representation within the group of qubits to “Decompose().”
“TryDecompose()” and “TrySeparate()” have been restored, (except in QUnitMulti, with "dummy" implementations there,) and “SumSqrDiff()” has been broken out as a separate public method from “ApproxCompare(),” in order to allow users to measure a quantitative difference between (happenstance numerical) raw “kets.” The point of this set of changes is to start to allow user experimentation with “approximate separability” of qubits, such as by trading off between error and efficiency by “Decompose()-ing” bits that introduce only small but non-zero overall “SumSqrDiff()” changes.
Many miscellaneous bug fixes have been made, as the library continues to be tested for stability and correctness on a rolling basis. Builds have been tested on x64 Linux, Windows, and Mac, as well as Android and iOS, and also Raspberry Pi 3 and 4. Qiskit, Q#, and ProjectQ integrations remain available and supported, with unit tests. Windows and mobile builds are now also officially supported as plugins for the Unity video game development engine, as integrated with WrathfulSpatula’s unaffiliated personal fork of the OpenRelativity physics module by the MIT Game Lab, for education, game development, and general modern physics simulation qualitative proof-of-concept.
Tagged. Happy New Year.
