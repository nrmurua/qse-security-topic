In current implementation the priority of matrix multiplication & is lower than (or perhaps equal to) + which is really confusing. For example, we often write following code to represent an interaction Hamiltonian of two subspaces, e.g. Jaynes-Cummings
where Ci and Ai are creation and annihilation operator of subspace i. However, this sometimes results in non Hermitian matrix, because it might be parsed as
So we always need to write more explicitly
but to me it seems like a bug.
It's not possible to change this with the infix operators unfortunately - their precedence is set by Python's order.  I know the opflow documention has a big call out of this on its pages.  The quantum_info module also now defines @ for dot (as opposed to & for compose) for its operators, which does have the precedence you want.
Perhaps the design philosophy is that & is intended for quantum circuit composition, so it is not intended to be used at the same time with +. It is better to write it with @ and + as Jake said.
