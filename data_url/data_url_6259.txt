Running the simulator with a noise model which consists of the following single error:
Currently the simulator succeeds. Of course no noise occurs.
I think it would be better to raise an error, accompanied by a message: attempt to attach noise to gate 'bla', but gate 'bla' does not exist.
This is intentional so you can build a single noise model and then use the same model for many different circuits, some of which may only contain a subset of gates for the noise model.  Otherwise you may need to make a new model for every circuit you execute if, for example, you define a noise model with errors on u1, u2, u3 but then your circuit contains no u2 gates which could lead to a couple of major issues:
Because of this I'm inclined to leave the responsibility of checking their noise model up to the user. To make this easier we could think about adding a helper method to the NoiseModel that is passed a qobj and checks which gates are noisey and ideal, and which noise terms are unused.
I was thinking more about gates that are not at all defined in the system. I don't expect an error if you attach noise to a Hadamard gate and the circuit does not contain a Hadamard gate. But most of your arguments seem to apply also to this more relaxed case. I find the helper function that you suggest very important and think it should be given high priority (at least my version of the function, which returns which noise terms refer to undefined gates).
Still a quick question: is it still possible to attach noise to "CX" and "X90"? Is there a list somewhere of legal gates for noise, where I can look in case of such doubt?
The reason for that is so you can name your own custom gates (using the not-yet implemented in Terra unitary extension) and attach a noise model to them. I'll be adding a couple of tutorials about doing this, and other basic and advanced noise model features soonish that should this clearer.
Basically the string for the noise will be compared to the "name" field in qobj gate instructions, or the "label" field for qobj "unitary" instructions. So, for example, if you want to assign noise to "CX" you have to compile to that basis gate (instead of "cx").
The noise model keeps track of what operations have noise assigned to them to use for basis_gates argument when compiling. Generally the best practice is to use that when compiling/executing:
You can still do the X90 noise model but you now have to specify which standard single-qubit gates you want implemented as X90 based (this can be any subset of [u1, u2, u3, id, x, y, z, h, s, t, sdg, tdg]). Eg:
In this case the X-90 based single qubit gates are also added to the noise_model basis_gates.
Until we rework the circuits in a future version of terra the "standard" library of gates you can use in a noise model (without using the unitary qobj instruction) is:
