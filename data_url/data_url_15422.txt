Note: I tried to join the Qiskit Slack to ask the question of this issue, but the invite link (https://ibm.co/joinqiskitslack) has expired.
I am trying to implement the Powering lemma (lemma 2.1) described in the paper by Montanaro ("Quantum speedup of Monte
Carlo methods"), page 7:
. Let A be a (classical or quantum) algorithm which aims to
estimate some quantity μ, and whose output μ˜ satisfies |μ − ˜μ| ≤  except with probability γ , for some
fixed γ < 1
2 . Then, for any δ > 0, it suffices to repeat A O(log 1/δ) times and take the median to obtain an
estimate which is accurate to within  with probability at least 1 − δ.
How can I implement this repetition and taking the median within a single quantum circuit? Or is the way to do this is by doing a Python for loop where I create a quantum circuit that computes μ multiple times, and then just take the np.mean of the list of μ's? If it is the latter, I don't see how this subroutine can be composed with other quantum circuits to form a larger circuit.
I'm closing this issue because it is more of a forum question, and so I should have asked in https://quantumcomputing.stackexchange.com/ with [qiskit] tag.
That said, it would be great if the Slack invite link is renewed again.
Edit: asked in https://quantumcomputing.stackexchange.com/questions/27262/implementing-the-powering-lemma-in-qiskit
