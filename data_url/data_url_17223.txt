BackendConfiguration needs to allow for gates = None and basis_gates =  None in the model validation in order to allow a pulse-based simulator
Could you instead pass an empty list?
I could remove the min length requirements instead of allowing None. But this may make the checks for gate backends less robust.
This is the approach that was taken for some of the other optional parameters cmd_def and pulse_library. I am open to either approach. A better choice might be to have an open_qasm flag.
I think this topic was raised in other contexts - allowing None tends to be problematic, as the consumers of the model no longer have assurances that the attribute will be of the same type (in this case, they cannot rely on .gates being a list, and they need to explicitly check for the type instead of just iterating over the value, etc), and in general opens the door to ambiguity in subtle ways.
Actually,  why not make the changes to PulseBackendConfiguration instead of BackendConfiguration? By using the more specialized class, there might be less constraints and we can keep the checks for Qasm backends to the same level of robustness.
Because using PulseBackendConfiguration makes things worse:
and they still require gates and basis_gates as well.  In short, the pulse simulator is closer to the qasm backend schema because it does not need most of the stuff above, and the stuff that it does require must be in the qobj itself.
It seems that an empty list of gates and basis gates may be the cleanest solution.
#2618 now allows for empty list.
