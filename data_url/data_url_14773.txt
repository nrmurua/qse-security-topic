The QuantumCircuit class wraps an underlying list of gates.
The DAGCircuit class wraps an underlying graph of gates, and is built after the QuantumCircuit.
In reality, the first datastructure (list) is never used. We should merge these two classes into a Circuit class, that has a graph underneath. As gates get appended, they should get added to the correct place in the graph.
This has some major benefits:
1- simplifies the transpiler (no more circuit2dag and dag2circuit).
2- simplifies analysis of the compiled circuit (no need to go to dag in order to get things like depth, num_qubits, etc.) (related: #1088)
3- simplifies the circuit_drawer(circuit) interface. it doesn't need to go to dag or json first (related: #1129).
I think this is a good idea. I checked and I think I only use the following features of DAGCircuit:
So I took a look at doing this a while ago by changing the underlying QuantumCircuit.data to be DAGCircuit object. You can see the branch starting this here: mtreinish@ec83da0 (never got it fully working though, but its mostly there). Doing this while maintaining backwards compatibility is quite tricky mainly because of different indexing between a circuit and dagcircuit. For example, if you had a simple bell state circuit like:
qc.data[1] will be the instruction entry for qc.cx(0, 1). But in index 1 in the dagcircuit would be an input node. So where you end up needing a lot of code around building and tracking a mapping of op indices in the circuit to node indices in the dagcircuit's graph, which is really easy to mess up. At the end of the day I stopped exploring this because the conversion back and forth between a dag and a circuit is relatively inexpensive now with retworkx and other optimizations, if you look at a normal transpile profile the conversion is a very small component of the time spent now. So I'm not sure that this buys us a ton in practice.
So I'm not sure that this buys us a ton in practice.
The remaining benefit at this point I think would be mostly one of architecture and maintenance. There's a fair amount of overlap between the functional APIs of QuantumCircuit and DAGCircuit and the differences between them are no longer necessarily large enough to need two distinct classes (each with their own code, nomenclature, documentation, bugs, ...).
For the indexing issue, did you consider adding something like an itertools.count() to the circuit to mark circuit insertion order on new instructions (and then sorting by this when accessing qc.data)?
So I'm not sure that this buys us a ton in practice.
The remaining benefit at this point I think would be mostly one of architecture and maintenance.
With some hindsight, I think this is no longer correct, at least for some cases. e.g. for randomized benchmarking, or characterization experiments where in general circuits are large, there are many of them, and they require translation but little to no optimization, circuit <-> dag conversion can become a bottleneck and substantially slow down the transpilation process. (For example, the simple circuits in Qiskit/qiskit-ibmq-provider#976 took over 10m initially to transpile, before reducing their number, with circuit to dag taking ~40-50% of the overall runtime.)
Since this appeared again, some things have changed a little.  With the advent of control-flow and scheduling, a fixed-order list/tree representation is definitely used and wanted by consumers (e.g. the qiskit-ibm-provider scheduler), certainly late on in the compilation pipelines.  In a similar vein, the path we've discussed around taking hardware-aware OQ3 near directly into Qiskit Runtime paths also wants that same ordering, which is another argument in favour of having the construction representation be linearly structured (the QuantumCircuit form).
The converters are still more expensive than ideal, but they're more efficient than they used to be.
