EARLIEST_AFTER would mean that operations are placed as early as possible but no earlier than the insertion point. This would give a bit more control over the structure of the circuit, without sacrificing packing efficiency within each call to insert or append.
Equivalently, EARLIEST_AFTER means "in a new empty circuit pack these operations tightly together, then take the moments of that circuit and insert them into the target circuit".
Basically, it would be a better version of NEW_THEN_INLINE.
@tanujkhattar Is looking into this.
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
AFAIK, The common use case for this insertion strategy would be the case where one wishes to replace an existing operation with a list of operations (eg: by decomposing into a target gateset), while preserving the moment structure. Using the EARLIEST insertion strategy in this case destroys the moment structure (eg: by not preserving the structure of one / two qubit gates in the same moment). Similarly, no other existing insertion strategy does what one would intuitively want in this case.
However, the solution to the above problem is to now use the new moment preserving circuit transformer primitives - Eg: map_operations_and_unroll  (see https://github.com/quantumlib/Cirq/blob/d419ef5a09d99562db7914db1364b6b27fd4adc5/cirq-core/cirq/optimizers/transformer_primitives.py).
If there are other use cases which are not captured well by the new primitives, I'd be curious to hear. I do agree that this can potentially be a useful addition to the existing set of insertion strategies but I'd prefer to wait and see if there are additional use cases which are not captured by the new primitives.
@Strilanc Please let me know if you have more examples in mind or else we can close this issue and reopen again if there's a request in the future.
@Strilanc Please let us know if any use case is not captured by the new primitives. We'll prefer to close this otherwise.
This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 30 days
Issue closed due to inactivity.
