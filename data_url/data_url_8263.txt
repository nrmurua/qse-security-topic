I am distributing some qutip code to several cores. I want to enforce that qutip only uses one core per job with qutip.settings.num_cpus=1, but it is not working, the processes still take all the processors of my machine, so that if I have N cores, the multiprocessing ends up using N*N threads, slowing things down a lot! How can I force qutip to use only 1 core? Currently loading like this:
I’ve never enforced this, so I am no expert. Though, would enforcing the options in a dynamical solver work? Maybe you do not need the dynamical solver, but checking if that works could help understanding this issue too. I would test it by creating an Options object and passing it to a dynamical solver.  http://qutip.org/docs/latest/guide/dynamics/dynamics-options.html
I remember that @fminga had a similar necessity while exploiting qutip.parallel on a cluster (the RAM or SWAP were clogging the cluster) and I think he solved it by enforcing the num_cpus in the parfor. I don’t know if this would work for your case.
@VolodyaCO
Could you tell me which solver you are using and if qutip is compiled with openmp. It would be nice to find where the options is ignored and correct it.
@Ericgig at the moment, the issue can be reproduced by
The creation of the coherent state alone consumes all the cpus in my computer. I do not know how to check if openmp is involved. I made a standard install via pip install qutip
I remember that @fminga had a similar necessity while exploiting qutip.parallel on a cluster (the RAM or SWAP were clogging the cluster) and I think he solved it by enforcing the num_cpus in the parfor. I don’t know if this would work for your case.
That is exactly what I am doing, I'm sending jobs to a cluster
Print qutip.about() to get info on open mp. In general if you did not enforce it in installation it should be False.
Copyright (c) QuTiP team 2011 and later.
Original developers: R. J. Johansson & P. D. Nation.
Previous lead developers: Chris Granade & A. Grimsmo.
Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.
Project Manager: Franco Nori.
Currently developed through wide collaboration. See https://github.com/qutip for details.
QuTiP Version:      4.5.0
Numpy Version:      1.18.1
Scipy Version:      1.4.1
Cython Version:     0.29.14
Matplotlib Version: 3.1.2
Python Version:     3.7.3
Number of CPUs:     32
BLAS Info:          OPENBLAS
OPENMP Installed:   False
INTEL MKL Ext:      False
Platform Info:      Linux (x86_64)
This parallelism does not come from qutip but scipy: coherent use scipy.sparse.linalg.expm which run in parallel for big matrix.
This can be fixed with enviroment variable like$ export OPENBLAS_NUM_THREADS=1 in bash or os.environ["OPENBLAS_NUM_THREADS"] = "1" in python, but there are a few possibilities:
See https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy
