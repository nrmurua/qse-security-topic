Greetings!
I'm trying to implement the set cover problem using Andrew Lucas's ising formulation using the inequality segment :

This is the Hamiltonian representing the constraints, and the image below is the Hamiltonian defining the objective which is to minimize number of subsets.

I'm trying a different approach to implement this in CQM which is to break the final qubo into two parts :
below is my current code:
https://github.com/ACE07-Sev/CQM/blob/7b4c17ae325ba4a2326a76a7350c1bcec84535c5/CQM.py
However, I get the following sampleset which apparently doesn't take the constraints into consideration :
The universe is [0, 2, 5, 6, 7, 8, 9]
Number of elements in the universe: 7
There are 5 collections: [{2, 5, 6, 7, 8}, {0, 9, 5, 7}, {0, 5, 6, 7}, {0, 5, 7}, {2, 5, 6, 8, 9}]
Number of sets: N=5
x_1 x_2 x_3 x_4 x_5 y_(1, 1) y_(1, 2) ... y_(7, 5) energy num_oc. ...
18 0.0 0.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    0.0       1 ...
27 0.0 0.0 0.0 0.0 0.0      0.0      0.0 ...      0.0    0.0       1 ...
32 0.0 0.0 0.0 0.0 0.0      0.0      0.0 ...      0.0    0.0       1 ...
33 0.0 0.0 0.0 0.0 0.0      0.0      0.0 ...      0.0    0.0       1 ...
34 0.0 0.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    0.0       1 ...
36 0.0 0.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    0.0       1 ...
37 0.0 0.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    0.0       1 ...
50 0.0 0.0 0.0 0.0 0.0      0.0      0.0 ...      0.0    0.0       1 ...
51 0.0 0.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    0.0       1 ...
2  0.0 0.0 1.0 0.0 0.0      1.0      0.0 ...      0.0    1.0       1 ...
16 0.0 0.0 1.0 0.0 0.0      1.0      1.0 ...      0.0    1.0       1 ...
17 0.0 0.0 0.0 0.0 1.0      0.0      0.0 ...      0.0    1.0       1 ...
19 0.0 0.0 0.0 0.0 1.0      1.0      0.0 ...      0.0    1.0       1 ...
20 1.0 0.0 0.0 0.0 0.0      0.0      0.0 ...      0.0    1.0       1 ...
21 0.0 1.0 0.0 0.0 0.0      1.0      1.0 ...      0.0    1.0       1 ...
22 0.0 0.0 1.0 0.0 0.0      0.0      0.0 ...      0.0    1.0       1 ...
23 1.0 0.0 0.0 0.0 0.0      1.0      1.0 ...      0.0    1.0       1 ...
24 0.0 0.0 0.0 0.0 1.0      0.0      0.0 ...      0.0    1.0       1 ...
25 0.0 0.0 0.0 0.0 1.0      1.0      0.0 ...      0.0    1.0       1 ...
26 0.0 1.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    1.0       1 ...
28 0.0 0.0 0.0 1.0 0.0      0.0      0.0 ...      0.0    1.0       1 ...
29 1.0 0.0 0.0 0.0 0.0      0.0      1.0 ...      0.0    1.0       1 ...
30 0.0 0.0 0.0 0.0 1.0      0.0      0.0 ...      0.0    1.0       1 ...
31 0.0 0.0 1.0 0.0 0.0      1.0      0.0 ...      0.0    1.0       1 ...
35 0.0 0.0 1.0 0.0 0.0      1.0      0.0 ...      0.0    1.0       1 ...
38 0.0 0.0 1.0 0.0 0.0      0.0      1.0 ...      0.0    1.0       1 ...
39 0.0 0.0 1.0 0.0 0.0      1.0      0.0 ...      0.0    1.0       1 ...
40 0.0 0.0 0.0 0.0 1.0      0.0      0.0 ...      0.0    1.0       1 ...
41 0.0 0.0 0.0 0.0 1.0      1.0      0.0 ...      0.0    1.0       1 ...
43 0.0 0.0 0.0 0.0 1.0      0.0      0.0 ...      0.0    1.0       1 ...
46 0.0 0.0 1.0 0.0 0.0      0.0      0.0 ...      0.0    1.0       1 ...
47 0.0 1.0 0.0 0.0 0.0      1.0      0.0 ...      0.0    1.0       1 ...
49 0.0 0.0 1.0 0.0 0.0      0.0      0.0 ...      0.0    1.0       1 ...
3  0.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    2.0       1 ...
6  1.0 0.0 0.0 0.0 1.0      1.0      0.0 ...      0.0    2.0       1 ...
7  0.0 0.0 1.0 0.0 1.0      0.0      1.0 ...      0.0    2.0       1 ...
44 1.0 0.0 0.0 0.0 1.0      1.0      0.0 ...      0.0    2.0       1 ...
45 0.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    2.0       1 ...
48 0.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    2.0       1 ...
52 0.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    2.0       1 ...
0  1.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    3.0       1 ...
1  1.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    3.0       1 ...
9  0.0 1.0 1.0 1.0 0.0      0.0      0.0 ...      0.0    3.0       1 ...
11 1.0 0.0 1.0 0.0 1.0      1.0      1.0 ...      0.0    3.0       1 ...
14 1.0 1.0 0.0 0.0 1.0      1.0      0.0 ...      0.0    3.0       1 ...
15 1.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    3.0       1 ...
42 1.0 0.0 1.0 0.0 1.0      1.0      0.0 ...      0.0    3.0       1 ...
4  1.0 1.0 1.0 0.0 1.0      0.0      1.0 ...      0.0    4.0       1 ...
5  1.0 1.0 1.0 0.0 1.0      0.0      0.0 ...      0.0    4.0       1 ...
8  1.0 1.0 0.0 1.0 1.0      0.0      0.0 ...      1.0    4.0       1 ...
10 1.0 1.0 1.0 0.0 1.0      0.0      0.0 ...      0.0    4.0       1 ...
12 1.0 1.0 1.0 0.0 1.0      0.0      0.0 ...      0.0    4.0       1 ...
13 1.0 1.0 1.0 0.0 1.0      0.0      0.0 ...      0.0    4.0       1 ...
['INTEGER', 53 rows, 53 samples, 40 variables]
Process finished with exit code 0
Could you kindly assist me in resolving this issue? I understand that it would be better to define this as one Hamiltonian but this is my current task to implement it segmented using add_constraints approach.
How can I fix this? Am I doing something wrong?
the image below is my mathematical approach of turning the constraints from objective into something the model can interpret as a constraint :

so sorry for the bad code markdown, it keeps rendering this way.
I believe this is an algorithm/debugging question. For github we want to adhere to stack overflow's guidelines on what types of questions should be asked.
I recommend posting this question in our Leap community.
